/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing CustomersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CustomersApiTests : IDisposable
    {
        private CustomersApi instance;

        public CustomersApiTests()
        {
            instance = new CustomersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CustomersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CustomersApi
            //Assert.IsType<CustomersApi>(instance);
        }

        /// <summary>
        /// Test AddAddressToCustomerRequestScopeIdCustomerIdaddressesPost
        /// </summary>
        [Fact]
        public void AddAddressToCustomerRequestScopeIdCustomerIdaddressesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //AddAddressToCustomerRequest body = null;
            //var response = instance.AddAddressToCustomerRequestScopeIdCustomerIdaddressesPost(accept, scopeId, customerId, body);
            //Assert.IsType<Address>(response);
        }

        /// <summary>
        /// Test AddCustomerNoteRequestScopeIdCustomerIdnotesPost
        /// </summary>
        [Fact]
        public void AddCustomerNoteRequestScopeIdCustomerIdnotesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //AddCustomerNoteRequest body = null;
            //instance.AddCustomerNoteRequestScopeIdCustomerIdnotesPost(accept, scopeId, customerId, body);
        }

        /// <summary>
        /// Test AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost
        /// </summary>
        [Fact]
        public void AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string paymentProviderName = null;
            //AddCustomerPaymentProfileRequest body = null;
            //var response = instance.AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost(accept, scopeId, customerId, paymentProviderName, body);
            //Assert.IsType<PaymentProfile>(response);
        }

        /// <summary>
        /// Test AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreate
        /// </summary>
        [Fact]
        public void AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string customerId = null;
            //string addressId = null;
            //AddOrUpdateCustomerAddressRequest body = null;
            //var response = instance.AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreate(accept, customerId, addressId, body);
            //Assert.IsType<Address>(response);
        }

        /// <summary>
        /// Test AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPost
        /// </summary>
        [Fact]
        public void AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //AddOrganizationsToCustomerRequest body = null;
            //instance.AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPost(accept, scopeId, customerId, body);
        }

        /// <summary>
        /// Test AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost
        /// </summary>
        [Fact]
        public void AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string customerId = null;
            //string scopeId = null;
            //string attributeName = null;
            //string entityId = null;
            //Object body = null;
            //instance.AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost(accept, customerId, scopeId, attributeName, entityId, body);
        }

        /// <summary>
        /// Test CreateCustomerRequestScopeIdPost
        /// </summary>
        [Fact]
        public void CreateCustomerRequestScopeIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //CreateCustomerRequest body = null;
            //var response = instance.CreateCustomerRequestScopeIdPost(accept, scopeId, body);
            //Assert.IsType<Customer>(response);
        }

        /// <summary>
        /// Test DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete
        /// </summary>
        [Fact]
        public void DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string paymentProviderName = null;
            //string paymentMethodId = null;
            //instance.DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete(accept, scopeId, customerId, paymentProviderName, paymentMethodId);
        }

        /// <summary>
        /// Test DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete
        /// </summary>
        [Fact]
        public void DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string customerId = null;
            //string scopeId = null;
            //string attributeName = null;
            //string entityId = null;
            //instance.DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete(accept, customerId, scopeId, attributeName, entityId);
        }

        /// <summary>
        /// Test FindCustomersRequestScopeIdfindPost
        /// </summary>
        [Fact]
        public void FindCustomersRequestScopeIdfindPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //FindCustomersRequest body = null;
            //var response = instance.FindCustomersRequestScopeIdfindPost(accept, scopeId, body);
            //Assert.IsType<CustomerQueryResult>(response);
        }

        /// <summary>
        /// Test GetCustomerAddressesRequestScopeIdCustomerIdaddressesGet
        /// </summary>
        [Fact]
        public void GetCustomerAddressesRequestScopeIdCustomerIdaddressesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //var response = instance.GetCustomerAddressesRequestScopeIdCustomerIdaddressesGet(accept, scopeId, customerId);
            //Assert.IsType<List<Address>>(response);
        }

        /// <summary>
        /// Test GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGet
        /// </summary>
        [Fact]
        public void GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string username = null;
            //bool? includeAddresses = null;
            //var response = instance.GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGet(accept, scopeId, username, includeAddresses);
            //Assert.IsType<Customer>(response);
        }

        /// <summary>
        /// Test GetCustomerFromPasswordTicketRequestbyTicketGet
        /// </summary>
        [Fact]
        public void GetCustomerFromPasswordTicketRequestbyTicketGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string ticket = null;
            //var response = instance.GetCustomerFromPasswordTicketRequestbyTicketGet(accept, ticket);
            //Assert.IsType<Customer>(response);
        }

        /// <summary>
        /// Test GetCustomerNotesRequestScopeIdCustomerIdnotesGet
        /// </summary>
        [Fact]
        public void GetCustomerNotesRequestScopeIdCustomerIdnotesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //var response = instance.GetCustomerNotesRequestScopeIdCustomerIdnotesGet(accept, scopeId, customerId);
            //Assert.IsType<List<Note>>(response);
        }

        /// <summary>
        /// Test GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGet
        /// </summary>
        [Fact]
        public void GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //DateTime? ordersCreatedAfter = null;
            //var response = instance.GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGet(accept, scopeId, customerId, ordersCreatedAfter);
            //Assert.IsType<OrderQueryResult>(response);
        }

        /// <summary>
        /// Test GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGet
        /// </summary>
        [Fact]
        public void GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //bool? includeAllAddresses = null;
            //var response = instance.GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGet(accept, scopeId, customerId, includeAllAddresses);
            //Assert.IsType<List<Organization>>(response);
        }

        /// <summary>
        /// Test GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet
        /// </summary>
        [Fact]
        public void GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string paymentProviderName = null;
            //var response = instance.GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet(accept, scopeId, customerId, paymentProviderName);
            //Assert.IsType<List<PaymentMethod>>(response);
        }

        /// <summary>
        /// Test GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet
        /// </summary>
        [Fact]
        public void GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string paymentProviderName = null;
            //var response = instance.GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet(accept, scopeId, customerId, paymentProviderName);
            //Assert.IsType<PaymentProfile>(response);
        }

        /// <summary>
        /// Test GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGet
        /// </summary>
        [Fact]
        public void GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //var response = instance.GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGet(accept, scopeId, customerId);
            //Assert.IsType<List<PaymentProfile>>(response);
        }

        /// <summary>
        /// Test GetCustomerRequestScopeIdCustomerIdGet
        /// </summary>
        [Fact]
        public void GetCustomerRequestScopeIdCustomerIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //bool? includeAddresses = null;
            //var response = instance.GetCustomerRequestScopeIdCustomerIdGet(accept, scopeId, customerId, includeAddresses);
            //Assert.IsType<Customer>(response);
        }

        /// <summary>
        /// Test GetCustomerStoresRequestScopeIdCustomerIdstoresGet
        /// </summary>
        [Fact]
        public void GetCustomerStoresRequestScopeIdCustomerIdstoresGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //bool? includeAddresses = null;
            //var response = instance.GetCustomerStoresRequestScopeIdCustomerIdstoresGet(accept, scopeId, customerId, includeAddresses);
            //Assert.IsType<CustomerStoresAssociations>(response);
        }

        /// <summary>
        /// Test RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDelete
        /// </summary>
        [Fact]
        public void RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //List<string> associatedIds = null;
            //instance.RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDelete(accept, scopeId, customerId, associatedIds);
        }

        /// <summary>
        /// Test SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate
        /// </summary>
        [Fact]
        public void SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string paymentProviderName = null;
            //string paymentMethodId = null;
            //SetDefaultCustomerPaymentMethodRequest body = null;
            //var response = instance.SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate(accept, scopeId, customerId, paymentProviderName, paymentMethodId, body);
            //Assert.IsType<PaymentMethod>(response);
        }

        /// <summary>
        /// Test UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate
        /// </summary>
        [Fact]
        public void UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string paymentProviderName = null;
            //UpdateCustomerPaymentProfileRequest body = null;
            //var response = instance.UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate(accept, scopeId, customerId, paymentProviderName, body);
            //Assert.IsType<PaymentProfile>(response);
        }

        /// <summary>
        /// Test UpdateCustomerRequestScopeIdCustomerIdCreate
        /// </summary>
        [Fact]
        public void UpdateCustomerRequestScopeIdCustomerIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //UpdateCustomerRequest body = null;
            //var response = instance.UpdateCustomerRequestScopeIdCustomerIdCreate(accept, scopeId, customerId, body);
            //Assert.IsType<Customer>(response);
        }

        /// <summary>
        /// Test UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreate
        /// </summary>
        [Fact]
        public void UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //UpdatePreferredStoreRequest body = null;
            //var response = instance.UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreate(accept, scopeId, customerId, body);
            //Assert.IsType<Customer>(response);
        }
    }
}
