/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing MetadataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MetadataApiTests : IDisposable
    {
        private MetadataApi instance;

        public MetadataApiTests()
        {
            instance = new MetadataApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MetadataApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MetadataApi
            //Assert.IsType<MetadataApi>(instance);
        }

        /// <summary>
        /// Test CreateCategoryDefinitionRequestdefinitionscategoryNamePost
        /// </summary>
        [Fact]
        public void CreateCategoryDefinitionRequestdefinitionscategoryNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string name = null;
            //CreateCategoryDefinitionRequest body = null;
            //var response = instance.CreateCategoryDefinitionRequestdefinitionscategoryNamePost(accept, name, body);
            //Assert.IsType<ProductDefinition>(response);
        }

        /// <summary>
        /// Test CreateEntityTypeRequestEntityTypeEntityTypeNamePost
        /// </summary>
        [Fact]
        public void CreateEntityTypeRequestEntityTypeEntityTypeNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string entityTypeName = null;
            //CreateEntityTypeRequest body = null;
            //instance.CreateEntityTypeRequestEntityTypeEntityTypeNamePost(accept, entityTypeName, body);
        }

        /// <summary>
        /// Test CreateProductAttributeGroupRequestattributegroupsproductNamePost
        /// </summary>
        [Fact]
        public void CreateProductAttributeGroupRequestattributegroupsproductNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string name = null;
            //CreateProductAttributeGroupRequest body = null;
            //var response = instance.CreateProductAttributeGroupRequestattributegroupsproductNamePost(accept, name, body);
            //Assert.IsType<ProductPropertyDefinitionGroup>(response);
        }

        /// <summary>
        /// Test CreateProductAttributeRequestattributesproductAttributeNamePost
        /// </summary>
        [Fact]
        public void CreateProductAttributeRequestattributesproductAttributeNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string attributeName = null;
            //CreateProductAttributeRequest body = null;
            //var response = instance.CreateProductAttributeRequestattributesproductAttributeNamePost(accept, attributeName, body);
            //Assert.IsType<ProductPropertyDefinition>(response);
        }

        /// <summary>
        /// Test CreateProductDefinitionRequestdefinitionsproductNamePost
        /// </summary>
        [Fact]
        public void CreateProductDefinitionRequestdefinitionsproductNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string name = null;
            //CreateProductDefinitionRequest body = null;
            //var response = instance.CreateProductDefinitionRequestdefinitionsproductNamePost(accept, name, body);
            //Assert.IsType<ProductDefinition>(response);
        }

        /// <summary>
        /// Test CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePost
        /// </summary>
        [Fact]
        public void CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string lookupName = null;
            //CreateProductLookupTypeDefinitionRequest body = null;
            //var response = instance.CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePost(accept, lookupName, body);
            //Assert.IsType<Lookup>(response);
        }

        /// <summary>
        /// Test DeleteProductAttributeGroupRequestattributegroupsproductNameDelete
        /// </summary>
        [Fact]
        public void DeleteProductAttributeGroupRequestattributegroupsproductNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string name = null;
            //instance.DeleteProductAttributeGroupRequestattributegroupsproductNameDelete(accept, name);
        }

        /// <summary>
        /// Test DeleteProductAttributeRequestattributesproductAttributeNameDelete
        /// </summary>
        [Fact]
        public void DeleteProductAttributeRequestattributesproductAttributeNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string attributeName = null;
            //instance.DeleteProductAttributeRequestattributesproductAttributeNameDelete(accept, attributeName);
        }

        /// <summary>
        /// Test DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDelete
        /// </summary>
        [Fact]
        public void DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string lookupName = null;
            //List<string> values = null;
            //instance.DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDelete(accept, lookupName, values);
        }

        /// <summary>
        /// Test FindProductAttributeGroupsRequestattributegroupsproductfindPost
        /// </summary>
        [Fact]
        public void FindProductAttributeGroupsRequestattributegroupsproductfindPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //FindProductAttributeGroupsRequest body = null;
            //var response = instance.FindProductAttributeGroupsRequestattributegroupsproductfindPost(accept, body);
            //Assert.IsType<ProductPropertyDefinitionGroupQueryResult>(response);
        }

        /// <summary>
        /// Test GetCurrenciesRequestcurrenciesGet
        /// </summary>
        [Fact]
        public void GetCurrenciesRequestcurrenciesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string cultureName = null;
            //bool? includeUnsupported = null;
            //var response = instance.GetCurrenciesRequestcurrenciesGet(accept, cultureName, includeUnsupported);
            //Assert.IsType<GetCurrenciesResponse>(response);
        }

        /// <summary>
        /// Test GetCustomerDefinitionRequestdefinitionscustomerNameGet
        /// </summary>
        [Fact]
        public void GetCustomerDefinitionRequestdefinitionscustomerNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string name = null;
            //string cultureName = null;
            //var response = instance.GetCustomerDefinitionRequestdefinitionscustomerNameGet(accept, name, cultureName);
            //Assert.IsType<EntityDefinition>(response);
        }

        /// <summary>
        /// Test GetCustomerDefinitionsRequestdefinitionscustomerGet
        /// </summary>
        [Fact]
        public void GetCustomerDefinitionsRequestdefinitionscustomerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string cultureName = null;
            //var response = instance.GetCustomerDefinitionsRequestdefinitionscustomerGet(accept, cultureName);
            //Assert.IsType<List<EntityDefinition>>(response);
        }

        /// <summary>
        /// Test GetCustomerLookupRequestlookupscustomerLookupNameGet
        /// </summary>
        [Fact]
        public void GetCustomerLookupRequestlookupscustomerLookupNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string lookupName = null;
            //var response = instance.GetCustomerLookupRequestlookupscustomerLookupNameGet(accept, lookupName);
            //Assert.IsType<Lookup>(response);
        }

        /// <summary>
        /// Test GetCustomerLookupsRequestlookupscustomerGet
        /// </summary>
        [Fact]
        public void GetCustomerLookupsRequestlookupscustomerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //var response = instance.GetCustomerLookupsRequestlookupscustomerGet(accept);
            //Assert.IsType<List<Lookup>>(response);
        }

        /// <summary>
        /// Test GetMarketingLookupRequestlookupsmarketingLookupNameGet
        /// </summary>
        [Fact]
        public void GetMarketingLookupRequestlookupsmarketingLookupNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string lookupName = null;
            //var response = instance.GetMarketingLookupRequestlookupsmarketingLookupNameGet(accept, lookupName);
            //Assert.IsType<Lookup>(response);
        }

        /// <summary>
        /// Test GetMarketingLookupsRequestlookupsmarketingGet
        /// </summary>
        [Fact]
        public void GetMarketingLookupsRequestlookupsmarketingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //var response = instance.GetMarketingLookupsRequestlookupsmarketingGet(accept);
            //Assert.IsType<List<Lookup>>(response);
        }

        /// <summary>
        /// Test GetOrderDefinitionRequestdefinitionsorderNameGet
        /// </summary>
        [Fact]
        public void GetOrderDefinitionRequestdefinitionsorderNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string name = null;
            //string cultureName = null;
            //var response = instance.GetOrderDefinitionRequestdefinitionsorderNameGet(accept, name, cultureName);
            //Assert.IsType<EntityDefinition>(response);
        }

        /// <summary>
        /// Test GetOrderDefinitionsRequestdefinitionsorderGet
        /// </summary>
        [Fact]
        public void GetOrderDefinitionsRequestdefinitionsorderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string cultureName = null;
            //var response = instance.GetOrderDefinitionsRequestdefinitionsorderGet(accept, cultureName);
            //Assert.IsType<List<EntityDefinition>>(response);
        }

        /// <summary>
        /// Test GetOrderLookupRequestlookupsorderLookupNameGet
        /// </summary>
        [Fact]
        public void GetOrderLookupRequestlookupsorderLookupNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string lookupName = null;
            //var response = instance.GetOrderLookupRequestlookupsorderLookupNameGet(accept, lookupName);
            //Assert.IsType<Lookup>(response);
        }

        /// <summary>
        /// Test GetOrderLookupsRequestlookupsorderGet
        /// </summary>
        [Fact]
        public void GetOrderLookupsRequestlookupsorderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //var response = instance.GetOrderLookupsRequestlookupsorderGet(accept);
            //Assert.IsType<List<Lookup>>(response);
        }

        /// <summary>
        /// Test GetProductLookupRequestlookupsproductLookupNameGet
        /// </summary>
        [Fact]
        public void GetProductLookupRequestlookupsproductLookupNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string lookupName = null;
            //var response = instance.GetProductLookupRequestlookupsproductLookupNameGet(accept, lookupName);
            //Assert.IsType<Lookup>(response);
        }

        /// <summary>
        /// Test GetProductLookupsRequestlookupsproductGet
        /// </summary>
        [Fact]
        public void GetProductLookupsRequestlookupsproductGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //var response = instance.GetProductLookupsRequestlookupsproductGet(accept);
            //Assert.IsType<List<Lookup>>(response);
        }

        /// <summary>
        /// Test GetTargetingMetadataRequesttargetingGet
        /// </summary>
        [Fact]
        public void GetTargetingMetadataRequesttargetingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string cultureName = null;
            //var response = instance.GetTargetingMetadataRequesttargetingGet(accept, cultureName);
            //Assert.IsType<GetTargetingMetadataResponse>(response);
        }

        /// <summary>
        /// Test UpdateCategoryDefinitionRequestdefinitionscategoryNameCreate
        /// </summary>
        [Fact]
        public void UpdateCategoryDefinitionRequestdefinitionscategoryNameCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string name = null;
            //UpdateCategoryDefinitionRequest body = null;
            //var response = instance.UpdateCategoryDefinitionRequestdefinitionscategoryNameCreate(accept, name, body);
            //Assert.IsType<ProductDefinition>(response);
        }

        /// <summary>
        /// Test UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePost
        /// </summary>
        [Fact]
        public void UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string lookupName = null;
            //UpdateMarketingLookupTypeDefinitionRequest body = null;
            //var response = instance.UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePost(accept, lookupName, body);
            //Assert.IsType<Lookup>(response);
        }

        /// <summary>
        /// Test UpdateProductAttributeGroupRequestattributegroupsproductNameCreate
        /// </summary>
        [Fact]
        public void UpdateProductAttributeGroupRequestattributegroupsproductNameCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string name = null;
            //UpdateProductAttributeGroupRequest body = null;
            //var response = instance.UpdateProductAttributeGroupRequestattributegroupsproductNameCreate(accept, name, body);
            //Assert.IsType<ProductPropertyDefinitionGroup>(response);
        }

        /// <summary>
        /// Test UpdateProductAttributeRequestattributesproductAttributeNameCreate
        /// </summary>
        [Fact]
        public void UpdateProductAttributeRequestattributesproductAttributeNameCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string attributeName = null;
            //UpdateProductAttributeRequest body = null;
            //var response = instance.UpdateProductAttributeRequestattributesproductAttributeNameCreate(accept, attributeName, body);
            //Assert.IsType<ProductPropertyDefinition>(response);
        }

        /// <summary>
        /// Test UpdateProductDefinitionRequestdefinitionsproductNameCreate
        /// </summary>
        [Fact]
        public void UpdateProductDefinitionRequestdefinitionsproductNameCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string name = null;
            //UpdateProductDefinitionRequest body = null;
            //var response = instance.UpdateProductDefinitionRequestdefinitionsproductNameCreate(accept, name, body);
            //Assert.IsType<ProductDefinition>(response);
        }

        /// <summary>
        /// Test UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreate
        /// </summary>
        [Fact]
        public void UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string lookupName = null;
            //UpdateProductLookupTypeDefinitionRequest body = null;
            //var response = instance.UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreate(accept, lookupName, body);
            //Assert.IsType<Lookup>(response);
        }
    }
}
