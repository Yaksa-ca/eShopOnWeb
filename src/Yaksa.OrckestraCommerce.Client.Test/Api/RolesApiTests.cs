/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing RolesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RolesApiTests : IDisposable
    {
        private RolesApi instance;

        public RolesApiTests()
        {
            instance = new RolesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RolesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RolesApi
            //Assert.IsType<RolesApi>(instance);
        }

        /// <summary>
        /// Test AddRoleChildRequestParentRoleIdChildRoleIdPost
        /// </summary>
        [Fact]
        public void AddRoleChildRequestParentRoleIdChildRoleIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int parentRoleId = null;
            //int childRoleId = null;
            //AddRoleChildRequest body = null;
            //instance.AddRoleChildRequestParentRoleIdChildRoleIdPost(accept, parentRoleId, childRoleId, body);
        }

        /// <summary>
        /// Test AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPost
        /// </summary>
        [Fact]
        public void AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int childRoleId = null;
            //AddRoleChildToGlobalAdministratorRoleRequest body = null;
            //instance.AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPost(accept, childRoleId, body);
        }

        /// <summary>
        /// Test AddRoleChildrenRequestParentRoleIdchildPost
        /// </summary>
        [Fact]
        public void AddRoleChildrenRequestParentRoleIdchildPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int parentRoleId = null;
            //AddRoleChildrenRequest body = null;
            //instance.AddRoleChildrenRequestParentRoleIdchildPost(accept, parentRoleId, body);
        }

        /// <summary>
        /// Test CreateCustomRoleRequestcustomNamePost
        /// </summary>
        [Fact]
        public void CreateCustomRoleRequestcustomNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string name = null;
            //Object body = null;
            //var response = instance.CreateCustomRoleRequestcustomNamePost(accept, name, body);
            //Assert.IsType<Role>(response);
        }

        /// <summary>
        /// Test CreateRoleRequestNamePost
        /// </summary>
        [Fact]
        public void CreateRoleRequestNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string name = null;
            //CreateRoleRequest body = null;
            //var response = instance.CreateRoleRequestNamePost(accept, name, body);
            //Assert.IsType<Role>(response);
        }

        /// <summary>
        /// Test DeleteRoleRequestIdDelete
        /// </summary>
        [Fact]
        public void DeleteRoleRequestIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int id = null;
            //int? moduleId = null;
            //string name = null;
            //instance.DeleteRoleRequestIdDelete(accept, id, moduleId, name);
        }

        /// <summary>
        /// Test GetCustomRolesRequestcustomGet
        /// </summary>
        [Fact]
        public void GetCustomRolesRequestcustomGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string orderBy = null;
            //string cultureCode = null;
            //var response = instance.GetCustomRolesRequestcustomGet(accept, orderBy, cultureCode);
            //Assert.IsType<List<Role>>(response);
        }

        /// <summary>
        /// Test GetRoleByIdRequestIdGet
        /// </summary>
        [Fact]
        public void GetRoleByIdRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int id = null;
            //var response = instance.GetRoleByIdRequestIdGet(accept, id);
            //Assert.IsType<Role>(response);
        }

        /// <summary>
        /// Test GetRoleRequestModuleIdRoleNameGet
        /// </summary>
        [Fact]
        public void GetRoleRequestModuleIdRoleNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int moduleId = null;
            //string roleName = null;
            //var response = instance.GetRoleRequestModuleIdRoleNameGet(accept, moduleId, roleName);
            //Assert.IsType<Role>(response);
        }

        /// <summary>
        /// Test GetRolesRequestGet
        /// </summary>
        [Fact]
        public void GetRolesRequestGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //var response = instance.GetRolesRequestGet(accept);
            //Assert.IsType<List<Role>>(response);
        }

        /// <summary>
        /// Test RemoveRoleChildRequestParentRoleIdChildRoleIdDelete
        /// </summary>
        [Fact]
        public void RemoveRoleChildRequestParentRoleIdChildRoleIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int parentRoleId = null;
            //int childRoleId = null;
            //string applicationName = null;
            //instance.RemoveRoleChildRequestParentRoleIdChildRoleIdDelete(accept, parentRoleId, childRoleId, applicationName);
        }

        /// <summary>
        /// Test RemoveRoleChildrenRequestParentRoleIdchildDelete
        /// </summary>
        [Fact]
        public void RemoveRoleChildrenRequestParentRoleIdchildDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int parentRoleId = null;
            //List<string> childRoleIds = null;
            //string applicationName = null;
            //instance.RemoveRoleChildrenRequestParentRoleIdchildDelete(accept, parentRoleId, childRoleIds, applicationName);
        }

        /// <summary>
        /// Test RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPost
        /// </summary>
        [Fact]
        public void RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int childRoleId = null;
            //RoleIsHierarchicalChildOfParentRolesRequest body = null;
            //var response = instance.RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPost(accept, childRoleId, body);
            //Assert.IsType<List<RoleChildAssociation>>(response);
        }

        /// <summary>
        /// Test SaveCustomRoleRequestcustomRoleIdCreate
        /// </summary>
        [Fact]
        public void SaveCustomRoleRequestcustomRoleIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int roleId = null;
            //SaveCustomRoleRequest body = null;
            //var response = instance.SaveCustomRoleRequestcustomRoleIdCreate(accept, roleId, body);
            //Assert.IsType<Role>(response);
        }

        /// <summary>
        /// Test UpdateRoleRequestIdCreate
        /// </summary>
        [Fact]
        public void UpdateRoleRequestIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int id = null;
            //UpdateRoleRequest body = null;
            //instance.UpdateRoleRequestIdCreate(accept, id, body);
        }
    }
}
