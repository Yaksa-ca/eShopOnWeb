/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing ProvidersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProvidersApiTests : IDisposable
    {
        private ProvidersApi instance;

        public ProvidersApiTests()
        {
            instance = new ProvidersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ProvidersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ProvidersApi
            //Assert.IsType<ProvidersApi>(instance);
        }

        /// <summary>
        /// Test CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreate
        /// </summary>
        [Fact]
        public void CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //CreateOrUpdateFulfillmentProviderRequest body = null;
            //var response = instance.CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreate(accept, scopeId, body);
            //Assert.IsType<FulfillmentProviderInfo>(response);
        }

        /// <summary>
        /// Test DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDelete
        /// </summary>
        [Fact]
        public void DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //instance.DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDelete(accept, scopeId, id);
        }

        /// <summary>
        /// Test GetCarrierProvidersRequestScopeIdcarrierGet
        /// </summary>
        [Fact]
        public void GetCarrierProvidersRequestScopeIdcarrierGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //bool? includeParentScopes = null;
            //var response = instance.GetCarrierProvidersRequestScopeIdcarrierGet(accept, scopeId, includeParentScopes);
            //Assert.IsType<FulfillmentCarrierProviderInfos>(response);
        }

        /// <summary>
        /// Test GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGet
        /// </summary>
        [Fact]
        public void GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //var response = instance.GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGet(accept);
            //Assert.IsType<FulfillmentProvidersMetadata>(response);
        }

        /// <summary>
        /// Test GetFulfillmentProvidersRequestScopeIdfulfillmentGet
        /// </summary>
        [Fact]
        public void GetFulfillmentProvidersRequestScopeIdfulfillmentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //bool? includeParentScopes = null;
            //var response = instance.GetFulfillmentProvidersRequestScopeIdfulfillmentGet(accept, scopeId, includeParentScopes);
            //Assert.IsType<FulfillmentProviderInfos>(response);
        }

        /// <summary>
        /// Test GetPaymentProvidersRequestScopeIdpaymentGet
        /// </summary>
        [Fact]
        public void GetPaymentProvidersRequestScopeIdpaymentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //var response = instance.GetPaymentProvidersRequestScopeIdpaymentGet(accept, scopeId);
            //Assert.IsType<PaymentProviderInfos>(response);
        }

        /// <summary>
        /// Test GetProvidersRequestScopeIdtypesGet
        /// </summary>
        [Fact]
        public void GetProvidersRequestScopeIdtypesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string providerType = null;
            //bool? includeParentScopes = null;
            //var response = instance.GetProvidersRequestScopeIdtypesGet(accept, scopeId, providerType, includeParentScopes);
            //Assert.IsType<GetProvidersResponse>(response);
        }

        /// <summary>
        /// Test ValidateProviderSettingsRequestvalidateProviderSettingsGet
        /// </summary>
        [Fact]
        public void ValidateProviderSettingsRequestvalidateProviderSettingsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string providerId = null;
            //string providerType = null;
            //var response = instance.ValidateProviderSettingsRequestvalidateProviderSettingsGet(accept, providerId, providerType);
            //Assert.IsType<List<ValidationResult>>(response);
        }
    }
}
