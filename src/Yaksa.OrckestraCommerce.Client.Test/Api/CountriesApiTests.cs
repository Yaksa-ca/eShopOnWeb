/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing CountriesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CountriesApiTests : IDisposable
    {
        private CountriesApi instance;

        public CountriesApiTests()
        {
            instance = new CountriesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CountriesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CountriesApi
            //Assert.IsType<CountriesApi>(instance);
        }

        /// <summary>
        /// Test AddCountryRequestPost
        /// </summary>
        [Fact]
        public void AddCountryRequestPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //AddCountryRequest body = null;
            //var response = instance.AddCountryRequestPost(accept, body);
            //Assert.IsType<Country>(response);
        }

        /// <summary>
        /// Test GetCountriesRequestGet
        /// </summary>
        [Fact]
        public void GetCountriesRequestGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string cultureName = null;
            //bool? includeUnsupported = null;
            //bool? includeRegions = null;
            //var response = instance.GetCountriesRequestGet(accept, cultureName, includeUnsupported, includeRegions);
            //Assert.IsType<List<Country>>(response);
        }

        /// <summary>
        /// Test GetCountryRequestCountryIsoCodeGet
        /// </summary>
        [Fact]
        public void GetCountryRequestCountryIsoCodeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string countryIsoCode = null;
            //string cultureName = null;
            //bool? includeRegions = null;
            //var response = instance.GetCountryRequestCountryIsoCodeGet(accept, countryIsoCode, cultureName, includeRegions);
            //Assert.IsType<Country>(response);
        }

        /// <summary>
        /// Test GetRegionsRequestCountryIsoCoderegionsGet
        /// </summary>
        [Fact]
        public void GetRegionsRequestCountryIsoCoderegionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string countryIsoCode = null;
            //string cultureName = null;
            //bool? includeUnsupported = null;
            //var response = instance.GetRegionsRequestCountryIsoCoderegionsGet(accept, countryIsoCode, cultureName, includeUnsupported);
            //Assert.IsType<List<Region>>(response);
        }

        /// <summary>
        /// Test UpdateCountryAndRegionsRequestIsoCodeCreate
        /// </summary>
        [Fact]
        public void UpdateCountryAndRegionsRequestIsoCodeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string isoCode = null;
            //UpdateCountryAndRegionsRequest body = null;
            //var response = instance.UpdateCountryAndRegionsRequestIsoCodeCreate(accept, isoCode, body);
            //Assert.IsType<Country>(response);
        }
    }
}
