/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing SegmentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SegmentsApiTests : IDisposable
    {
        private SegmentsApi instance;

        public SegmentsApiTests()
        {
            instance = new SegmentsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SegmentsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SegmentsApi
            //Assert.IsType<SegmentsApi>(instance);
        }

        /// <summary>
        /// Test CreateOrUpdateSegmentRequestPost
        /// </summary>
        [Fact]
        public void CreateOrUpdateSegmentRequestPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //CreateOrUpdateSegmentRequest body = null;
            //var response = instance.CreateOrUpdateSegmentRequestPost(accept, body);
            //Assert.IsType<Segment>(response);
        }

        /// <summary>
        /// Test DeleteSegmentRequestSegmentIdDelete
        /// </summary>
        [Fact]
        public void DeleteSegmentRequestSegmentIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string segmentId = null;
            //var response = instance.DeleteSegmentRequestSegmentIdDelete(accept, segmentId);
            //Assert.IsType<DeleteSegmentResult>(response);
        }

        /// <summary>
        /// Test FindSegmentsRequestfindPost
        /// </summary>
        [Fact]
        public void FindSegmentsRequestfindPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //FindSegmentsRequest body = null;
            //var response = instance.FindSegmentsRequestfindPost(accept, body);
            //Assert.IsType<SegmentQueryResult>(response);
        }

        /// <summary>
        /// Test GetSegmentRequestSegmentIdGet
        /// </summary>
        [Fact]
        public void GetSegmentRequestSegmentIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string segmentId = null;
            //bool? validateTargeting = null;
            //var response = instance.GetSegmentRequestSegmentIdGet(accept, segmentId, validateTargeting);
            //Assert.IsType<Segment>(response);
        }

        /// <summary>
        /// Test GetSegmentsRequestGet
        /// </summary>
        [Fact]
        public void GetSegmentsRequestGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //bool? validateTargeting = null;
            //int? startingIndex = null;
            //int? maximumItems = null;
            //var response = instance.GetSegmentsRequestGet(accept, validateTargeting, startingIndex, maximumItems);
            //Assert.IsType<List<Segment>>(response);
        }
    }
}
