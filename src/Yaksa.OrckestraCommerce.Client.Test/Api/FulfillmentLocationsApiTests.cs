/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing FulfillmentLocationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FulfillmentLocationsApiTests : IDisposable
    {
        private FulfillmentLocationsApi instance;

        public FulfillmentLocationsApiTests()
        {
            instance = new FulfillmentLocationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FulfillmentLocationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' FulfillmentLocationsApi
            //Assert.IsType<FulfillmentLocationsApi>(instance);
        }

        /// <summary>
        /// Test AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost
        /// </summary>
        [Fact]
        public void AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string fulfillmentMethodType = null;
            //AddFulfillmentLocationTimeSlotRequest body = null;
            //var response = instance.AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, body);
            //Assert.IsType<TimeSlot>(response);
        }

        /// <summary>
        /// Test AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost
        /// </summary>
        [Fact]
        public void AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string slotId = null;
            //AddFulfillmentLocationTimeSlotReservationRequest body = null;
            //var response = instance.AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost(accept, scopeId, fulfillmentLocationId, slotId, body);
            //Assert.IsType<TimeSlotReservation>(response);
        }

        /// <summary>
        /// Test AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost
        /// </summary>
        [Fact]
        public void AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string fulfillmentMethodType = null;
            //AddFulfillmentLocationTimeSlotsRequest body = null;
            //var response = instance.AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, body);
            //Assert.IsType<List<TimeSlot>>(response);
        }

        /// <summary>
        /// Test CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPost
        /// </summary>
        [Fact]
        public void CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //CalculateFulfillmentLocationsDelayRequest body = null;
            //var response = instance.CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPost(accept, scopeId, body);
            //Assert.IsType<FulfillmentLocationsDelayCalculationResult>(response);
        }

        /// <summary>
        /// Test CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePost
        /// </summary>
        [Fact]
        public void CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string fulfillmentLocationId = null;
            //string fulfillmentType = null;
            //CalculateScheduleAvailabilitySlotsRequest body = null;
            //var response = instance.CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePost(accept, fulfillmentLocationId, fulfillmentType, body);
            //Assert.IsType<DayAvailabilityResult>(response);
        }

        /// <summary>
        /// Test CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePost
        /// </summary>
        [Fact]
        public void CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string fulfillmentLocationId = null;
            //string fulfillmentType = null;
            //CheckAvailabilitySlotRequest body = null;
            //var response = instance.CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePost(accept, fulfillmentLocationId, fulfillmentType, body);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete
        /// </summary>
        [Fact]
        public void DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string fulfillmentMethodType = null;
            //string slotId = null;
            //instance.DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, slotId);
        }

        /// <summary>
        /// Test DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete
        /// </summary>
        [Fact]
        public void DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string slotReservationId = null;
            //string slotId = null;
            //instance.DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete(accept, scopeId, fulfillmentLocationId, slotReservationId, slotId);
        }

        /// <summary>
        /// Test DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete
        /// </summary>
        [Fact]
        public void DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string fulfillmentMethodType = null;
            //instance.DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType);
        }

        /// <summary>
        /// Test FindFulfillmentLocationsRequestScopeIdfindPost
        /// </summary>
        [Fact]
        public void FindFulfillmentLocationsRequestScopeIdfindPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //FindFulfillmentLocationsRequest body = null;
            //var response = instance.FindFulfillmentLocationsRequestScopeIdfindPost(accept, scopeId, body);
            //Assert.IsType<FindFulfillmentLocationsQueryResult>(response);
        }

        /// <summary>
        /// Test GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGet
        /// </summary>
        [Fact]
        public void GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //bool? includeSchedules = null;
            //bool? includeChildScopes = null;
            //bool? onlyActive = null;
            //bool? onlyInventoryEnabled = null;
            //bool? includeAddresses = null;
            //var response = instance.GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGet(accept, scopeId, includeSchedules, includeChildScopes, onlyActive, onlyInventoryEnabled, includeAddresses);
            //Assert.IsType<List<FulfillmentLocation>>(response);
        }

        /// <summary>
        /// Test GetFulfillmentAvailabilityRequestScopeIdavailabiltyPost
        /// </summary>
        [Fact]
        public void GetFulfillmentAvailabilityRequestScopeIdavailabiltyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //GetFulfillmentAvailabilityRequest body = null;
            //var response = instance.GetFulfillmentAvailabilityRequestScopeIdavailabiltyPost(accept, scopeId, body);
            //Assert.IsType<FulfillmentAvailability>(response);
        }

        /// <summary>
        /// Test GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGet
        /// </summary>
        [Fact]
        public void GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string scheduleType = null;
            //var response = instance.GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGet(accept, scopeId, fulfillmentLocationId, startDate, endDate, scheduleType);
            //Assert.IsType<GetFulfillmentLocationByIdElapsedTimeResult>(response);
        }

        /// <summary>
        /// Test GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGet
        /// </summary>
        [Fact]
        public void GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //var response = instance.GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGet(accept, scopeId, fulfillmentLocationId);
            //Assert.IsType<FulfillmentLocation>(response);
        }

        /// <summary>
        /// Test GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet
        /// </summary>
        [Fact]
        public void GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string fulfillmentMethodType = null;
            //string slotId = null;
            //var response = instance.GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, slotId);
            //Assert.IsType<TimeSlot>(response);
        }

        /// <summary>
        /// Test GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet
        /// </summary>
        [Fact]
        public void GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string slotReservationId = null;
            //string slotId = null;
            //var response = instance.GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet(accept, scopeId, fulfillmentLocationId, slotReservationId, slotId);
            //Assert.IsType<TimeSlotReservation>(response);
        }

        /// <summary>
        /// Test GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet
        /// </summary>
        [Fact]
        public void GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string slotId = null;
            //DateTime reservationDate = null;
            //var response = instance.GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet(accept, scopeId, fulfillmentLocationId, slotId, reservationDate);
            //Assert.IsType<TimeSlotReservationResult>(response);
        }

        /// <summary>
        /// Test GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet
        /// </summary>
        [Fact]
        public void GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string fulfillmentMethodType = null;
            //var response = instance.GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType);
            //Assert.IsType<List<TimeSlot>>(response);
        }

        /// <summary>
        /// Test GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGet
        /// </summary>
        [Fact]
        public void GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //List<string> inventoryLocationIds = null;
            //var response = instance.GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGet(accept, scopeId, inventoryLocationIds);
            //Assert.IsType<List<FulfillmentLocation>>(response);
        }

        /// <summary>
        /// Test GetFulfillmentLocationsByScopeRequestScopeIdGet
        /// </summary>
        [Fact]
        public void GetFulfillmentLocationsByScopeRequestScopeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //bool? includeSchedules = null;
            //bool? includeChildScopes = null;
            //bool? onlyActive = null;
            //bool? onlyInventoryEnabled = null;
            //bool? includeAddresses = null;
            //var response = instance.GetFulfillmentLocationsByScopeRequestScopeIdGet(accept, scopeId, includeSchedules, includeChildScopes, onlyActive, onlyInventoryEnabled, includeAddresses);
            //Assert.IsType<List<FulfillmentLocation>>(response);
        }

        /// <summary>
        /// Test GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGet
        /// </summary>
        [Fact]
        public void GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //var response = instance.GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGet(accept, scopeId, fulfillmentLocationId);
            //Assert.IsType<OperatingStatus>(response);
        }

        /// <summary>
        /// Test GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGet
        /// </summary>
        [Fact]
        public void GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //bool? includeSchedules = null;
            //bool? includeChildScopes = null;
            //bool? onlyActive = null;
            //bool? onlyInventoryEnabled = null;
            //bool? includeAddresses = null;
            //var response = instance.GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGet(accept, scopeId, includeSchedules, includeChildScopes, onlyActive, onlyInventoryEnabled, includeAddresses);
            //Assert.IsType<List<FulfillmentLocation>>(response);
        }

        /// <summary>
        /// Test GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGet
        /// </summary>
        [Fact]
        public void GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string scheduleType = null;
            //var response = instance.GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGet(accept, scopeId, fulfillmentLocationId, scheduleType);
            //Assert.IsType<FulfillmentSchedule>(response);
        }

        /// <summary>
        /// Test GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGet
        /// </summary>
        [Fact]
        public void GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //bool? includeSchedules = null;
            //bool? includeChildScopes = null;
            //bool? onlyActive = null;
            //bool? onlyInventoryEnabled = null;
            //bool? includeAddresses = null;
            //var response = instance.GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGet(accept, scopeId, includeSchedules, includeChildScopes, onlyActive, onlyInventoryEnabled, includeAddresses);
            //Assert.IsType<List<FulfillmentLocation>>(response);
        }

        /// <summary>
        /// Test ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPost
        /// </summary>
        [Fact]
        public void ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string fulfillmentLocationId = null;
            //ReserveAvailabilitySlotRequest body = null;
            //var response = instance.ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPost(accept, fulfillmentLocationId, body);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate
        /// </summary>
        [Fact]
        public void ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string fulfillmentMethodType = null;
            //ResetFulfillmentLocationTimeSlotsRequest body = null;
            //var response = instance.ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, body);
            //Assert.IsType<List<TimeSlot>>(response);
        }

        /// <summary>
        /// Test SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreate
        /// </summary>
        [Fact]
        public void SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //SetFulfillmentLocationInventoryManagementRequest body = null;
            //var response = instance.SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreate(accept, scopeId, fulfillmentLocationId, body);
            //Assert.IsType<SetFulfillmentLocationInventoryManagementResult>(response);
        }

        /// <summary>
        /// Test UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate
        /// </summary>
        [Fact]
        public void UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string fulfillmentMethodType = null;
            //string slotId = null;
            //UpdateFulfillmentLocationTimeSlotRequest body = null;
            //var response = instance.UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, slotId, body);
            //Assert.IsType<TimeSlot>(response);
        }

        /// <summary>
        /// Test UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate
        /// </summary>
        [Fact]
        public void UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string slotReservationId = null;
            //UpdateFulfillmentLocationTimeSlotReservationRequest body = null;
            //var response = instance.UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate(accept, scopeId, fulfillmentLocationId, slotReservationId, body);
            //Assert.IsType<TimeSlotReservation>(response);
        }
    }
}
