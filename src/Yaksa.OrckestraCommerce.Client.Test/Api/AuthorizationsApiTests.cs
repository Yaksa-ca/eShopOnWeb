/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing AuthorizationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AuthorizationsApiTests : IDisposable
    {
        private AuthorizationsApi instance;

        public AuthorizationsApiTests()
        {
            instance = new AuthorizationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AuthorizationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AuthorizationsApi
            //Assert.IsType<AuthorizationsApi>(instance);
        }

        /// <summary>
        /// Test GetDirectAuthorizationsRequestdirectObjectsIdsPost
        /// </summary>
        [Fact]
        public void GetDirectAuthorizationsRequestdirectObjectsIdsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //List<string> objectsIds = null;
            //Object body = null;
            //var response = instance.GetDirectAuthorizationsRequestdirectObjectsIdsPost(accept, objectsIds, body);
            //Assert.IsType<List<MembershipAuthorization>>(response);
        }

        /// <summary>
        /// Test GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPost
        /// </summary>
        [Fact]
        public void GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //GetEffectiveAuthorizationsRequest body = null;
            //var response = instance.GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPost(accept, body);
            //Assert.IsType<List<MembershipAuthorization>>(response);
        }

        /// <summary>
        /// Test GetMembershipSettingsRequestsettingsGet
        /// </summary>
        [Fact]
        public void GetMembershipSettingsRequestsettingsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //var response = instance.GetMembershipSettingsRequestsettingsGet(accept);
            //Assert.IsType<MembershipSettings>(response);
        }

        /// <summary>
        /// Test GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGet
        /// </summary>
        [Fact]
        public void GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string userName = null;
            //var response = instance.GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGet(accept, userName);
            //Assert.IsType<List<MembershipAuthorization>>(response);
        }

        /// <summary>
        /// Test GrantAuthorizationRequestRoleIdObjectIdPost
        /// </summary>
        [Fact]
        public void GrantAuthorizationRequestRoleIdObjectIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int roleId = null;
            //string objectId = null;
            //GrantAuthorizationRequest body = null;
            //instance.GrantAuthorizationRequestRoleIdObjectIdPost(accept, roleId, objectId, body);
        }

        /// <summary>
        /// Test GrantAuthorizationsRequestObjectIdPost
        /// </summary>
        [Fact]
        public void GrantAuthorizationsRequestObjectIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string objectId = null;
            //GrantAuthorizationsRequest body = null;
            //instance.GrantAuthorizationsRequestObjectIdPost(accept, objectId, body);
        }

        /// <summary>
        /// Test RevokeAuthorizationRequestRoleIdObjectIdDelete
        /// </summary>
        [Fact]
        public void RevokeAuthorizationRequestRoleIdObjectIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //int roleId = null;
            //string objectId = null;
            //string requestedScopeId = null;
            //string objectType = null;
            //instance.RevokeAuthorizationRequestRoleIdObjectIdDelete(accept, roleId, objectId, requestedScopeId, objectType);
        }

        /// <summary>
        /// Test RevokeAuthorizationsRequestObjectIdDelete
        /// </summary>
        [Fact]
        public void RevokeAuthorizationsRequestObjectIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string objectId = null;
            //List<string> authorizationsToRevoke = null;
            //instance.RevokeAuthorizationsRequestObjectIdDelete(accept, objectId, authorizationsToRevoke);
        }
    }
}
