/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing OrganizationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OrganizationsApiTests : IDisposable
    {
        private OrganizationsApi instance;

        public OrganizationsApiTests()
        {
            instance = new OrganizationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OrganizationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' OrganizationsApi
            //Assert.IsType<OrganizationsApi>(instance);
        }

        /// <summary>
        /// Test CreateOrganizationRequestScopeIdPost
        /// </summary>
        [Fact]
        public void CreateOrganizationRequestScopeIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //CreateOrganizationRequest body = null;
            //var response = instance.CreateOrganizationRequestScopeIdPost(accept, scopeId, body);
            //Assert.IsType<Organization>(response);
        }

        /// <summary>
        /// Test FindOrganizationsRequestScopeIdfindPost
        /// </summary>
        [Fact]
        public void FindOrganizationsRequestScopeIdfindPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //FindOrganizationsRequest body = null;
            //var response = instance.FindOrganizationsRequestScopeIdfindPost(accept, scopeId, body);
            //Assert.IsType<FindOrganizationsQueryResult>(response);
        }

        /// <summary>
        /// Test GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGet
        /// </summary>
        [Fact]
        public void GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string name = null;
            //int? startingIndex = null;
            //int? maximumItems = null;
            //bool? includeAddresses = null;
            //var response = instance.GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGet(accept, scopeId, name, startingIndex, maximumItems, includeAddresses);
            //Assert.IsType<GetCustomersByOrganizationQueryResult>(response);
        }

        /// <summary>
        /// Test GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGet
        /// </summary>
        [Fact]
        public void GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string organizationId = null;
            //int? startingIndex = null;
            //int? maximumItems = null;
            //bool? includeAddresses = null;
            //var response = instance.GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGet(accept, scopeId, organizationId, startingIndex, maximumItems, includeAddresses);
            //Assert.IsType<GetCustomersByOrganizationQueryResult>(response);
        }

        /// <summary>
        /// Test GetOrganizationByNameRequestScopeIdbyNameNameGet
        /// </summary>
        [Fact]
        public void GetOrganizationByNameRequestScopeIdbyNameNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string name = null;
            //bool? includeAddresses = null;
            //var response = instance.GetOrganizationByNameRequestScopeIdbyNameNameGet(accept, scopeId, name, includeAddresses);
            //Assert.IsType<Organization>(response);
        }

        /// <summary>
        /// Test GetOrganizationRequestScopeIdOrganizationIdGet
        /// </summary>
        [Fact]
        public void GetOrganizationRequestScopeIdOrganizationIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string organizationId = null;
            //bool? includeAddresses = null;
            //var response = instance.GetOrganizationRequestScopeIdOrganizationIdGet(accept, scopeId, organizationId, includeAddresses);
            //Assert.IsType<Organization>(response);
        }

        /// <summary>
        /// Test UpdateOrganizationRequestScopeIdOrganizationIdCreate
        /// </summary>
        [Fact]
        public void UpdateOrganizationRequestScopeIdOrganizationIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string organizationId = null;
            //UpdateOrganizationRequest body = null;
            //var response = instance.UpdateOrganizationRequestScopeIdOrganizationIdCreate(accept, scopeId, organizationId, body);
            //Assert.IsType<Organization>(response);
        }
    }
}
