/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing ShipmentFulfillmentInfosApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ShipmentFulfillmentInfosApiTests : IDisposable
    {
        private ShipmentFulfillmentInfosApi instance;

        public ShipmentFulfillmentInfosApiTests()
        {
            instance = new ShipmentFulfillmentInfosApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ShipmentFulfillmentInfosApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ShipmentFulfillmentInfosApi
            //Assert.IsType<ShipmentFulfillmentInfosApi>(instance);
        }

        /// <summary>
        /// Test GetCountShipmentFulfillmentInfosRequestScopeIdcountGet
        /// </summary>
        [Fact]
        public void GetCountShipmentFulfillmentInfosRequestScopeIdcountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string pickUpLocationId = null;
            //string fulfillmentLocationId = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //List<string> statuses = null;
            //string type = null;
            //string searchText = null;
            //bool? flaggedOnly = null;
            //bool? excludeShipmentInFinalState = null;
            //string dateRangeFilter = null;
            //string orderId = null;
            //var response = instance.GetCountShipmentFulfillmentInfosRequestScopeIdcountGet(accept, scopeId, pickUpLocationId, fulfillmentLocationId, startDate, endDate, statuses, type, searchText, flaggedOnly, excludeShipmentInFinalState, dateRangeFilter, orderId);
            //Assert.IsType<CountShipmentFulfillmentInfos>(response);
        }

        /// <summary>
        /// Test GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGet
        /// </summary>
        [Fact]
        public void GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //var response = instance.GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGet(accept, scopeId, fulfillmentLocationId);
            //Assert.IsType<GetNumberOfShipmentsForFulfillmentLocationResponse>(response);
        }

        /// <summary>
        /// Test GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGet
        /// </summary>
        [Fact]
        public void GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string shipmentId = null;
            //var response = instance.GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGet(accept, scopeId, shipmentId);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test GetPrintableShipmentsUriRequestScopeIdprintShipmentsPost
        /// </summary>
        [Fact]
        public void GetPrintableShipmentsUriRequestScopeIdprintShipmentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //GetPrintableShipmentsUriRequest body = null;
            //var response = instance.GetPrintableShipmentsUriRequestScopeIdprintShipmentsPost(accept, scopeId, body);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test GetShipmentFulfillmentInfosRequestScopeIdGet
        /// </summary>
        [Fact]
        public void GetShipmentFulfillmentInfosRequestScopeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string pickUpLocationId = null;
            //string fulfillmentLocationId = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //List<string> statuses = null;
            //string type = null;
            //int? pageSize = null;
            //int? pageNumber = null;
            //string sort = null;
            //string searchText = null;
            //bool? flaggedOnly = null;
            //bool? excludeShipmentInFinalState = null;
            //string dateRangeFilter = null;
            //string orderId = null;
            //List<string> requiredFields = null;
            //var response = instance.GetShipmentFulfillmentInfosRequestScopeIdGet(accept, scopeId, pickUpLocationId, fulfillmentLocationId, startDate, endDate, statuses, type, pageSize, pageNumber, sort, searchText, flaggedOnly, excludeShipmentInFinalState, dateRangeFilter, orderId, requiredFields);
            //Assert.IsType<ShipmentFulfillmentInfoQueryResult>(response);
        }
    }
}
