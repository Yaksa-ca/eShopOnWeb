/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing CategoriesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CategoriesApiTests : IDisposable
    {
        private CategoriesApi instance;

        public CategoriesApiTests()
        {
            instance = new CategoriesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CategoriesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CategoriesApi
            //Assert.IsType<CategoriesApi>(instance);
        }

        /// <summary>
        /// Test CreateCategoryRequestScopeIdPost
        /// </summary>
        [Fact]
        public void CreateCategoryRequestScopeIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //CreateCategoryRequest body = null;
            //var response = instance.CreateCategoryRequestScopeIdPost(accept, scopeId, body);
            //Assert.IsType<Category>(response);
        }

        /// <summary>
        /// Test DeleteCategoryRequestScopeIdCategoryIdDelete
        /// </summary>
        [Fact]
        public void DeleteCategoryRequestScopeIdCategoryIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //bool? deleteProducts = null;
            //instance.DeleteCategoryRequestScopeIdCategoryIdDelete(accept, scopeId, categoryId, deleteProducts);
        }

        /// <summary>
        /// Test DeleteCategoryV2Requestv2ScopeIdCategoryIdDelete
        /// </summary>
        [Fact]
        public void DeleteCategoryV2Requestv2ScopeIdCategoryIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //bool? deleteProducts = null;
            //instance.DeleteCategoryV2Requestv2ScopeIdCategoryIdDelete(accept, scopeId, categoryId, deleteProducts);
        }

        /// <summary>
        /// Test FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet
        /// </summary>
        [Fact]
        public void FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string searchTerms = null;
            //string cultureName = null;
            //int? maximumResultSize = null;
            //var response = instance.FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet(accept, scopeId, searchTerms, cultureName, maximumResultSize);
            //Assert.IsType<List<CategoryTreeNode>>(response);
        }

        /// <summary>
        /// Test GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGet
        /// </summary>
        [Fact]
        public void GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string publicationStatus = null;
            //var response = instance.GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGet(accept, scopeId, publicationStatus);
            //Assert.IsType<GetCategoriesContainingProductsByStatusResult>(response);
        }

        /// <summary>
        /// Test GetCategoriesRequestScopeIdGet
        /// </summary>
        [Fact]
        public void GetCategoriesRequestScopeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string cultureName = null;
            //var response = instance.GetCategoriesRequestScopeIdGet(accept, scopeId, cultureName);
            //Assert.IsType<List<Category>>(response);
        }

        /// <summary>
        /// Test GetCategoriesV2Requestv2ScopeIdGet
        /// </summary>
        [Fact]
        public void GetCategoriesV2Requestv2ScopeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string cultureName = null;
            //var response = instance.GetCategoriesV2Requestv2ScopeIdGet(accept, scopeId, cultureName);
            //Assert.IsType<CategoryList>(response);
        }

        /// <summary>
        /// Test GetCategoryChildrenRequestScopeIdCategoryIdchildrenGet
        /// </summary>
        [Fact]
        public void GetCategoryChildrenRequestScopeIdCategoryIdchildrenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //string cultureName = null;
            //var response = instance.GetCategoryChildrenRequestScopeIdCategoryIdchildrenGet(accept, scopeId, categoryId, cultureName);
            //Assert.IsType<List<Category>>(response);
        }

        /// <summary>
        /// Test GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGet
        /// </summary>
        [Fact]
        public void GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //string cultureName = null;
            //var response = instance.GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGet(accept, scopeId, categoryId, cultureName);
            //Assert.IsType<CategoryList>(response);
        }

        /// <summary>
        /// Test GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGet
        /// </summary>
        [Fact]
        public void GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //string cultureName = null;
            //var response = instance.GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGet(accept, scopeId, categoryId, cultureName);
            //Assert.IsType<List<Relationship>>(response);
        }

        /// <summary>
        /// Test GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGet
        /// </summary>
        [Fact]
        public void GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //string cultureName = null;
            //var response = instance.GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGet(accept, scopeId, categoryId, cultureName);
            //Assert.IsType<List<Relationship>>(response);
        }

        /// <summary>
        /// Test GetCategoryRequestScopeIdCategoryIdGet
        /// </summary>
        [Fact]
        public void GetCategoryRequestScopeIdCategoryIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //bool? includeRelationships = null;
            //string cultureName = null;
            //var response = instance.GetCategoryRequestScopeIdCategoryIdGet(accept, scopeId, categoryId, includeRelationships, cultureName);
            //Assert.IsType<Category>(response);
        }

        /// <summary>
        /// Test GetCategoryTreeExistingItemByStateRequestScopeIdexistingGet
        /// </summary>
        [Fact]
        public void GetCategoryTreeExistingItemByStateRequestScopeIdexistingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string cultureName = null;
            //string draftState = null;
            //bool? isNew = null;
            //bool? hasNotification = null;
            //var response = instance.GetCategoryTreeExistingItemByStateRequestScopeIdexistingGet(accept, scopeId, cultureName, draftState, isNew, hasNotification);
            //Assert.IsType<GetCategoryTreeExistingItemByStateResult>(response);
        }

        /// <summary>
        /// Test GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet
        /// </summary>
        [Fact]
        public void GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string startId = null;
            //string endId = null;
            //string cultureName = null;
            //var response = instance.GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet(accept, scopeId, startId, endId, cultureName);
            //Assert.IsType<CategoryTreeNode>(response);
        }

        /// <summary>
        /// Test GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet
        /// </summary>
        [Fact]
        public void GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //string cultureName = null;
            //int? maximumItems = null;
            //var response = instance.GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet(accept, scopeId, categoryId, cultureName, maximumItems);
            //Assert.IsType<CategoryTreeNode>(response);
        }

        /// <summary>
        /// Test GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet
        /// </summary>
        [Fact]
        public void GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //string cultureName = null;
            //int? maximumItems = null;
            //var response = instance.GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet(accept, scopeId, categoryId, cultureName, maximumItems);
            //Assert.IsType<CategoryTreeNode>(response);
        }

        /// <summary>
        /// Test GetCategoryV2Requestv2ScopeIdCategoryIdGet
        /// </summary>
        [Fact]
        public void GetCategoryV2Requestv2ScopeIdCategoryIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //bool? includeChildren = null;
            //bool? includeRelationships = null;
            //string cultureName = null;
            //var response = instance.GetCategoryV2Requestv2ScopeIdCategoryIdGet(accept, scopeId, categoryId, includeChildren, includeRelationships, cultureName);
            //Assert.IsType<Category>(response);
        }

        /// <summary>
        /// Test GetProductsByCategoryRequestScopeIdCategoryIdproductsGet
        /// </summary>
        [Fact]
        public void GetProductsByCategoryRequestScopeIdCategoryIdproductsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //string cultureName = null;
            //int? startingIndex = null;
            //int? maximumItems = null;
            //bool? includeVariants = null;
            //bool? includePriceLists = null;
            //var response = instance.GetProductsByCategoryRequestScopeIdCategoryIdproductsGet(accept, scopeId, categoryId, cultureName, startingIndex, maximumItems, includeVariants, includePriceLists);
            //Assert.IsType<List<Product>>(response);
        }

        /// <summary>
        /// Test GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGet
        /// </summary>
        [Fact]
        public void GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //string continuationToken = null;
            //int? pageSize = null;
            //bool? includeVariants = null;
            //bool? includePriceLists = null;
            //bool? includeRelationships = null;
            //bool? includeMedia = null;
            //string cultureName = null;
            //var response = instance.GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGet(accept, scopeId, categoryId, continuationToken, pageSize, includeVariants, includePriceLists, includeRelationships, includeMedia, cultureName);
            //Assert.IsType<ProductListPage>(response);
        }

        /// <summary>
        /// Test UpdateCategoryRequestScopeIdCategoryIdPost
        /// </summary>
        [Fact]
        public void UpdateCategoryRequestScopeIdCategoryIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //UpdateCategoryRequest body = null;
            //var response = instance.UpdateCategoryRequestScopeIdCategoryIdPost(accept, scopeId, categoryId, body);
            //Assert.IsType<Category>(response);
        }

        /// <summary>
        /// Test UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePost
        /// </summary>
        [Fact]
        public void UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //UpdateCategorySequenceRequest body = null;
            //var response = instance.UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePost(accept, scopeId, categoryId, body);
            //Assert.IsType<UpdateCategorySequenceResponse>(response);
        }

        /// <summary>
        /// Test UpdateCategoryV2Requestv2ScopeIdCategoryIdCreate
        /// </summary>
        [Fact]
        public void UpdateCategoryV2Requestv2ScopeIdCategoryIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //UpdateCategoryV2Request body = null;
            //var response = instance.UpdateCategoryV2Requestv2ScopeIdCategoryIdCreate(accept, scopeId, categoryId, body);
            //Assert.IsType<Category>(response);
        }
    }
}
