/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing StoresApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class StoresApiTests : IDisposable
    {
        private StoresApi instance;

        public StoresApiTests()
        {
            instance = new StoresApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of StoresApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' StoresApi
            //Assert.IsType<StoresApi>(instance);
        }

        /// <summary>
        /// Test CreateOrUpdateStoreByNumberRequestScopeIdNumberPost
        /// </summary>
        [Fact]
        public void CreateOrUpdateStoreByNumberRequestScopeIdNumberPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string number = null;
            //CreateOrUpdateStoreByNumberRequest body = null;
            //var response = instance.CreateOrUpdateStoreByNumberRequestScopeIdNumberPost(accept, scopeId, number, body);
            //Assert.IsType<Store>(response);
        }

        /// <summary>
        /// Test DeleteStoreRequestScopeIdIdDelete
        /// </summary>
        [Fact]
        public void DeleteStoreRequestScopeIdIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //instance.DeleteStoreRequestScopeIdIdDelete(accept, scopeId, id);
        }

        /// <summary>
        /// Test FindNearestStoresRequestScopeIdnearSearchTermsGet
        /// </summary>
        [Fact]
        public void FindNearestStoresRequestScopeIdnearSearchTermsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string searchTerms = null;
            //int? startingIndex = null;
            //int? maximumItemsCount = null;
            //string fulfillmentMethodType = null;
            //var response = instance.FindNearestStoresRequestScopeIdnearSearchTermsGet(accept, scopeId, searchTerms, startingIndex, maximumItemsCount, fulfillmentMethodType);
            //Assert.IsType<FindNearestStoresResult>(response);
        }

        /// <summary>
        /// Test FindStoresRequestScopeIdfindPost
        /// </summary>
        [Fact]
        public void FindStoresRequestScopeIdfindPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //FindStoresRequest body = null;
            //var response = instance.FindStoresRequestScopeIdfindPost(accept, scopeId, body);
            //Assert.IsType<FindStoresQueryResult>(response);
        }

        /// <summary>
        /// Test GetStoreByNameRequestScopeIdbyNameNameGet
        /// </summary>
        [Fact]
        public void GetStoreByNameRequestScopeIdbyNameNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string name = null;
            //string cultureName = null;
            //bool? includeAddresses = null;
            //bool? includeSchedules = null;
            //bool? includeOperatingStatus = null;
            //var response = instance.GetStoreByNameRequestScopeIdbyNameNameGet(accept, scopeId, name, cultureName, includeAddresses, includeSchedules, includeOperatingStatus);
            //Assert.IsType<Store>(response);
        }

        /// <summary>
        /// Test GetStoreByNumberRequestScopeIdbyNumberNumberGet
        /// </summary>
        [Fact]
        public void GetStoreByNumberRequestScopeIdbyNumberNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string number = null;
            //string cultureName = null;
            //bool? includeAddresses = null;
            //bool? includeSchedules = null;
            //bool? includeOperatingStatus = null;
            //var response = instance.GetStoreByNumberRequestScopeIdbyNumberNumberGet(accept, scopeId, number, cultureName, includeAddresses, includeSchedules, includeOperatingStatus);
            //Assert.IsType<Store>(response);
        }

        /// <summary>
        /// Test GetStoreRequestScopeIdIdGet
        /// </summary>
        [Fact]
        public void GetStoreRequestScopeIdIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //string cultureName = null;
            //bool? includeAddresses = null;
            //bool? includeSchedules = null;
            //bool? includeOperatingStatus = null;
            //var response = instance.GetStoreRequestScopeIdIdGet(accept, scopeId, id, cultureName, includeAddresses, includeSchedules, includeOperatingStatus);
            //Assert.IsType<Store>(response);
        }
    }
}
