/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing MembershipApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MembershipApiTests : IDisposable
    {
        private MembershipApi instance;

        public MembershipApiTests()
        {
            instance = new MembershipApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MembershipApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MembershipApi
            //Assert.IsType<MembershipApi>(instance);
        }

        /// <summary>
        /// Test ChangePasswordRequestScopeIdChangePasswordUserNamePost
        /// </summary>
        [Fact]
        public void ChangePasswordRequestScopeIdChangePasswordUserNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string userName = null;
            //ChangePasswordRequest body = null;
            //var response = instance.ChangePasswordRequestScopeIdChangePasswordUserNamePost(accept, scopeId, userName, body);
            //Assert.IsType<ChangePasswordResponse>(response);
        }

        /// <summary>
        /// Test ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePost
        /// </summary>
        [Fact]
        public void ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string oldUsername = null;
            //ChangeUserNameRequest body = null;
            //var response = instance.ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePost(accept, scopeId, oldUsername, body);
            //Assert.IsType<ChangeUserNameResponse>(response);
        }

        /// <summary>
        /// Test CreateCustomerMembershipRequestScopeIdPost
        /// </summary>
        [Fact]
        public void CreateCustomerMembershipRequestScopeIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //CreateCustomerMembershipRequest body = null;
            //var response = instance.CreateCustomerMembershipRequestScopeIdPost(accept, scopeId, body);
            //Assert.IsType<Customer>(response);
        }

        /// <summary>
        /// Test GetMembershipConfigurationRequestconfigurationGet
        /// </summary>
        [Fact]
        public void GetMembershipConfigurationRequestconfigurationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //var response = instance.GetMembershipConfigurationRequestconfigurationGet(accept);
            //Assert.IsType<MembershipConfiguration>(response);
        }

        /// <summary>
        /// Test LoginRequestScopeIdLoginCreate
        /// </summary>
        [Fact]
        public void LoginRequestScopeIdLoginCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //LoginRequest body = null;
            //var response = instance.LoginRequestScopeIdLoginCreate(accept, scopeId, body);
            //Assert.IsType<LoginResponse>(response);
        }

        /// <summary>
        /// Test ResetPasswordRequestScopeIdResetPasswordPost
        /// </summary>
        [Fact]
        public void ResetPasswordRequestScopeIdResetPasswordPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //ResetPasswordRequest body = null;
            //var response = instance.ResetPasswordRequestScopeIdResetPasswordPost(accept, scopeId, body);
            //Assert.IsType<ResetPasswordResponse>(response);
        }

        /// <summary>
        /// Test UnlockUserRequestScopeIdUnlockUserUserNamePost
        /// </summary>
        [Fact]
        public void UnlockUserRequestScopeIdUnlockUserUserNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string userName = null;
            //Object body = null;
            //var response = instance.UnlockUserRequestScopeIdUnlockUserUserNamePost(accept, scopeId, userName, body);
            //Assert.IsType<UnlockUserResponse>(response);
        }

        /// <summary>
        /// Test ValidateUserRequestScopeIdValidateCreate
        /// </summary>
        [Fact]
        public void ValidateUserRequestScopeIdValidateCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //ValidateUserRequest body = null;
            //var response = instance.ValidateUserRequestScopeIdValidateCreate(accept, scopeId, body);
            //Assert.IsType<ValidateUserResponse>(response);
        }
    }
}
