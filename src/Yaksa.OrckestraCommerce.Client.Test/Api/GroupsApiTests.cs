/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing GroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GroupsApiTests : IDisposable
    {
        private GroupsApi instance;

        public GroupsApiTests()
        {
            instance = new GroupsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GroupsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GroupsApi
            //Assert.IsType<GroupsApi>(instance);
        }

        /// <summary>
        /// Test AddUserToGroupRequestGroupIdUserNamePost
        /// </summary>
        [Fact]
        public void AddUserToGroupRequestGroupIdUserNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string groupId = null;
            //string userName = null;
            //Object body = null;
            //instance.AddUserToGroupRequestGroupIdUserNamePost(accept, groupId, userName, body);
        }

        /// <summary>
        /// Test CreateGroupRequestDisplayNamePost
        /// </summary>
        [Fact]
        public void CreateGroupRequestDisplayNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string displayName = null;
            //CreateGroupRequest body = null;
            //var response = instance.CreateGroupRequestDisplayNamePost(accept, displayName, body);
            //Assert.IsType<Group>(response);
        }

        /// <summary>
        /// Test DeleteGroupRequestGroupIdDelete
        /// </summary>
        [Fact]
        public void DeleteGroupRequestGroupIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string groupId = null;
            //instance.DeleteGroupRequestGroupIdDelete(accept, groupId);
        }

        /// <summary>
        /// Test FindGroupsRequestfindPost
        /// </summary>
        [Fact]
        public void FindGroupsRequestfindPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //FindGroupsRequest body = null;
            //var response = instance.FindGroupsRequestfindPost(accept, body);
            //Assert.IsType<FindGroupsResult>(response);
        }

        /// <summary>
        /// Test GetGroupMembersWithPagingRequestGroupIdusersGet
        /// </summary>
        [Fact]
        public void GetGroupMembersWithPagingRequestGroupIdusersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string groupId = null;
            //int? startingIndex = null;
            //int? maximumItems = null;
            //var response = instance.GetGroupMembersWithPagingRequestGroupIdusersGet(accept, groupId, startingIndex, maximumItems);
            //Assert.IsType<GetGroupMembersWithPagingResult>(response);
        }

        /// <summary>
        /// Test GetGroupRequestGroupIdGet
        /// </summary>
        [Fact]
        public void GetGroupRequestGroupIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string groupId = null;
            //var response = instance.GetGroupRequestGroupIdGet(accept, groupId);
            //Assert.IsType<Group>(response);
        }

        /// <summary>
        /// Test RemoveUserFromGroupRequestGroupIdUserNameDelete
        /// </summary>
        [Fact]
        public void RemoveUserFromGroupRequestGroupIdUserNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string groupId = null;
            //string userName = null;
            //instance.RemoveUserFromGroupRequestGroupIdUserNameDelete(accept, groupId, userName);
        }

        /// <summary>
        /// Test SaveGroupRequestGroupIdCreate
        /// </summary>
        [Fact]
        public void SaveGroupRequestGroupIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string groupId = null;
            //SaveGroupRequest body = null;
            //var response = instance.SaveGroupRequestGroupIdCreate(accept, groupId, body);
            //Assert.IsType<Group>(response);
        }
    }
}
