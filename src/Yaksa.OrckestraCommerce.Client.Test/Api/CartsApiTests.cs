/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing CartsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CartsApiTests : IDisposable
    {
        private CartsApi instance;

        public CartsApiTests()
        {
            instance = new CartsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CartsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CartsApi
            //Assert.IsType<CartsApi>(instance);
        }

        /// <summary>
        /// Test AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost
        /// </summary>
        [Fact]
        public void AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string couponCode = null;
            //AddCouponRequest body = null;
            //var response = instance.AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost(accept, scopeId, customerId, cartName, couponCode, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost
        /// </summary>
        [Fact]
        public void AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string shipmentId = null;
            //AddLineItemInShipmentRequest body = null;
            //var response = instance.AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost(accept, scopeId, customerId, cartName, shipmentId, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost
        /// </summary>
        [Fact]
        public void AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //AddLineItemRequest body = null;
            //var response = instance.AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost(accept, scopeId, customerId, cartName, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost
        /// </summary>
        [Fact]
        public void AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string shipmentId = null;
            //AddOrUpdateLineItemsInShipmentRequest body = null;
            //var response = instance.AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost(accept, scopeId, customerId, cartName, shipmentId, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost
        /// </summary>
        [Fact]
        public void AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //AddOrUpdateLineItemsRequest body = null;
            //var response = instance.AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost(accept, scopeId, customerId, cartName, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost
        /// </summary>
        [Fact]
        public void AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //AddPaymentRequest body = null;
            //var response = instance.AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost(accept, scopeId, customerId, cartName, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost
        /// </summary>
        [Fact]
        public void AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //AddShipmentRequest body = null;
            //var response = instance.AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost(accept, scopeId, customerId, cartName, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost
        /// </summary>
        [Fact]
        public void AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string paymentId = null;
            //AuthorizePaymentRequest body = null;
            //var response = instance.AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost(accept, scopeId, customerId, cartName, paymentId, body);
            //Assert.IsType<Cart>(response);
        }

        /// <summary>
        /// Test ClearCartRequestScopeIdCustomerIdCartNameclearDelete
        /// </summary>
        [Fact]
        public void ClearCartRequestScopeIdCustomerIdCartNameclearDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string cultureName = null;
            //instance.ClearCartRequestScopeIdCustomerIdCartNameclearDelete(accept, scopeId, customerId, cartName, cultureName);
        }

        /// <summary>
        /// Test CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost
        /// </summary>
        [Fact]
        public void CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //CompleteCheckoutRequest body = null;
            //var response = instance.CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost(accept, scopeId, customerId, cartName, body);
            //Assert.IsType<Order>(response);
        }

        /// <summary>
        /// Test CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate
        /// </summary>
        [Fact]
        public void CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string newCustomerId = null;
            //CopyCartToCustomerRequest body = null;
            //var response = instance.CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate(accept, scopeId, customerId, cartName, newCustomerId, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test DeleteCartRequestScopeIdCustomerIdCartNameDelete
        /// </summary>
        [Fact]
        public void DeleteCartRequestScopeIdCustomerIdCartNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string cultureName = null;
            //instance.DeleteCartRequestScopeIdCustomerIdCartNameDelete(accept, scopeId, customerId, cartName, cultureName);
        }

        /// <summary>
        /// Test FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost
        /// </summary>
        [Fact]
        public void FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string paymentProviderName = null;
            //FindCartPaymentMethodsRequest body = null;
            //var response = instance.FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost(accept, scopeId, customerId, cartName, paymentProviderName, body);
            //Assert.IsType<List<PaymentMethod>>(response);
        }

        /// <summary>
        /// Test GetCartRequestScopeIdCustomerIdCartNameGet
        /// </summary>
        [Fact]
        public void GetCartRequestScopeIdCustomerIdCartNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //bool? executeWorkflow = null;
            //string cultureName = null;
            //string workflowToExecute = null;
            //var response = instance.GetCartRequestScopeIdCustomerIdCartNameGet(accept, scopeId, customerId, cartName, executeWorkflow, cultureName, workflowToExecute);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet
        /// </summary>
        [Fact]
        public void GetCartStatesRequestScopeIdCustomerIdCartNamestatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string cultureName = null;
            //var response = instance.GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet(accept, scopeId, customerId, cartName, cultureName);
            //Assert.IsType<List<EntityState>>(response);
        }

        /// <summary>
        /// Test GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet
        /// </summary>
        [Fact]
        public void GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //bool? executeWorkflow = null;
            //string cultureName = null;
            //string workflowToExecute = null;
            //var response = instance.GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet(accept, scopeId, customerId, cartName, executeWorkflow, cultureName, workflowToExecute);
            //Assert.IsType<CartSummary>(response);
        }

        /// <summary>
        /// Test GetCartsByCustomerIdRequestScopeIdCustomerIdGet
        /// </summary>
        [Fact]
        public void GetCartsByCustomerIdRequestScopeIdCustomerIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //bool? includeChildScopes = null;
            //string cultureName = null;
            //string cartType = null;
            //var response = instance.GetCartsByCustomerIdRequestScopeIdCustomerIdGet(accept, scopeId, customerId, includeChildScopes, cultureName, cartType);
            //Assert.IsType<List<CartSummary>>(response);
        }

        /// <summary>
        /// Test GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet
        /// </summary>
        [Fact]
        public void GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string id = null;
            //string cultureName = null;
            //var response = instance.GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet(accept, scopeId, customerId, cartName, id, cultureName);
            //Assert.IsType<LineItem>(response);
        }

        /// <summary>
        /// Test GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet
        /// </summary>
        [Fact]
        public void GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string cultureName = null;
            //var response = instance.GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet(accept, scopeId, customerId, cartName, cultureName);
            //Assert.IsType<List<LineItem>>(response);
        }

        /// <summary>
        /// Test GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet
        /// </summary>
        [Fact]
        public void GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string shipmentId = null;
            //string cultureName = null;
            //var response = instance.GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet(accept, scopeId, customerId, cartName, shipmentId, cultureName);
            //Assert.IsType<List<LineItem>>(response);
        }

        /// <summary>
        /// Test GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet
        /// </summary>
        [Fact]
        public void GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string id = null;
            //string cultureName = null;
            //var response = instance.GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet(accept, scopeId, customerId, cartName, id, cultureName);
            //Assert.IsType<Payment>(response);
        }

        /// <summary>
        /// Test GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet
        /// </summary>
        [Fact]
        public void GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string cultureName = null;
            //var response = instance.GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet(accept, scopeId, customerId, cartName, cultureName);
            //Assert.IsType<List<Payment>>(response);
        }

        /// <summary>
        /// Test GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet
        /// </summary>
        [Fact]
        public void GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string id = null;
            //string cultureName = null;
            //var response = instance.GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet(accept, scopeId, customerId, cartName, id, cultureName);
            //Assert.IsType<Shipment>(response);
        }

        /// <summary>
        /// Test InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost
        /// </summary>
        [Fact]
        public void InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string paymentId = null;
            //InitializePaymentRequest body = null;
            //var response = instance.InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost(accept, scopeId, customerId, cartName, paymentId, body);
            //Assert.IsType<Cart>(response);
        }

        /// <summary>
        /// Test RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost
        /// </summary>
        [Fact]
        public void RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string paymentId = null;
            //RefreshPaymentRequest body = null;
            //var response = instance.RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost(accept, scopeId, customerId, cartName, paymentId, body);
            //Assert.IsType<Cart>(response);
        }

        /// <summary>
        /// Test RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete
        /// </summary>
        [Fact]
        public void RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string cultureName = null;
            //string workflowToExecute = null;
            //var response = instance.RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete(accept, scopeId, customerId, cartName, cultureName, workflowToExecute);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete
        /// </summary>
        [Fact]
        public void RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string couponCode = null;
            //string cultureName = null;
            //string workflowToExecute = null;
            //var response = instance.RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete(accept, scopeId, customerId, cartName, couponCode, cultureName, workflowToExecute);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete
        /// </summary>
        [Fact]
        public void RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string id = null;
            //string cultureName = null;
            //string workflowToExecute = null;
            //var response = instance.RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete(accept, scopeId, customerId, cartName, id, cultureName, workflowToExecute);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete
        /// </summary>
        [Fact]
        public void RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string shipmentId = null;
            //string cultureName = null;
            //string workflowToExecute = null;
            //var response = instance.RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete(accept, scopeId, customerId, cartName, shipmentId, cultureName, workflowToExecute);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete
        /// </summary>
        [Fact]
        public void RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //List<string> lineItemIds = null;
            //string cultureName = null;
            //string workflowToExecute = null;
            //var response = instance.RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete(accept, scopeId, customerId, cartName, lineItemIds, cultureName, workflowToExecute);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete
        /// </summary>
        [Fact]
        public void RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string id = null;
            //string cultureName = null;
            //string workflowToExecute = null;
            //var response = instance.RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete(accept, scopeId, customerId, cartName, id, cultureName, workflowToExecute);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete
        /// </summary>
        [Fact]
        public void RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string id = null;
            //string cultureName = null;
            //string workflowToExecute = null;
            //var response = instance.RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete(accept, scopeId, customerId, cartName, id, cultureName, workflowToExecute);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost
        /// </summary>
        [Fact]
        public void ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string shipmentId = null;
            //string timeSlotId = null;
            //ReserveTimeSlotRequest body = null;
            //var response = instance.ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost(accept, scopeId, customerId, cartName, shipmentId, timeSlotId, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate
        /// </summary>
        [Fact]
        public void SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string shipmentId = null;
            //SetAdjustmentRequest body = null;
            //var response = instance.SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate(accept, scopeId, customerId, cartName, shipmentId, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost
        /// </summary>
        [Fact]
        public void SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string paymentId = null;
            //SettlePaymentRequest body = null;
            //var response = instance.SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost(accept, scopeId, customerId, cartName, paymentId, body);
            //Assert.IsType<Cart>(response);
        }

        /// <summary>
        /// Test UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate
        /// </summary>
        [Fact]
        public void UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string paymentId = null;
            //UpdateBillingAddressRequest body = null;
            //var response = instance.UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate(accept, scopeId, customerId, cartName, paymentId, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test UpdateCartRequestScopeIdCustomerIdCartNameCreate
        /// </summary>
        [Fact]
        public void UpdateCartRequestScopeIdCustomerIdCartNameCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //UpdateCartRequest body = null;
            //var response = instance.UpdateCartRequestScopeIdCustomerIdCartNameCreate(accept, scopeId, customerId, cartName, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate
        /// </summary>
        [Fact]
        public void UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //UpdateCustomerSummaryRequest body = null;
            //var response = instance.UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate(accept, scopeId, customerId, cartName, body);
            //Assert.IsType<CustomerSummary>(response);
        }

        /// <summary>
        /// Test UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate
        /// </summary>
        [Fact]
        public void UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string id = null;
            //UpdateLineItemRequest body = null;
            //var response = instance.UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate(accept, scopeId, customerId, cartName, id, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate
        /// </summary>
        [Fact]
        public void UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string paymentId = null;
            //UpdatePaymentAmountRequest body = null;
            //var response = instance.UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate(accept, scopeId, customerId, cartName, paymentId, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate
        /// </summary>
        [Fact]
        public void UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string paymentId = null;
            //UpdatePaymentMethodRequest body = null;
            //var response = instance.UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate(accept, scopeId, customerId, cartName, paymentId, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate
        /// </summary>
        [Fact]
        public void UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string id = null;
            //UpdatePaymentRequest body = null;
            //var response = instance.UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate(accept, scopeId, customerId, cartName, id, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate
        /// </summary>
        [Fact]
        public void UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string id = null;
            //UpdateShipmentRequest body = null;
            //var response = instance.UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate(accept, scopeId, customerId, cartName, id, body);
            //Assert.IsType<ProcessedCart>(response);
        }

        /// <summary>
        /// Test VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost
        /// </summary>
        [Fact]
        public void VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string cartName = null;
            //string paymentId = null;
            //VoidPaymentRequest body = null;
            //var response = instance.VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost(accept, scopeId, customerId, cartName, paymentId, body);
            //Assert.IsType<Cart>(response);
        }
    }
}
