/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing ProductsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProductsApiTests : IDisposable
    {
        private ProductsApi instance;

        public ProductsApiTests()
        {
            instance = new ProductsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ProductsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ProductsApi
            //Assert.IsType<ProductsApi>(instance);
        }

        /// <summary>
        /// Test AddFromGlobalRequestScopeIdfromGlobalPost
        /// </summary>
        [Fact]
        public void AddFromGlobalRequestScopeIdfromGlobalPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //AddFromGlobalRequest body = null;
            //var response = instance.AddFromGlobalRequestScopeIdfromGlobalPost(accept, scopeId, body);
            //Assert.IsType<TaskInfo>(response);
        }

        /// <summary>
        /// Test AddOrUpdatePriceListRequestScopeIdpriceListsPost
        /// </summary>
        [Fact]
        public void AddOrUpdatePriceListRequestScopeIdpriceListsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //AddOrUpdatePriceListRequest body = null;
            //instance.AddOrUpdatePriceListRequestScopeIdpriceListsPost(accept, scopeId, body);
        }

        /// <summary>
        /// Test AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPost
        /// </summary>
        [Fact]
        public void AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //AddPriceListEntryRequest body = null;
            //var response = instance.AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPost(accept, scopeId, productId, body);
            //Assert.IsType<PriceListEntry>(response);
        }

        /// <summary>
        /// Test BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPost
        /// </summary>
        [Fact]
        public void BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //BulkAssignProductCategoriesRequest body = null;
            //var response = instance.BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPost(accept, scopeId, body);
            //Assert.IsType<TaskInfo>(response);
        }

        /// <summary>
        /// Test BulkRevertProductChangesRequestScopeIdbulkRevertPost
        /// </summary>
        [Fact]
        public void BulkRevertProductChangesRequestScopeIdbulkRevertPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //BulkRevertProductChangesRequest body = null;
            //var response = instance.BulkRevertProductChangesRequestScopeIdbulkRevertPost(accept, scopeId, body);
            //Assert.IsType<TaskInfo>(response);
        }

        /// <summary>
        /// Test BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPost
        /// </summary>
        [Fact]
        public void BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //BulkUpdatePublicationStatusRequest body = null;
            //var response = instance.BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPost(accept, scopeId, body);
            //Assert.IsType<TaskInfo>(response);
        }

        /// <summary>
        /// Test CalculatePricesofProductsRequestScopeIdpricesPost
        /// </summary>
        [Fact]
        public void CalculatePricesofProductsRequestScopeIdpricesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //CalculatePricesofProductsRequest body = null;
            //var response = instance.CalculatePricesofProductsRequestScopeIdpricesPost(accept, scopeId, body);
            //Assert.IsType<List<ProductPrice>>(response);
        }

        /// <summary>
        /// Test CalculateProductPriceRequestScopeIdProductIdpricePost
        /// </summary>
        [Fact]
        public void CalculateProductPriceRequestScopeIdProductIdpricePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //CalculateProductPriceRequest body = null;
            //var response = instance.CalculateProductPriceRequestScopeIdProductIdpricePost(accept, scopeId, productId, body);
            //Assert.IsType<ProductPrice>(response);
        }

        /// <summary>
        /// Test CopyProductRequestScopeIdProductIdcopyNewProductIdCreate
        /// </summary>
        [Fact]
        public void CopyProductRequestScopeIdProductIdcopyNewProductIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //string newProductId = null;
            //Object body = null;
            //var response = instance.CopyProductRequestScopeIdProductIdcopyNewProductIdCreate(accept, scopeId, productId, newProductId, body);
            //Assert.IsType<Product>(response);
        }

        /// <summary>
        /// Test CreatePriceListRequestScopeIdpriceListsPriceListIdPost
        /// </summary>
        [Fact]
        public void CreatePriceListRequestScopeIdpriceListsPriceListIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string priceListId = null;
            //CreatePriceListRequest body = null;
            //var response = instance.CreatePriceListRequestScopeIdpriceListsPriceListIdPost(accept, scopeId, priceListId, body);
            //Assert.IsType<PriceList>(response);
        }

        /// <summary>
        /// Test CreateProductRequestScopeIdPost
        /// </summary>
        [Fact]
        public void CreateProductRequestScopeIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //CreateProductRequest body = null;
            //var response = instance.CreateProductRequestScopeIdPost(accept, scopeId, body);
            //Assert.IsType<Product>(response);
        }

        /// <summary>
        /// Test DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete
        /// </summary>
        [Fact]
        public void DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //string priceListId = null;
            //string variantId = null;
            //instance.DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete(accept, scopeId, productId, priceListId, variantId);
        }

        /// <summary>
        /// Test DeletePriceListRequestScopeIdpriceListsPriceListIdDelete
        /// </summary>
        [Fact]
        public void DeletePriceListRequestScopeIdpriceListsPriceListIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string priceListId = null;
            //bool? deletePriceListEntries = null;
            //instance.DeletePriceListRequestScopeIdpriceListsPriceListIdDelete(accept, scopeId, priceListId, deletePriceListEntries);
        }

        /// <summary>
        /// Test DeleteProductByIdRequestScopeIdproductProductIdDelete
        /// </summary>
        [Fact]
        public void DeleteProductByIdRequestScopeIdproductProductIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //instance.DeleteProductByIdRequestScopeIdproductProductIdDelete(accept, scopeId, productId);
        }

        /// <summary>
        /// Test DeleteProductByIdV2Requestv2ScopeIdProductIdDelete
        /// </summary>
        [Fact]
        public void DeleteProductByIdV2Requestv2ScopeIdProductIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //instance.DeleteProductByIdV2Requestv2ScopeIdProductIdDelete(accept, scopeId, productId);
        }

        /// <summary>
        /// Test DeleteProductDraftRequestScopeIddraftProductIdDelete
        /// </summary>
        [Fact]
        public void DeleteProductDraftRequestScopeIddraftProductIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //instance.DeleteProductDraftRequestScopeIddraftProductIdDelete(accept, scopeId, productId);
        }

        /// <summary>
        /// Test DeleteProductSettingsEntryRequestsettingsEntryDelete
        /// </summary>
        [Fact]
        public void DeleteProductSettingsEntryRequestsettingsEntryDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string entry = null;
            //instance.DeleteProductSettingsEntryRequestsettingsEntryDelete(accept, entry);
        }

        /// <summary>
        /// Test DeleteProductsRequestScopeIdbulkDeletePost
        /// </summary>
        [Fact]
        public void DeleteProductsRequestScopeIdbulkDeletePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //DeleteProductsRequest body = null;
            //var response = instance.DeleteProductsRequestScopeIdbulkDeletePost(accept, scopeId, body);
            //Assert.IsType<TaskInfo>(response);
        }

        /// <summary>
        /// Test DeleteUnusedMediaStorageRequestmediastorageDelete
        /// </summary>
        [Fact]
        public void DeleteUnusedMediaStorageRequestmediastorageDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string url = null;
            //var response = instance.DeleteUnusedMediaStorageRequestmediastorageDelete(accept, url);
            //Assert.IsType<DeleteUnusedMediaStorageResponse>(response);
        }

        /// <summary>
        /// Test FindPriceListsRequestScopeIdpriceListsfindGet
        /// </summary>
        [Fact]
        public void FindPriceListsRequestScopeIdpriceListsfindGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string cultureName = null;
            //bool? includeExpiredEntries = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.FindPriceListsRequestScopeIdpriceListsfindGet(accept, scopeId, cultureName, includeExpiredEntries, startDate, endDate);
            //Assert.IsType<List<PriceList>>(response);
        }

        /// <summary>
        /// Test FindProductPricesRequestScopeIdproductPricesPost
        /// </summary>
        [Fact]
        public void FindProductPricesRequestScopeIdproductPricesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //FindProductPricesRequest body = null;
            //var response = instance.FindProductPricesRequestScopeIdproductPricesPost(accept, scopeId, body);
            //Assert.IsType<List<ProductPrice>>(response);
        }

        /// <summary>
        /// Test GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGet
        /// </summary>
        [Fact]
        public void GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //string variantId = null;
            //DateTime? referenceDate = null;
            //var response = instance.GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGet(accept, scopeId, productId, variantId, referenceDate);
            //Assert.IsType<EffectivePriceEntryInfo>(response);
        }

        /// <summary>
        /// Test GetMediaBySkuRequestScopeIdbySkuSkumediaPost
        /// </summary>
        [Fact]
        public void GetMediaBySkuRequestScopeIdbySkuSkumediaPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string sku = null;
            //GetMediaBySkuRequest body = null;
            //var response = instance.GetMediaBySkuRequestScopeIdbySkuSkumediaPost(accept, scopeId, sku, body);
            //Assert.IsType<MediaList>(response);
        }

        /// <summary>
        /// Test GetMediaRequestScopeIdProductIdmediaMediaIdGet
        /// </summary>
        [Fact]
        public void GetMediaRequestScopeIdProductIdmediaMediaIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //string mediaId = null;
            //var response = instance.GetMediaRequestScopeIdProductIdmediaMediaIdGet(accept, scopeId, productId, mediaId);
            //Assert.IsType<ProductMedia>(response);
        }

        /// <summary>
        /// Test GetMediaSettingsRequestmediasettingsGet
        /// </summary>
        [Fact]
        public void GetMediaSettingsRequestmediasettingsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //var response = instance.GetMediaSettingsRequestmediasettingsGet(accept);
            //Assert.IsType<MediaSettings>(response);
        }

        /// <summary>
        /// Test GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGet
        /// </summary>
        [Fact]
        public void GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //string variantId = null;
            //bool? useParentScope = null;
            //bool? includeExpiredEntries = null;
            //var response = instance.GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGet(accept, scopeId, productId, variantId, useParentScope, includeExpiredEntries);
            //Assert.IsType<List<PriceListEntry>>(response);
        }

        /// <summary>
        /// Test GetPriceListsRequestScopeIdpriceListsGet
        /// </summary>
        [Fact]
        public void GetPriceListsRequestScopeIdpriceListsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string cultureName = null;
            //var response = instance.GetPriceListsRequestScopeIdpriceListsGet(accept, scopeId, cultureName);
            //Assert.IsType<List<PriceList>>(response);
        }

        /// <summary>
        /// Test GetProductAttributesRequestattributesGet
        /// </summary>
        [Fact]
        public void GetProductAttributesRequestattributesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //var response = instance.GetProductAttributesRequestattributesGet(accept);
            //Assert.IsType<ProductAttributes>(response);
        }

        /// <summary>
        /// Test GetProductDefinitionRequestdefinitionsNameGet
        /// </summary>
        [Fact]
        public void GetProductDefinitionRequestdefinitionsNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string name = null;
            //string cultureName = null;
            //var response = instance.GetProductDefinitionRequestdefinitionsNameGet(accept, name, cultureName);
            //Assert.IsType<ProductDefinition>(response);
        }

        /// <summary>
        /// Test GetProductDefinitionsRequestdefinitionsGet
        /// </summary>
        [Fact]
        public void GetProductDefinitionsRequestdefinitionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string productType = null;
            //string cultureName = null;
            //var response = instance.GetProductDefinitionsRequestdefinitionsGet(accept, productType, cultureName);
            //Assert.IsType<List<ProductDefinition>>(response);
        }

        /// <summary>
        /// Test GetProductDraftRequestScopeIddraftProductIdGet
        /// </summary>
        [Fact]
        public void GetProductDraftRequestScopeIddraftProductIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //string cultureName = null;
            //var response = instance.GetProductDraftRequestScopeIddraftProductIdGet(accept, scopeId, productId, cultureName);
            //Assert.IsType<ProductDraft>(response);
        }

        /// <summary>
        /// Test GetProductDraftStatesRequestScopeIddraftStatesProductIdGet
        /// </summary>
        [Fact]
        public void GetProductDraftStatesRequestScopeIddraftStatesProductIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //var response = instance.GetProductDraftStatesRequestScopeIddraftStatesProductIdGet(accept, scopeId, productId);
            //Assert.IsType<LocalizedDraftState>(response);
        }

        /// <summary>
        /// Test GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPost
        /// </summary>
        [Fact]
        public void GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //GetProductPriceEntriesRequest body = null;
            //var response = instance.GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPost(accept, scopeId, productId, body);
            //Assert.IsType<GetProductPriceEntriesResult>(response);
        }

        /// <summary>
        /// Test GetProductRelationshipsRequestScopeIdProductIdrelationshipsGet
        /// </summary>
        [Fact]
        public void GetProductRelationshipsRequestScopeIdProductIdrelationshipsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //string cultureName = null;
            //var response = instance.GetProductRelationshipsRequestScopeIdProductIdrelationshipsGet(accept, scopeId, productId, cultureName);
            //Assert.IsType<List<Relationship>>(response);
        }

        /// <summary>
        /// Test GetProductRequestScopeIdProductIdGet
        /// </summary>
        [Fact]
        public void GetProductRequestScopeIdProductIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //bool? includeImageUrl = null;
            //bool? includeVariants = null;
            //bool? includePriceLists = null;
            //bool? includeRelationships = null;
            //bool? includeMedia = null;
            //string cultureName = null;
            //var response = instance.GetProductRequestScopeIdProductIdGet(accept, scopeId, productId, includeImageUrl, includeVariants, includePriceLists, includeRelationships, includeMedia, cultureName);
            //Assert.IsType<Product>(response);
        }

        /// <summary>
        /// Test GetProductSettingsRequestsettingsGet
        /// </summary>
        [Fact]
        public void GetProductSettingsRequestsettingsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //var response = instance.GetProductSettingsRequestsettingsGet(accept, scopeId);
            //Assert.IsType<ProductSettings>(response);
        }

        /// <summary>
        /// Test GetProductV2Requestv2ScopeIdProductIdGet
        /// </summary>
        [Fact]
        public void GetProductV2Requestv2ScopeIdProductIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //bool? includeImageUrl = null;
            //bool? publishedVersion = null;
            //bool? includeInheritanceInformation = null;
            //bool? includeVariants = null;
            //bool? includePriceLists = null;
            //bool? includeRelationships = null;
            //bool? includeMedia = null;
            //string cultureName = null;
            //var response = instance.GetProductV2Requestv2ScopeIdProductIdGet(accept, scopeId, productId, includeImageUrl, publishedVersion, includeInheritanceInformation, includeVariants, includePriceLists, includeRelationships, includeMedia, cultureName);
            //Assert.IsType<Product>(response);
        }

        /// <summary>
        /// Test GetProductsByIdsRequestScopeIdbyIdsPost
        /// </summary>
        [Fact]
        public void GetProductsByIdsRequestScopeIdbyIdsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //GetProductsByIdsRequest body = null;
            //var response = instance.GetProductsByIdsRequestScopeIdbyIdsPost(accept, scopeId, body);
            //Assert.IsType<ProductList>(response);
        }

        /// <summary>
        /// Test GetProductsByIdsV2Requestv2ScopeIdbyIdsPost
        /// </summary>
        [Fact]
        public void GetProductsByIdsV2Requestv2ScopeIdbyIdsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //GetProductsByIdsV2Request body = null;
            //var response = instance.GetProductsByIdsV2Requestv2ScopeIdbyIdsPost(accept, scopeId, body);
            //Assert.IsType<ProductList>(response);
        }

        /// <summary>
        /// Test GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPost
        /// </summary>
        [Fact]
        public void GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //GetProductsByPublicationStatusRequest body = null;
            //var response = instance.GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPost(accept, scopeId, body);
            //Assert.IsType<GetProductsByPublicationStatusResult>(response);
        }

        /// <summary>
        /// Test GetProductsBySkuRequestScopeIdbySkuSkuGet
        /// </summary>
        [Fact]
        public void GetProductsBySkuRequestScopeIdbySkuSkuGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string sku = null;
            //bool? includePriceLists = null;
            //bool? includeRelationships = null;
            //string cultureName = null;
            //var response = instance.GetProductsBySkuRequestScopeIdbySkuSkuGet(accept, scopeId, sku, includePriceLists, includeRelationships, cultureName);
            //Assert.IsType<List<Product>>(response);
        }

        /// <summary>
        /// Test GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGet
        /// </summary>
        [Fact]
        public void GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string sku = null;
            //bool? searchVariantSkus = null;
            //bool? includePriceLists = null;
            //bool? includeRelationships = null;
            //string cultureName = null;
            //var response = instance.GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGet(accept, scopeId, sku, searchVariantSkus, includePriceLists, includeRelationships, cultureName);
            //Assert.IsType<ProductList>(response);
        }

        /// <summary>
        /// Test GetProductsBySkusV2Requestv2ScopeIdbySkusPost
        /// </summary>
        [Fact]
        public void GetProductsBySkusV2Requestv2ScopeIdbySkusPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //GetProductsBySkusV2Request body = null;
            //var response = instance.GetProductsBySkusV2Requestv2ScopeIdbySkusPost(accept, scopeId, body);
            //Assert.IsType<ProductList>(response);
        }

        /// <summary>
        /// Test GetProductsCountByCategoryRequestScopeIdCategoryIdcountGet
        /// </summary>
        [Fact]
        public void GetProductsCountByCategoryRequestScopeIdCategoryIdcountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //bool? includeDescendantsCategories = null;
            //var response = instance.GetProductsCountByCategoryRequestScopeIdCategoryIdcountGet(accept, scopeId, categoryId, includeDescendantsCategories);
            //Assert.IsType<GetProductsCountByCategoryResponse>(response);
        }

        /// <summary>
        /// Test GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPost
        /// </summary>
        [Fact]
        public void GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //GetProductsPriceEntriesRequest body = null;
            //var response = instance.GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPost(accept, scopeId, body);
            //Assert.IsType<List<GetProductPriceEntriesResult>>(response);
        }

        /// <summary>
        /// Test GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGet
        /// </summary>
        [Fact]
        public void GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string categoryId = null;
            //string cultureName = null;
            //List<string> propertiesNames = null;
            //int? startingIndex = null;
            //int? maximumItems = null;
            //string sortBy = null;
            //string sortDirection = null;
            //var response = instance.GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGet(accept, scopeId, categoryId, cultureName, propertiesNames, startingIndex, maximumItems, sortBy, sortDirection);
            //Assert.IsType<GetProductsPropertiesResult>(response);
        }

        /// <summary>
        /// Test GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPost
        /// </summary>
        [Fact]
        public void GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //GetProductsPropertiesByDraftStateAndCategoriesRequest body = null;
            //var response = instance.GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPost(accept, scopeId, body);
            //Assert.IsType<GetProductByCategoryAndStateResults>(response);
        }

        /// <summary>
        /// Test GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGet
        /// </summary>
        [Fact]
        public void GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string draftState = null;
            //string cultureName = null;
            //List<string> propertiesNames = null;
            //int? startingIndex = null;
            //int? maximumItems = null;
            //string sortBy = null;
            //string sortDirection = null;
            //var response = instance.GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGet(accept, scopeId, draftState, cultureName, propertiesNames, startingIndex, maximumItems, sortBy, sortDirection);
            //Assert.IsType<GetProductsPropertiesResult>(response);
        }

        /// <summary>
        /// Test GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGet
        /// </summary>
        [Fact]
        public void GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string cultureName = null;
            //List<string> propertiesNames = null;
            //int? startingIndex = null;
            //int? maximumItems = null;
            //string sortBy = null;
            //string sortDirection = null;
            //var response = instance.GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGet(accept, scopeId, cultureName, propertiesNames, startingIndex, maximumItems, sortBy, sortDirection);
            //Assert.IsType<GetProductsPropertiesResult>(response);
        }

        /// <summary>
        /// Test GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGet
        /// </summary>
        [Fact]
        public void GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string cultureName = null;
            //List<string> propertiesNames = null;
            //int? startingIndex = null;
            //int? maximumItems = null;
            //string sortBy = null;
            //string sortDirection = null;
            //var response = instance.GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGet(accept, scopeId, cultureName, propertiesNames, startingIndex, maximumItems, sortBy, sortDirection);
            //Assert.IsType<GetProductsPropertiesResult>(response);
        }

        /// <summary>
        /// Test GetProductsStatisticsRequestScopeIdstatisticsGet
        /// </summary>
        [Fact]
        public void GetProductsStatisticsRequestScopeIdstatisticsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //var response = instance.GetProductsStatisticsRequestScopeIdstatisticsGet(accept, scopeId);
            //Assert.IsType<GetProductsStatisticsResult>(response);
        }

        /// <summary>
        /// Test GetQuickLinksCountDetailsRequestquicklinksGet
        /// </summary>
        [Fact]
        public void GetQuickLinksCountDetailsRequestquicklinksGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string catalogName = null;
            //string cultureName = null;
            //var response = instance.GetQuickLinksCountDetailsRequestquicklinksGet(accept, catalogName, cultureName);
            //Assert.IsType<List<QuickLinkCountDetails>>(response);
        }

        /// <summary>
        /// Test GetVariantsByProductRequestScopeIdProductIdvariantsGet
        /// </summary>
        [Fact]
        public void GetVariantsByProductRequestScopeIdProductIdvariantsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //bool? includePriceLists = null;
            //string cultureName = null;
            //var response = instance.GetVariantsByProductRequestScopeIdProductIdvariantsGet(accept, scopeId, productId, includePriceLists, cultureName);
            //Assert.IsType<List<Variant>>(response);
        }

        /// <summary>
        /// Test ProductExistsRequestexistsScopeIdProductIdGet
        /// </summary>
        [Fact]
        public void ProductExistsRequestexistsScopeIdProductIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //var response = instance.ProductExistsRequestexistsScopeIdProductIdGet(accept, scopeId, productId);
            //Assert.IsType<ProductExistsResponse>(response);
        }

        /// <summary>
        /// Test RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreate
        /// </summary>
        [Fact]
        public void RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //Object body = null;
            //instance.RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreate(accept, scopeId, productId, body);
        }

        /// <summary>
        /// Test RevertProductChangesRequestScopeIdrevertPost
        /// </summary>
        [Fact]
        public void RevertProductChangesRequestScopeIdrevertPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //RevertProductChangesRequest body = null;
            //instance.RevertProductChangesRequestScopeIdrevertPost(accept, scopeId, body);
        }

        /// <summary>
        /// Test SyncProductRequestsyncScopeIdProductIdCreate
        /// </summary>
        [Fact]
        public void SyncProductRequestsyncScopeIdProductIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //SyncProductRequest body = null;
            //instance.SyncProductRequestsyncScopeIdProductIdCreate(accept, scopeId, productId, body);
        }

        /// <summary>
        /// Test UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate
        /// </summary>
        [Fact]
        public void UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //string mediaId = null;
            //UpdateMediaResizedInstancesRequest body = null;
            //var response = instance.UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate(accept, scopeId, productId, mediaId, body);
            //Assert.IsType<ProductMedia>(response);
        }

        /// <summary>
        /// Test UpdateMediaSettingsRequestmediasettingsCreate
        /// </summary>
        [Fact]
        public void UpdateMediaSettingsRequestmediasettingsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //UpdateMediaSettingsRequest body = null;
            //var response = instance.UpdateMediaSettingsRequestmediasettingsCreate(accept, body);
            //Assert.IsType<MediaSettings>(response);
        }

        /// <summary>
        /// Test UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreate
        /// </summary>
        [Fact]
        public void UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //UpdatePriceListEntryRequest body = null;
            //var response = instance.UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreate(accept, scopeId, productId, body);
            //Assert.IsType<PriceListEntry>(response);
        }

        /// <summary>
        /// Test UpdatePriceListRequestScopeIdpriceListsPriceListIdCreate
        /// </summary>
        [Fact]
        public void UpdatePriceListRequestScopeIdpriceListsPriceListIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string priceListId = null;
            //UpdatePriceListRequest body = null;
            //var response = instance.UpdatePriceListRequestScopeIdpriceListsPriceListIdCreate(accept, scopeId, priceListId, body);
            //Assert.IsType<PriceList>(response);
        }

        /// <summary>
        /// Test UpdateProductDraftRequestScopeIddraftProductIdPost
        /// </summary>
        [Fact]
        public void UpdateProductDraftRequestScopeIddraftProductIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //UpdateProductDraftRequest body = null;
            //var response = instance.UpdateProductDraftRequestScopeIddraftProductIdPost(accept, scopeId, productId, body);
            //Assert.IsType<ProductDraft>(response);
        }

        /// <summary>
        /// Test UpdateProductPublicationStatusRequestScopeIdpublicationStatusPost
        /// </summary>
        [Fact]
        public void UpdateProductPublicationStatusRequestScopeIdpublicationStatusPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //UpdateProductPublicationStatusRequest body = null;
            //instance.UpdateProductPublicationStatusRequestScopeIdpublicationStatusPost(accept, scopeId, body);
        }

        /// <summary>
        /// Test UpdateProductRequestScopeIdProductIdCreate
        /// </summary>
        [Fact]
        public void UpdateProductRequestScopeIdProductIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //UpdateProductRequest body = null;
            //var response = instance.UpdateProductRequestScopeIdProductIdCreate(accept, scopeId, productId, body);
            //Assert.IsType<Product>(response);
        }

        /// <summary>
        /// Test UpdateProductSettingsRequestsettingsCreate
        /// </summary>
        [Fact]
        public void UpdateProductSettingsRequestsettingsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //UpdateProductSettingsRequest body = null;
            //var response = instance.UpdateProductSettingsRequestsettingsCreate(accept, body);
            //Assert.IsType<ProductSettings>(response);
        }

        /// <summary>
        /// Test UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate
        /// </summary>
        [Fact]
        public void UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //string priceListId = null;
            //UpdateVariantsPriceListEntryRequest body = null;
            //instance.UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate(accept, scopeId, productId, priceListId, body);
        }

        /// <summary>
        /// Test UploadMediaRequestmediaScopeIdProductIduploadPost
        /// </summary>
        [Fact]
        public void UploadMediaRequestmediaScopeIdProductIduploadPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //UploadMediaRequest body = null;
            //var response = instance.UploadMediaRequestmediaScopeIdProductIduploadPost(accept, scopeId, productId, body);
            //Assert.IsType<Product>(response);
        }
    }
}
