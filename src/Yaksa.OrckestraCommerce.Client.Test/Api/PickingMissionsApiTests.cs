/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing PickingMissionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PickingMissionsApiTests : IDisposable
    {
        private PickingMissionsApi instance;

        public PickingMissionsApiTests()
        {
            instance = new PickingMissionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PickingMissionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PickingMissionsApi
            //Assert.IsType<PickingMissionsApi>(instance);
        }

        /// <summary>
        /// Test AssignPickerToPickingMissionRequestScopeIdIdassignPickerPost
        /// </summary>
        [Fact]
        public void AssignPickerToPickingMissionRequestScopeIdIdassignPickerPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //AssignPickerToPickingMissionRequest body = null;
            //var response = instance.AssignPickerToPickingMissionRequestScopeIdIdassignPickerPost(accept, scopeId, id, body);
            //Assert.IsType<PickingMission>(response);
        }

        /// <summary>
        /// Test CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPost
        /// </summary>
        [Fact]
        public void CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //Object body = null;
            //var response = instance.CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPost(accept, scopeId, id, body);
            //Assert.IsType<PickingMission>(response);
        }

        /// <summary>
        /// Test CancelPickingMissionRequestScopeIdIdcancelPost
        /// </summary>
        [Fact]
        public void CancelPickingMissionRequestScopeIdIdcancelPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //Object body = null;
            //var response = instance.CancelPickingMissionRequestScopeIdIdcancelPost(accept, scopeId, id, body);
            //Assert.IsType<PickingMission>(response);
        }

        /// <summary>
        /// Test CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPost
        /// </summary>
        [Fact]
        public void CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //CompletePickingMissionAssemblyRequest body = null;
            //var response = instance.CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPost(accept, scopeId, id, body);
            //Assert.IsType<PickingMission>(response);
        }

        /// <summary>
        /// Test CreatePickingMissionRequestScopeIdPost
        /// </summary>
        [Fact]
        public void CreatePickingMissionRequestScopeIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //CreatePickingMissionRequest body = null;
            //var response = instance.CreatePickingMissionRequestScopeIdPost(accept, scopeId, body);
            //Assert.IsType<PickingMission>(response);
        }

        /// <summary>
        /// Test GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGet
        /// </summary>
        [Fact]
        public void GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string fulfillmentLocationId = null;
            //string status = null;
            //var response = instance.GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGet(accept, scopeId, fulfillmentLocationId, status);
            //Assert.IsType<PickingMissionResult>(response);
        }

        /// <summary>
        /// Test GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGet
        /// </summary>
        [Fact]
        public void GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string orderId = null;
            //string fulfillmentLocationId = null;
            //string status = null;
            //var response = instance.GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGet(accept, scopeId, orderId, fulfillmentLocationId, status);
            //Assert.IsType<PickingMissionResult>(response);
        }

        /// <summary>
        /// Test GetPickingMissionRequestScopeIdIdGet
        /// </summary>
        [Fact]
        public void GetPickingMissionRequestScopeIdIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //var response = instance.GetPickingMissionRequestScopeIdIdGet(accept, scopeId, id);
            //Assert.IsType<PickingMission>(response);
        }

        /// <summary>
        /// Test GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGet
        /// </summary>
        [Fact]
        public void GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string shipmentId = null;
            //string fulfillmentLocationId = null;
            //string status = null;
            //var response = instance.GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGet(accept, scopeId, shipmentId, fulfillmentLocationId, status);
            //Assert.IsType<PickingMissionResult>(response);
        }

        /// <summary>
        /// Test SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreate
        /// </summary>
        [Fact]
        public void SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //SavePickingMissionAssemblyProgressRequest body = null;
            //var response = instance.SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreate(accept, scopeId, id, body);
            //Assert.IsType<PickingMission>(response);
        }

        /// <summary>
        /// Test StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPost
        /// </summary>
        [Fact]
        public void StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //Object body = null;
            //var response = instance.StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPost(accept, scopeId, id, body);
            //Assert.IsType<PickingMission>(response);
        }

        /// <summary>
        /// Test UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPost
        /// </summary>
        [Fact]
        public void UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //Object body = null;
            //var response = instance.UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPost(accept, scopeId, id, body);
            //Assert.IsType<PickingMission>(response);
        }

        /// <summary>
        /// Test UpdatePickingMissionRequestScopeIdIdCreate
        /// </summary>
        [Fact]
        public void UpdatePickingMissionRequestScopeIdIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //UpdatePickingMissionRequest body = null;
            //var response = instance.UpdatePickingMissionRequestScopeIdIdCreate(accept, scopeId, id, body);
            //Assert.IsType<PickingMission>(response);
        }
    }
}
