/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Api;
// uncomment below to import models
//using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Test.Api
{
    /// <summary>
    ///  Class for testing CdmvApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CdmvApiTests : IDisposable
    {
        private CdmvApi instance;

        public CdmvApiTests()
        {
            instance = new CdmvApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CdmvApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CdmvApi
            //Assert.IsType<CdmvApi>(instance);
        }

        /// <summary>
        /// Test AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPost
        /// </summary>
        [Fact]
        public void AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //AddMonerisPaymentMethodRequest body = null;
            //var response = instance.AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPost(accept, scopeId, customerId, body);
            //Assert.IsType<AddMonerisPaymentMethodResponse>(response);
        }

        /// <summary>
        /// Test AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePost
        /// </summary>
        [Fact]
        public void AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //AddOrUpdateProductAuthorizationsByUsernameRequest body = null;
            //var response = instance.AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePost(accept, scopeId, body);
            //Assert.IsType<AddOrUpdateProductAuthorizationsResponse>(response);
        }

        /// <summary>
        /// Test AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPost
        /// </summary>
        [Fact]
        public void AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //AddOrUpdateProductAuthorizationsRequest body = null;
            //var response = instance.AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPost(accept, scopeId, customerId, body);
            //Assert.IsType<AddOrUpdateProductAuthorizationsResponse>(response);
        }

        /// <summary>
        /// Test CDMVCreateCustomerRequestcustomerScopeIdPost
        /// </summary>
        [Fact]
        public void CDMVCreateCustomerRequestcustomerScopeIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //CDMVCreateCustomerRequest body = null;
            //var response = instance.CDMVCreateCustomerRequestcustomerScopeIdPost(accept, scopeId, body);
            //Assert.IsType<Customer>(response);
        }

        /// <summary>
        /// Test CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPost
        /// </summary>
        [Fact]
        public void CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //CDMVSelfServiceAccountCreationRequest body = null;
            //var response = instance.CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPost(accept, scopeId, body);
            //Assert.IsType<SelfServiceAccountCreatedEvent>(response);
        }

        /// <summary>
        /// Test CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePost
        /// </summary>
        [Fact]
        public void CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //CDMVSelfServiceAccountCreationValidationRequest body = null;
            //var response = instance.CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePost(accept, body);
            //Assert.IsType<CDMVSelfServiceAccountValidationResponse>(response);
        }

        /// <summary>
        /// Test ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPost
        /// </summary>
        [Fact]
        public void ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string clinicCode = null;
            //ClinicProductInformationImportRequest body = null;
            //var response = instance.ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPost(accept, clinicCode, body);
            //Assert.IsType<TaskInfo>(response);
        }

        /// <summary>
        /// Test ConfirmShipmentRequestordersconfirmshipmentPost
        /// </summary>
        [Fact]
        public void ConfirmShipmentRequestordersconfirmshipmentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //ConfirmShipmentRequest body = null;
            //var response = instance.ConfirmShipmentRequestordersconfirmshipmentPost(accept, body);
            //Assert.IsType<ConfirmShipmentResponse>(response);
        }

        /// <summary>
        /// Test DeactivateProductRequestproductsScopeIdProductIddeactivateCreate
        /// </summary>
        [Fact]
        public void DeactivateProductRequestproductsScopeIdProductIddeactivateCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //Object body = null;
            //var response = instance.DeactivateProductRequestproductsScopeIdProductIddeactivateCreate(accept, scopeId, productId, body);
            //Assert.IsType<Product>(response);
        }

        /// <summary>
        /// Test DeletePaymentMethodRequestcustomerScopeIdwalletDelete
        /// </summary>
        [Fact]
        public void DeletePaymentMethodRequestcustomerScopeIdwalletDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string paymentMethodId = null;
            //string paymentProviderName = null;
            //var response = instance.DeletePaymentMethodRequestcustomerScopeIdwalletDelete(accept, scopeId, customerId, paymentMethodId, paymentProviderName);
            //Assert.IsType<DeletePaymentMethodResponse>(response);
        }

        /// <summary>
        /// Test DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDelete
        /// </summary>
        [Fact]
        public void DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //var response = instance.DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDelete(accept, scopeId, id);
            //Assert.IsType<DeleteProductAuthorizationResponse>(response);
        }

        /// <summary>
        /// Test DocumentsRequestsolrAuthenticationTokenPost
        /// </summary>
        [Fact]
        public void DocumentsRequestsolrAuthenticationTokenPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string authenticationToken = null;
            //DocumentsRequest body = null;
            //var response = instance.DocumentsRequestsolrAuthenticationTokenPost(accept, authenticationToken, body);
            //Assert.IsType<HttpResult>(response);
        }

        /// <summary>
        /// Test FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPost
        /// </summary>
        [Fact]
        public void FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //FindProductAuthorizationsByStatusRequest body = null;
            //var response = instance.FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPost(accept, scopeId, body);
            //Assert.IsType<FindProductAuthorizationsByStatusResponse>(response);
        }

        /// <summary>
        /// Test FindStoresRequeststoresScopeIdfindPost
        /// </summary>
        [Fact]
        public void FindStoresRequeststoresScopeIdfindPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //FindStoresRequest body = null;
            //var response = instance.FindStoresRequeststoresScopeIdfindPost(accept, scopeId, body);
            //Assert.IsType<FindStoresQueryResult>(response);
        }

        /// <summary>
        /// Test GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGet
        /// </summary>
        [Fact]
        public void GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //var response = instance.GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGet(accept, scopeId, customerId);
            //Assert.IsType<GetB2CSiteProfileResponse>(response);
        }

        /// <summary>
        /// Test GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGet
        /// </summary>
        [Fact]
        public void GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string username = null;
            //var response = instance.GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGet(accept, username);
            //Assert.IsType<GetClinicInfoForCustomerResponse>(response);
        }

        /// <summary>
        /// Test GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGet
        /// </summary>
        [Fact]
        public void GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string customerId = null;
            //var response = instance.GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGet(accept, customerId);
            //Assert.IsType<GetClinicInfoForCustomerResponse>(response);
        }

        /// <summary>
        /// Test GetClinicInfoRequestclinicClinicIdGet
        /// </summary>
        [Fact]
        public void GetClinicInfoRequestclinicClinicIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string clinicId = null;
            //var response = instance.GetClinicInfoRequestclinicClinicIdGet(accept, clinicId);
            //Assert.IsType<ClinicInfo>(response);
        }

        /// <summary>
        /// Test GetCustomerWalletRequestcustomerScopeIdwalletGet
        /// </summary>
        [Fact]
        public void GetCustomerWalletRequestcustomerScopeIdwalletGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //string paymentProviderName = null;
            //var response = instance.GetCustomerWalletRequestcustomerScopeIdwalletGet(accept, scopeId, customerId, paymentProviderName);
            //Assert.IsType<GetCustomerWalletResponse>(response);
        }

        /// <summary>
        /// Test GetCustomersKpiRequestcustomerskpiScopeIdGet
        /// </summary>
        [Fact]
        public void GetCustomersKpiRequestcustomerskpiScopeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //var response = instance.GetCustomersKpiRequestcustomerskpiScopeIdGet(accept, scopeId);
            //Assert.IsType<GetAdminKpiResponse>(response);
        }

        /// <summary>
        /// Test GetFeatureFlagsRequestfeatureflagsScopeIdGet
        /// </summary>
        [Fact]
        public void GetFeatureFlagsRequestfeatureflagsScopeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //var response = instance.GetFeatureFlagsRequestfeatureflagsScopeIdGet(accept, scopeId);
            //Assert.IsType<GetFeatureFlagsResponse>(response);
        }

        /// <summary>
        /// Test GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGet
        /// </summary>
        [Fact]
        public void GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string paymentProviderName = null;
            //var response = instance.GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGet(accept, scopeId, paymentProviderName);
            //Assert.IsType<GetMonerisCaptureSettingsResponse>(response);
        }

        /// <summary>
        /// Test GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGet
        /// </summary>
        [Fact]
        public void GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //bool? includePendingOrderCount = null;
            //int? resultsPerPage = null;
            //int? startingPage = null;
            //var response = instance.GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGet(accept, scopeId, includePendingOrderCount, resultsPerPage, startingPage);
            //Assert.IsType<GetPendingApprovalAccountsResponse>(response);
        }

        /// <summary>
        /// Test GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGet
        /// </summary>
        [Fact]
        public void GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string username = null;
            //bool? includeProductDetails = null;
            //bool? includeVariants = null;
            //string cultureName = null;
            //var response = instance.GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGet(accept, scopeId, username, includeProductDetails, includeVariants, cultureName);
            //Assert.IsType<GetProductAuthorizationsResponse>(response);
        }

        /// <summary>
        /// Test GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGet
        /// </summary>
        [Fact]
        public void GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //bool? includeProductDetails = null;
            //bool? includeVariants = null;
            //string cultureName = null;
            //string phoneNumber = null;
            //var response = instance.GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGet(accept, scopeId, customerId, includeProductDetails, includeVariants, cultureName, phoneNumber);
            //Assert.IsType<GetProductAuthorizationsResponse>(response);
        }

        /// <summary>
        /// Test InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGet
        /// </summary>
        [Fact]
        public void InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string cultureName = null;
            //var response = instance.InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGet(accept, scopeId, cultureName);
            //Assert.IsType<Product>(response);
        }

        /// <summary>
        /// Test InviteNewCustomerRequestcustomerScopeIdinvitePost
        /// </summary>
        [Fact]
        public void InviteNewCustomerRequestcustomerScopeIdinvitePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //InviteNewCustomerRequest body = null;
            //instance.InviteNewCustomerRequestcustomerScopeIdinvitePost(accept, scopeId, body);
        }

        /// <summary>
        /// Test InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePost
        /// </summary>
        [Fact]
        public void InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string organizationId = null;
            //InviteNewOrganizationalCustomerRequest body = null;
            //instance.InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePost(accept, scopeId, organizationId, body);
        }

        /// <summary>
        /// Test InvoiceOrderToCDMVRequestordersinvoiceToCDMVPost
        /// </summary>
        [Fact]
        public void InvoiceOrderToCDMVRequestordersinvoiceToCDMVPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //InvoiceOrderToCDMVRequest body = null;
            //var response = instance.InvoiceOrderToCDMVRequestordersinvoiceToCDMVPost(accept, body);
            //Assert.IsType<InvoiceOrderToCDMVResponse>(response);
        }

        /// <summary>
        /// Test RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDelete
        /// </summary>
        [Fact]
        public void RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string productId = null;
            //var response = instance.RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDelete(accept, scopeId, productId);
            //Assert.IsType<Product>(response);
        }

        /// <summary>
        /// Test RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDelete
        /// </summary>
        [Fact]
        public void RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string username = null;
            //List<string> productIds = null;
            //var response = instance.RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDelete(accept, scopeId, username, productIds);
            //Assert.IsType<RemoveProductAuthorizationsResponse>(response);
        }

        /// <summary>
        /// Test RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDelete
        /// </summary>
        [Fact]
        public void RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string customerId = null;
            //List<string> productIds = null;
            //var response = instance.RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDelete(accept, scopeId, customerId, productIds);
            //Assert.IsType<RemoveProductAuthorizationsResponse>(response);
        }

        /// <summary>
        /// Test UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreate
        /// </summary>
        [Fact]
        public void UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //UpdatePendingApprovalAccountRequest body = null;
            //var response = instance.UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreate(accept, scopeId, id, body);
            //Assert.IsType<UpdatePendingApprovalAccountResponse>(response);
        }

        /// <summary>
        /// Test UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreate
        /// </summary>
        [Fact]
        public void UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string id = null;
            //UpdateProductAuthorizationRequest body = null;
            //var response = instance.UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreate(accept, scopeId, id, body);
            //Assert.IsType<ProductAuthorization>(response);
        }

        /// <summary>
        /// Test UpdateShipmentTrackingRequestordersupdateShipmentTrackingPost
        /// </summary>
        [Fact]
        public void UpdateShipmentTrackingRequestordersupdateShipmentTrackingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //UpdateShipmentTrackingRequest body = null;
            //var response = instance.UpdateShipmentTrackingRequestordersupdateShipmentTrackingPost(accept, body);
            //Assert.IsType<UpdateShipmentTrackingResponse>(response);
        }

        /// <summary>
        /// Test UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreate
        /// </summary>
        [Fact]
        public void UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string paymentMethodId = null;
            //UpdateWalletCreditCardRequest body = null;
            //var response = instance.UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreate(accept, scopeId, paymentMethodId, body);
            //Assert.IsType<UpdateWalletCreditCardResponse>(response);
        }

        /// <summary>
        /// Test UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreate
        /// </summary>
        [Fact]
        public void UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string scopeId = null;
            //string paymentMethodId = null;
            //UpdateWalletDefaultCreditCardRequest body = null;
            //var response = instance.UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreate(accept, scopeId, paymentMethodId, body);
            //Assert.IsType<UpdateWalletDefaultCreditCardResponse>(response);
        }
    }
}
