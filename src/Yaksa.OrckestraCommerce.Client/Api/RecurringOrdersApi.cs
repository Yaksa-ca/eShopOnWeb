/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecurringOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add or update a list of recurring order line items - {AddOrUpdateRecurringOrderLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Add or update a list of recurring order line items
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order line item</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ListOfRecurringOrderLineItems</returns>
        ListOfRecurringOrderLineItems AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreate(string accept, string scopeId, string customerId, AddOrUpdateRecurringOrderLineItemsRequest body = default(AddOrUpdateRecurringOrderLineItemsRequest));

        /// <summary>
        /// Add or update a list of recurring order line items - {AddOrUpdateRecurringOrderLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Add or update a list of recurring order line items
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order line item</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ListOfRecurringOrderLineItems</returns>
        ApiResponse<ListOfRecurringOrderLineItems> AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreateWithHttpInfo(string accept, string scopeId, string customerId, AddOrUpdateRecurringOrderLineItemsRequest body = default(AddOrUpdateRecurringOrderLineItemsRequest));
        /// <summary>
        /// Create a new recurring order program - {CreateRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Create a new recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RecurringOrderProgram</returns>
        RecurringOrderProgram CreateRecurringOrderProgramRequestprogramsPost(string accept, CreateRecurringOrderProgramRequest body = default(CreateRecurringOrderProgramRequest));

        /// <summary>
        /// Create a new recurring order program - {CreateRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Create a new recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RecurringOrderProgram</returns>
        ApiResponse<RecurringOrderProgram> CreateRecurringOrderProgramRequestprogramsPostWithHttpInfo(string accept, CreateRecurringOrderProgramRequest body = default(CreateRecurringOrderProgramRequest));
        /// <summary>
        /// Delete line items from a recurring cart - {DeleteRecurringCartLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Delete line items from a recurring cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="lineItemIds">The list of line item ids to delete</param>
        /// <returns></returns>
        void DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDelete(string accept, string scopeId, string customerId, List<string> lineItemIds);

        /// <summary>
        /// Delete line items from a recurring cart - {DeleteRecurringCartLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Delete line items from a recurring cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="lineItemIds">The list of line item ids to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDeleteWithHttpInfo(string accept, string scopeId, string customerId, List<string> lineItemIds);
        /// <summary>
        /// Delete a recurring order line item - {DeleteRecurringOrderLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Delete a recurring order line item
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items to delete</param>
        /// <param name="recurringOrderLineItemIds">The list of recurring order line item ids to delete</param>
        /// <returns></returns>
        void DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDelete(string accept, string scopeId, string customerId, List<string> recurringOrderLineItemIds);

        /// <summary>
        /// Delete a recurring order line item - {DeleteRecurringOrderLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Delete a recurring order line item
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items to delete</param>
        /// <param name="recurringOrderLineItemIds">The list of recurring order line item ids to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDeleteWithHttpInfo(string accept, string scopeId, string customerId, List<string> recurringOrderLineItemIds);
        /// <summary>
        /// Delete a new recurring order program - {DeleteRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Delete a new recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to delete</param>
        /// <returns></returns>
        void DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDelete(string accept, string recurringOrderProgramName);

        /// <summary>
        /// Delete a new recurring order program - {DeleteRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Delete a new recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDeleteWithHttpInfo(string accept, string recurringOrderProgramName);
        /// <summary>
        /// Get a recurring order line item - {GetRecurringOrderLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Get a recurring order line item
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItem to get</param>
        /// <param name="recurringOrderLineItemId">The recurring order line item id</param>
        /// <returns>RecurringOrderLineItem</returns>
        RecurringOrderLineItem GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGet(string accept, string scopeId, string recurringOrderLineItemId);

        /// <summary>
        /// Get a recurring order line item - {GetRecurringOrderLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Get a recurring order line item
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItem to get</param>
        /// <param name="recurringOrderLineItemId">The recurring order line item id</param>
        /// <returns>ApiResponse of RecurringOrderLineItem</returns>
        ApiResponse<RecurringOrderLineItem> GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGetWithHttpInfo(string accept, string scopeId, string recurringOrderLineItemId);
        /// <summary>
        /// Get the recurring order line items for a customer - {GetRecurringOrderLineItemsForCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Get the recurring order line items for a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to get</param>
        /// <param name="customerId">The customer id of the RecurringOrderLineItems to get</param>
        /// <returns>ListOfRecurringOrderLineItems</returns>
        ListOfRecurringOrderLineItems GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGet(string accept, string scopeId, string customerId);

        /// <summary>
        /// Get the recurring order line items for a customer - {GetRecurringOrderLineItemsForCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Get the recurring order line items for a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to get</param>
        /// <param name="customerId">The customer id of the RecurringOrderLineItems to get</param>
        /// <returns>ApiResponse of ListOfRecurringOrderLineItems</returns>
        ApiResponse<ListOfRecurringOrderLineItems> GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGetWithHttpInfo(string accept, string scopeId, string customerId);
        /// <summary>
        /// Get a recurring order program - {GetRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Get a recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to get</param>
        /// <returns>RecurringOrderProgram</returns>
        RecurringOrderProgram GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGet(string accept, string recurringOrderProgramName);

        /// <summary>
        /// Get a recurring order program - {GetRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Get a recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to get</param>
        /// <returns>ApiResponse of RecurringOrderProgram</returns>
        ApiResponse<RecurringOrderProgram> GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGetWithHttpInfo(string accept, string recurringOrderProgramName);
        /// <summary>
        /// Get the recurring order programs associated to a scope - {GetRecurringOrderProgramsByScopeIdRequest}
        /// </summary>
        /// <remarks>
        /// Get the recurring order programs associated to a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order programs to get</param>
        /// <returns>ListOfRecurringOrderPrograms</returns>
        ListOfRecurringOrderPrograms GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGet(string accept, string scopeId);

        /// <summary>
        /// Get the recurring order programs associated to a scope - {GetRecurringOrderProgramsByScopeIdRequest}
        /// </summary>
        /// <remarks>
        /// Get the recurring order programs associated to a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order programs to get</param>
        /// <returns>ApiResponse of ListOfRecurringOrderPrograms</returns>
        ApiResponse<ListOfRecurringOrderPrograms> GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGetWithHttpInfo(string accept, string scopeId);
        /// <summary>
        /// Reschedule the recurring order line items present in a recurring cart - {RescheduleRecurringCartRequest}
        /// </summary>
        /// <remarks>
        /// Reschedule the recurring order line items present in a recurring cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope</param>
        /// <param name="cartName">The name of the cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ListOfRecurringOrderLineItems</returns>
        ListOfRecurringOrderLineItems RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreate(string accept, string scopeId, string cartName, RescheduleRecurringCartRequest body = default(RescheduleRecurringCartRequest));

        /// <summary>
        /// Reschedule the recurring order line items present in a recurring cart - {RescheduleRecurringCartRequest}
        /// </summary>
        /// <remarks>
        /// Reschedule the recurring order line items present in a recurring cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope</param>
        /// <param name="cartName">The name of the cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ListOfRecurringOrderLineItems</returns>
        ApiResponse<ListOfRecurringOrderLineItems> RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreateWithHttpInfo(string accept, string scopeId, string cartName, RescheduleRecurringCartRequest body = default(RescheduleRecurringCartRequest));
        /// <summary>
        /// Update a recurring order program - {UpdateRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Update a recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The name and unique identifier of the recurring order program</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RecurringOrderProgram</returns>
        RecurringOrderProgram UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreate(string accept, string recurringOrderProgramName, UpdateRecurringOrderProgramRequest body = default(UpdateRecurringOrderProgramRequest));

        /// <summary>
        /// Update a recurring order program - {UpdateRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Update a recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The name and unique identifier of the recurring order program</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RecurringOrderProgram</returns>
        ApiResponse<RecurringOrderProgram> UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreateWithHttpInfo(string accept, string recurringOrderProgramName, UpdateRecurringOrderProgramRequest body = default(UpdateRecurringOrderProgramRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecurringOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add or update a list of recurring order line items - {AddOrUpdateRecurringOrderLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Add or update a list of recurring order line items
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order line item</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOfRecurringOrderLineItems</returns>
        System.Threading.Tasks.Task<ListOfRecurringOrderLineItems> AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreateAsync(string accept, string scopeId, string customerId, AddOrUpdateRecurringOrderLineItemsRequest body = default(AddOrUpdateRecurringOrderLineItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or update a list of recurring order line items - {AddOrUpdateRecurringOrderLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Add or update a list of recurring order line items
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order line item</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOfRecurringOrderLineItems)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOfRecurringOrderLineItems>> AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, AddOrUpdateRecurringOrderLineItemsRequest body = default(AddOrUpdateRecurringOrderLineItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new recurring order program - {CreateRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Create a new recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringOrderProgram</returns>
        System.Threading.Tasks.Task<RecurringOrderProgram> CreateRecurringOrderProgramRequestprogramsPostAsync(string accept, CreateRecurringOrderProgramRequest body = default(CreateRecurringOrderProgramRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new recurring order program - {CreateRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Create a new recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringOrderProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringOrderProgram>> CreateRecurringOrderProgramRequestprogramsPostWithHttpInfoAsync(string accept, CreateRecurringOrderProgramRequest body = default(CreateRecurringOrderProgramRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete line items from a recurring cart - {DeleteRecurringCartLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Delete line items from a recurring cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="lineItemIds">The list of line item ids to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDeleteAsync(string accept, string scopeId, string customerId, List<string> lineItemIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete line items from a recurring cart - {DeleteRecurringCartLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Delete line items from a recurring cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="lineItemIds">The list of line item ids to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, List<string> lineItemIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a recurring order line item - {DeleteRecurringOrderLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Delete a recurring order line item
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items to delete</param>
        /// <param name="recurringOrderLineItemIds">The list of recurring order line item ids to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDeleteAsync(string accept, string scopeId, string customerId, List<string> recurringOrderLineItemIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a recurring order line item - {DeleteRecurringOrderLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Delete a recurring order line item
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items to delete</param>
        /// <param name="recurringOrderLineItemIds">The list of recurring order line item ids to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, List<string> recurringOrderLineItemIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a new recurring order program - {DeleteRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Delete a new recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDeleteAsync(string accept, string recurringOrderProgramName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a new recurring order program - {DeleteRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Delete a new recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDeleteWithHttpInfoAsync(string accept, string recurringOrderProgramName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a recurring order line item - {GetRecurringOrderLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Get a recurring order line item
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItem to get</param>
        /// <param name="recurringOrderLineItemId">The recurring order line item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringOrderLineItem</returns>
        System.Threading.Tasks.Task<RecurringOrderLineItem> GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGetAsync(string accept, string scopeId, string recurringOrderLineItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a recurring order line item - {GetRecurringOrderLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Get a recurring order line item
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItem to get</param>
        /// <param name="recurringOrderLineItemId">The recurring order line item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringOrderLineItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringOrderLineItem>> GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGetWithHttpInfoAsync(string accept, string scopeId, string recurringOrderLineItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the recurring order line items for a customer - {GetRecurringOrderLineItemsForCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Get the recurring order line items for a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to get</param>
        /// <param name="customerId">The customer id of the RecurringOrderLineItems to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOfRecurringOrderLineItems</returns>
        System.Threading.Tasks.Task<ListOfRecurringOrderLineItems> GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGetAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the recurring order line items for a customer - {GetRecurringOrderLineItemsForCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Get the recurring order line items for a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to get</param>
        /// <param name="customerId">The customer id of the RecurringOrderLineItems to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOfRecurringOrderLineItems)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOfRecurringOrderLineItems>> GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a recurring order program - {GetRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Get a recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringOrderProgram</returns>
        System.Threading.Tasks.Task<RecurringOrderProgram> GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGetAsync(string accept, string recurringOrderProgramName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a recurring order program - {GetRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Get a recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringOrderProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringOrderProgram>> GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGetWithHttpInfoAsync(string accept, string recurringOrderProgramName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the recurring order programs associated to a scope - {GetRecurringOrderProgramsByScopeIdRequest}
        /// </summary>
        /// <remarks>
        /// Get the recurring order programs associated to a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order programs to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOfRecurringOrderPrograms</returns>
        System.Threading.Tasks.Task<ListOfRecurringOrderPrograms> GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the recurring order programs associated to a scope - {GetRecurringOrderProgramsByScopeIdRequest}
        /// </summary>
        /// <remarks>
        /// Get the recurring order programs associated to a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order programs to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOfRecurringOrderPrograms)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOfRecurringOrderPrograms>> GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reschedule the recurring order line items present in a recurring cart - {RescheduleRecurringCartRequest}
        /// </summary>
        /// <remarks>
        /// Reschedule the recurring order line items present in a recurring cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope</param>
        /// <param name="cartName">The name of the cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOfRecurringOrderLineItems</returns>
        System.Threading.Tasks.Task<ListOfRecurringOrderLineItems> RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreateAsync(string accept, string scopeId, string cartName, RescheduleRecurringCartRequest body = default(RescheduleRecurringCartRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reschedule the recurring order line items present in a recurring cart - {RescheduleRecurringCartRequest}
        /// </summary>
        /// <remarks>
        /// Reschedule the recurring order line items present in a recurring cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope</param>
        /// <param name="cartName">The name of the cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOfRecurringOrderLineItems)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOfRecurringOrderLineItems>> RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreateWithHttpInfoAsync(string accept, string scopeId, string cartName, RescheduleRecurringCartRequest body = default(RescheduleRecurringCartRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a recurring order program - {UpdateRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Update a recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The name and unique identifier of the recurring order program</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringOrderProgram</returns>
        System.Threading.Tasks.Task<RecurringOrderProgram> UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreateAsync(string accept, string recurringOrderProgramName, UpdateRecurringOrderProgramRequest body = default(UpdateRecurringOrderProgramRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a recurring order program - {UpdateRecurringOrderProgramRequest}
        /// </summary>
        /// <remarks>
        /// Update a recurring order program
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The name and unique identifier of the recurring order program</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringOrderProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringOrderProgram>> UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreateWithHttpInfoAsync(string accept, string recurringOrderProgramName, UpdateRecurringOrderProgramRequest body = default(UpdateRecurringOrderProgramRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecurringOrdersApi : IRecurringOrdersApiSync, IRecurringOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecurringOrdersApi : IRecurringOrdersApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringOrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecurringOrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringOrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecurringOrdersApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringOrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecurringOrdersApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringOrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecurringOrdersApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add or update a list of recurring order line items - {AddOrUpdateRecurringOrderLineItemsRequest} Add or update a list of recurring order line items
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order line item</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ListOfRecurringOrderLineItems</returns>
        public ListOfRecurringOrderLineItems AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreate(string accept, string scopeId, string customerId, AddOrUpdateRecurringOrderLineItemsRequest body = default(AddOrUpdateRecurringOrderLineItemsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderLineItems> localVarResponse = AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreateWithHttpInfo(accept, scopeId, customerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update a list of recurring order line items - {AddOrUpdateRecurringOrderLineItemsRequest} Add or update a list of recurring order line items
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order line item</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ListOfRecurringOrderLineItems</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderLineItems> AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreateWithHttpInfo(string accept, string scopeId, string customerId, AddOrUpdateRecurringOrderLineItemsRequest body = default(AddOrUpdateRecurringOrderLineItemsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling RecurringOrdersApi->AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ListOfRecurringOrderLineItems>("/recurringOrders/{ScopeId}/lineItems/forCustomer/{CustomerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update a list of recurring order line items - {AddOrUpdateRecurringOrderLineItemsRequest} Add or update a list of recurring order line items
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order line item</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOfRecurringOrderLineItems</returns>
        public async System.Threading.Tasks.Task<ListOfRecurringOrderLineItems> AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreateAsync(string accept, string scopeId, string customerId, AddOrUpdateRecurringOrderLineItemsRequest body = default(AddOrUpdateRecurringOrderLineItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderLineItems> localVarResponse = await AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreateWithHttpInfoAsync(accept, scopeId, customerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update a list of recurring order line items - {AddOrUpdateRecurringOrderLineItemsRequest} Add or update a list of recurring order line items
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order line item</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOfRecurringOrderLineItems)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderLineItems>> AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, AddOrUpdateRecurringOrderLineItemsRequest body = default(AddOrUpdateRecurringOrderLineItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling RecurringOrdersApi->AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ListOfRecurringOrderLineItems>("/recurringOrders/{ScopeId}/lineItems/forCustomer/{CustomerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateRecurringOrderLineItemsRequestScopeIdlineItemsforCustomerCustomerIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new recurring order program - {CreateRecurringOrderProgramRequest} Create a new recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RecurringOrderProgram</returns>
        public RecurringOrderProgram CreateRecurringOrderProgramRequestprogramsPost(string accept, CreateRecurringOrderProgramRequest body = default(CreateRecurringOrderProgramRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderProgram> localVarResponse = CreateRecurringOrderProgramRequestprogramsPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new recurring order program - {CreateRecurringOrderProgramRequest} Create a new recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RecurringOrderProgram</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderProgram> CreateRecurringOrderProgramRequestprogramsPostWithHttpInfo(string accept, CreateRecurringOrderProgramRequest body = default(CreateRecurringOrderProgramRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->CreateRecurringOrderProgramRequestprogramsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RecurringOrderProgram>("/recurringOrders/programs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecurringOrderProgramRequestprogramsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new recurring order program - {CreateRecurringOrderProgramRequest} Create a new recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringOrderProgram</returns>
        public async System.Threading.Tasks.Task<RecurringOrderProgram> CreateRecurringOrderProgramRequestprogramsPostAsync(string accept, CreateRecurringOrderProgramRequest body = default(CreateRecurringOrderProgramRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderProgram> localVarResponse = await CreateRecurringOrderProgramRequestprogramsPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new recurring order program - {CreateRecurringOrderProgramRequest} Create a new recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringOrderProgram)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderProgram>> CreateRecurringOrderProgramRequestprogramsPostWithHttpInfoAsync(string accept, CreateRecurringOrderProgramRequest body = default(CreateRecurringOrderProgramRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->CreateRecurringOrderProgramRequestprogramsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RecurringOrderProgram>("/recurringOrders/programs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecurringOrderProgramRequestprogramsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete line items from a recurring cart - {DeleteRecurringCartLineItemsRequest} Delete line items from a recurring cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="lineItemIds">The list of line item ids to delete</param>
        /// <returns></returns>
        public void DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDelete(string accept, string scopeId, string customerId, List<string> lineItemIds)
        {
            DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDeleteWithHttpInfo(accept, scopeId, customerId, lineItemIds);
        }

        /// <summary>
        /// Delete line items from a recurring cart - {DeleteRecurringCartLineItemsRequest} Delete line items from a recurring cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="lineItemIds">The list of line item ids to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDeleteWithHttpInfo(string accept, string scopeId, string customerId, List<string> lineItemIds)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling RecurringOrdersApi->DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDelete");

            // verify the required parameter 'lineItemIds' is set
            if (lineItemIds == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lineItemIds' when calling RecurringOrdersApi->DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "LineItemIds", lineItemIds));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/recurringOrders/{ScopeId}/carts/{CustomerId}/lineItems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete line items from a recurring cart - {DeleteRecurringCartLineItemsRequest} Delete line items from a recurring cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="lineItemIds">The list of line item ids to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDeleteAsync(string accept, string scopeId, string customerId, List<string> lineItemIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDeleteWithHttpInfoAsync(accept, scopeId, customerId, lineItemIds, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete line items from a recurring cart - {DeleteRecurringCartLineItemsRequest} Delete line items from a recurring cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items</param>
        /// <param name="lineItemIds">The list of line item ids to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, List<string> lineItemIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling RecurringOrdersApi->DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDelete");

            // verify the required parameter 'lineItemIds' is set
            if (lineItemIds == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lineItemIds' when calling RecurringOrdersApi->DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "LineItemIds", lineItemIds));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/recurringOrders/{ScopeId}/carts/{CustomerId}/lineItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecurringCartLineItemsRequestScopeIdcartsCustomerIdlineItemsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a recurring order line item - {DeleteRecurringOrderLineItemsRequest} Delete a recurring order line item
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items to delete</param>
        /// <param name="recurringOrderLineItemIds">The list of recurring order line item ids to delete</param>
        /// <returns></returns>
        public void DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDelete(string accept, string scopeId, string customerId, List<string> recurringOrderLineItemIds)
        {
            DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDeleteWithHttpInfo(accept, scopeId, customerId, recurringOrderLineItemIds);
        }

        /// <summary>
        /// Delete a recurring order line item - {DeleteRecurringOrderLineItemsRequest} Delete a recurring order line item
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items to delete</param>
        /// <param name="recurringOrderLineItemIds">The list of recurring order line item ids to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDeleteWithHttpInfo(string accept, string scopeId, string customerId, List<string> recurringOrderLineItemIds)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling RecurringOrdersApi->DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDelete");

            // verify the required parameter 'recurringOrderLineItemIds' is set
            if (recurringOrderLineItemIds == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'recurringOrderLineItemIds' when calling RecurringOrdersApi->DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "RecurringOrderLineItemIds", recurringOrderLineItemIds));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/recurringOrders/{ScopeId}/{CustomerId}/lineItems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a recurring order line item - {DeleteRecurringOrderLineItemsRequest} Delete a recurring order line item
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items to delete</param>
        /// <param name="recurringOrderLineItemIds">The list of recurring order line item ids to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDeleteAsync(string accept, string scopeId, string customerId, List<string> recurringOrderLineItemIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDeleteWithHttpInfoAsync(accept, scopeId, customerId, recurringOrderLineItemIds, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a recurring order line item - {DeleteRecurringOrderLineItemsRequest} Delete a recurring order line item
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to delete</param>
        /// <param name="customerId">The customer id of the recurring order line items to delete</param>
        /// <param name="recurringOrderLineItemIds">The list of recurring order line item ids to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, List<string> recurringOrderLineItemIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling RecurringOrdersApi->DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDelete");

            // verify the required parameter 'recurringOrderLineItemIds' is set
            if (recurringOrderLineItemIds == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'recurringOrderLineItemIds' when calling RecurringOrdersApi->DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "RecurringOrderLineItemIds", recurringOrderLineItemIds));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/recurringOrders/{ScopeId}/{CustomerId}/lineItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecurringOrderLineItemsRequestScopeIdCustomerIdlineItemsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a new recurring order program - {DeleteRecurringOrderProgramRequest} Delete a new recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to delete</param>
        /// <returns></returns>
        public void DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDelete(string accept, string recurringOrderProgramName)
        {
            DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDeleteWithHttpInfo(accept, recurringOrderProgramName);
        }

        /// <summary>
        /// Delete a new recurring order program - {DeleteRecurringOrderProgramRequest} Delete a new recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDeleteWithHttpInfo(string accept, string recurringOrderProgramName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDelete");

            // verify the required parameter 'recurringOrderProgramName' is set
            if (recurringOrderProgramName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'recurringOrderProgramName' when calling RecurringOrdersApi->DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("RecurringOrderProgramName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(recurringOrderProgramName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/recurringOrders/programs/{RecurringOrderProgramName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a new recurring order program - {DeleteRecurringOrderProgramRequest} Delete a new recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDeleteAsync(string accept, string recurringOrderProgramName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDeleteWithHttpInfoAsync(accept, recurringOrderProgramName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a new recurring order program - {DeleteRecurringOrderProgramRequest} Delete a new recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDeleteWithHttpInfoAsync(string accept, string recurringOrderProgramName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDelete");

            // verify the required parameter 'recurringOrderProgramName' is set
            if (recurringOrderProgramName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'recurringOrderProgramName' when calling RecurringOrdersApi->DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("RecurringOrderProgramName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(recurringOrderProgramName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/recurringOrders/programs/{RecurringOrderProgramName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecurringOrderProgramRequestprogramsRecurringOrderProgramNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a recurring order line item - {GetRecurringOrderLineItemRequest} Get a recurring order line item
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItem to get</param>
        /// <param name="recurringOrderLineItemId">The recurring order line item id</param>
        /// <returns>RecurringOrderLineItem</returns>
        public RecurringOrderLineItem GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGet(string accept, string scopeId, string recurringOrderLineItemId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderLineItem> localVarResponse = GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGetWithHttpInfo(accept, scopeId, recurringOrderLineItemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a recurring order line item - {GetRecurringOrderLineItemRequest} Get a recurring order line item
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItem to get</param>
        /// <param name="recurringOrderLineItemId">The recurring order line item id</param>
        /// <returns>ApiResponse of RecurringOrderLineItem</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderLineItem> GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGetWithHttpInfo(string accept, string scopeId, string recurringOrderLineItemId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGet");

            // verify the required parameter 'recurringOrderLineItemId' is set
            if (recurringOrderLineItemId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'recurringOrderLineItemId' when calling RecurringOrdersApi->GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("RecurringOrderLineItemId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(recurringOrderLineItemId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<RecurringOrderLineItem>("/recurringOrders/{ScopeId}/lineItems/{RecurringOrderLineItemId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a recurring order line item - {GetRecurringOrderLineItemRequest} Get a recurring order line item
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItem to get</param>
        /// <param name="recurringOrderLineItemId">The recurring order line item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringOrderLineItem</returns>
        public async System.Threading.Tasks.Task<RecurringOrderLineItem> GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGetAsync(string accept, string scopeId, string recurringOrderLineItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderLineItem> localVarResponse = await GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGetWithHttpInfoAsync(accept, scopeId, recurringOrderLineItemId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a recurring order line item - {GetRecurringOrderLineItemRequest} Get a recurring order line item
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItem to get</param>
        /// <param name="recurringOrderLineItemId">The recurring order line item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringOrderLineItem)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderLineItem>> GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGetWithHttpInfoAsync(string accept, string scopeId, string recurringOrderLineItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGet");

            // verify the required parameter 'recurringOrderLineItemId' is set
            if (recurringOrderLineItemId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'recurringOrderLineItemId' when calling RecurringOrdersApi->GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("RecurringOrderLineItemId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(recurringOrderLineItemId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RecurringOrderLineItem>("/recurringOrders/{ScopeId}/lineItems/{RecurringOrderLineItemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecurringOrderLineItemRequestScopeIdlineItemsRecurringOrderLineItemIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the recurring order line items for a customer - {GetRecurringOrderLineItemsForCustomerRequest} Get the recurring order line items for a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to get</param>
        /// <param name="customerId">The customer id of the RecurringOrderLineItems to get</param>
        /// <returns>ListOfRecurringOrderLineItems</returns>
        public ListOfRecurringOrderLineItems GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGet(string accept, string scopeId, string customerId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderLineItems> localVarResponse = GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGetWithHttpInfo(accept, scopeId, customerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the recurring order line items for a customer - {GetRecurringOrderLineItemsForCustomerRequest} Get the recurring order line items for a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to get</param>
        /// <param name="customerId">The customer id of the RecurringOrderLineItems to get</param>
        /// <returns>ApiResponse of ListOfRecurringOrderLineItems</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderLineItems> GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGetWithHttpInfo(string accept, string scopeId, string customerId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling RecurringOrdersApi->GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListOfRecurringOrderLineItems>("/recurringOrders/{ScopeId}/lineItems/byCustomer/{CustomerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the recurring order line items for a customer - {GetRecurringOrderLineItemsForCustomerRequest} Get the recurring order line items for a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to get</param>
        /// <param name="customerId">The customer id of the RecurringOrderLineItems to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOfRecurringOrderLineItems</returns>
        public async System.Threading.Tasks.Task<ListOfRecurringOrderLineItems> GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGetAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderLineItems> localVarResponse = await GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGetWithHttpInfoAsync(accept, scopeId, customerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the recurring order line items for a customer - {GetRecurringOrderLineItemsForCustomerRequest} Get the recurring order line items for a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the RecurringOrderLineItems to get</param>
        /// <param name="customerId">The customer id of the RecurringOrderLineItems to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOfRecurringOrderLineItems)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderLineItems>> GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling RecurringOrdersApi->GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListOfRecurringOrderLineItems>("/recurringOrders/{ScopeId}/lineItems/byCustomer/{CustomerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecurringOrderLineItemsForCustomerRequestScopeIdlineItemsbyCustomerCustomerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a recurring order program - {GetRecurringOrderProgramRequest} Get a recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to get</param>
        /// <returns>RecurringOrderProgram</returns>
        public RecurringOrderProgram GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGet(string accept, string recurringOrderProgramName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderProgram> localVarResponse = GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGetWithHttpInfo(accept, recurringOrderProgramName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a recurring order program - {GetRecurringOrderProgramRequest} Get a recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to get</param>
        /// <returns>ApiResponse of RecurringOrderProgram</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderProgram> GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGetWithHttpInfo(string accept, string recurringOrderProgramName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGet");

            // verify the required parameter 'recurringOrderProgramName' is set
            if (recurringOrderProgramName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'recurringOrderProgramName' when calling RecurringOrdersApi->GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("RecurringOrderProgramName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(recurringOrderProgramName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<RecurringOrderProgram>("/recurringOrders/programs/{RecurringOrderProgramName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a recurring order program - {GetRecurringOrderProgramRequest} Get a recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringOrderProgram</returns>
        public async System.Threading.Tasks.Task<RecurringOrderProgram> GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGetAsync(string accept, string recurringOrderProgramName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderProgram> localVarResponse = await GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGetWithHttpInfoAsync(accept, recurringOrderProgramName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a recurring order program - {GetRecurringOrderProgramRequest} Get a recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The unique identifier of the recurring order program to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringOrderProgram)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderProgram>> GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGetWithHttpInfoAsync(string accept, string recurringOrderProgramName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGet");

            // verify the required parameter 'recurringOrderProgramName' is set
            if (recurringOrderProgramName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'recurringOrderProgramName' when calling RecurringOrdersApi->GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("RecurringOrderProgramName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(recurringOrderProgramName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RecurringOrderProgram>("/recurringOrders/programs/{RecurringOrderProgramName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecurringOrderProgramRequestprogramsRecurringOrderProgramNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the recurring order programs associated to a scope - {GetRecurringOrderProgramsByScopeIdRequest} Get the recurring order programs associated to a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order programs to get</param>
        /// <returns>ListOfRecurringOrderPrograms</returns>
        public ListOfRecurringOrderPrograms GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGet(string accept, string scopeId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderPrograms> localVarResponse = GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGetWithHttpInfo(accept, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the recurring order programs associated to a scope - {GetRecurringOrderProgramsByScopeIdRequest} Get the recurring order programs associated to a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order programs to get</param>
        /// <returns>ApiResponse of ListOfRecurringOrderPrograms</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderPrograms> GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGetWithHttpInfo(string accept, string scopeId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListOfRecurringOrderPrograms>("/recurringOrders/programs/byScope/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the recurring order programs associated to a scope - {GetRecurringOrderProgramsByScopeIdRequest} Get the recurring order programs associated to a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order programs to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOfRecurringOrderPrograms</returns>
        public async System.Threading.Tasks.Task<ListOfRecurringOrderPrograms> GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderPrograms> localVarResponse = await GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGetWithHttpInfoAsync(accept, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the recurring order programs associated to a scope - {GetRecurringOrderProgramsByScopeIdRequest} Get the recurring order programs associated to a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope of the recurring order programs to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOfRecurringOrderPrograms)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderPrograms>> GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListOfRecurringOrderPrograms>("/recurringOrders/programs/byScope/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecurringOrderProgramsByScopeIdRequestprogramsbyScopeScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reschedule the recurring order line items present in a recurring cart - {RescheduleRecurringCartRequest} Reschedule the recurring order line items present in a recurring cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope</param>
        /// <param name="cartName">The name of the cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ListOfRecurringOrderLineItems</returns>
        public ListOfRecurringOrderLineItems RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreate(string accept, string scopeId, string cartName, RescheduleRecurringCartRequest body = default(RescheduleRecurringCartRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderLineItems> localVarResponse = RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreateWithHttpInfo(accept, scopeId, cartName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reschedule the recurring order line items present in a recurring cart - {RescheduleRecurringCartRequest} Reschedule the recurring order line items present in a recurring cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope</param>
        /// <param name="cartName">The name of the cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ListOfRecurringOrderLineItems</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderLineItems> RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreateWithHttpInfo(string accept, string scopeId, string cartName, RescheduleRecurringCartRequest body = default(RescheduleRecurringCartRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling RecurringOrdersApi->RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ListOfRecurringOrderLineItems>("/recurringOrders/{ScopeId}/cart/{CartName}/reschedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reschedule the recurring order line items present in a recurring cart - {RescheduleRecurringCartRequest} Reschedule the recurring order line items present in a recurring cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope</param>
        /// <param name="cartName">The name of the cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOfRecurringOrderLineItems</returns>
        public async System.Threading.Tasks.Task<ListOfRecurringOrderLineItems> RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreateAsync(string accept, string scopeId, string cartName, RescheduleRecurringCartRequest body = default(RescheduleRecurringCartRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderLineItems> localVarResponse = await RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreateWithHttpInfoAsync(accept, scopeId, cartName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reschedule the recurring order line items present in a recurring cart - {RescheduleRecurringCartRequest} Reschedule the recurring order line items present in a recurring cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope</param>
        /// <param name="cartName">The name of the cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOfRecurringOrderLineItems)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ListOfRecurringOrderLineItems>> RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreateWithHttpInfoAsync(string accept, string scopeId, string cartName, RescheduleRecurringCartRequest body = default(RescheduleRecurringCartRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RecurringOrdersApi->RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling RecurringOrdersApi->RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ListOfRecurringOrderLineItems>("/recurringOrders/{ScopeId}/cart/{CartName}/reschedule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RescheduleRecurringCartRequestScopeIdcartCartNamerescheduleCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a recurring order program - {UpdateRecurringOrderProgramRequest} Update a recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The name and unique identifier of the recurring order program</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RecurringOrderProgram</returns>
        public RecurringOrderProgram UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreate(string accept, string recurringOrderProgramName, UpdateRecurringOrderProgramRequest body = default(UpdateRecurringOrderProgramRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderProgram> localVarResponse = UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreateWithHttpInfo(accept, recurringOrderProgramName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a recurring order program - {UpdateRecurringOrderProgramRequest} Update a recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The name and unique identifier of the recurring order program</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RecurringOrderProgram</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderProgram> UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreateWithHttpInfo(string accept, string recurringOrderProgramName, UpdateRecurringOrderProgramRequest body = default(UpdateRecurringOrderProgramRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreate");

            // verify the required parameter 'recurringOrderProgramName' is set
            if (recurringOrderProgramName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'recurringOrderProgramName' when calling RecurringOrdersApi->UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("RecurringOrderProgramName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(recurringOrderProgramName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<RecurringOrderProgram>("/recurringOrders/programs/{RecurringOrderProgramName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a recurring order program - {UpdateRecurringOrderProgramRequest} Update a recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The name and unique identifier of the recurring order program</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringOrderProgram</returns>
        public async System.Threading.Tasks.Task<RecurringOrderProgram> UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreateAsync(string accept, string recurringOrderProgramName, UpdateRecurringOrderProgramRequest body = default(UpdateRecurringOrderProgramRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderProgram> localVarResponse = await UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreateWithHttpInfoAsync(accept, recurringOrderProgramName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a recurring order program - {UpdateRecurringOrderProgramRequest} Update a recurring order program
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="recurringOrderProgramName">The name and unique identifier of the recurring order program</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringOrderProgram)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RecurringOrderProgram>> UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreateWithHttpInfoAsync(string accept, string recurringOrderProgramName, UpdateRecurringOrderProgramRequest body = default(UpdateRecurringOrderProgramRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RecurringOrdersApi->UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreate");

            // verify the required parameter 'recurringOrderProgramName' is set
            if (recurringOrderProgramName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'recurringOrderProgramName' when calling RecurringOrdersApi->UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("RecurringOrderProgramName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(recurringOrderProgramName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<RecurringOrderProgram>("/recurringOrders/programs/{RecurringOrderProgramName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecurringOrderProgramRequestprogramsRecurringOrderProgramNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
