/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProvidersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create or update a fulfillment provider - {CreateOrUpdateFulfillmentProviderRequest}
        /// </summary>
        /// <remarks>
        /// Create or update a fulfillment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentProviderInfo</returns>
        FulfillmentProviderInfo CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreate(string accept, string scopeId, CreateOrUpdateFulfillmentProviderRequest body = default(CreateOrUpdateFulfillmentProviderRequest));

        /// <summary>
        /// Create or update a fulfillment provider - {CreateOrUpdateFulfillmentProviderRequest}
        /// </summary>
        /// <remarks>
        /// Create or update a fulfillment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentProviderInfo</returns>
        ApiResponse<FulfillmentProviderInfo> CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreateWithHttpInfo(string accept, string scopeId, CreateOrUpdateFulfillmentProviderRequest body = default(CreateOrUpdateFulfillmentProviderRequest));
        /// <summary>
        /// Delete a fulfillment provider - {DeleteFulfillmentProviderRequest}
        /// </summary>
        /// <remarks>
        /// Delete a fulfillment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier for the EntityTypeDefinition</param>
        /// <returns></returns>
        void DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDelete(string accept, string scopeId, string id);

        /// <summary>
        /// Delete a fulfillment provider - {DeleteFulfillmentProviderRequest}
        /// </summary>
        /// <remarks>
        /// Delete a fulfillment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier for the EntityTypeDefinition</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDeleteWithHttpInfo(string accept, string scopeId, string id);
        /// <summary>
        /// Get the carrier providers information - {GetCarrierProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Get the carrier providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <returns>FulfillmentCarrierProviderInfos</returns>
        FulfillmentCarrierProviderInfos GetCarrierProvidersRequestScopeIdcarrierGet(string accept, string scopeId, bool? includeParentScopes = default(bool?));

        /// <summary>
        /// Get the carrier providers information - {GetCarrierProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Get the carrier providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <returns>ApiResponse of FulfillmentCarrierProviderInfos</returns>
        ApiResponse<FulfillmentCarrierProviderInfos> GetCarrierProvidersRequestScopeIdcarrierGetWithHttpInfo(string accept, string scopeId, bool? includeParentScopes = default(bool?));
        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersMetadataRequest}
        /// </summary>
        /// <remarks>
        /// Get the fulfillment providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>FulfillmentProvidersMetadata</returns>
        FulfillmentProvidersMetadata GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGet(string accept);

        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersMetadataRequest}
        /// </summary>
        /// <remarks>
        /// Get the fulfillment providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of FulfillmentProvidersMetadata</returns>
        ApiResponse<FulfillmentProvidersMetadata> GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGetWithHttpInfo(string accept);
        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Get the fulfillment providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <returns>FulfillmentProviderInfos</returns>
        FulfillmentProviderInfos GetFulfillmentProvidersRequestScopeIdfulfillmentGet(string accept, string scopeId, bool? includeParentScopes = default(bool?));

        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Get the fulfillment providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <returns>ApiResponse of FulfillmentProviderInfos</returns>
        ApiResponse<FulfillmentProviderInfos> GetFulfillmentProvidersRequestScopeIdfulfillmentGetWithHttpInfo(string accept, string scopeId, bool? includeParentScopes = default(bool?));
        /// <summary>
        /// Get the payment providers information - {GetPaymentProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Get the payment providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>PaymentProviderInfos</returns>
        PaymentProviderInfos GetPaymentProvidersRequestScopeIdpaymentGet(string accept, string scopeId);

        /// <summary>
        /// Get the payment providers information - {GetPaymentProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Get the payment providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>ApiResponse of PaymentProviderInfos</returns>
        ApiResponse<PaymentProviderInfos> GetPaymentProvidersRequestScopeIdpaymentGetWithHttpInfo(string accept, string scopeId);
        /// <summary>
        /// Retrieve all providers configured for the given scope - {GetProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all providers of all different types configured for the given scope or retreive all providers of a specific type for a given scope.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="providerType">Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers. (optional)</param>
        /// <param name="includeParentScopes">Determine if parent scopes are considered when retrieving providers. (optional)</param>
        /// <returns>GetProvidersResponse</returns>
        GetProvidersResponse GetProvidersRequestScopeIdtypesGet(string accept, string scopeId, string providerType = default(string), bool? includeParentScopes = default(bool?));

        /// <summary>
        /// Retrieve all providers configured for the given scope - {GetProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all providers of all different types configured for the given scope or retreive all providers of a specific type for a given scope.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="providerType">Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers. (optional)</param>
        /// <param name="includeParentScopes">Determine if parent scopes are considered when retrieving providers. (optional)</param>
        /// <returns>ApiResponse of GetProvidersResponse</returns>
        ApiResponse<GetProvidersResponse> GetProvidersRequestScopeIdtypesGetWithHttpInfo(string accept, string scopeId, string providerType = default(string), bool? includeParentScopes = default(bool?));
        /// <summary>
        /// Validate the settings of a provider in the system - {ValidateProviderSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Validate the settings of a provider in the system.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="providerId">the unique identifier of the provider to validate. (optional)</param>
        /// <param name="providerType">the type of the provider to validate. (optional)</param>
        /// <returns>List&lt;ValidationResult&gt;</returns>
        List<ValidationResult> ValidateProviderSettingsRequestvalidateProviderSettingsGet(string accept, string providerId = default(string), string providerType = default(string));

        /// <summary>
        /// Validate the settings of a provider in the system - {ValidateProviderSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Validate the settings of a provider in the system.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="providerId">the unique identifier of the provider to validate. (optional)</param>
        /// <param name="providerType">the type of the provider to validate. (optional)</param>
        /// <returns>ApiResponse of List&lt;ValidationResult&gt;</returns>
        ApiResponse<List<ValidationResult>> ValidateProviderSettingsRequestvalidateProviderSettingsGetWithHttpInfo(string accept, string providerId = default(string), string providerType = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProvidersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create or update a fulfillment provider - {CreateOrUpdateFulfillmentProviderRequest}
        /// </summary>
        /// <remarks>
        /// Create or update a fulfillment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentProviderInfo</returns>
        System.Threading.Tasks.Task<FulfillmentProviderInfo> CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreateAsync(string accept, string scopeId, CreateOrUpdateFulfillmentProviderRequest body = default(CreateOrUpdateFulfillmentProviderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update a fulfillment provider - {CreateOrUpdateFulfillmentProviderRequest}
        /// </summary>
        /// <remarks>
        /// Create or update a fulfillment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentProviderInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentProviderInfo>> CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreateWithHttpInfoAsync(string accept, string scopeId, CreateOrUpdateFulfillmentProviderRequest body = default(CreateOrUpdateFulfillmentProviderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a fulfillment provider - {DeleteFulfillmentProviderRequest}
        /// </summary>
        /// <remarks>
        /// Delete a fulfillment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier for the EntityTypeDefinition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDeleteAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a fulfillment provider - {DeleteFulfillmentProviderRequest}
        /// </summary>
        /// <remarks>
        /// Delete a fulfillment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier for the EntityTypeDefinition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDeleteWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the carrier providers information - {GetCarrierProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Get the carrier providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCarrierProviderInfos</returns>
        System.Threading.Tasks.Task<FulfillmentCarrierProviderInfos> GetCarrierProvidersRequestScopeIdcarrierGetAsync(string accept, string scopeId, bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the carrier providers information - {GetCarrierProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Get the carrier providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCarrierProviderInfos)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentCarrierProviderInfos>> GetCarrierProvidersRequestScopeIdcarrierGetWithHttpInfoAsync(string accept, string scopeId, bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersMetadataRequest}
        /// </summary>
        /// <remarks>
        /// Get the fulfillment providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentProvidersMetadata</returns>
        System.Threading.Tasks.Task<FulfillmentProvidersMetadata> GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersMetadataRequest}
        /// </summary>
        /// <remarks>
        /// Get the fulfillment providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentProvidersMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentProvidersMetadata>> GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Get the fulfillment providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentProviderInfos</returns>
        System.Threading.Tasks.Task<FulfillmentProviderInfos> GetFulfillmentProvidersRequestScopeIdfulfillmentGetAsync(string accept, string scopeId, bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Get the fulfillment providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentProviderInfos)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentProviderInfos>> GetFulfillmentProvidersRequestScopeIdfulfillmentGetWithHttpInfoAsync(string accept, string scopeId, bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the payment providers information - {GetPaymentProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Get the payment providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentProviderInfos</returns>
        System.Threading.Tasks.Task<PaymentProviderInfos> GetPaymentProvidersRequestScopeIdpaymentGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the payment providers information - {GetPaymentProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Get the payment providers information.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentProviderInfos)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentProviderInfos>> GetPaymentProvidersRequestScopeIdpaymentGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all providers configured for the given scope - {GetProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all providers of all different types configured for the given scope or retreive all providers of a specific type for a given scope.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="providerType">Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers. (optional)</param>
        /// <param name="includeParentScopes">Determine if parent scopes are considered when retrieving providers. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProvidersResponse</returns>
        System.Threading.Tasks.Task<GetProvidersResponse> GetProvidersRequestScopeIdtypesGetAsync(string accept, string scopeId, string providerType = default(string), bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all providers configured for the given scope - {GetProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all providers of all different types configured for the given scope or retreive all providers of a specific type for a given scope.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="providerType">Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers. (optional)</param>
        /// <param name="includeParentScopes">Determine if parent scopes are considered when retrieving providers. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProvidersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProvidersResponse>> GetProvidersRequestScopeIdtypesGetWithHttpInfoAsync(string accept, string scopeId, string providerType = default(string), bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate the settings of a provider in the system - {ValidateProviderSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Validate the settings of a provider in the system.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="providerId">the unique identifier of the provider to validate. (optional)</param>
        /// <param name="providerType">the type of the provider to validate. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ValidationResult&gt;</returns>
        System.Threading.Tasks.Task<List<ValidationResult>> ValidateProviderSettingsRequestvalidateProviderSettingsGetAsync(string accept, string providerId = default(string), string providerType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate the settings of a provider in the system - {ValidateProviderSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Validate the settings of a provider in the system.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="providerId">the unique identifier of the provider to validate. (optional)</param>
        /// <param name="providerType">the type of the provider to validate. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ValidationResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ValidationResult>>> ValidateProviderSettingsRequestvalidateProviderSettingsGetWithHttpInfoAsync(string accept, string providerId = default(string), string providerType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProvidersApi : IProvidersApiSync, IProvidersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProvidersApi : IProvidersApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvidersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProvidersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvidersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProvidersApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvidersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProvidersApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvidersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProvidersApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create or update a fulfillment provider - {CreateOrUpdateFulfillmentProviderRequest} Create or update a fulfillment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentProviderInfo</returns>
        public FulfillmentProviderInfo CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreate(string accept, string scopeId, CreateOrUpdateFulfillmentProviderRequest body = default(CreateOrUpdateFulfillmentProviderRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentProviderInfo> localVarResponse = CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreateWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a fulfillment provider - {CreateOrUpdateFulfillmentProviderRequest} Create or update a fulfillment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentProviderInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentProviderInfo> CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreateWithHttpInfo(string accept, string scopeId, CreateOrUpdateFulfillmentProviderRequest body = default(CreateOrUpdateFulfillmentProviderRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProvidersApi->CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<FulfillmentProviderInfo>("/providers/{ScopeId}/fulfillment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update a fulfillment provider - {CreateOrUpdateFulfillmentProviderRequest} Create or update a fulfillment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentProviderInfo</returns>
        public async System.Threading.Tasks.Task<FulfillmentProviderInfo> CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreateAsync(string accept, string scopeId, CreateOrUpdateFulfillmentProviderRequest body = default(CreateOrUpdateFulfillmentProviderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentProviderInfo> localVarResponse = await CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreateWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a fulfillment provider - {CreateOrUpdateFulfillmentProviderRequest} Create or update a fulfillment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentProviderInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentProviderInfo>> CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreateWithHttpInfoAsync(string accept, string scopeId, CreateOrUpdateFulfillmentProviderRequest body = default(CreateOrUpdateFulfillmentProviderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProvidersApi->CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FulfillmentProviderInfo>("/providers/{ScopeId}/fulfillment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateFulfillmentProviderRequestScopeIdfulfillmentCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a fulfillment provider - {DeleteFulfillmentProviderRequest} Delete a fulfillment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier for the EntityTypeDefinition</param>
        /// <returns></returns>
        public void DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDelete(string accept, string scopeId, string id)
        {
            DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDeleteWithHttpInfo(accept, scopeId, id);
        }

        /// <summary>
        /// Delete a fulfillment provider - {DeleteFulfillmentProviderRequest} Delete a fulfillment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier for the EntityTypeDefinition</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDeleteWithHttpInfo(string accept, string scopeId, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProvidersApi->DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProvidersApi->DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/providers/{ScopeId}/fulfillment/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a fulfillment provider - {DeleteFulfillmentProviderRequest} Delete a fulfillment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier for the EntityTypeDefinition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDeleteAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDeleteWithHttpInfoAsync(accept, scopeId, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a fulfillment provider - {DeleteFulfillmentProviderRequest} Delete a fulfillment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier for the EntityTypeDefinition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDeleteWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProvidersApi->DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling ProvidersApi->DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/providers/{ScopeId}/fulfillment/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentProviderRequestScopeIdfulfillmentIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the carrier providers information - {GetCarrierProvidersRequest} Get the carrier providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <returns>FulfillmentCarrierProviderInfos</returns>
        public FulfillmentCarrierProviderInfos GetCarrierProvidersRequestScopeIdcarrierGet(string accept, string scopeId, bool? includeParentScopes = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCarrierProviderInfos> localVarResponse = GetCarrierProvidersRequestScopeIdcarrierGetWithHttpInfo(accept, scopeId, includeParentScopes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the carrier providers information - {GetCarrierProvidersRequest} Get the carrier providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <returns>ApiResponse of FulfillmentCarrierProviderInfos</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCarrierProviderInfos> GetCarrierProvidersRequestScopeIdcarrierGetWithHttpInfo(string accept, string scopeId, bool? includeParentScopes = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->GetCarrierProvidersRequestScopeIdcarrierGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProvidersApi->GetCarrierProvidersRequestScopeIdcarrierGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includeParentScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeParentScopes", includeParentScopes));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentCarrierProviderInfos>("/providers/{ScopeId}/carrier", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCarrierProvidersRequestScopeIdcarrierGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the carrier providers information - {GetCarrierProvidersRequest} Get the carrier providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCarrierProviderInfos</returns>
        public async System.Threading.Tasks.Task<FulfillmentCarrierProviderInfos> GetCarrierProvidersRequestScopeIdcarrierGetAsync(string accept, string scopeId, bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCarrierProviderInfos> localVarResponse = await GetCarrierProvidersRequestScopeIdcarrierGetWithHttpInfoAsync(accept, scopeId, includeParentScopes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the carrier providers information - {GetCarrierProvidersRequest} Get the carrier providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCarrierProviderInfos)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCarrierProviderInfos>> GetCarrierProvidersRequestScopeIdcarrierGetWithHttpInfoAsync(string accept, string scopeId, bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->GetCarrierProvidersRequestScopeIdcarrierGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProvidersApi->GetCarrierProvidersRequestScopeIdcarrierGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includeParentScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeParentScopes", includeParentScopes));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentCarrierProviderInfos>("/providers/{ScopeId}/carrier", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCarrierProvidersRequestScopeIdcarrierGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersMetadataRequest} Get the fulfillment providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>FulfillmentProvidersMetadata</returns>
        public FulfillmentProvidersMetadata GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentProvidersMetadata> localVarResponse = GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersMetadataRequest} Get the fulfillment providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of FulfillmentProvidersMetadata</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentProvidersMetadata> GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentProvidersMetadata>("/providers/fulfillment/metadata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersMetadataRequest} Get the fulfillment providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentProvidersMetadata</returns>
        public async System.Threading.Tasks.Task<FulfillmentProvidersMetadata> GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentProvidersMetadata> localVarResponse = await GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersMetadataRequest} Get the fulfillment providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentProvidersMetadata)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentProvidersMetadata>> GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentProvidersMetadata>("/providers/fulfillment/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentProvidersMetadataRequestfulfillmentmetadataGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersRequest} Get the fulfillment providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <returns>FulfillmentProviderInfos</returns>
        public FulfillmentProviderInfos GetFulfillmentProvidersRequestScopeIdfulfillmentGet(string accept, string scopeId, bool? includeParentScopes = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentProviderInfos> localVarResponse = GetFulfillmentProvidersRequestScopeIdfulfillmentGetWithHttpInfo(accept, scopeId, includeParentScopes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersRequest} Get the fulfillment providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <returns>ApiResponse of FulfillmentProviderInfos</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentProviderInfos> GetFulfillmentProvidersRequestScopeIdfulfillmentGetWithHttpInfo(string accept, string scopeId, bool? includeParentScopes = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->GetFulfillmentProvidersRequestScopeIdfulfillmentGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProvidersApi->GetFulfillmentProvidersRequestScopeIdfulfillmentGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includeParentScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeParentScopes", includeParentScopes));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentProviderInfos>("/providers/{ScopeId}/fulfillment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentProvidersRequestScopeIdfulfillmentGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersRequest} Get the fulfillment providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentProviderInfos</returns>
        public async System.Threading.Tasks.Task<FulfillmentProviderInfos> GetFulfillmentProvidersRequestScopeIdfulfillmentGetAsync(string accept, string scopeId, bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentProviderInfos> localVarResponse = await GetFulfillmentProvidersRequestScopeIdfulfillmentGetWithHttpInfoAsync(accept, scopeId, includeParentScopes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the fulfillment providers information - {GetFulfillmentProvidersRequest} Get the fulfillment providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeParentScopes">Determines whether parent scopes are included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentProviderInfos)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentProviderInfos>> GetFulfillmentProvidersRequestScopeIdfulfillmentGetWithHttpInfoAsync(string accept, string scopeId, bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->GetFulfillmentProvidersRequestScopeIdfulfillmentGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProvidersApi->GetFulfillmentProvidersRequestScopeIdfulfillmentGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includeParentScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeParentScopes", includeParentScopes));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentProviderInfos>("/providers/{ScopeId}/fulfillment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentProvidersRequestScopeIdfulfillmentGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the payment providers information - {GetPaymentProvidersRequest} Get the payment providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>PaymentProviderInfos</returns>
        public PaymentProviderInfos GetPaymentProvidersRequestScopeIdpaymentGet(string accept, string scopeId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProviderInfos> localVarResponse = GetPaymentProvidersRequestScopeIdpaymentGetWithHttpInfo(accept, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the payment providers information - {GetPaymentProvidersRequest} Get the payment providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>ApiResponse of PaymentProviderInfos</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProviderInfos> GetPaymentProvidersRequestScopeIdpaymentGetWithHttpInfo(string accept, string scopeId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->GetPaymentProvidersRequestScopeIdpaymentGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProvidersApi->GetPaymentProvidersRequestScopeIdpaymentGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentProviderInfos>("/providers/{ScopeId}/payment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentProvidersRequestScopeIdpaymentGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the payment providers information - {GetPaymentProvidersRequest} Get the payment providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentProviderInfos</returns>
        public async System.Threading.Tasks.Task<PaymentProviderInfos> GetPaymentProvidersRequestScopeIdpaymentGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProviderInfos> localVarResponse = await GetPaymentProvidersRequestScopeIdpaymentGetWithHttpInfoAsync(accept, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the payment providers information - {GetPaymentProvidersRequest} Get the payment providers information.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentProviderInfos)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProviderInfos>> GetPaymentProvidersRequestScopeIdpaymentGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->GetPaymentProvidersRequestScopeIdpaymentGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProvidersApi->GetPaymentProvidersRequestScopeIdpaymentGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentProviderInfos>("/providers/{ScopeId}/payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentProvidersRequestScopeIdpaymentGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all providers configured for the given scope - {GetProvidersRequest} Retrieve all providers of all different types configured for the given scope or retreive all providers of a specific type for a given scope.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="providerType">Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers. (optional)</param>
        /// <param name="includeParentScopes">Determine if parent scopes are considered when retrieving providers. (optional)</param>
        /// <returns>GetProvidersResponse</returns>
        public GetProvidersResponse GetProvidersRequestScopeIdtypesGet(string accept, string scopeId, string providerType = default(string), bool? includeParentScopes = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProvidersResponse> localVarResponse = GetProvidersRequestScopeIdtypesGetWithHttpInfo(accept, scopeId, providerType, includeParentScopes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all providers configured for the given scope - {GetProvidersRequest} Retrieve all providers of all different types configured for the given scope or retreive all providers of a specific type for a given scope.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="providerType">Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers. (optional)</param>
        /// <param name="includeParentScopes">Determine if parent scopes are considered when retrieving providers. (optional)</param>
        /// <returns>ApiResponse of GetProvidersResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProvidersResponse> GetProvidersRequestScopeIdtypesGetWithHttpInfo(string accept, string scopeId, string providerType = default(string), bool? includeParentScopes = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->GetProvidersRequestScopeIdtypesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProvidersApi->GetProvidersRequestScopeIdtypesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (providerType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ProviderType", providerType));
            }
            if (includeParentScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeParentScopes", includeParentScopes));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProvidersResponse>("/providers/{ScopeId}/types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProvidersRequestScopeIdtypesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all providers configured for the given scope - {GetProvidersRequest} Retrieve all providers of all different types configured for the given scope or retreive all providers of a specific type for a given scope.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="providerType">Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers. (optional)</param>
        /// <param name="includeParentScopes">Determine if parent scopes are considered when retrieving providers. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProvidersResponse</returns>
        public async System.Threading.Tasks.Task<GetProvidersResponse> GetProvidersRequestScopeIdtypesGetAsync(string accept, string scopeId, string providerType = default(string), bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProvidersResponse> localVarResponse = await GetProvidersRequestScopeIdtypesGetWithHttpInfoAsync(accept, scopeId, providerType, includeParentScopes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all providers configured for the given scope - {GetProvidersRequest} Retrieve all providers of all different types configured for the given scope or retreive all providers of a specific type for a given scope.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="providerType">Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers. (optional)</param>
        /// <param name="includeParentScopes">Determine if parent scopes are considered when retrieving providers. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProvidersResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProvidersResponse>> GetProvidersRequestScopeIdtypesGetWithHttpInfoAsync(string accept, string scopeId, string providerType = default(string), bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->GetProvidersRequestScopeIdtypesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProvidersApi->GetProvidersRequestScopeIdtypesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (providerType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ProviderType", providerType));
            }
            if (includeParentScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeParentScopes", includeParentScopes));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProvidersResponse>("/providers/{ScopeId}/types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProvidersRequestScopeIdtypesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate the settings of a provider in the system - {ValidateProviderSettingsRequest} Validate the settings of a provider in the system.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="providerId">the unique identifier of the provider to validate. (optional)</param>
        /// <param name="providerType">the type of the provider to validate. (optional)</param>
        /// <returns>List&lt;ValidationResult&gt;</returns>
        public List<ValidationResult> ValidateProviderSettingsRequestvalidateProviderSettingsGet(string accept, string providerId = default(string), string providerType = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ValidationResult>> localVarResponse = ValidateProviderSettingsRequestvalidateProviderSettingsGetWithHttpInfo(accept, providerId, providerType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate the settings of a provider in the system - {ValidateProviderSettingsRequest} Validate the settings of a provider in the system.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="providerId">the unique identifier of the provider to validate. (optional)</param>
        /// <param name="providerType">the type of the provider to validate. (optional)</param>
        /// <returns>ApiResponse of List&lt;ValidationResult&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ValidationResult>> ValidateProviderSettingsRequestvalidateProviderSettingsGetWithHttpInfo(string accept, string providerId = default(string), string providerType = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->ValidateProviderSettingsRequestvalidateProviderSettingsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ProviderId", providerId));
            }
            if (providerType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ProviderType", providerType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ValidationResult>>("/providers/validateProviderSettings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateProviderSettingsRequestvalidateProviderSettingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate the settings of a provider in the system - {ValidateProviderSettingsRequest} Validate the settings of a provider in the system.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="providerId">the unique identifier of the provider to validate. (optional)</param>
        /// <param name="providerType">the type of the provider to validate. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ValidationResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<ValidationResult>> ValidateProviderSettingsRequestvalidateProviderSettingsGetAsync(string accept, string providerId = default(string), string providerType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ValidationResult>> localVarResponse = await ValidateProviderSettingsRequestvalidateProviderSettingsGetWithHttpInfoAsync(accept, providerId, providerType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate the settings of a provider in the system - {ValidateProviderSettingsRequest} Validate the settings of a provider in the system.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="providerId">the unique identifier of the provider to validate. (optional)</param>
        /// <param name="providerType">the type of the provider to validate. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ValidationResult&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ValidationResult>>> ValidateProviderSettingsRequestvalidateProviderSettingsGetWithHttpInfoAsync(string accept, string providerId = default(string), string providerType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProvidersApi->ValidateProviderSettingsRequestvalidateProviderSettingsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (providerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ProviderId", providerId));
            }
            if (providerType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ProviderType", providerType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ValidationResult>>("/providers/validateProviderSettings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateProviderSettingsRequestvalidateProviderSettingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
