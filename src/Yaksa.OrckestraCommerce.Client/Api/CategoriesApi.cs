/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a category - {CreateCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Create a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Category</returns>
        Category CreateCategoryRequestScopeIdPost(string accept, string scopeId, CreateCategoryRequest body = default(CreateCategoryRequest));

        /// <summary>
        /// Create a category - {CreateCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Create a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> CreateCategoryRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateCategoryRequest body = default(CreateCategoryRequest));
        /// <summary>
        /// Delete a category and related products - {DeleteCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Delete a category and related products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <returns></returns>
        void DeleteCategoryRequestScopeIdCategoryIdDelete(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?));

        /// <summary>
        /// Delete a category and related products - {DeleteCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Delete a category and related products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCategoryRequestScopeIdCategoryIdDeleteWithHttpInfo(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?));
        /// <summary>
        /// Delete a category and related products - {DeleteCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Delete a category and related products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <returns></returns>
        void DeleteCategoryV2Requestv2ScopeIdCategoryIdDelete(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?));

        /// <summary>
        /// Delete a category and related products - {DeleteCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Delete a category and related products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCategoryV2Requestv2ScopeIdCategoryIdDeleteWithHttpInfo(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?));
        /// <summary>
        /// Find category tree nodes - {FindCategoryTreeNodesRequest}
        /// </summary>
        /// <remarks>
        /// Request to find category tree nodes
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="searchTerms">The search terms for the query.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumResultSize">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <returns>List&lt;CategoryTreeNode&gt;</returns>
        List<CategoryTreeNode> FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet(string accept, string scopeId, string searchTerms, string cultureName, int? maximumResultSize = default(int?));

        /// <summary>
        /// Find category tree nodes - {FindCategoryTreeNodesRequest}
        /// </summary>
        /// <remarks>
        /// Request to find category tree nodes
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="searchTerms">The search terms for the query.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumResultSize">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <returns>ApiResponse of List&lt;CategoryTreeNode&gt;</returns>
        ApiResponse<List<CategoryTreeNode>> FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGetWithHttpInfo(string accept, string scopeId, string searchTerms, string cultureName, int? maximumResultSize = default(int?));
        /// <summary>
        /// Retrieve the ids of the categories that contain products in a given publication state - {GetCategoriesContainingProductsByStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the ids of the categories that contain products in a given publication state
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="publicationStatus">The publication status to filter the products (optional)</param>
        /// <returns>GetCategoriesContainingProductsByStatusResult</returns>
        GetCategoriesContainingProductsByStatusResult GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGet(string accept, string scopeId, string publicationStatus = default(string));

        /// <summary>
        /// Retrieve the ids of the categories that contain products in a given publication state - {GetCategoriesContainingProductsByStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the ids of the categories that contain products in a given publication state
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="publicationStatus">The publication status to filter the products (optional)</param>
        /// <returns>ApiResponse of GetCategoriesContainingProductsByStatusResult</returns>
        ApiResponse<GetCategoriesContainingProductsByStatusResult> GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGetWithHttpInfo(string accept, string scopeId, string publicationStatus = default(string));
        /// <summary>
        /// Retrieve the categories - {GetCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;Category&gt;</returns>
        List<Category> GetCategoriesRequestScopeIdGet(string accept, string scopeId, string cultureName = default(string));

        /// <summary>
        /// Retrieve the categories - {GetCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Category&gt;</returns>
        ApiResponse<List<Category>> GetCategoriesRequestScopeIdGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string));
        /// <summary>
        /// Retrieve the categories - {GetCategoriesV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>CategoryList</returns>
        CategoryList GetCategoriesV2Requestv2ScopeIdGet(string accept, string scopeId, string cultureName = default(string));

        /// <summary>
        /// Retrieve the categories - {GetCategoriesV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of CategoryList</returns>
        ApiResponse<CategoryList> GetCategoriesV2Requestv2ScopeIdGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string));
        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;Category&gt;</returns>
        List<Category> GetCategoryChildrenRequestScopeIdCategoryIdchildrenGet(string accept, string scopeId, string categoryId, string cultureName = default(string));

        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Category&gt;</returns>
        ApiResponse<List<Category>> GetCategoryChildrenRequestScopeIdCategoryIdchildrenGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName = default(string));
        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>CategoryList</returns>
        CategoryList GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGet(string accept, string scopeId, string categoryId, string cultureName = default(string));

        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of CategoryList</returns>
        ApiResponse<CategoryList> GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName = default(string));
        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all relationships for a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;Relationship&gt;</returns>
        List<Relationship> GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGet(string accept, string scopeId, string categoryId, string cultureName = default(string));

        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all relationships for a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Relationship&gt;</returns>
        ApiResponse<List<Relationship>> GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName = default(string));
        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve all relationships for a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;Relationship&gt;</returns>
        List<Relationship> GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGet(string accept, string scopeId, string categoryId, string cultureName = default(string));

        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve all relationships for a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Relationship&gt;</returns>
        ApiResponse<List<Relationship>> GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName = default(string));
        /// <summary>
        /// Retrieve a category - {GetCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a category  without loading the children or relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>Category</returns>
        Category GetCategoryRequestScopeIdCategoryIdGet(string accept, string scopeId, string categoryId, bool? includeRelationships = default(bool?), string cultureName = default(string));

        /// <summary>
        /// Retrieve a category - {GetCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a category  without loading the children or relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> GetCategoryRequestScopeIdCategoryIdGetWithHttpInfo(string accept, string scopeId, string categoryId, bool? includeRelationships = default(bool?), string cultureName = default(string));
        /// <summary>
        /// Retrieve the category tree existing items of the specified parameters - {GetCategoryTreeExistingItemByStateRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the category tree existing items of the specified parameters
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="draftState">The draft state used to filter the products (optional)</param>
        /// <param name="isNew">The flag to get only new or not new products (optional)</param>
        /// <param name="hasNotification">The flag to get only or not products with change notification (optional)</param>
        /// <returns>GetCategoryTreeExistingItemByStateResult</returns>
        GetCategoryTreeExistingItemByStateResult GetCategoryTreeExistingItemByStateRequestScopeIdexistingGet(string accept, string scopeId, string cultureName = default(string), string draftState = default(string), bool? isNew = default(bool?), bool? hasNotification = default(bool?));

        /// <summary>
        /// Retrieve the category tree existing items of the specified parameters - {GetCategoryTreeExistingItemByStateRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the category tree existing items of the specified parameters
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="draftState">The draft state used to filter the products (optional)</param>
        /// <param name="isNew">The flag to get only new or not new products (optional)</param>
        /// <param name="hasNotification">The flag to get only or not products with change notification (optional)</param>
        /// <returns>ApiResponse of GetCategoryTreeExistingItemByStateResult</returns>
        ApiResponse<GetCategoryTreeExistingItemByStateResult> GetCategoryTreeExistingItemByStateRequestScopeIdexistingGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string), string draftState = default(string), bool? isNew = default(bool?), bool? hasNotification = default(bool?));
        /// <summary>
        /// Retrieve all nodes and their child nodes of a category tree node path - {GetCategoryTreeNodesForPathRequest}
        /// </summary>
        /// <remarks>
        /// Request to retrieve all nodes and their child nodes of a category tree node path
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The ScopeId of the request.</param>
        /// <param name="startId">The unique identifier of the first node of the path (a category id).</param>
        /// <param name="endId">The unique identifier of the last node of the path (a category id).</param>
        /// <param name="cultureName">The name of the culture to use to process the request.</param>
        /// <returns>CategoryTreeNode</returns>
        CategoryTreeNode GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet(string accept, string scopeId, string startId, string endId, string cultureName);

        /// <summary>
        /// Retrieve all nodes and their child nodes of a category tree node path - {GetCategoryTreeNodesForPathRequest}
        /// </summary>
        /// <remarks>
        /// Request to retrieve all nodes and their child nodes of a category tree node path
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The ScopeId of the request.</param>
        /// <param name="startId">The unique identifier of the first node of the path (a category id).</param>
        /// <param name="endId">The unique identifier of the last node of the path (a category id).</param>
        /// <param name="cultureName">The name of the culture to use to process the request.</param>
        /// <returns>ApiResponse of CategoryTreeNode</returns>
        ApiResponse<CategoryTreeNode> GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGetWithHttpInfo(string accept, string scopeId, string startId, string endId, string cultureName);
        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesRequest}
        /// </summary>
        /// <remarks>
        /// Request to retrieve all the child nodes of a category node
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <returns>CategoryTreeNode</returns>
        CategoryTreeNode GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?));

        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesRequest}
        /// </summary>
        /// <remarks>
        /// Request to retrieve all the child nodes of a category node
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <returns>ApiResponse of CategoryTreeNode</returns>
        ApiResponse<CategoryTreeNode> GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?));
        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesV2Request}
        /// </summary>
        /// <remarks>
        /// Request to retrieve all the child nodes of a category node
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <returns>CategoryTreeNode</returns>
        CategoryTreeNode GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?));

        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesV2Request}
        /// </summary>
        /// <remarks>
        /// Request to retrieve all the child nodes of a category node
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <returns>ApiResponse of CategoryTreeNode</returns>
        ApiResponse<CategoryTreeNode> GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?));
        /// <summary>
        /// Retrieve a category - {GetCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve a category  without loading the children or relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeChildren">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>Category</returns>
        Category GetCategoryV2Requestv2ScopeIdCategoryIdGet(string accept, string scopeId, string categoryId, bool? includeChildren = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string));

        /// <summary>
        /// Retrieve a category - {GetCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve a category  without loading the children or relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeChildren">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> GetCategoryV2Requestv2ScopeIdCategoryIdGetWithHttpInfo(string accept, string scopeId, string categoryId, bool? includeChildren = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string));
        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve products from a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">Whether or not to include the variants (if they exists) of the products. (optional)</param>
        /// <param name="includePriceLists">Whether or not to include the price lists of the products. (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> GetProductsByCategoryRequestScopeIdCategoryIdproductsGet(string accept, string scopeId, string categoryId, string cultureName = default(string), int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?));

        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve products from a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">Whether or not to include the variants (if they exists) of the products. (optional)</param>
        /// <param name="includePriceLists">Whether or not to include the price lists of the products. (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> GetProductsByCategoryRequestScopeIdCategoryIdproductsGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName = default(string), int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?));
        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve products from a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="continuationToken">The continuation token used for pagination (optional)</param>
        /// <param name="pageSize">The maximum number of products to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ProductListPage</returns>
        ProductListPage GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGet(string accept, string scopeId, string categoryId, string continuationToken = default(string), int? pageSize = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string));

        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve products from a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="continuationToken">The continuation token used for pagination (optional)</param>
        /// <param name="pageSize">The maximum number of products to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of ProductListPage</returns>
        ApiResponse<ProductListPage> GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGetWithHttpInfo(string accept, string scopeId, string categoryId, string continuationToken = default(string), int? pageSize = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string));
        /// <summary>
        /// Update an existing category - {UpdateCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Category</returns>
        Category UpdateCategoryRequestScopeIdCategoryIdPost(string accept, string scopeId, string categoryId, UpdateCategoryRequest body = default(UpdateCategoryRequest));

        /// <summary>
        /// Update an existing category - {UpdateCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> UpdateCategoryRequestScopeIdCategoryIdPostWithHttpInfo(string accept, string scopeId, string categoryId, UpdateCategoryRequest body = default(UpdateCategoryRequest));
        /// <summary>
        /// Update categories sequence - {UpdateCategorySequenceRequest}
        /// </summary>
        /// <remarks>
        /// Update categories sequence
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category to which the child categories are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdateCategorySequenceResponse</returns>
        UpdateCategorySequenceResponse UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePost(string accept, string scopeId, string categoryId, UpdateCategorySequenceRequest body = default(UpdateCategorySequenceRequest));

        /// <summary>
        /// Update categories sequence - {UpdateCategorySequenceRequest}
        /// </summary>
        /// <remarks>
        /// Update categories sequence
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category to which the child categories are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdateCategorySequenceResponse</returns>
        ApiResponse<UpdateCategorySequenceResponse> UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePostWithHttpInfo(string accept, string scopeId, string categoryId, UpdateCategorySequenceRequest body = default(UpdateCategorySequenceRequest));
        /// <summary>
        /// Update an existing category - {UpdateCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Update an existing category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Category</returns>
        Category UpdateCategoryV2Requestv2ScopeIdCategoryIdCreate(string accept, string scopeId, string categoryId, UpdateCategoryV2Request body = default(UpdateCategoryV2Request));

        /// <summary>
        /// Update an existing category - {UpdateCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Update an existing category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> UpdateCategoryV2Requestv2ScopeIdCategoryIdCreateWithHttpInfo(string accept, string scopeId, string categoryId, UpdateCategoryV2Request body = default(UpdateCategoryV2Request));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a category - {CreateCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Create a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> CreateCategoryRequestScopeIdPostAsync(string accept, string scopeId, CreateCategoryRequest body = default(CreateCategoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a category - {CreateCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Create a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> CreateCategoryRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateCategoryRequest body = default(CreateCategoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a category and related products - {DeleteCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Delete a category and related products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCategoryRequestScopeIdCategoryIdDeleteAsync(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a category and related products - {DeleteCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Delete a category and related products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCategoryRequestScopeIdCategoryIdDeleteWithHttpInfoAsync(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a category and related products - {DeleteCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Delete a category and related products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCategoryV2Requestv2ScopeIdCategoryIdDeleteAsync(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a category and related products - {DeleteCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Delete a category and related products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCategoryV2Requestv2ScopeIdCategoryIdDeleteWithHttpInfoAsync(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find category tree nodes - {FindCategoryTreeNodesRequest}
        /// </summary>
        /// <remarks>
        /// Request to find category tree nodes
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="searchTerms">The search terms for the query.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumResultSize">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CategoryTreeNode&gt;</returns>
        System.Threading.Tasks.Task<List<CategoryTreeNode>> FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGetAsync(string accept, string scopeId, string searchTerms, string cultureName, int? maximumResultSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find category tree nodes - {FindCategoryTreeNodesRequest}
        /// </summary>
        /// <remarks>
        /// Request to find category tree nodes
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="searchTerms">The search terms for the query.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumResultSize">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CategoryTreeNode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CategoryTreeNode>>> FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGetWithHttpInfoAsync(string accept, string scopeId, string searchTerms, string cultureName, int? maximumResultSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the ids of the categories that contain products in a given publication state - {GetCategoriesContainingProductsByStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the ids of the categories that contain products in a given publication state
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="publicationStatus">The publication status to filter the products (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCategoriesContainingProductsByStatusResult</returns>
        System.Threading.Tasks.Task<GetCategoriesContainingProductsByStatusResult> GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGetAsync(string accept, string scopeId, string publicationStatus = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the ids of the categories that contain products in a given publication state - {GetCategoriesContainingProductsByStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the ids of the categories that contain products in a given publication state
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="publicationStatus">The publication status to filter the products (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCategoriesContainingProductsByStatusResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCategoriesContainingProductsByStatusResult>> GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGetWithHttpInfoAsync(string accept, string scopeId, string publicationStatus = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the categories - {GetCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Category&gt;</returns>
        System.Threading.Tasks.Task<List<Category>> GetCategoriesRequestScopeIdGetAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the categories - {GetCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Category&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Category>>> GetCategoriesRequestScopeIdGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the categories - {GetCategoriesV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryList</returns>
        System.Threading.Tasks.Task<CategoryList> GetCategoriesV2Requestv2ScopeIdGetAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the categories - {GetCategoriesV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryList>> GetCategoriesV2Requestv2ScopeIdGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Category&gt;</returns>
        System.Threading.Tasks.Task<List<Category>> GetCategoryChildrenRequestScopeIdCategoryIdchildrenGetAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Category&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Category>>> GetCategoryChildrenRequestScopeIdCategoryIdchildrenGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryList</returns>
        System.Threading.Tasks.Task<CategoryList> GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGetAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryList>> GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all relationships for a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Relationship&gt;</returns>
        System.Threading.Tasks.Task<List<Relationship>> GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGetAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all relationships for a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Relationship&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Relationship>>> GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve all relationships for a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Relationship&gt;</returns>
        System.Threading.Tasks.Task<List<Relationship>> GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGetAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve all relationships for a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Relationship&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Relationship>>> GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a category - {GetCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a category  without loading the children or relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> GetCategoryRequestScopeIdCategoryIdGetAsync(string accept, string scopeId, string categoryId, bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a category - {GetCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a category  without loading the children or relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> GetCategoryRequestScopeIdCategoryIdGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the category tree existing items of the specified parameters - {GetCategoryTreeExistingItemByStateRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the category tree existing items of the specified parameters
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="draftState">The draft state used to filter the products (optional)</param>
        /// <param name="isNew">The flag to get only new or not new products (optional)</param>
        /// <param name="hasNotification">The flag to get only or not products with change notification (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCategoryTreeExistingItemByStateResult</returns>
        System.Threading.Tasks.Task<GetCategoryTreeExistingItemByStateResult> GetCategoryTreeExistingItemByStateRequestScopeIdexistingGetAsync(string accept, string scopeId, string cultureName = default(string), string draftState = default(string), bool? isNew = default(bool?), bool? hasNotification = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the category tree existing items of the specified parameters - {GetCategoryTreeExistingItemByStateRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the category tree existing items of the specified parameters
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="draftState">The draft state used to filter the products (optional)</param>
        /// <param name="isNew">The flag to get only new or not new products (optional)</param>
        /// <param name="hasNotification">The flag to get only or not products with change notification (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCategoryTreeExistingItemByStateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCategoryTreeExistingItemByStateResult>> GetCategoryTreeExistingItemByStateRequestScopeIdexistingGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), string draftState = default(string), bool? isNew = default(bool?), bool? hasNotification = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all nodes and their child nodes of a category tree node path - {GetCategoryTreeNodesForPathRequest}
        /// </summary>
        /// <remarks>
        /// Request to retrieve all nodes and their child nodes of a category tree node path
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The ScopeId of the request.</param>
        /// <param name="startId">The unique identifier of the first node of the path (a category id).</param>
        /// <param name="endId">The unique identifier of the last node of the path (a category id).</param>
        /// <param name="cultureName">The name of the culture to use to process the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryTreeNode</returns>
        System.Threading.Tasks.Task<CategoryTreeNode> GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGetAsync(string accept, string scopeId, string startId, string endId, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all nodes and their child nodes of a category tree node path - {GetCategoryTreeNodesForPathRequest}
        /// </summary>
        /// <remarks>
        /// Request to retrieve all nodes and their child nodes of a category tree node path
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The ScopeId of the request.</param>
        /// <param name="startId">The unique identifier of the first node of the path (a category id).</param>
        /// <param name="endId">The unique identifier of the last node of the path (a category id).</param>
        /// <param name="cultureName">The name of the culture to use to process the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryTreeNode)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryTreeNode>> GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGetWithHttpInfoAsync(string accept, string scopeId, string startId, string endId, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesRequest}
        /// </summary>
        /// <remarks>
        /// Request to retrieve all the child nodes of a category node
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryTreeNode</returns>
        System.Threading.Tasks.Task<CategoryTreeNode> GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGetAsync(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesRequest}
        /// </summary>
        /// <remarks>
        /// Request to retrieve all the child nodes of a category node
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryTreeNode)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryTreeNode>> GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesV2Request}
        /// </summary>
        /// <remarks>
        /// Request to retrieve all the child nodes of a category node
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryTreeNode</returns>
        System.Threading.Tasks.Task<CategoryTreeNode> GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGetAsync(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesV2Request}
        /// </summary>
        /// <remarks>
        /// Request to retrieve all the child nodes of a category node
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryTreeNode)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryTreeNode>> GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a category - {GetCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve a category  without loading the children or relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeChildren">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> GetCategoryV2Requestv2ScopeIdCategoryIdGetAsync(string accept, string scopeId, string categoryId, bool? includeChildren = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a category - {GetCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve a category  without loading the children or relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeChildren">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> GetCategoryV2Requestv2ScopeIdCategoryIdGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, bool? includeChildren = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve products from a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">Whether or not to include the variants (if they exists) of the products. (optional)</param>
        /// <param name="includePriceLists">Whether or not to include the price lists of the products. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> GetProductsByCategoryRequestScopeIdCategoryIdproductsGetAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve products from a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">Whether or not to include the variants (if they exists) of the products. (optional)</param>
        /// <param name="includePriceLists">Whether or not to include the price lists of the products. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> GetProductsByCategoryRequestScopeIdCategoryIdproductsGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve products from a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="continuationToken">The continuation token used for pagination (optional)</param>
        /// <param name="pageSize">The maximum number of products to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductListPage</returns>
        System.Threading.Tasks.Task<ProductListPage> GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGetAsync(string accept, string scopeId, string categoryId, string continuationToken = default(string), int? pageSize = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve products from a category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="continuationToken">The continuation token used for pagination (optional)</param>
        /// <param name="pageSize">The maximum number of products to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductListPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductListPage>> GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string continuationToken = default(string), int? pageSize = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing category - {UpdateCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> UpdateCategoryRequestScopeIdCategoryIdPostAsync(string accept, string scopeId, string categoryId, UpdateCategoryRequest body = default(UpdateCategoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing category - {UpdateCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> UpdateCategoryRequestScopeIdCategoryIdPostWithHttpInfoAsync(string accept, string scopeId, string categoryId, UpdateCategoryRequest body = default(UpdateCategoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update categories sequence - {UpdateCategorySequenceRequest}
        /// </summary>
        /// <remarks>
        /// Update categories sequence
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category to which the child categories are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCategorySequenceResponse</returns>
        System.Threading.Tasks.Task<UpdateCategorySequenceResponse> UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePostAsync(string accept, string scopeId, string categoryId, UpdateCategorySequenceRequest body = default(UpdateCategorySequenceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update categories sequence - {UpdateCategorySequenceRequest}
        /// </summary>
        /// <remarks>
        /// Update categories sequence
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category to which the child categories are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCategorySequenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCategorySequenceResponse>> UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePostWithHttpInfoAsync(string accept, string scopeId, string categoryId, UpdateCategorySequenceRequest body = default(UpdateCategorySequenceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing category - {UpdateCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Update an existing category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> UpdateCategoryV2Requestv2ScopeIdCategoryIdCreateAsync(string accept, string scopeId, string categoryId, UpdateCategoryV2Request body = default(UpdateCategoryV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing category - {UpdateCategoryV2Request}
        /// </summary>
        /// <remarks>
        /// Update an existing category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> UpdateCategoryV2Requestv2ScopeIdCategoryIdCreateWithHttpInfoAsync(string accept, string scopeId, string categoryId, UpdateCategoryV2Request body = default(UpdateCategoryV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoriesApi : ICategoriesApiSync, ICategoriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CategoriesApi : ICategoriesApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoriesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoriesApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CategoriesApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CategoriesApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a category - {CreateCategoryRequest} Create a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Category</returns>
        public Category CreateCategoryRequestScopeIdPost(string accept, string scopeId, CreateCategoryRequest body = default(CreateCategoryRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> localVarResponse = CreateCategoryRequestScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a category - {CreateCategoryRequest} Create a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> CreateCategoryRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateCategoryRequest body = default(CreateCategoryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->CreateCategoryRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->CreateCategoryRequestScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Category>("/categories/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCategoryRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a category - {CreateCategoryRequest} Create a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> CreateCategoryRequestScopeIdPostAsync(string accept, string scopeId, CreateCategoryRequest body = default(CreateCategoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> localVarResponse = await CreateCategoryRequestScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a category - {CreateCategoryRequest} Create a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category>> CreateCategoryRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateCategoryRequest body = default(CreateCategoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->CreateCategoryRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->CreateCategoryRequestScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Category>("/categories/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCategoryRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a category and related products - {DeleteCategoryRequest} Delete a category and related products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <returns></returns>
        public void DeleteCategoryRequestScopeIdCategoryIdDelete(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?))
        {
            DeleteCategoryRequestScopeIdCategoryIdDeleteWithHttpInfo(accept, scopeId, categoryId, deleteProducts);
        }

        /// <summary>
        /// Delete a category and related products - {DeleteCategoryRequest} Delete a category and related products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteCategoryRequestScopeIdCategoryIdDeleteWithHttpInfo(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->DeleteCategoryRequestScopeIdCategoryIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->DeleteCategoryRequestScopeIdCategoryIdDelete");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->DeleteCategoryRequestScopeIdCategoryIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (deleteProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "DeleteProducts", deleteProducts));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/categories/{ScopeId}/{CategoryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCategoryRequestScopeIdCategoryIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a category and related products - {DeleteCategoryRequest} Delete a category and related products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCategoryRequestScopeIdCategoryIdDeleteAsync(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCategoryRequestScopeIdCategoryIdDeleteWithHttpInfoAsync(accept, scopeId, categoryId, deleteProducts, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a category and related products - {DeleteCategoryRequest} Delete a category and related products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteCategoryRequestScopeIdCategoryIdDeleteWithHttpInfoAsync(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->DeleteCategoryRequestScopeIdCategoryIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->DeleteCategoryRequestScopeIdCategoryIdDelete");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->DeleteCategoryRequestScopeIdCategoryIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (deleteProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "DeleteProducts", deleteProducts));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/categories/{ScopeId}/{CategoryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCategoryRequestScopeIdCategoryIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a category and related products - {DeleteCategoryV2Request} Delete a category and related products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <returns></returns>
        public void DeleteCategoryV2Requestv2ScopeIdCategoryIdDelete(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?))
        {
            DeleteCategoryV2Requestv2ScopeIdCategoryIdDeleteWithHttpInfo(accept, scopeId, categoryId, deleteProducts);
        }

        /// <summary>
        /// Delete a category and related products - {DeleteCategoryV2Request} Delete a category and related products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteCategoryV2Requestv2ScopeIdCategoryIdDeleteWithHttpInfo(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->DeleteCategoryV2Requestv2ScopeIdCategoryIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->DeleteCategoryV2Requestv2ScopeIdCategoryIdDelete");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->DeleteCategoryV2Requestv2ScopeIdCategoryIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (deleteProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "DeleteProducts", deleteProducts));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/categories/v2/{ScopeId}/{CategoryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCategoryV2Requestv2ScopeIdCategoryIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a category and related products - {DeleteCategoryV2Request} Delete a category and related products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCategoryV2Requestv2ScopeIdCategoryIdDeleteAsync(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCategoryV2Requestv2ScopeIdCategoryIdDeleteWithHttpInfoAsync(accept, scopeId, categoryId, deleteProducts, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a category and related products - {DeleteCategoryV2Request} Delete a category and related products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="deleteProducts">Determines whether the products should be deleted or have the category association removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteCategoryV2Requestv2ScopeIdCategoryIdDeleteWithHttpInfoAsync(string accept, string scopeId, string categoryId, bool? deleteProducts = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->DeleteCategoryV2Requestv2ScopeIdCategoryIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->DeleteCategoryV2Requestv2ScopeIdCategoryIdDelete");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->DeleteCategoryV2Requestv2ScopeIdCategoryIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (deleteProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "DeleteProducts", deleteProducts));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/categories/v2/{ScopeId}/{CategoryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCategoryV2Requestv2ScopeIdCategoryIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find category tree nodes - {FindCategoryTreeNodesRequest} Request to find category tree nodes
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="searchTerms">The search terms for the query.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumResultSize">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <returns>List&lt;CategoryTreeNode&gt;</returns>
        public List<CategoryTreeNode> FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet(string accept, string scopeId, string searchTerms, string cultureName, int? maximumResultSize = default(int?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<CategoryTreeNode>> localVarResponse = FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGetWithHttpInfo(accept, scopeId, searchTerms, cultureName, maximumResultSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find category tree nodes - {FindCategoryTreeNodesRequest} Request to find category tree nodes
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="searchTerms">The search terms for the query.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumResultSize">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <returns>ApiResponse of List&lt;CategoryTreeNode&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<CategoryTreeNode>> FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGetWithHttpInfo(string accept, string scopeId, string searchTerms, string cultureName, int? maximumResultSize = default(int?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet");

            // verify the required parameter 'searchTerms' is set
            if (searchTerms == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'searchTerms' when calling CategoriesApi->FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CategoriesApi->FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SearchTerms", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(searchTerms)); // path parameter
            if (maximumResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumResultSize", maximumResultSize));
            }
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CategoryTreeNode>>("/categories/{ScopeId}/treeNodes/{SearchTerms}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find category tree nodes - {FindCategoryTreeNodesRequest} Request to find category tree nodes
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="searchTerms">The search terms for the query.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumResultSize">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CategoryTreeNode&gt;</returns>
        public async System.Threading.Tasks.Task<List<CategoryTreeNode>> FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGetAsync(string accept, string scopeId, string searchTerms, string cultureName, int? maximumResultSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<CategoryTreeNode>> localVarResponse = await FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGetWithHttpInfoAsync(accept, scopeId, searchTerms, cultureName, maximumResultSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find category tree nodes - {FindCategoryTreeNodesRequest} Request to find category tree nodes
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="searchTerms">The search terms for the query.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumResultSize">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CategoryTreeNode&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<CategoryTreeNode>>> FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGetWithHttpInfoAsync(string accept, string scopeId, string searchTerms, string cultureName, int? maximumResultSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet");

            // verify the required parameter 'searchTerms' is set
            if (searchTerms == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'searchTerms' when calling CategoriesApi->FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CategoriesApi->FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SearchTerms", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(searchTerms)); // path parameter
            if (maximumResultSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumResultSize", maximumResultSize));
            }
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CategoryTreeNode>>("/categories/{ScopeId}/treeNodes/{SearchTerms}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCategoryTreeNodesRequestScopeIdtreeNodesSearchTermsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the ids of the categories that contain products in a given publication state - {GetCategoriesContainingProductsByStatusRequest} Retrieve the ids of the categories that contain products in a given publication state
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="publicationStatus">The publication status to filter the products (optional)</param>
        /// <returns>GetCategoriesContainingProductsByStatusResult</returns>
        public GetCategoriesContainingProductsByStatusResult GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGet(string accept, string scopeId, string publicationStatus = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCategoriesContainingProductsByStatusResult> localVarResponse = GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGetWithHttpInfo(accept, scopeId, publicationStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the ids of the categories that contain products in a given publication state - {GetCategoriesContainingProductsByStatusRequest} Retrieve the ids of the categories that contain products in a given publication state
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="publicationStatus">The publication status to filter the products (optional)</param>
        /// <returns>ApiResponse of GetCategoriesContainingProductsByStatusResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCategoriesContainingProductsByStatusResult> GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGetWithHttpInfo(string accept, string scopeId, string publicationStatus = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (publicationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PublicationStatus", publicationStatus));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCategoriesContainingProductsByStatusResult>("/categories/{ScopeId}/containingProducts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the ids of the categories that contain products in a given publication state - {GetCategoriesContainingProductsByStatusRequest} Retrieve the ids of the categories that contain products in a given publication state
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="publicationStatus">The publication status to filter the products (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCategoriesContainingProductsByStatusResult</returns>
        public async System.Threading.Tasks.Task<GetCategoriesContainingProductsByStatusResult> GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGetAsync(string accept, string scopeId, string publicationStatus = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCategoriesContainingProductsByStatusResult> localVarResponse = await GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGetWithHttpInfoAsync(accept, scopeId, publicationStatus, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the ids of the categories that contain products in a given publication state - {GetCategoriesContainingProductsByStatusRequest} Retrieve the ids of the categories that contain products in a given publication state
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="publicationStatus">The publication status to filter the products (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCategoriesContainingProductsByStatusResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCategoriesContainingProductsByStatusResult>> GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGetWithHttpInfoAsync(string accept, string scopeId, string publicationStatus = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (publicationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PublicationStatus", publicationStatus));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCategoriesContainingProductsByStatusResult>("/categories/{ScopeId}/containingProducts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoriesContainingProductsByStatusRequestScopeIdcontainingProductsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the categories - {GetCategoriesRequest} Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;Category&gt;</returns>
        public List<Category> GetCategoriesRequestScopeIdGet(string accept, string scopeId, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Category>> localVarResponse = GetCategoriesRequestScopeIdGetWithHttpInfo(accept, scopeId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the categories - {GetCategoriesRequest} Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Category&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Category>> GetCategoriesRequestScopeIdGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoriesRequestScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoriesRequestScopeIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Category>>("/categories/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoriesRequestScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the categories - {GetCategoriesRequest} Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Category&gt;</returns>
        public async System.Threading.Tasks.Task<List<Category>> GetCategoriesRequestScopeIdGetAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Category>> localVarResponse = await GetCategoriesRequestScopeIdGetWithHttpInfoAsync(accept, scopeId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the categories - {GetCategoriesRequest} Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Category&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Category>>> GetCategoriesRequestScopeIdGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoriesRequestScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoriesRequestScopeIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Category>>("/categories/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoriesRequestScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the categories - {GetCategoriesV2Request} Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>CategoryList</returns>
        public CategoryList GetCategoriesV2Requestv2ScopeIdGet(string accept, string scopeId, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryList> localVarResponse = GetCategoriesV2Requestv2ScopeIdGetWithHttpInfo(accept, scopeId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the categories - {GetCategoriesV2Request} Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of CategoryList</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryList> GetCategoriesV2Requestv2ScopeIdGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoriesV2Requestv2ScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoriesV2Requestv2ScopeIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryList>("/categories/v2/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoriesV2Requestv2ScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the categories - {GetCategoriesV2Request} Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryList</returns>
        public async System.Threading.Tasks.Task<CategoryList> GetCategoriesV2Requestv2ScopeIdGetAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryList> localVarResponse = await GetCategoriesV2Requestv2ScopeIdGetWithHttpInfoAsync(accept, scopeId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the categories - {GetCategoriesV2Request} Retrieve a flat list of the categories for a scope, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryList)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryList>> GetCategoriesV2Requestv2ScopeIdGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoriesV2Requestv2ScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoriesV2Requestv2ScopeIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryList>("/categories/v2/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoriesV2Requestv2ScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenRequest} Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;Category&gt;</returns>
        public List<Category> GetCategoryChildrenRequestScopeIdCategoryIdchildrenGet(string accept, string scopeId, string categoryId, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Category>> localVarResponse = GetCategoryChildrenRequestScopeIdCategoryIdchildrenGetWithHttpInfo(accept, scopeId, categoryId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenRequest} Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Category&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Category>> GetCategoryChildrenRequestScopeIdCategoryIdchildrenGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryChildrenRequestScopeIdCategoryIdchildrenGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryChildrenRequestScopeIdCategoryIdchildrenGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryChildrenRequestScopeIdCategoryIdchildrenGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Category>>("/categories/{ScopeId}/{CategoryId}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryChildrenRequestScopeIdCategoryIdchildrenGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenRequest} Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Category&gt;</returns>
        public async System.Threading.Tasks.Task<List<Category>> GetCategoryChildrenRequestScopeIdCategoryIdchildrenGetAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Category>> localVarResponse = await GetCategoryChildrenRequestScopeIdCategoryIdchildrenGetWithHttpInfoAsync(accept, scopeId, categoryId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenRequest} Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Category&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Category>>> GetCategoryChildrenRequestScopeIdCategoryIdchildrenGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryChildrenRequestScopeIdCategoryIdchildrenGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryChildrenRequestScopeIdCategoryIdchildrenGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryChildrenRequestScopeIdCategoryIdchildrenGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Category>>("/categories/{ScopeId}/{CategoryId}/children", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryChildrenRequestScopeIdCategoryIdchildrenGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenV2Request} Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>CategoryList</returns>
        public CategoryList GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGet(string accept, string scopeId, string categoryId, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryList> localVarResponse = GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGetWithHttpInfo(accept, scopeId, categoryId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenV2Request} Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of CategoryList</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryList> GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryList>("/categories/v2/{ScopeId}/{CategoryId}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenV2Request} Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryList</returns>
        public async System.Threading.Tasks.Task<CategoryList> GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGetAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryList> localVarResponse = await GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGetWithHttpInfoAsync(accept, scopeId, categoryId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the tree of child categories for a category - {GetCategoryChildrenV2Request} Retrieve the tree of child categories for a category, the relationships will not be loaded
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryList)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryList>> GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryList>("/categories/v2/{ScopeId}/{CategoryId}/children", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryChildrenV2Requestv2ScopeIdCategoryIdchildrenGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsRequest} Retrieve all relationships for a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;Relationship&gt;</returns>
        public List<Relationship> GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGet(string accept, string scopeId, string categoryId, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Relationship>> localVarResponse = GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGetWithHttpInfo(accept, scopeId, categoryId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsRequest} Retrieve all relationships for a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Relationship&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Relationship>> GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Relationship>>("/categories/{ScopeId}/{CategoryId}/relationships", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsRequest} Retrieve all relationships for a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Relationship&gt;</returns>
        public async System.Threading.Tasks.Task<List<Relationship>> GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGetAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Relationship>> localVarResponse = await GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGetWithHttpInfoAsync(accept, scopeId, categoryId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsRequest} Retrieve all relationships for a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Relationship&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Relationship>>> GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Relationship>>("/categories/{ScopeId}/{CategoryId}/relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryRelationshipsRequestScopeIdCategoryIdrelationshipsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsV2Request} Retrieve all relationships for a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;Relationship&gt;</returns>
        public List<Relationship> GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGet(string accept, string scopeId, string categoryId, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Relationship>> localVarResponse = GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGetWithHttpInfo(accept, scopeId, categoryId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsV2Request} Retrieve all relationships for a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Relationship&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Relationship>> GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Relationship>>("/categories/v2/{ScopeId}/{CategoryId}/relationships", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsV2Request} Retrieve all relationships for a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Relationship&gt;</returns>
        public async System.Threading.Tasks.Task<List<Relationship>> GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGetAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Relationship>> localVarResponse = await GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGetWithHttpInfoAsync(accept, scopeId, categoryId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all relationships for a category - {GetCategoryRelationshipsV2Request} Retrieve all relationships for a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Relationship&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Relationship>>> GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Relationship>>("/categories/v2/{ScopeId}/{CategoryId}/relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryRelationshipsV2Requestv2ScopeIdCategoryIdrelationshipsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a category - {GetCategoryRequest} Retrieve a category  without loading the children or relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>Category</returns>
        public Category GetCategoryRequestScopeIdCategoryIdGet(string accept, string scopeId, string categoryId, bool? includeRelationships = default(bool?), string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> localVarResponse = GetCategoryRequestScopeIdCategoryIdGetWithHttpInfo(accept, scopeId, categoryId, includeRelationships, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a category - {GetCategoryRequest} Retrieve a category  without loading the children or relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> GetCategoryRequestScopeIdCategoryIdGetWithHttpInfo(string accept, string scopeId, string categoryId, bool? includeRelationships = default(bool?), string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryRequestScopeIdCategoryIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryRequestScopeIdCategoryIdGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryRequestScopeIdCategoryIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Category>("/categories/{ScopeId}/{CategoryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryRequestScopeIdCategoryIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a category - {GetCategoryRequest} Retrieve a category  without loading the children or relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> GetCategoryRequestScopeIdCategoryIdGetAsync(string accept, string scopeId, string categoryId, bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> localVarResponse = await GetCategoryRequestScopeIdCategoryIdGetWithHttpInfoAsync(accept, scopeId, categoryId, includeRelationships, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a category - {GetCategoryRequest} Retrieve a category  without loading the children or relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category>> GetCategoryRequestScopeIdCategoryIdGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryRequestScopeIdCategoryIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryRequestScopeIdCategoryIdGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryRequestScopeIdCategoryIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Category>("/categories/{ScopeId}/{CategoryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryRequestScopeIdCategoryIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the category tree existing items of the specified parameters - {GetCategoryTreeExistingItemByStateRequest} Retrieve the category tree existing items of the specified parameters
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="draftState">The draft state used to filter the products (optional)</param>
        /// <param name="isNew">The flag to get only new or not new products (optional)</param>
        /// <param name="hasNotification">The flag to get only or not products with change notification (optional)</param>
        /// <returns>GetCategoryTreeExistingItemByStateResult</returns>
        public GetCategoryTreeExistingItemByStateResult GetCategoryTreeExistingItemByStateRequestScopeIdexistingGet(string accept, string scopeId, string cultureName = default(string), string draftState = default(string), bool? isNew = default(bool?), bool? hasNotification = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCategoryTreeExistingItemByStateResult> localVarResponse = GetCategoryTreeExistingItemByStateRequestScopeIdexistingGetWithHttpInfo(accept, scopeId, cultureName, draftState, isNew, hasNotification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the category tree existing items of the specified parameters - {GetCategoryTreeExistingItemByStateRequest} Retrieve the category tree existing items of the specified parameters
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="draftState">The draft state used to filter the products (optional)</param>
        /// <param name="isNew">The flag to get only new or not new products (optional)</param>
        /// <param name="hasNotification">The flag to get only or not products with change notification (optional)</param>
        /// <returns>ApiResponse of GetCategoryTreeExistingItemByStateResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCategoryTreeExistingItemByStateResult> GetCategoryTreeExistingItemByStateRequestScopeIdexistingGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string), string draftState = default(string), bool? isNew = default(bool?), bool? hasNotification = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryTreeExistingItemByStateRequestScopeIdexistingGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryTreeExistingItemByStateRequestScopeIdexistingGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (draftState != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "DraftState", draftState));
            }
            if (isNew != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IsNew", isNew));
            }
            if (hasNotification != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "HasNotification", hasNotification));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCategoryTreeExistingItemByStateResult>("/categories/{ScopeId}/existing", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryTreeExistingItemByStateRequestScopeIdexistingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the category tree existing items of the specified parameters - {GetCategoryTreeExistingItemByStateRequest} Retrieve the category tree existing items of the specified parameters
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="draftState">The draft state used to filter the products (optional)</param>
        /// <param name="isNew">The flag to get only new or not new products (optional)</param>
        /// <param name="hasNotification">The flag to get only or not products with change notification (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCategoryTreeExistingItemByStateResult</returns>
        public async System.Threading.Tasks.Task<GetCategoryTreeExistingItemByStateResult> GetCategoryTreeExistingItemByStateRequestScopeIdexistingGetAsync(string accept, string scopeId, string cultureName = default(string), string draftState = default(string), bool? isNew = default(bool?), bool? hasNotification = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCategoryTreeExistingItemByStateResult> localVarResponse = await GetCategoryTreeExistingItemByStateRequestScopeIdexistingGetWithHttpInfoAsync(accept, scopeId, cultureName, draftState, isNew, hasNotification, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the category tree existing items of the specified parameters - {GetCategoryTreeExistingItemByStateRequest} Retrieve the category tree existing items of the specified parameters
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="draftState">The draft state used to filter the products (optional)</param>
        /// <param name="isNew">The flag to get only new or not new products (optional)</param>
        /// <param name="hasNotification">The flag to get only or not products with change notification (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCategoryTreeExistingItemByStateResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCategoryTreeExistingItemByStateResult>> GetCategoryTreeExistingItemByStateRequestScopeIdexistingGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), string draftState = default(string), bool? isNew = default(bool?), bool? hasNotification = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryTreeExistingItemByStateRequestScopeIdexistingGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryTreeExistingItemByStateRequestScopeIdexistingGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (draftState != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "DraftState", draftState));
            }
            if (isNew != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IsNew", isNew));
            }
            if (hasNotification != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "HasNotification", hasNotification));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCategoryTreeExistingItemByStateResult>("/categories/{ScopeId}/existing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryTreeExistingItemByStateRequestScopeIdexistingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all nodes and their child nodes of a category tree node path - {GetCategoryTreeNodesForPathRequest} Request to retrieve all nodes and their child nodes of a category tree node path
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The ScopeId of the request.</param>
        /// <param name="startId">The unique identifier of the first node of the path (a category id).</param>
        /// <param name="endId">The unique identifier of the last node of the path (a category id).</param>
        /// <param name="cultureName">The name of the culture to use to process the request.</param>
        /// <returns>CategoryTreeNode</returns>
        public CategoryTreeNode GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet(string accept, string scopeId, string startId, string endId, string cultureName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryTreeNode> localVarResponse = GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGetWithHttpInfo(accept, scopeId, startId, endId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all nodes and their child nodes of a category tree node path - {GetCategoryTreeNodesForPathRequest} Request to retrieve all nodes and their child nodes of a category tree node path
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The ScopeId of the request.</param>
        /// <param name="startId">The unique identifier of the first node of the path (a category id).</param>
        /// <param name="endId">The unique identifier of the last node of the path (a category id).</param>
        /// <param name="cultureName">The name of the culture to use to process the request.</param>
        /// <returns>ApiResponse of CategoryTreeNode</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryTreeNode> GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGetWithHttpInfo(string accept, string scopeId, string startId, string endId, string cultureName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet");

            // verify the required parameter 'startId' is set
            if (startId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'startId' when calling CategoriesApi->GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet");

            // verify the required parameter 'endId' is set
            if (endId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'endId' when calling CategoriesApi->GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CategoriesApi->GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("StartId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(startId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EndId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(endId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryTreeNode>("/categories/{ScopeId}/treeNodes/{StartId}/{EndId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all nodes and their child nodes of a category tree node path - {GetCategoryTreeNodesForPathRequest} Request to retrieve all nodes and their child nodes of a category tree node path
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The ScopeId of the request.</param>
        /// <param name="startId">The unique identifier of the first node of the path (a category id).</param>
        /// <param name="endId">The unique identifier of the last node of the path (a category id).</param>
        /// <param name="cultureName">The name of the culture to use to process the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryTreeNode</returns>
        public async System.Threading.Tasks.Task<CategoryTreeNode> GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGetAsync(string accept, string scopeId, string startId, string endId, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryTreeNode> localVarResponse = await GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGetWithHttpInfoAsync(accept, scopeId, startId, endId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all nodes and their child nodes of a category tree node path - {GetCategoryTreeNodesForPathRequest} Request to retrieve all nodes and their child nodes of a category tree node path
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The ScopeId of the request.</param>
        /// <param name="startId">The unique identifier of the first node of the path (a category id).</param>
        /// <param name="endId">The unique identifier of the last node of the path (a category id).</param>
        /// <param name="cultureName">The name of the culture to use to process the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryTreeNode)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryTreeNode>> GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGetWithHttpInfoAsync(string accept, string scopeId, string startId, string endId, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet");

            // verify the required parameter 'startId' is set
            if (startId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'startId' when calling CategoriesApi->GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet");

            // verify the required parameter 'endId' is set
            if (endId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'endId' when calling CategoriesApi->GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CategoriesApi->GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("StartId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(startId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EndId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(endId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryTreeNode>("/categories/{ScopeId}/treeNodes/{StartId}/{EndId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryTreeNodesForPathRequestScopeIdtreeNodesStartIdEndIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesRequest} Request to retrieve all the child nodes of a category node
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <returns>CategoryTreeNode</returns>
        public CategoryTreeNode GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryTreeNode> localVarResponse = GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGetWithHttpInfo(accept, scopeId, categoryId, cultureName, maximumItems);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesRequest} Request to retrieve all the child nodes of a category node
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <returns>ApiResponse of CategoryTreeNode</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryTreeNode> GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CategoriesApi->GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryTreeNode>("/categories/{ScopeId}/{CategoryId}/treeNodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesRequest} Request to retrieve all the child nodes of a category node
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryTreeNode</returns>
        public async System.Threading.Tasks.Task<CategoryTreeNode> GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGetAsync(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryTreeNode> localVarResponse = await GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGetWithHttpInfoAsync(accept, scopeId, categoryId, cultureName, maximumItems, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesRequest} Request to retrieve all the child nodes of a category node
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryTreeNode)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryTreeNode>> GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CategoriesApi->GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryTreeNode>("/categories/{ScopeId}/{CategoryId}/treeNodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryTreeNodesRequestScopeIdCategoryIdtreeNodesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesV2Request} Request to retrieve all the child nodes of a category node
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <returns>CategoryTreeNode</returns>
        public CategoryTreeNode GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryTreeNode> localVarResponse = GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGetWithHttpInfo(accept, scopeId, categoryId, cultureName, maximumItems);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesV2Request} Request to retrieve all the child nodes of a category node
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <returns>ApiResponse of CategoryTreeNode</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryTreeNode> GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CategoriesApi->GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryTreeNode>("/categories/v2/{ScopeId}/{CategoryId}/treeNodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesV2Request} Request to retrieve all the child nodes of a category node
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryTreeNode</returns>
        public async System.Threading.Tasks.Task<CategoryTreeNode> GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGetAsync(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryTreeNode> localVarResponse = await GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGetWithHttpInfoAsync(accept, scopeId, categoryId, cultureName, maximumItems, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the child nodes of a category node - {GetCategoryTreeNodesV2Request} Request to retrieve all the child nodes of a category node
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="categoryId">The root node category unique identifier</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="maximumItems">A hint that the service will use to determine the maximum number of nodes to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryTreeNode)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CategoryTreeNode>> GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName, int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CategoriesApi->GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryTreeNode>("/categories/v2/{ScopeId}/{CategoryId}/treeNodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryTreeNodesV2Requestv2ScopeIdCategoryIdtreeNodesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a category - {GetCategoryV2Request} Retrieve a category  without loading the children or relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeChildren">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>Category</returns>
        public Category GetCategoryV2Requestv2ScopeIdCategoryIdGet(string accept, string scopeId, string categoryId, bool? includeChildren = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> localVarResponse = GetCategoryV2Requestv2ScopeIdCategoryIdGetWithHttpInfo(accept, scopeId, categoryId, includeChildren, includeRelationships, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a category - {GetCategoryV2Request} Retrieve a category  without loading the children or relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeChildren">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> GetCategoryV2Requestv2ScopeIdCategoryIdGetWithHttpInfo(string accept, string scopeId, string categoryId, bool? includeChildren = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryV2Requestv2ScopeIdCategoryIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryV2Requestv2ScopeIdCategoryIdGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryV2Requestv2ScopeIdCategoryIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (includeChildren != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildren", includeChildren));
            }
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Category>("/categories/v2/{ScopeId}/{CategoryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryV2Requestv2ScopeIdCategoryIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a category - {GetCategoryV2Request} Retrieve a category  without loading the children or relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeChildren">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> GetCategoryV2Requestv2ScopeIdCategoryIdGetAsync(string accept, string scopeId, string categoryId, bool? includeChildren = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> localVarResponse = await GetCategoryV2Requestv2ScopeIdCategoryIdGetWithHttpInfoAsync(accept, scopeId, categoryId, includeChildren, includeRelationships, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a category - {GetCategoryV2Request} Retrieve a category  without loading the children or relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id</param>
        /// <param name="includeChildren">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="includeRelationships">Indicates if the relationships must be included in the response. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category>> GetCategoryV2Requestv2ScopeIdCategoryIdGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, bool? includeChildren = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetCategoryV2Requestv2ScopeIdCategoryIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetCategoryV2Requestv2ScopeIdCategoryIdGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryV2Requestv2ScopeIdCategoryIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (includeChildren != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildren", includeChildren));
            }
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Category>("/categories/v2/{ScopeId}/{CategoryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryV2Requestv2ScopeIdCategoryIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryRequest} Retrieve products from a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">Whether or not to include the variants (if they exists) of the products. (optional)</param>
        /// <param name="includePriceLists">Whether or not to include the price lists of the products. (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> GetProductsByCategoryRequestScopeIdCategoryIdproductsGet(string accept, string scopeId, string categoryId, string cultureName = default(string), int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Product>> localVarResponse = GetProductsByCategoryRequestScopeIdCategoryIdproductsGetWithHttpInfo(accept, scopeId, categoryId, cultureName, startingIndex, maximumItems, includeVariants, includePriceLists);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryRequest} Retrieve products from a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">Whether or not to include the variants (if they exists) of the products. (optional)</param>
        /// <param name="includePriceLists">Whether or not to include the price lists of the products. (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Product>> GetProductsByCategoryRequestScopeIdCategoryIdproductsGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName = default(string), int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetProductsByCategoryRequestScopeIdCategoryIdproductsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetProductsByCategoryRequestScopeIdCategoryIdproductsGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetProductsByCategoryRequestScopeIdCategoryIdproductsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (includeVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeVariants", includeVariants));
            }
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Product>>("/categories/{ScopeId}/{CategoryId}/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsByCategoryRequestScopeIdCategoryIdproductsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryRequest} Retrieve products from a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">Whether or not to include the variants (if they exists) of the products. (optional)</param>
        /// <param name="includePriceLists">Whether or not to include the price lists of the products. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> GetProductsByCategoryRequestScopeIdCategoryIdproductsGetAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Product>> localVarResponse = await GetProductsByCategoryRequestScopeIdCategoryIdproductsGetWithHttpInfoAsync(accept, scopeId, categoryId, cultureName, startingIndex, maximumItems, includeVariants, includePriceLists, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryRequest} Retrieve products from a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">Whether or not to include the variants (if they exists) of the products. (optional)</param>
        /// <param name="includePriceLists">Whether or not to include the price lists of the products. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Product>>> GetProductsByCategoryRequestScopeIdCategoryIdproductsGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetProductsByCategoryRequestScopeIdCategoryIdproductsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetProductsByCategoryRequestScopeIdCategoryIdproductsGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetProductsByCategoryRequestScopeIdCategoryIdproductsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (includeVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeVariants", includeVariants));
            }
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Product>>("/categories/{ScopeId}/{CategoryId}/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsByCategoryRequestScopeIdCategoryIdproductsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryV2Request} Retrieve products from a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="continuationToken">The continuation token used for pagination (optional)</param>
        /// <param name="pageSize">The maximum number of products to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ProductListPage</returns>
        public ProductListPage GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGet(string accept, string scopeId, string categoryId, string continuationToken = default(string), int? pageSize = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductListPage> localVarResponse = GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGetWithHttpInfo(accept, scopeId, categoryId, continuationToken, pageSize, includeVariants, includePriceLists, includeRelationships, includeMedia, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryV2Request} Retrieve products from a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="continuationToken">The continuation token used for pagination (optional)</param>
        /// <param name="pageSize">The maximum number of products to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of ProductListPage</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductListPage> GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGetWithHttpInfo(string accept, string scopeId, string categoryId, string continuationToken = default(string), int? pageSize = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ContinuationToken", continuationToken));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (includeVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeVariants", includeVariants));
            }
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (includeMedia != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeMedia", includeMedia));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductListPage>("/categories/v2/{ScopeId}/{CategoryId}/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryV2Request} Retrieve products from a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="continuationToken">The continuation token used for pagination (optional)</param>
        /// <param name="pageSize">The maximum number of products to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductListPage</returns>
        public async System.Threading.Tasks.Task<ProductListPage> GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGetAsync(string accept, string scopeId, string categoryId, string continuationToken = default(string), int? pageSize = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductListPage> localVarResponse = await GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGetWithHttpInfoAsync(accept, scopeId, categoryId, continuationToken, pageSize, includeVariants, includePriceLists, includeRelationships, includeMedia, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve products from a category - {GetProductsByCategoryV2Request} Retrieve products from a category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="continuationToken">The continuation token used for pagination (optional)</param>
        /// <param name="pageSize">The maximum number of products to return. Default value : 10 (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductListPage)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductListPage>> GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string continuationToken = default(string), int? pageSize = default(int?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (continuationToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ContinuationToken", continuationToken));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (includeVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeVariants", includeVariants));
            }
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (includeMedia != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeMedia", includeMedia));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductListPage>("/categories/v2/{ScopeId}/{CategoryId}/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsByCategoryV2Requestv2ScopeIdCategoryIdproductsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing category - {UpdateCategoryRequest} Update an existing category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Category</returns>
        public Category UpdateCategoryRequestScopeIdCategoryIdPost(string accept, string scopeId, string categoryId, UpdateCategoryRequest body = default(UpdateCategoryRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> localVarResponse = UpdateCategoryRequestScopeIdCategoryIdPostWithHttpInfo(accept, scopeId, categoryId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing category - {UpdateCategoryRequest} Update an existing category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> UpdateCategoryRequestScopeIdCategoryIdPostWithHttpInfo(string accept, string scopeId, string categoryId, UpdateCategoryRequest body = default(UpdateCategoryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->UpdateCategoryRequestScopeIdCategoryIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->UpdateCategoryRequestScopeIdCategoryIdPost");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->UpdateCategoryRequestScopeIdCategoryIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Category>("/categories/{ScopeId}/{CategoryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCategoryRequestScopeIdCategoryIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing category - {UpdateCategoryRequest} Update an existing category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> UpdateCategoryRequestScopeIdCategoryIdPostAsync(string accept, string scopeId, string categoryId, UpdateCategoryRequest body = default(UpdateCategoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> localVarResponse = await UpdateCategoryRequestScopeIdCategoryIdPostWithHttpInfoAsync(accept, scopeId, categoryId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing category - {UpdateCategoryRequest} Update an existing category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category>> UpdateCategoryRequestScopeIdCategoryIdPostWithHttpInfoAsync(string accept, string scopeId, string categoryId, UpdateCategoryRequest body = default(UpdateCategoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->UpdateCategoryRequestScopeIdCategoryIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->UpdateCategoryRequestScopeIdCategoryIdPost");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->UpdateCategoryRequestScopeIdCategoryIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Category>("/categories/{ScopeId}/{CategoryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCategoryRequestScopeIdCategoryIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update categories sequence - {UpdateCategorySequenceRequest} Update categories sequence
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category to which the child categories are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdateCategorySequenceResponse</returns>
        public UpdateCategorySequenceResponse UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePost(string accept, string scopeId, string categoryId, UpdateCategorySequenceRequest body = default(UpdateCategorySequenceRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateCategorySequenceResponse> localVarResponse = UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePostWithHttpInfo(accept, scopeId, categoryId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update categories sequence - {UpdateCategorySequenceRequest} Update categories sequence
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category to which the child categories are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdateCategorySequenceResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateCategorySequenceResponse> UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePostWithHttpInfo(string accept, string scopeId, string categoryId, UpdateCategorySequenceRequest body = default(UpdateCategorySequenceRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePost");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateCategorySequenceResponse>("/categories/{ScopeId}/{CategoryId}/children/sequence", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update categories sequence - {UpdateCategorySequenceRequest} Update categories sequence
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category to which the child categories are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCategorySequenceResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCategorySequenceResponse> UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePostAsync(string accept, string scopeId, string categoryId, UpdateCategorySequenceRequest body = default(UpdateCategorySequenceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateCategorySequenceResponse> localVarResponse = await UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePostWithHttpInfoAsync(accept, scopeId, categoryId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update categories sequence - {UpdateCategorySequenceRequest} Update categories sequence
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category to which the child categories are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCategorySequenceResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateCategorySequenceResponse>> UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePostWithHttpInfoAsync(string accept, string scopeId, string categoryId, UpdateCategorySequenceRequest body = default(UpdateCategorySequenceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePost");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateCategorySequenceResponse>("/categories/{ScopeId}/{CategoryId}/children/sequence", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCategorySequenceRequestScopeIdCategoryIdchildrensequencePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing category - {UpdateCategoryV2Request} Update an existing category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Category</returns>
        public Category UpdateCategoryV2Requestv2ScopeIdCategoryIdCreate(string accept, string scopeId, string categoryId, UpdateCategoryV2Request body = default(UpdateCategoryV2Request))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> localVarResponse = UpdateCategoryV2Requestv2ScopeIdCategoryIdCreateWithHttpInfo(accept, scopeId, categoryId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing category - {UpdateCategoryV2Request} Update an existing category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> UpdateCategoryV2Requestv2ScopeIdCategoryIdCreateWithHttpInfo(string accept, string scopeId, string categoryId, UpdateCategoryV2Request body = default(UpdateCategoryV2Request))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->UpdateCategoryV2Requestv2ScopeIdCategoryIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->UpdateCategoryV2Requestv2ScopeIdCategoryIdCreate");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->UpdateCategoryV2Requestv2ScopeIdCategoryIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Category>("/categories/v2/{ScopeId}/{CategoryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCategoryV2Requestv2ScopeIdCategoryIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing category - {UpdateCategoryV2Request} Update an existing category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> UpdateCategoryV2Requestv2ScopeIdCategoryIdCreateAsync(string accept, string scopeId, string categoryId, UpdateCategoryV2Request body = default(UpdateCategoryV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category> localVarResponse = await UpdateCategoryV2Requestv2ScopeIdCategoryIdCreateWithHttpInfoAsync(accept, scopeId, categoryId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing category - {UpdateCategoryV2Request} Update an existing category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category&#39;s id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Category>> UpdateCategoryV2Requestv2ScopeIdCategoryIdCreateWithHttpInfoAsync(string accept, string scopeId, string categoryId, UpdateCategoryV2Request body = default(UpdateCategoryV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CategoriesApi->UpdateCategoryV2Requestv2ScopeIdCategoryIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CategoriesApi->UpdateCategoryV2Requestv2ScopeIdCategoryIdCreate");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->UpdateCategoryV2Requestv2ScopeIdCategoryIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Category>("/categories/v2/{ScopeId}/{CategoryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCategoryV2Requestv2ScopeIdCategoryIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
