/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a category definition - {CreateCategoryDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Create a category definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductDefinition</returns>
        ProductDefinition CreateCategoryDefinitionRequestdefinitionscategoryNamePost(string accept, string name, CreateCategoryDefinitionRequest body = default(CreateCategoryDefinitionRequest));

        /// <summary>
        /// Create a category definition - {CreateCategoryDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Create a category definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductDefinition</returns>
        ApiResponse<ProductDefinition> CreateCategoryDefinitionRequestdefinitionscategoryNamePostWithHttpInfo(string accept, string name, CreateCategoryDefinitionRequest body = default(CreateCategoryDefinitionRequest));
        /// <summary>
        /// Create a new custom profile definition - {CreateEntityTypeRequest}
        /// </summary>
        /// <remarks>
        /// Create a new entity type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entityTypeName">The unique name for this entity type.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateEntityTypeRequestEntityTypeEntityTypeNamePost(string accept, string entityTypeName, CreateEntityTypeRequest body = default(CreateEntityTypeRequest));

        /// <summary>
        /// Create a new custom profile definition - {CreateEntityTypeRequest}
        /// </summary>
        /// <remarks>
        /// Create a new entity type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entityTypeName">The unique name for this entity type.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateEntityTypeRequestEntityTypeEntityTypeNamePostWithHttpInfo(string accept, string entityTypeName, CreateEntityTypeRequest body = default(CreateEntityTypeRequest));
        /// <summary>
        /// Create a product attribute group - {CreateProductAttributeGroupRequest}
        /// </summary>
        /// <remarks>
        /// Create a product attribute group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductPropertyDefinitionGroup</returns>
        ProductPropertyDefinitionGroup CreateProductAttributeGroupRequestattributegroupsproductNamePost(string accept, string name, CreateProductAttributeGroupRequest body = default(CreateProductAttributeGroupRequest));

        /// <summary>
        /// Create a product attribute group - {CreateProductAttributeGroupRequest}
        /// </summary>
        /// <remarks>
        /// Create a product attribute group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductPropertyDefinitionGroup</returns>
        ApiResponse<ProductPropertyDefinitionGroup> CreateProductAttributeGroupRequestattributegroupsproductNamePostWithHttpInfo(string accept, string name, CreateProductAttributeGroupRequest body = default(CreateProductAttributeGroupRequest));
        /// <summary>
        /// Create a product attribute - {CreateProductAttributeRequest}
        /// </summary>
        /// <remarks>
        /// Create a product attribute.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductPropertyDefinition</returns>
        ProductPropertyDefinition CreateProductAttributeRequestattributesproductAttributeNamePost(string accept, string attributeName, CreateProductAttributeRequest body = default(CreateProductAttributeRequest));

        /// <summary>
        /// Create a product attribute - {CreateProductAttributeRequest}
        /// </summary>
        /// <remarks>
        /// Create a product attribute.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductPropertyDefinition</returns>
        ApiResponse<ProductPropertyDefinition> CreateProductAttributeRequestattributesproductAttributeNamePostWithHttpInfo(string accept, string attributeName, CreateProductAttributeRequest body = default(CreateProductAttributeRequest));
        /// <summary>
        /// Create a product definition - {CreateProductDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Create a product definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductDefinition</returns>
        ProductDefinition CreateProductDefinitionRequestdefinitionsproductNamePost(string accept, string name, CreateProductDefinitionRequest body = default(CreateProductDefinitionRequest));

        /// <summary>
        /// Create a product definition - {CreateProductDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Create a product definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductDefinition</returns>
        ApiResponse<ProductDefinition> CreateProductDefinitionRequestdefinitionsproductNamePostWithHttpInfo(string accept, string name, CreateProductDefinitionRequest body = default(CreateProductDefinitionRequest));
        /// <summary>
        /// Creates a new product lookup type definition - {CreateProductLookupTypeDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new product lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Lookup</returns>
        Lookup CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePost(string accept, string lookupName, CreateProductLookupTypeDefinitionRequest body = default(CreateProductLookupTypeDefinitionRequest));

        /// <summary>
        /// Creates a new product lookup type definition - {CreateProductLookupTypeDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new product lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Lookup</returns>
        ApiResponse<Lookup> CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePostWithHttpInfo(string accept, string lookupName, CreateProductLookupTypeDefinitionRequest body = default(CreateProductLookupTypeDefinitionRequest));
        /// <summary>
        /// Delete a product attribute group - {DeleteProductAttributeGroupRequest}
        /// </summary>
        /// <remarks>
        /// Delete a product attribute group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <returns></returns>
        void DeleteProductAttributeGroupRequestattributegroupsproductNameDelete(string accept, string name);

        /// <summary>
        /// Delete a product attribute group - {DeleteProductAttributeGroupRequest}
        /// </summary>
        /// <remarks>
        /// Delete a product attribute group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductAttributeGroupRequestattributegroupsproductNameDeleteWithHttpInfo(string accept, string name);
        /// <summary>
        /// Delete a product attribute - {DeleteProductAttributeRequest}
        /// </summary>
        /// <remarks>
        /// Delete a product attribute.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <returns></returns>
        void DeleteProductAttributeRequestattributesproductAttributeNameDelete(string accept, string attributeName);

        /// <summary>
        /// Delete a product attribute - {DeleteProductAttributeRequest}
        /// </summary>
        /// <remarks>
        /// Delete a product attribute.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductAttributeRequestattributesproductAttributeNameDeleteWithHttpInfo(string accept, string attributeName);
        /// <summary>
        /// Delete specified values from a product lookup type definition - {DeleteProductLookupValuesRequest}
        /// </summary>
        /// <remarks>
        /// Delete specified values from a product lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of a lookup</param>
        /// <param name="values">The list of values to be removed from this lookup. (optional)</param>
        /// <returns></returns>
        void DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDelete(string accept, string lookupName, List<string> values = default(List<string>));

        /// <summary>
        /// Delete specified values from a product lookup type definition - {DeleteProductLookupValuesRequest}
        /// </summary>
        /// <remarks>
        /// Delete specified values from a product lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of a lookup</param>
        /// <param name="values">The list of values to be removed from this lookup. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDeleteWithHttpInfo(string accept, string lookupName, List<string> values = default(List<string>));
        /// <summary>
        /// Get list of product attribute groups - {FindProductAttributeGroupsRequest}
        /// </summary>
        /// <remarks>
        /// Get list of product attribute groups.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductPropertyDefinitionGroupQueryResult</returns>
        ProductPropertyDefinitionGroupQueryResult FindProductAttributeGroupsRequestattributegroupsproductfindPost(string accept, FindProductAttributeGroupsRequest body = default(FindProductAttributeGroupsRequest));

        /// <summary>
        /// Get list of product attribute groups - {FindProductAttributeGroupsRequest}
        /// </summary>
        /// <remarks>
        /// Get list of product attribute groups.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductPropertyDefinitionGroupQueryResult</returns>
        ApiResponse<ProductPropertyDefinitionGroupQueryResult> FindProductAttributeGroupsRequestattributegroupsproductfindPostWithHttpInfo(string accept, FindProductAttributeGroupsRequest body = default(FindProductAttributeGroupsRequest));
        /// <summary>
        /// Retrieve all currencies - {GetCurrenciesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all currencies.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported currencies (optional)</param>
        /// <returns>GetCurrenciesResponse</returns>
        GetCurrenciesResponse GetCurrenciesRequestcurrenciesGet(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?));

        /// <summary>
        /// Retrieve all currencies - {GetCurrenciesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all currencies.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported currencies (optional)</param>
        /// <returns>ApiResponse of GetCurrenciesResponse</returns>
        ApiResponse<GetCurrenciesResponse> GetCurrenciesRequestcurrenciesGetWithHttpInfo(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?));
        /// <summary>
        /// Retrieve the entity definition from Profiles entities - {GetCustomerDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the entity definition from Profiles entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>EntityDefinition</returns>
        EntityDefinition GetCustomerDefinitionRequestdefinitionscustomerNameGet(string accept, string name, string cultureName = default(string));

        /// <summary>
        /// Retrieve the entity definition from Profiles entities - {GetCustomerDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the entity definition from Profiles entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of EntityDefinition</returns>
        ApiResponse<EntityDefinition> GetCustomerDefinitionRequestdefinitionscustomerNameGetWithHttpInfo(string accept, string name, string cultureName = default(string));
        /// <summary>
        /// Retrieve the entity definitions in Profiles - {GetCustomerDefinitionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customer entity definitions in Profiles. A definition is a list of properties that is allowed to be set to the instance of entity being used.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>List&lt;EntityDefinition&gt;</returns>
        List<EntityDefinition> GetCustomerDefinitionsRequestdefinitionscustomerGet(string accept, string cultureName = default(string));

        /// <summary>
        /// Retrieve the entity definitions in Profiles - {GetCustomerDefinitionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customer entity definitions in Profiles. A definition is a list of properties that is allowed to be set to the instance of entity being used.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;EntityDefinition&gt;</returns>
        ApiResponse<List<EntityDefinition>> GetCustomerDefinitionsRequestdefinitionscustomerGetWithHttpInfo(string accept, string cultureName = default(string));
        /// <summary>
        /// Retrieve the lookup from Profiles lookups - {GetCustomerLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Customer entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>Lookup</returns>
        Lookup GetCustomerLookupRequestlookupscustomerLookupNameGet(string accept, string lookupName);

        /// <summary>
        /// Retrieve the lookup from Profiles lookups - {GetCustomerLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Customer entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>ApiResponse of Lookup</returns>
        ApiResponse<Lookup> GetCustomerLookupRequestlookupscustomerLookupNameGetWithHttpInfo(string accept, string lookupName);
        /// <summary>
        /// Retrieve the Profiles lookups - {GetCustomerLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Customer entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;Lookup&gt;</returns>
        List<Lookup> GetCustomerLookupsRequestlookupscustomerGet(string accept);

        /// <summary>
        /// Retrieve the Profiles lookups - {GetCustomerLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Customer entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;Lookup&gt;</returns>
        ApiResponse<List<Lookup>> GetCustomerLookupsRequestlookupscustomerGetWithHttpInfo(string accept);
        /// <summary>
        /// Retrieve the lookup from Marketing lookups - {GetMarketingLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Marketing entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>Lookup</returns>
        Lookup GetMarketingLookupRequestlookupsmarketingLookupNameGet(string accept, string lookupName);

        /// <summary>
        /// Retrieve the lookup from Marketing lookups - {GetMarketingLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Marketing entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>ApiResponse of Lookup</returns>
        ApiResponse<Lookup> GetMarketingLookupRequestlookupsmarketingLookupNameGetWithHttpInfo(string accept, string lookupName);
        /// <summary>
        /// Retrieve the Marketing lookups - {GetMarketingLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Marketing entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;Lookup&gt;</returns>
        List<Lookup> GetMarketingLookupsRequestlookupsmarketingGet(string accept);

        /// <summary>
        /// Retrieve the Marketing lookups - {GetMarketingLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Marketing entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;Lookup&gt;</returns>
        ApiResponse<List<Lookup>> GetMarketingLookupsRequestlookupsmarketingGetWithHttpInfo(string accept);
        /// <summary>
        /// Retrieve the entity definition from Orders entities - {GetOrderDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the entity definition from Orders entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>EntityDefinition</returns>
        EntityDefinition GetOrderDefinitionRequestdefinitionsorderNameGet(string accept, string name, string cultureName = default(string));

        /// <summary>
        /// Retrieve the entity definition from Orders entities - {GetOrderDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the entity definition from Orders entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of EntityDefinition</returns>
        ApiResponse<EntityDefinition> GetOrderDefinitionRequestdefinitionsorderNameGetWithHttpInfo(string accept, string name, string cultureName = default(string));
        /// <summary>
        /// Retrieve the entity definitions defined in Orders - {GetOrderDefinitionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the entity definitions defined in Orders. A definition is a list of properties that is allowed to be set to the instance of entity being used
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;EntityDefinition&gt;</returns>
        List<EntityDefinition> GetOrderDefinitionsRequestdefinitionsorderGet(string accept, string cultureName = default(string));

        /// <summary>
        /// Retrieve the entity definitions defined in Orders - {GetOrderDefinitionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the entity definitions defined in Orders. A definition is a list of properties that is allowed to be set to the instance of entity being used
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;EntityDefinition&gt;</returns>
        ApiResponse<List<EntityDefinition>> GetOrderDefinitionsRequestdefinitionsorderGetWithHttpInfo(string accept, string cultureName = default(string));
        /// <summary>
        /// Retrieve the lookup from Orders lookups - {GetOrderLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Order entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>Lookup</returns>
        Lookup GetOrderLookupRequestlookupsorderLookupNameGet(string accept, string lookupName);

        /// <summary>
        /// Retrieve the lookup from Orders lookups - {GetOrderLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Order entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>ApiResponse of Lookup</returns>
        ApiResponse<Lookup> GetOrderLookupRequestlookupsorderLookupNameGetWithHttpInfo(string accept, string lookupName);
        /// <summary>
        /// Retrieve the Orders lookups - {GetOrderLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Order entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;Lookup&gt;</returns>
        List<Lookup> GetOrderLookupsRequestlookupsorderGet(string accept);

        /// <summary>
        /// Retrieve the Orders lookups - {GetOrderLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Order entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;Lookup&gt;</returns>
        ApiResponse<List<Lookup>> GetOrderLookupsRequestlookupsorderGetWithHttpInfo(string accept);
        /// <summary>
        /// Retrieve the lookup from Products lookups - {GetProductLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Product entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>Lookup</returns>
        Lookup GetProductLookupRequestlookupsproductLookupNameGet(string accept, string lookupName);

        /// <summary>
        /// Retrieve the lookup from Products lookups - {GetProductLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Product entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>ApiResponse of Lookup</returns>
        ApiResponse<Lookup> GetProductLookupRequestlookupsproductLookupNameGetWithHttpInfo(string accept, string lookupName);
        /// <summary>
        /// Retrieve the Product lookups - {GetProductLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Product entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;Lookup&gt;</returns>
        List<Lookup> GetProductLookupsRequestlookupsproductGet(string accept);

        /// <summary>
        /// Retrieve the Product lookups - {GetProductLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Product entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;Lookup&gt;</returns>
        ApiResponse<List<Lookup>> GetProductLookupsRequestlookupsproductGetWithHttpInfo(string accept);
        /// <summary>
        /// Return the targeting items (metadata used to construct targeting expression) - {GetTargetingMetadataRequest}
        /// </summary>
        /// <remarks>
        /// Return the targeting items (metadata used to construct targeting expression)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>GetTargetingMetadataResponse</returns>
        GetTargetingMetadataResponse GetTargetingMetadataRequesttargetingGet(string accept, string cultureName = default(string));

        /// <summary>
        /// Return the targeting items (metadata used to construct targeting expression) - {GetTargetingMetadataRequest}
        /// </summary>
        /// <remarks>
        /// Return the targeting items (metadata used to construct targeting expression)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of GetTargetingMetadataResponse</returns>
        ApiResponse<GetTargetingMetadataResponse> GetTargetingMetadataRequesttargetingGetWithHttpInfo(string accept, string cultureName = default(string));
        /// <summary>
        /// Update a category definition - {UpdateCategoryDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a category definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductDefinition</returns>
        ProductDefinition UpdateCategoryDefinitionRequestdefinitionscategoryNameCreate(string accept, string name, UpdateCategoryDefinitionRequest body = default(UpdateCategoryDefinitionRequest));

        /// <summary>
        /// Update a category definition - {UpdateCategoryDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a category definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductDefinition</returns>
        ApiResponse<ProductDefinition> UpdateCategoryDefinitionRequestdefinitionscategoryNameCreateWithHttpInfo(string accept, string name, UpdateCategoryDefinitionRequest body = default(UpdateCategoryDefinitionRequest));
        /// <summary>
        /// Update a marketing lookup type definition - {UpdateMarketingLookupTypeDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a marketing lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Lookup</returns>
        Lookup UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePost(string accept, string lookupName, UpdateMarketingLookupTypeDefinitionRequest body = default(UpdateMarketingLookupTypeDefinitionRequest));

        /// <summary>
        /// Update a marketing lookup type definition - {UpdateMarketingLookupTypeDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a marketing lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Lookup</returns>
        ApiResponse<Lookup> UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePostWithHttpInfo(string accept, string lookupName, UpdateMarketingLookupTypeDefinitionRequest body = default(UpdateMarketingLookupTypeDefinitionRequest));
        /// <summary>
        /// Update a product attribute group - {UpdateProductAttributeGroupRequest}
        /// </summary>
        /// <remarks>
        /// Update a product attribute group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductPropertyDefinitionGroup</returns>
        ProductPropertyDefinitionGroup UpdateProductAttributeGroupRequestattributegroupsproductNameCreate(string accept, string name, UpdateProductAttributeGroupRequest body = default(UpdateProductAttributeGroupRequest));

        /// <summary>
        /// Update a product attribute group - {UpdateProductAttributeGroupRequest}
        /// </summary>
        /// <remarks>
        /// Update a product attribute group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductPropertyDefinitionGroup</returns>
        ApiResponse<ProductPropertyDefinitionGroup> UpdateProductAttributeGroupRequestattributegroupsproductNameCreateWithHttpInfo(string accept, string name, UpdateProductAttributeGroupRequest body = default(UpdateProductAttributeGroupRequest));
        /// <summary>
        /// Update a product attribute - {UpdateProductAttributeRequest}
        /// </summary>
        /// <remarks>
        /// Update a product attribute.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductPropertyDefinition</returns>
        ProductPropertyDefinition UpdateProductAttributeRequestattributesproductAttributeNameCreate(string accept, string attributeName, UpdateProductAttributeRequest body = default(UpdateProductAttributeRequest));

        /// <summary>
        /// Update a product attribute - {UpdateProductAttributeRequest}
        /// </summary>
        /// <remarks>
        /// Update a product attribute.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductPropertyDefinition</returns>
        ApiResponse<ProductPropertyDefinition> UpdateProductAttributeRequestattributesproductAttributeNameCreateWithHttpInfo(string accept, string attributeName, UpdateProductAttributeRequest body = default(UpdateProductAttributeRequest));
        /// <summary>
        /// Update a product definition - {UpdateProductDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a product definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductDefinition</returns>
        ProductDefinition UpdateProductDefinitionRequestdefinitionsproductNameCreate(string accept, string name, UpdateProductDefinitionRequest body = default(UpdateProductDefinitionRequest));

        /// <summary>
        /// Update a product definition - {UpdateProductDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a product definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductDefinition</returns>
        ApiResponse<ProductDefinition> UpdateProductDefinitionRequestdefinitionsproductNameCreateWithHttpInfo(string accept, string name, UpdateProductDefinitionRequest body = default(UpdateProductDefinitionRequest));
        /// <summary>
        /// Update a product lookup type definition - {UpdateProductLookupTypeDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a product lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Lookup</returns>
        Lookup UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreate(string accept, string lookupName, UpdateProductLookupTypeDefinitionRequest body = default(UpdateProductLookupTypeDefinitionRequest));

        /// <summary>
        /// Update a product lookup type definition - {UpdateProductLookupTypeDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a product lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Lookup</returns>
        ApiResponse<Lookup> UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreateWithHttpInfo(string accept, string lookupName, UpdateProductLookupTypeDefinitionRequest body = default(UpdateProductLookupTypeDefinitionRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a category definition - {CreateCategoryDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Create a category definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDefinition</returns>
        System.Threading.Tasks.Task<ProductDefinition> CreateCategoryDefinitionRequestdefinitionscategoryNamePostAsync(string accept, string name, CreateCategoryDefinitionRequest body = default(CreateCategoryDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a category definition - {CreateCategoryDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Create a category definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductDefinition>> CreateCategoryDefinitionRequestdefinitionscategoryNamePostWithHttpInfoAsync(string accept, string name, CreateCategoryDefinitionRequest body = default(CreateCategoryDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new custom profile definition - {CreateEntityTypeRequest}
        /// </summary>
        /// <remarks>
        /// Create a new entity type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entityTypeName">The unique name for this entity type.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateEntityTypeRequestEntityTypeEntityTypeNamePostAsync(string accept, string entityTypeName, CreateEntityTypeRequest body = default(CreateEntityTypeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new custom profile definition - {CreateEntityTypeRequest}
        /// </summary>
        /// <remarks>
        /// Create a new entity type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entityTypeName">The unique name for this entity type.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateEntityTypeRequestEntityTypeEntityTypeNamePostWithHttpInfoAsync(string accept, string entityTypeName, CreateEntityTypeRequest body = default(CreateEntityTypeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a product attribute group - {CreateProductAttributeGroupRequest}
        /// </summary>
        /// <remarks>
        /// Create a product attribute group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductPropertyDefinitionGroup</returns>
        System.Threading.Tasks.Task<ProductPropertyDefinitionGroup> CreateProductAttributeGroupRequestattributegroupsproductNamePostAsync(string accept, string name, CreateProductAttributeGroupRequest body = default(CreateProductAttributeGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a product attribute group - {CreateProductAttributeGroupRequest}
        /// </summary>
        /// <remarks>
        /// Create a product attribute group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductPropertyDefinitionGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPropertyDefinitionGroup>> CreateProductAttributeGroupRequestattributegroupsproductNamePostWithHttpInfoAsync(string accept, string name, CreateProductAttributeGroupRequest body = default(CreateProductAttributeGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a product attribute - {CreateProductAttributeRequest}
        /// </summary>
        /// <remarks>
        /// Create a product attribute.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductPropertyDefinition</returns>
        System.Threading.Tasks.Task<ProductPropertyDefinition> CreateProductAttributeRequestattributesproductAttributeNamePostAsync(string accept, string attributeName, CreateProductAttributeRequest body = default(CreateProductAttributeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a product attribute - {CreateProductAttributeRequest}
        /// </summary>
        /// <remarks>
        /// Create a product attribute.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductPropertyDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPropertyDefinition>> CreateProductAttributeRequestattributesproductAttributeNamePostWithHttpInfoAsync(string accept, string attributeName, CreateProductAttributeRequest body = default(CreateProductAttributeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a product definition - {CreateProductDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Create a product definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDefinition</returns>
        System.Threading.Tasks.Task<ProductDefinition> CreateProductDefinitionRequestdefinitionsproductNamePostAsync(string accept, string name, CreateProductDefinitionRequest body = default(CreateProductDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a product definition - {CreateProductDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Create a product definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductDefinition>> CreateProductDefinitionRequestdefinitionsproductNamePostWithHttpInfoAsync(string accept, string name, CreateProductDefinitionRequest body = default(CreateProductDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new product lookup type definition - {CreateProductLookupTypeDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new product lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        System.Threading.Tasks.Task<Lookup> CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePostAsync(string accept, string lookupName, CreateProductLookupTypeDefinitionRequest body = default(CreateProductLookupTypeDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new product lookup type definition - {CreateProductLookupTypeDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new product lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        System.Threading.Tasks.Task<ApiResponse<Lookup>> CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePostWithHttpInfoAsync(string accept, string lookupName, CreateProductLookupTypeDefinitionRequest body = default(CreateProductLookupTypeDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a product attribute group - {DeleteProductAttributeGroupRequest}
        /// </summary>
        /// <remarks>
        /// Delete a product attribute group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductAttributeGroupRequestattributegroupsproductNameDeleteAsync(string accept, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a product attribute group - {DeleteProductAttributeGroupRequest}
        /// </summary>
        /// <remarks>
        /// Delete a product attribute group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductAttributeGroupRequestattributegroupsproductNameDeleteWithHttpInfoAsync(string accept, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a product attribute - {DeleteProductAttributeRequest}
        /// </summary>
        /// <remarks>
        /// Delete a product attribute.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductAttributeRequestattributesproductAttributeNameDeleteAsync(string accept, string attributeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a product attribute - {DeleteProductAttributeRequest}
        /// </summary>
        /// <remarks>
        /// Delete a product attribute.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductAttributeRequestattributesproductAttributeNameDeleteWithHttpInfoAsync(string accept, string attributeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete specified values from a product lookup type definition - {DeleteProductLookupValuesRequest}
        /// </summary>
        /// <remarks>
        /// Delete specified values from a product lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of a lookup</param>
        /// <param name="values">The list of values to be removed from this lookup. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDeleteAsync(string accept, string lookupName, List<string> values = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete specified values from a product lookup type definition - {DeleteProductLookupValuesRequest}
        /// </summary>
        /// <remarks>
        /// Delete specified values from a product lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of a lookup</param>
        /// <param name="values">The list of values to be removed from this lookup. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDeleteWithHttpInfoAsync(string accept, string lookupName, List<string> values = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of product attribute groups - {FindProductAttributeGroupsRequest}
        /// </summary>
        /// <remarks>
        /// Get list of product attribute groups.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductPropertyDefinitionGroupQueryResult</returns>
        System.Threading.Tasks.Task<ProductPropertyDefinitionGroupQueryResult> FindProductAttributeGroupsRequestattributegroupsproductfindPostAsync(string accept, FindProductAttributeGroupsRequest body = default(FindProductAttributeGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of product attribute groups - {FindProductAttributeGroupsRequest}
        /// </summary>
        /// <remarks>
        /// Get list of product attribute groups.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductPropertyDefinitionGroupQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPropertyDefinitionGroupQueryResult>> FindProductAttributeGroupsRequestattributegroupsproductfindPostWithHttpInfoAsync(string accept, FindProductAttributeGroupsRequest body = default(FindProductAttributeGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all currencies - {GetCurrenciesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all currencies.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported currencies (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrenciesResponse</returns>
        System.Threading.Tasks.Task<GetCurrenciesResponse> GetCurrenciesRequestcurrenciesGetAsync(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all currencies - {GetCurrenciesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all currencies.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported currencies (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrenciesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCurrenciesResponse>> GetCurrenciesRequestcurrenciesGetWithHttpInfoAsync(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the entity definition from Profiles entities - {GetCustomerDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the entity definition from Profiles entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityDefinition</returns>
        System.Threading.Tasks.Task<EntityDefinition> GetCustomerDefinitionRequestdefinitionscustomerNameGetAsync(string accept, string name, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the entity definition from Profiles entities - {GetCustomerDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the entity definition from Profiles entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityDefinition>> GetCustomerDefinitionRequestdefinitionscustomerNameGetWithHttpInfoAsync(string accept, string name, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the entity definitions in Profiles - {GetCustomerDefinitionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customer entity definitions in Profiles. A definition is a list of properties that is allowed to be set to the instance of entity being used.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EntityDefinition&gt;</returns>
        System.Threading.Tasks.Task<List<EntityDefinition>> GetCustomerDefinitionsRequestdefinitionscustomerGetAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the entity definitions in Profiles - {GetCustomerDefinitionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customer entity definitions in Profiles. A definition is a list of properties that is allowed to be set to the instance of entity being used.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EntityDefinition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityDefinition>>> GetCustomerDefinitionsRequestdefinitionscustomerGetWithHttpInfoAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the lookup from Profiles lookups - {GetCustomerLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Customer entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        System.Threading.Tasks.Task<Lookup> GetCustomerLookupRequestlookupscustomerLookupNameGetAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the lookup from Profiles lookups - {GetCustomerLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Customer entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        System.Threading.Tasks.Task<ApiResponse<Lookup>> GetCustomerLookupRequestlookupscustomerLookupNameGetWithHttpInfoAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the Profiles lookups - {GetCustomerLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Customer entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Lookup&gt;</returns>
        System.Threading.Tasks.Task<List<Lookup>> GetCustomerLookupsRequestlookupscustomerGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the Profiles lookups - {GetCustomerLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Customer entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Lookup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Lookup>>> GetCustomerLookupsRequestlookupscustomerGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the lookup from Marketing lookups - {GetMarketingLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Marketing entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        System.Threading.Tasks.Task<Lookup> GetMarketingLookupRequestlookupsmarketingLookupNameGetAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the lookup from Marketing lookups - {GetMarketingLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Marketing entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        System.Threading.Tasks.Task<ApiResponse<Lookup>> GetMarketingLookupRequestlookupsmarketingLookupNameGetWithHttpInfoAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the Marketing lookups - {GetMarketingLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Marketing entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Lookup&gt;</returns>
        System.Threading.Tasks.Task<List<Lookup>> GetMarketingLookupsRequestlookupsmarketingGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the Marketing lookups - {GetMarketingLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Marketing entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Lookup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Lookup>>> GetMarketingLookupsRequestlookupsmarketingGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the entity definition from Orders entities - {GetOrderDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the entity definition from Orders entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityDefinition</returns>
        System.Threading.Tasks.Task<EntityDefinition> GetOrderDefinitionRequestdefinitionsorderNameGetAsync(string accept, string name, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the entity definition from Orders entities - {GetOrderDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the entity definition from Orders entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityDefinition>> GetOrderDefinitionRequestdefinitionsorderNameGetWithHttpInfoAsync(string accept, string name, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the entity definitions defined in Orders - {GetOrderDefinitionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the entity definitions defined in Orders. A definition is a list of properties that is allowed to be set to the instance of entity being used
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EntityDefinition&gt;</returns>
        System.Threading.Tasks.Task<List<EntityDefinition>> GetOrderDefinitionsRequestdefinitionsorderGetAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the entity definitions defined in Orders - {GetOrderDefinitionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the entity definitions defined in Orders. A definition is a list of properties that is allowed to be set to the instance of entity being used
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EntityDefinition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityDefinition>>> GetOrderDefinitionsRequestdefinitionsorderGetWithHttpInfoAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the lookup from Orders lookups - {GetOrderLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Order entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        System.Threading.Tasks.Task<Lookup> GetOrderLookupRequestlookupsorderLookupNameGetAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the lookup from Orders lookups - {GetOrderLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Order entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        System.Threading.Tasks.Task<ApiResponse<Lookup>> GetOrderLookupRequestlookupsorderLookupNameGetWithHttpInfoAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the Orders lookups - {GetOrderLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Order entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Lookup&gt;</returns>
        System.Threading.Tasks.Task<List<Lookup>> GetOrderLookupsRequestlookupsorderGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the Orders lookups - {GetOrderLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Order entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Lookup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Lookup>>> GetOrderLookupsRequestlookupsorderGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the lookup from Products lookups - {GetProductLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Product entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        System.Threading.Tasks.Task<Lookup> GetProductLookupRequestlookupsproductLookupNameGetAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the lookup from Products lookups - {GetProductLookupRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Product entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        System.Threading.Tasks.Task<ApiResponse<Lookup>> GetProductLookupRequestlookupsproductLookupNameGetWithHttpInfoAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the Product lookups - {GetProductLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Product entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Lookup&gt;</returns>
        System.Threading.Tasks.Task<List<Lookup>> GetProductLookupsRequestlookupsproductGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the Product lookups - {GetProductLookupsRequest}
        /// </summary>
        /// <remarks>
        /// This entity represents a lookup, defining its metadata for Product entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Lookup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Lookup>>> GetProductLookupsRequestlookupsproductGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the targeting items (metadata used to construct targeting expression) - {GetTargetingMetadataRequest}
        /// </summary>
        /// <remarks>
        /// Return the targeting items (metadata used to construct targeting expression)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTargetingMetadataResponse</returns>
        System.Threading.Tasks.Task<GetTargetingMetadataResponse> GetTargetingMetadataRequesttargetingGetAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the targeting items (metadata used to construct targeting expression) - {GetTargetingMetadataRequest}
        /// </summary>
        /// <remarks>
        /// Return the targeting items (metadata used to construct targeting expression)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTargetingMetadataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTargetingMetadataResponse>> GetTargetingMetadataRequesttargetingGetWithHttpInfoAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a category definition - {UpdateCategoryDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a category definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDefinition</returns>
        System.Threading.Tasks.Task<ProductDefinition> UpdateCategoryDefinitionRequestdefinitionscategoryNameCreateAsync(string accept, string name, UpdateCategoryDefinitionRequest body = default(UpdateCategoryDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a category definition - {UpdateCategoryDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a category definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductDefinition>> UpdateCategoryDefinitionRequestdefinitionscategoryNameCreateWithHttpInfoAsync(string accept, string name, UpdateCategoryDefinitionRequest body = default(UpdateCategoryDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a marketing lookup type definition - {UpdateMarketingLookupTypeDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a marketing lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        System.Threading.Tasks.Task<Lookup> UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePostAsync(string accept, string lookupName, UpdateMarketingLookupTypeDefinitionRequest body = default(UpdateMarketingLookupTypeDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a marketing lookup type definition - {UpdateMarketingLookupTypeDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a marketing lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        System.Threading.Tasks.Task<ApiResponse<Lookup>> UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePostWithHttpInfoAsync(string accept, string lookupName, UpdateMarketingLookupTypeDefinitionRequest body = default(UpdateMarketingLookupTypeDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a product attribute group - {UpdateProductAttributeGroupRequest}
        /// </summary>
        /// <remarks>
        /// Update a product attribute group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductPropertyDefinitionGroup</returns>
        System.Threading.Tasks.Task<ProductPropertyDefinitionGroup> UpdateProductAttributeGroupRequestattributegroupsproductNameCreateAsync(string accept, string name, UpdateProductAttributeGroupRequest body = default(UpdateProductAttributeGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a product attribute group - {UpdateProductAttributeGroupRequest}
        /// </summary>
        /// <remarks>
        /// Update a product attribute group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductPropertyDefinitionGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPropertyDefinitionGroup>> UpdateProductAttributeGroupRequestattributegroupsproductNameCreateWithHttpInfoAsync(string accept, string name, UpdateProductAttributeGroupRequest body = default(UpdateProductAttributeGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a product attribute - {UpdateProductAttributeRequest}
        /// </summary>
        /// <remarks>
        /// Update a product attribute.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductPropertyDefinition</returns>
        System.Threading.Tasks.Task<ProductPropertyDefinition> UpdateProductAttributeRequestattributesproductAttributeNameCreateAsync(string accept, string attributeName, UpdateProductAttributeRequest body = default(UpdateProductAttributeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a product attribute - {UpdateProductAttributeRequest}
        /// </summary>
        /// <remarks>
        /// Update a product attribute.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductPropertyDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPropertyDefinition>> UpdateProductAttributeRequestattributesproductAttributeNameCreateWithHttpInfoAsync(string accept, string attributeName, UpdateProductAttributeRequest body = default(UpdateProductAttributeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a product definition - {UpdateProductDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a product definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDefinition</returns>
        System.Threading.Tasks.Task<ProductDefinition> UpdateProductDefinitionRequestdefinitionsproductNameCreateAsync(string accept, string name, UpdateProductDefinitionRequest body = default(UpdateProductDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a product definition - {UpdateProductDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a product definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductDefinition>> UpdateProductDefinitionRequestdefinitionsproductNameCreateWithHttpInfoAsync(string accept, string name, UpdateProductDefinitionRequest body = default(UpdateProductDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a product lookup type definition - {UpdateProductLookupTypeDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a product lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        System.Threading.Tasks.Task<Lookup> UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreateAsync(string accept, string lookupName, UpdateProductLookupTypeDefinitionRequest body = default(UpdateProductLookupTypeDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a product lookup type definition - {UpdateProductLookupTypeDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// Update a product lookup type definition
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        System.Threading.Tasks.Task<ApiResponse<Lookup>> UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreateWithHttpInfoAsync(string accept, string lookupName, UpdateProductLookupTypeDefinitionRequest body = default(UpdateProductLookupTypeDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataApi : IMetadataApiSync, IMetadataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetadataApi : IMetadataApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetadataApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetadataApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a category definition - {CreateCategoryDefinitionRequest} Create a category definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductDefinition</returns>
        public ProductDefinition CreateCategoryDefinitionRequestdefinitionscategoryNamePost(string accept, string name, CreateCategoryDefinitionRequest body = default(CreateCategoryDefinitionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> localVarResponse = CreateCategoryDefinitionRequestdefinitionscategoryNamePostWithHttpInfo(accept, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a category definition - {CreateCategoryDefinitionRequest} Create a category definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductDefinition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> CreateCategoryDefinitionRequestdefinitionscategoryNamePostWithHttpInfo(string accept, string name, CreateCategoryDefinitionRequest body = default(CreateCategoryDefinitionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->CreateCategoryDefinitionRequestdefinitionscategoryNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->CreateCategoryDefinitionRequestdefinitionscategoryNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductDefinition>("/metadata/definitions/category/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCategoryDefinitionRequestdefinitionscategoryNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a category definition - {CreateCategoryDefinitionRequest} Create a category definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDefinition</returns>
        public async System.Threading.Tasks.Task<ProductDefinition> CreateCategoryDefinitionRequestdefinitionscategoryNamePostAsync(string accept, string name, CreateCategoryDefinitionRequest body = default(CreateCategoryDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> localVarResponse = await CreateCategoryDefinitionRequestdefinitionscategoryNamePostWithHttpInfoAsync(accept, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a category definition - {CreateCategoryDefinitionRequest} Create a category definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDefinition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition>> CreateCategoryDefinitionRequestdefinitionscategoryNamePostWithHttpInfoAsync(string accept, string name, CreateCategoryDefinitionRequest body = default(CreateCategoryDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->CreateCategoryDefinitionRequestdefinitionscategoryNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->CreateCategoryDefinitionRequestdefinitionscategoryNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductDefinition>("/metadata/definitions/category/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCategoryDefinitionRequestdefinitionscategoryNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new custom profile definition - {CreateEntityTypeRequest} Create a new entity type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entityTypeName">The unique name for this entity type.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateEntityTypeRequestEntityTypeEntityTypeNamePost(string accept, string entityTypeName, CreateEntityTypeRequest body = default(CreateEntityTypeRequest))
        {
            CreateEntityTypeRequestEntityTypeEntityTypeNamePostWithHttpInfo(accept, entityTypeName, body);
        }

        /// <summary>
        /// Create a new custom profile definition - {CreateEntityTypeRequest} Create a new entity type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entityTypeName">The unique name for this entity type.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> CreateEntityTypeRequestEntityTypeEntityTypeNamePostWithHttpInfo(string accept, string entityTypeName, CreateEntityTypeRequest body = default(CreateEntityTypeRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->CreateEntityTypeRequestEntityTypeEntityTypeNamePost");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling MetadataApi->CreateEntityTypeRequestEntityTypeEntityTypeNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/metadata/EntityType/{EntityTypeName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEntityTypeRequestEntityTypeEntityTypeNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new custom profile definition - {CreateEntityTypeRequest} Create a new entity type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entityTypeName">The unique name for this entity type.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateEntityTypeRequestEntityTypeEntityTypeNamePostAsync(string accept, string entityTypeName, CreateEntityTypeRequest body = default(CreateEntityTypeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateEntityTypeRequestEntityTypeEntityTypeNamePostWithHttpInfoAsync(accept, entityTypeName, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a new custom profile definition - {CreateEntityTypeRequest} Create a new entity type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entityTypeName">The unique name for this entity type.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> CreateEntityTypeRequestEntityTypeEntityTypeNamePostWithHttpInfoAsync(string accept, string entityTypeName, CreateEntityTypeRequest body = default(CreateEntityTypeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->CreateEntityTypeRequestEntityTypeEntityTypeNamePost");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling MetadataApi->CreateEntityTypeRequestEntityTypeEntityTypeNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/metadata/EntityType/{EntityTypeName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEntityTypeRequestEntityTypeEntityTypeNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a product attribute group - {CreateProductAttributeGroupRequest} Create a product attribute group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductPropertyDefinitionGroup</returns>
        public ProductPropertyDefinitionGroup CreateProductAttributeGroupRequestattributegroupsproductNamePost(string accept, string name, CreateProductAttributeGroupRequest body = default(CreateProductAttributeGroupRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinitionGroup> localVarResponse = CreateProductAttributeGroupRequestattributegroupsproductNamePostWithHttpInfo(accept, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a product attribute group - {CreateProductAttributeGroupRequest} Create a product attribute group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductPropertyDefinitionGroup</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinitionGroup> CreateProductAttributeGroupRequestattributegroupsproductNamePostWithHttpInfo(string accept, string name, CreateProductAttributeGroupRequest body = default(CreateProductAttributeGroupRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->CreateProductAttributeGroupRequestattributegroupsproductNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->CreateProductAttributeGroupRequestattributegroupsproductNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductPropertyDefinitionGroup>("/metadata/attributegroups/product/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductAttributeGroupRequestattributegroupsproductNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a product attribute group - {CreateProductAttributeGroupRequest} Create a product attribute group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductPropertyDefinitionGroup</returns>
        public async System.Threading.Tasks.Task<ProductPropertyDefinitionGroup> CreateProductAttributeGroupRequestattributegroupsproductNamePostAsync(string accept, string name, CreateProductAttributeGroupRequest body = default(CreateProductAttributeGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinitionGroup> localVarResponse = await CreateProductAttributeGroupRequestattributegroupsproductNamePostWithHttpInfoAsync(accept, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a product attribute group - {CreateProductAttributeGroupRequest} Create a product attribute group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductPropertyDefinitionGroup)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinitionGroup>> CreateProductAttributeGroupRequestattributegroupsproductNamePostWithHttpInfoAsync(string accept, string name, CreateProductAttributeGroupRequest body = default(CreateProductAttributeGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->CreateProductAttributeGroupRequestattributegroupsproductNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->CreateProductAttributeGroupRequestattributegroupsproductNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductPropertyDefinitionGroup>("/metadata/attributegroups/product/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductAttributeGroupRequestattributegroupsproductNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a product attribute - {CreateProductAttributeRequest} Create a product attribute.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductPropertyDefinition</returns>
        public ProductPropertyDefinition CreateProductAttributeRequestattributesproductAttributeNamePost(string accept, string attributeName, CreateProductAttributeRequest body = default(CreateProductAttributeRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinition> localVarResponse = CreateProductAttributeRequestattributesproductAttributeNamePostWithHttpInfo(accept, attributeName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a product attribute - {CreateProductAttributeRequest} Create a product attribute.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductPropertyDefinition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinition> CreateProductAttributeRequestattributesproductAttributeNamePostWithHttpInfo(string accept, string attributeName, CreateProductAttributeRequest body = default(CreateProductAttributeRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->CreateProductAttributeRequestattributesproductAttributeNamePost");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling MetadataApi->CreateProductAttributeRequestattributesproductAttributeNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductPropertyDefinition>("/metadata/attributes/product/{AttributeName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductAttributeRequestattributesproductAttributeNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a product attribute - {CreateProductAttributeRequest} Create a product attribute.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductPropertyDefinition</returns>
        public async System.Threading.Tasks.Task<ProductPropertyDefinition> CreateProductAttributeRequestattributesproductAttributeNamePostAsync(string accept, string attributeName, CreateProductAttributeRequest body = default(CreateProductAttributeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinition> localVarResponse = await CreateProductAttributeRequestattributesproductAttributeNamePostWithHttpInfoAsync(accept, attributeName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a product attribute - {CreateProductAttributeRequest} Create a product attribute.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductPropertyDefinition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinition>> CreateProductAttributeRequestattributesproductAttributeNamePostWithHttpInfoAsync(string accept, string attributeName, CreateProductAttributeRequest body = default(CreateProductAttributeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->CreateProductAttributeRequestattributesproductAttributeNamePost");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling MetadataApi->CreateProductAttributeRequestattributesproductAttributeNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductPropertyDefinition>("/metadata/attributes/product/{AttributeName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductAttributeRequestattributesproductAttributeNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a product definition - {CreateProductDefinitionRequest} Create a product definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductDefinition</returns>
        public ProductDefinition CreateProductDefinitionRequestdefinitionsproductNamePost(string accept, string name, CreateProductDefinitionRequest body = default(CreateProductDefinitionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> localVarResponse = CreateProductDefinitionRequestdefinitionsproductNamePostWithHttpInfo(accept, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a product definition - {CreateProductDefinitionRequest} Create a product definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductDefinition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> CreateProductDefinitionRequestdefinitionsproductNamePostWithHttpInfo(string accept, string name, CreateProductDefinitionRequest body = default(CreateProductDefinitionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->CreateProductDefinitionRequestdefinitionsproductNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->CreateProductDefinitionRequestdefinitionsproductNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductDefinition>("/metadata/definitions/product/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductDefinitionRequestdefinitionsproductNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a product definition - {CreateProductDefinitionRequest} Create a product definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDefinition</returns>
        public async System.Threading.Tasks.Task<ProductDefinition> CreateProductDefinitionRequestdefinitionsproductNamePostAsync(string accept, string name, CreateProductDefinitionRequest body = default(CreateProductDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> localVarResponse = await CreateProductDefinitionRequestdefinitionsproductNamePostWithHttpInfoAsync(accept, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a product definition - {CreateProductDefinitionRequest} Create a product definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDefinition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition>> CreateProductDefinitionRequestdefinitionsproductNamePostWithHttpInfoAsync(string accept, string name, CreateProductDefinitionRequest body = default(CreateProductDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->CreateProductDefinitionRequestdefinitionsproductNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->CreateProductDefinitionRequestdefinitionsproductNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductDefinition>("/metadata/definitions/product/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductDefinitionRequestdefinitionsproductNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new product lookup type definition - {CreateProductLookupTypeDefinitionRequest} Creates a new product lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Lookup</returns>
        public Lookup CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePost(string accept, string lookupName, CreateProductLookupTypeDefinitionRequest body = default(CreateProductLookupTypeDefinitionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePostWithHttpInfo(accept, lookupName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new product lookup type definition - {CreateProductLookupTypeDefinitionRequest} Creates a new product lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Lookup</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePostWithHttpInfo(string accept, string lookupName, CreateProductLookupTypeDefinitionRequest body = default(CreateProductLookupTypeDefinitionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePost");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Lookup>("/metadata/lookups/product/{LookupName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new product lookup type definition - {CreateProductLookupTypeDefinitionRequest} Creates a new product lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        public async System.Threading.Tasks.Task<Lookup> CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePostAsync(string accept, string lookupName, CreateProductLookupTypeDefinitionRequest body = default(CreateProductLookupTypeDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = await CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePostWithHttpInfoAsync(accept, lookupName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new product lookup type definition - {CreateProductLookupTypeDefinitionRequest} Creates a new product lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup>> CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePostWithHttpInfoAsync(string accept, string lookupName, CreateProductLookupTypeDefinitionRequest body = default(CreateProductLookupTypeDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePost");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Lookup>("/metadata/lookups/product/{LookupName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductLookupTypeDefinitionRequestlookupsproductLookupNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a product attribute group - {DeleteProductAttributeGroupRequest} Delete a product attribute group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <returns></returns>
        public void DeleteProductAttributeGroupRequestattributegroupsproductNameDelete(string accept, string name)
        {
            DeleteProductAttributeGroupRequestattributegroupsproductNameDeleteWithHttpInfo(accept, name);
        }

        /// <summary>
        /// Delete a product attribute group - {DeleteProductAttributeGroupRequest} Delete a product attribute group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteProductAttributeGroupRequestattributegroupsproductNameDeleteWithHttpInfo(string accept, string name)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->DeleteProductAttributeGroupRequestattributegroupsproductNameDelete");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->DeleteProductAttributeGroupRequestattributegroupsproductNameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/metadata/attributegroups/product/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductAttributeGroupRequestattributegroupsproductNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a product attribute group - {DeleteProductAttributeGroupRequest} Delete a product attribute group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductAttributeGroupRequestattributegroupsproductNameDeleteAsync(string accept, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProductAttributeGroupRequestattributegroupsproductNameDeleteWithHttpInfoAsync(accept, name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a product attribute group - {DeleteProductAttributeGroupRequest} Delete a product attribute group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteProductAttributeGroupRequestattributegroupsproductNameDeleteWithHttpInfoAsync(string accept, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->DeleteProductAttributeGroupRequestattributegroupsproductNameDelete");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->DeleteProductAttributeGroupRequestattributegroupsproductNameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/metadata/attributegroups/product/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductAttributeGroupRequestattributegroupsproductNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a product attribute - {DeleteProductAttributeRequest} Delete a product attribute.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <returns></returns>
        public void DeleteProductAttributeRequestattributesproductAttributeNameDelete(string accept, string attributeName)
        {
            DeleteProductAttributeRequestattributesproductAttributeNameDeleteWithHttpInfo(accept, attributeName);
        }

        /// <summary>
        /// Delete a product attribute - {DeleteProductAttributeRequest} Delete a product attribute.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteProductAttributeRequestattributesproductAttributeNameDeleteWithHttpInfo(string accept, string attributeName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->DeleteProductAttributeRequestattributesproductAttributeNameDelete");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling MetadataApi->DeleteProductAttributeRequestattributesproductAttributeNameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/metadata/attributes/product/{AttributeName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductAttributeRequestattributesproductAttributeNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a product attribute - {DeleteProductAttributeRequest} Delete a product attribute.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductAttributeRequestattributesproductAttributeNameDeleteAsync(string accept, string attributeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProductAttributeRequestattributesproductAttributeNameDeleteWithHttpInfoAsync(accept, attributeName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a product attribute - {DeleteProductAttributeRequest} Delete a product attribute.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteProductAttributeRequestattributesproductAttributeNameDeleteWithHttpInfoAsync(string accept, string attributeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->DeleteProductAttributeRequestattributesproductAttributeNameDelete");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling MetadataApi->DeleteProductAttributeRequestattributesproductAttributeNameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/metadata/attributes/product/{AttributeName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductAttributeRequestattributesproductAttributeNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete specified values from a product lookup type definition - {DeleteProductLookupValuesRequest} Delete specified values from a product lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of a lookup</param>
        /// <param name="values">The list of values to be removed from this lookup. (optional)</param>
        /// <returns></returns>
        public void DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDelete(string accept, string lookupName, List<string> values = default(List<string>))
        {
            DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDeleteWithHttpInfo(accept, lookupName, values);
        }

        /// <summary>
        /// Delete specified values from a product lookup type definition - {DeleteProductLookupValuesRequest} Delete specified values from a product lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of a lookup</param>
        /// <param name="values">The list of values to be removed from this lookup. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDeleteWithHttpInfo(string accept, string lookupName, List<string> values = default(List<string>))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDelete");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            if (values != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "Values", values));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/metadata/lookups/product/{LookupName}/values", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete specified values from a product lookup type definition - {DeleteProductLookupValuesRequest} Delete specified values from a product lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of a lookup</param>
        /// <param name="values">The list of values to be removed from this lookup. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDeleteAsync(string accept, string lookupName, List<string> values = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDeleteWithHttpInfoAsync(accept, lookupName, values, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete specified values from a product lookup type definition - {DeleteProductLookupValuesRequest} Delete specified values from a product lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of a lookup</param>
        /// <param name="values">The list of values to be removed from this lookup. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDeleteWithHttpInfoAsync(string accept, string lookupName, List<string> values = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDelete");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            if (values != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "Values", values));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/metadata/lookups/product/{LookupName}/values", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductLookupValuesRequestlookupsproductLookupNamevaluesDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of product attribute groups - {FindProductAttributeGroupsRequest} Get list of product attribute groups.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductPropertyDefinitionGroupQueryResult</returns>
        public ProductPropertyDefinitionGroupQueryResult FindProductAttributeGroupsRequestattributegroupsproductfindPost(string accept, FindProductAttributeGroupsRequest body = default(FindProductAttributeGroupsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinitionGroupQueryResult> localVarResponse = FindProductAttributeGroupsRequestattributegroupsproductfindPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of product attribute groups - {FindProductAttributeGroupsRequest} Get list of product attribute groups.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductPropertyDefinitionGroupQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinitionGroupQueryResult> FindProductAttributeGroupsRequestattributegroupsproductfindPostWithHttpInfo(string accept, FindProductAttributeGroupsRequest body = default(FindProductAttributeGroupsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->FindProductAttributeGroupsRequestattributegroupsproductfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductPropertyDefinitionGroupQueryResult>("/metadata/attributegroups/product/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindProductAttributeGroupsRequestattributegroupsproductfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of product attribute groups - {FindProductAttributeGroupsRequest} Get list of product attribute groups.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductPropertyDefinitionGroupQueryResult</returns>
        public async System.Threading.Tasks.Task<ProductPropertyDefinitionGroupQueryResult> FindProductAttributeGroupsRequestattributegroupsproductfindPostAsync(string accept, FindProductAttributeGroupsRequest body = default(FindProductAttributeGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinitionGroupQueryResult> localVarResponse = await FindProductAttributeGroupsRequestattributegroupsproductfindPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of product attribute groups - {FindProductAttributeGroupsRequest} Get list of product attribute groups.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductPropertyDefinitionGroupQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinitionGroupQueryResult>> FindProductAttributeGroupsRequestattributegroupsproductfindPostWithHttpInfoAsync(string accept, FindProductAttributeGroupsRequest body = default(FindProductAttributeGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->FindProductAttributeGroupsRequestattributegroupsproductfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductPropertyDefinitionGroupQueryResult>("/metadata/attributegroups/product/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindProductAttributeGroupsRequestattributegroupsproductfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all currencies - {GetCurrenciesRequest} Retrieve all currencies.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported currencies (optional)</param>
        /// <returns>GetCurrenciesResponse</returns>
        public GetCurrenciesResponse GetCurrenciesRequestcurrenciesGet(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCurrenciesResponse> localVarResponse = GetCurrenciesRequestcurrenciesGetWithHttpInfo(accept, cultureName, includeUnsupported);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all currencies - {GetCurrenciesRequest} Retrieve all currencies.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported currencies (optional)</param>
        /// <returns>ApiResponse of GetCurrenciesResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCurrenciesResponse> GetCurrenciesRequestcurrenciesGetWithHttpInfo(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetCurrenciesRequestcurrenciesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeUnsupported != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeUnsupported", includeUnsupported));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCurrenciesResponse>("/metadata/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrenciesRequestcurrenciesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all currencies - {GetCurrenciesRequest} Retrieve all currencies.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported currencies (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrenciesResponse</returns>
        public async System.Threading.Tasks.Task<GetCurrenciesResponse> GetCurrenciesRequestcurrenciesGetAsync(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCurrenciesResponse> localVarResponse = await GetCurrenciesRequestcurrenciesGetWithHttpInfoAsync(accept, cultureName, includeUnsupported, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all currencies - {GetCurrenciesRequest} Retrieve all currencies.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported currencies (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrenciesResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCurrenciesResponse>> GetCurrenciesRequestcurrenciesGetWithHttpInfoAsync(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetCurrenciesRequestcurrenciesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeUnsupported != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeUnsupported", includeUnsupported));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCurrenciesResponse>("/metadata/currencies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrenciesRequestcurrenciesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the entity definition from Profiles entities - {GetCustomerDefinitionRequest} Retrieve the entity definition from Profiles entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>EntityDefinition</returns>
        public EntityDefinition GetCustomerDefinitionRequestdefinitionscustomerNameGet(string accept, string name, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<EntityDefinition> localVarResponse = GetCustomerDefinitionRequestdefinitionscustomerNameGetWithHttpInfo(accept, name, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the entity definition from Profiles entities - {GetCustomerDefinitionRequest} Retrieve the entity definition from Profiles entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of EntityDefinition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<EntityDefinition> GetCustomerDefinitionRequestdefinitionscustomerNameGetWithHttpInfo(string accept, string name, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetCustomerDefinitionRequestdefinitionscustomerNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->GetCustomerDefinitionRequestdefinitionscustomerNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<EntityDefinition>("/metadata/definitions/customer/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerDefinitionRequestdefinitionscustomerNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the entity definition from Profiles entities - {GetCustomerDefinitionRequest} Retrieve the entity definition from Profiles entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityDefinition</returns>
        public async System.Threading.Tasks.Task<EntityDefinition> GetCustomerDefinitionRequestdefinitionscustomerNameGetAsync(string accept, string name, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<EntityDefinition> localVarResponse = await GetCustomerDefinitionRequestdefinitionscustomerNameGetWithHttpInfoAsync(accept, name, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the entity definition from Profiles entities - {GetCustomerDefinitionRequest} Retrieve the entity definition from Profiles entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityDefinition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<EntityDefinition>> GetCustomerDefinitionRequestdefinitionscustomerNameGetWithHttpInfoAsync(string accept, string name, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetCustomerDefinitionRequestdefinitionscustomerNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->GetCustomerDefinitionRequestdefinitionscustomerNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EntityDefinition>("/metadata/definitions/customer/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerDefinitionRequestdefinitionscustomerNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the entity definitions in Profiles - {GetCustomerDefinitionsRequest} Retrieve the customer entity definitions in Profiles. A definition is a list of properties that is allowed to be set to the instance of entity being used.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>List&lt;EntityDefinition&gt;</returns>
        public List<EntityDefinition> GetCustomerDefinitionsRequestdefinitionscustomerGet(string accept, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<EntityDefinition>> localVarResponse = GetCustomerDefinitionsRequestdefinitionscustomerGetWithHttpInfo(accept, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the entity definitions in Profiles - {GetCustomerDefinitionsRequest} Retrieve the customer entity definitions in Profiles. A definition is a list of properties that is allowed to be set to the instance of entity being used.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;EntityDefinition&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<EntityDefinition>> GetCustomerDefinitionsRequestdefinitionscustomerGetWithHttpInfo(string accept, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetCustomerDefinitionsRequestdefinitionscustomerGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EntityDefinition>>("/metadata/definitions/customer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerDefinitionsRequestdefinitionscustomerGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the entity definitions in Profiles - {GetCustomerDefinitionsRequest} Retrieve the customer entity definitions in Profiles. A definition is a list of properties that is allowed to be set to the instance of entity being used.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EntityDefinition&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityDefinition>> GetCustomerDefinitionsRequestdefinitionscustomerGetAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<EntityDefinition>> localVarResponse = await GetCustomerDefinitionsRequestdefinitionscustomerGetWithHttpInfoAsync(accept, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the entity definitions in Profiles - {GetCustomerDefinitionsRequest} Retrieve the customer entity definitions in Profiles. A definition is a list of properties that is allowed to be set to the instance of entity being used.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EntityDefinition&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<EntityDefinition>>> GetCustomerDefinitionsRequestdefinitionscustomerGetWithHttpInfoAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetCustomerDefinitionsRequestdefinitionscustomerGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EntityDefinition>>("/metadata/definitions/customer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerDefinitionsRequestdefinitionscustomerGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the lookup from Profiles lookups - {GetCustomerLookupRequest} This entity represents a lookup, defining its metadata for Customer entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>Lookup</returns>
        public Lookup GetCustomerLookupRequestlookupscustomerLookupNameGet(string accept, string lookupName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = GetCustomerLookupRequestlookupscustomerLookupNameGetWithHttpInfo(accept, lookupName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the lookup from Profiles lookups - {GetCustomerLookupRequest} This entity represents a lookup, defining its metadata for Customer entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>ApiResponse of Lookup</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> GetCustomerLookupRequestlookupscustomerLookupNameGetWithHttpInfo(string accept, string lookupName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetCustomerLookupRequestlookupscustomerLookupNameGet");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->GetCustomerLookupRequestlookupscustomerLookupNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Lookup>("/metadata/lookups/customer/{LookupName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerLookupRequestlookupscustomerLookupNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the lookup from Profiles lookups - {GetCustomerLookupRequest} This entity represents a lookup, defining its metadata for Customer entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        public async System.Threading.Tasks.Task<Lookup> GetCustomerLookupRequestlookupscustomerLookupNameGetAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = await GetCustomerLookupRequestlookupscustomerLookupNameGetWithHttpInfoAsync(accept, lookupName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the lookup from Profiles lookups - {GetCustomerLookupRequest} This entity represents a lookup, defining its metadata for Customer entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup>> GetCustomerLookupRequestlookupscustomerLookupNameGetWithHttpInfoAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetCustomerLookupRequestlookupscustomerLookupNameGet");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->GetCustomerLookupRequestlookupscustomerLookupNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Lookup>("/metadata/lookups/customer/{LookupName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerLookupRequestlookupscustomerLookupNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Profiles lookups - {GetCustomerLookupsRequest} This entity represents a lookup, defining its metadata for Customer entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;Lookup&gt;</returns>
        public List<Lookup> GetCustomerLookupsRequestlookupscustomerGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>> localVarResponse = GetCustomerLookupsRequestlookupscustomerGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Profiles lookups - {GetCustomerLookupsRequest} This entity represents a lookup, defining its metadata for Customer entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;Lookup&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>> GetCustomerLookupsRequestlookupscustomerGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetCustomerLookupsRequestlookupscustomerGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Lookup>>("/metadata/lookups/customer/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerLookupsRequestlookupscustomerGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Profiles lookups - {GetCustomerLookupsRequest} This entity represents a lookup, defining its metadata for Customer entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Lookup&gt;</returns>
        public async System.Threading.Tasks.Task<List<Lookup>> GetCustomerLookupsRequestlookupscustomerGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>> localVarResponse = await GetCustomerLookupsRequestlookupscustomerGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Profiles lookups - {GetCustomerLookupsRequest} This entity represents a lookup, defining its metadata for Customer entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Lookup&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>>> GetCustomerLookupsRequestlookupscustomerGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetCustomerLookupsRequestlookupscustomerGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Lookup>>("/metadata/lookups/customer/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerLookupsRequestlookupscustomerGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the lookup from Marketing lookups - {GetMarketingLookupRequest} This entity represents a lookup, defining its metadata for Marketing entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>Lookup</returns>
        public Lookup GetMarketingLookupRequestlookupsmarketingLookupNameGet(string accept, string lookupName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = GetMarketingLookupRequestlookupsmarketingLookupNameGetWithHttpInfo(accept, lookupName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the lookup from Marketing lookups - {GetMarketingLookupRequest} This entity represents a lookup, defining its metadata for Marketing entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>ApiResponse of Lookup</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> GetMarketingLookupRequestlookupsmarketingLookupNameGetWithHttpInfo(string accept, string lookupName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetMarketingLookupRequestlookupsmarketingLookupNameGet");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->GetMarketingLookupRequestlookupsmarketingLookupNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Lookup>("/metadata/lookups/marketing/{LookupName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingLookupRequestlookupsmarketingLookupNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the lookup from Marketing lookups - {GetMarketingLookupRequest} This entity represents a lookup, defining its metadata for Marketing entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        public async System.Threading.Tasks.Task<Lookup> GetMarketingLookupRequestlookupsmarketingLookupNameGetAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = await GetMarketingLookupRequestlookupsmarketingLookupNameGetWithHttpInfoAsync(accept, lookupName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the lookup from Marketing lookups - {GetMarketingLookupRequest} This entity represents a lookup, defining its metadata for Marketing entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup>> GetMarketingLookupRequestlookupsmarketingLookupNameGetWithHttpInfoAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetMarketingLookupRequestlookupsmarketingLookupNameGet");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->GetMarketingLookupRequestlookupsmarketingLookupNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Lookup>("/metadata/lookups/marketing/{LookupName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingLookupRequestlookupsmarketingLookupNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Marketing lookups - {GetMarketingLookupsRequest} This entity represents a lookup, defining its metadata for Marketing entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;Lookup&gt;</returns>
        public List<Lookup> GetMarketingLookupsRequestlookupsmarketingGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>> localVarResponse = GetMarketingLookupsRequestlookupsmarketingGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Marketing lookups - {GetMarketingLookupsRequest} This entity represents a lookup, defining its metadata for Marketing entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;Lookup&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>> GetMarketingLookupsRequestlookupsmarketingGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetMarketingLookupsRequestlookupsmarketingGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Lookup>>("/metadata/lookups/marketing/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingLookupsRequestlookupsmarketingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Marketing lookups - {GetMarketingLookupsRequest} This entity represents a lookup, defining its metadata for Marketing entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Lookup&gt;</returns>
        public async System.Threading.Tasks.Task<List<Lookup>> GetMarketingLookupsRequestlookupsmarketingGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>> localVarResponse = await GetMarketingLookupsRequestlookupsmarketingGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Marketing lookups - {GetMarketingLookupsRequest} This entity represents a lookup, defining its metadata for Marketing entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Lookup&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>>> GetMarketingLookupsRequestlookupsmarketingGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetMarketingLookupsRequestlookupsmarketingGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Lookup>>("/metadata/lookups/marketing/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingLookupsRequestlookupsmarketingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the entity definition from Orders entities - {GetOrderDefinitionRequest} Retrieve the entity definition from Orders entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>EntityDefinition</returns>
        public EntityDefinition GetOrderDefinitionRequestdefinitionsorderNameGet(string accept, string name, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<EntityDefinition> localVarResponse = GetOrderDefinitionRequestdefinitionsorderNameGetWithHttpInfo(accept, name, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the entity definition from Orders entities - {GetOrderDefinitionRequest} Retrieve the entity definition from Orders entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of EntityDefinition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<EntityDefinition> GetOrderDefinitionRequestdefinitionsorderNameGetWithHttpInfo(string accept, string name, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetOrderDefinitionRequestdefinitionsorderNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->GetOrderDefinitionRequestdefinitionsorderNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<EntityDefinition>("/metadata/definitions/order/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderDefinitionRequestdefinitionsorderNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the entity definition from Orders entities - {GetOrderDefinitionRequest} Retrieve the entity definition from Orders entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityDefinition</returns>
        public async System.Threading.Tasks.Task<EntityDefinition> GetOrderDefinitionRequestdefinitionsorderNameGetAsync(string accept, string name, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<EntityDefinition> localVarResponse = await GetOrderDefinitionRequestdefinitionsorderNameGetWithHttpInfoAsync(accept, name, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the entity definition from Orders entities - {GetOrderDefinitionRequest} Retrieve the entity definition from Orders entities. A definition is a list of properties that is allowed to be set to the instance being used. Warning : The name is case sensitive
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityDefinition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<EntityDefinition>> GetOrderDefinitionRequestdefinitionsorderNameGetWithHttpInfoAsync(string accept, string name, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetOrderDefinitionRequestdefinitionsorderNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->GetOrderDefinitionRequestdefinitionsorderNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EntityDefinition>("/metadata/definitions/order/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderDefinitionRequestdefinitionsorderNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the entity definitions defined in Orders - {GetOrderDefinitionsRequest} Retrieve the entity definitions defined in Orders. A definition is a list of properties that is allowed to be set to the instance of entity being used
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;EntityDefinition&gt;</returns>
        public List<EntityDefinition> GetOrderDefinitionsRequestdefinitionsorderGet(string accept, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<EntityDefinition>> localVarResponse = GetOrderDefinitionsRequestdefinitionsorderGetWithHttpInfo(accept, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the entity definitions defined in Orders - {GetOrderDefinitionsRequest} Retrieve the entity definitions defined in Orders. A definition is a list of properties that is allowed to be set to the instance of entity being used
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;EntityDefinition&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<EntityDefinition>> GetOrderDefinitionsRequestdefinitionsorderGetWithHttpInfo(string accept, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetOrderDefinitionsRequestdefinitionsorderGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EntityDefinition>>("/metadata/definitions/order", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderDefinitionsRequestdefinitionsorderGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the entity definitions defined in Orders - {GetOrderDefinitionsRequest} Retrieve the entity definitions defined in Orders. A definition is a list of properties that is allowed to be set to the instance of entity being used
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EntityDefinition&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityDefinition>> GetOrderDefinitionsRequestdefinitionsorderGetAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<EntityDefinition>> localVarResponse = await GetOrderDefinitionsRequestdefinitionsorderGetWithHttpInfoAsync(accept, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the entity definitions defined in Orders - {GetOrderDefinitionsRequest} Retrieve the entity definitions defined in Orders. A definition is a list of properties that is allowed to be set to the instance of entity being used
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EntityDefinition&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<EntityDefinition>>> GetOrderDefinitionsRequestdefinitionsorderGetWithHttpInfoAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetOrderDefinitionsRequestdefinitionsorderGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EntityDefinition>>("/metadata/definitions/order", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderDefinitionsRequestdefinitionsorderGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the lookup from Orders lookups - {GetOrderLookupRequest} This entity represents a lookup, defining its metadata for Order entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>Lookup</returns>
        public Lookup GetOrderLookupRequestlookupsorderLookupNameGet(string accept, string lookupName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = GetOrderLookupRequestlookupsorderLookupNameGetWithHttpInfo(accept, lookupName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the lookup from Orders lookups - {GetOrderLookupRequest} This entity represents a lookup, defining its metadata for Order entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>ApiResponse of Lookup</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> GetOrderLookupRequestlookupsorderLookupNameGetWithHttpInfo(string accept, string lookupName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetOrderLookupRequestlookupsorderLookupNameGet");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->GetOrderLookupRequestlookupsorderLookupNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Lookup>("/metadata/lookups/order/{LookupName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderLookupRequestlookupsorderLookupNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the lookup from Orders lookups - {GetOrderLookupRequest} This entity represents a lookup, defining its metadata for Order entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        public async System.Threading.Tasks.Task<Lookup> GetOrderLookupRequestlookupsorderLookupNameGetAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = await GetOrderLookupRequestlookupsorderLookupNameGetWithHttpInfoAsync(accept, lookupName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the lookup from Orders lookups - {GetOrderLookupRequest} This entity represents a lookup, defining its metadata for Order entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup>> GetOrderLookupRequestlookupsorderLookupNameGetWithHttpInfoAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetOrderLookupRequestlookupsorderLookupNameGet");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->GetOrderLookupRequestlookupsorderLookupNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Lookup>("/metadata/lookups/order/{LookupName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderLookupRequestlookupsorderLookupNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Orders lookups - {GetOrderLookupsRequest} This entity represents a lookup, defining its metadata for Order entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;Lookup&gt;</returns>
        public List<Lookup> GetOrderLookupsRequestlookupsorderGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>> localVarResponse = GetOrderLookupsRequestlookupsorderGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Orders lookups - {GetOrderLookupsRequest} This entity represents a lookup, defining its metadata for Order entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;Lookup&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>> GetOrderLookupsRequestlookupsorderGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetOrderLookupsRequestlookupsorderGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Lookup>>("/metadata/lookups/order/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderLookupsRequestlookupsorderGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Orders lookups - {GetOrderLookupsRequest} This entity represents a lookup, defining its metadata for Order entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Lookup&gt;</returns>
        public async System.Threading.Tasks.Task<List<Lookup>> GetOrderLookupsRequestlookupsorderGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>> localVarResponse = await GetOrderLookupsRequestlookupsorderGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Orders lookups - {GetOrderLookupsRequest} This entity represents a lookup, defining its metadata for Order entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Lookup&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>>> GetOrderLookupsRequestlookupsorderGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetOrderLookupsRequestlookupsorderGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Lookup>>("/metadata/lookups/order/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderLookupsRequestlookupsorderGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the lookup from Products lookups - {GetProductLookupRequest} This entity represents a lookup, defining its metadata for Product entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>Lookup</returns>
        public Lookup GetProductLookupRequestlookupsproductLookupNameGet(string accept, string lookupName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = GetProductLookupRequestlookupsproductLookupNameGetWithHttpInfo(accept, lookupName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the lookup from Products lookups - {GetProductLookupRequest} This entity represents a lookup, defining its metadata for Product entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <returns>ApiResponse of Lookup</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> GetProductLookupRequestlookupsproductLookupNameGetWithHttpInfo(string accept, string lookupName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetProductLookupRequestlookupsproductLookupNameGet");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->GetProductLookupRequestlookupsproductLookupNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Lookup>("/metadata/lookups/product/{LookupName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductLookupRequestlookupsproductLookupNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the lookup from Products lookups - {GetProductLookupRequest} This entity represents a lookup, defining its metadata for Product entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        public async System.Threading.Tasks.Task<Lookup> GetProductLookupRequestlookupsproductLookupNameGetAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = await GetProductLookupRequestlookupsproductLookupNameGetWithHttpInfoAsync(accept, lookupName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the lookup from Products lookups - {GetProductLookupRequest} This entity represents a lookup, defining its metadata for Product entity. Overture provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The id to retrieve related lookup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup>> GetProductLookupRequestlookupsproductLookupNameGetWithHttpInfoAsync(string accept, string lookupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetProductLookupRequestlookupsproductLookupNameGet");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->GetProductLookupRequestlookupsproductLookupNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Lookup>("/metadata/lookups/product/{LookupName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductLookupRequestlookupsproductLookupNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Product lookups - {GetProductLookupsRequest} This entity represents a lookup, defining its metadata for Product entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;Lookup&gt;</returns>
        public List<Lookup> GetProductLookupsRequestlookupsproductGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>> localVarResponse = GetProductLookupsRequestlookupsproductGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Product lookups - {GetProductLookupsRequest} This entity represents a lookup, defining its metadata for Product entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;Lookup&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>> GetProductLookupsRequestlookupsproductGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetProductLookupsRequestlookupsproductGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Lookup>>("/metadata/lookups/product/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductLookupsRequestlookupsproductGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Product lookups - {GetProductLookupsRequest} This entity represents a lookup, defining its metadata for Product entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Lookup&gt;</returns>
        public async System.Threading.Tasks.Task<List<Lookup>> GetProductLookupsRequestlookupsproductGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>> localVarResponse = await GetProductLookupsRequestlookupsproductGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Product lookups - {GetProductLookupsRequest} This entity represents a lookup, defining its metadata for Product entity. Orckestra provides, out-of-the-box, a list of lookups which can be enriched by the administrator
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Lookup&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Lookup>>> GetProductLookupsRequestlookupsproductGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetProductLookupsRequestlookupsproductGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Lookup>>("/metadata/lookups/product/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductLookupsRequestlookupsproductGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the targeting items (metadata used to construct targeting expression) - {GetTargetingMetadataRequest} Return the targeting items (metadata used to construct targeting expression)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>GetTargetingMetadataResponse</returns>
        public GetTargetingMetadataResponse GetTargetingMetadataRequesttargetingGet(string accept, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetTargetingMetadataResponse> localVarResponse = GetTargetingMetadataRequesttargetingGetWithHttpInfo(accept, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the targeting items (metadata used to construct targeting expression) - {GetTargetingMetadataRequest} Return the targeting items (metadata used to construct targeting expression)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of GetTargetingMetadataResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetTargetingMetadataResponse> GetTargetingMetadataRequesttargetingGetWithHttpInfo(string accept, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetTargetingMetadataRequesttargetingGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTargetingMetadataResponse>("/metadata/targeting", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTargetingMetadataRequesttargetingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the targeting items (metadata used to construct targeting expression) - {GetTargetingMetadataRequest} Return the targeting items (metadata used to construct targeting expression)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTargetingMetadataResponse</returns>
        public async System.Threading.Tasks.Task<GetTargetingMetadataResponse> GetTargetingMetadataRequesttargetingGetAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetTargetingMetadataResponse> localVarResponse = await GetTargetingMetadataRequesttargetingGetWithHttpInfoAsync(accept, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the targeting items (metadata used to construct targeting expression) - {GetTargetingMetadataRequest} Return the targeting items (metadata used to construct targeting expression)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTargetingMetadataResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetTargetingMetadataResponse>> GetTargetingMetadataRequesttargetingGetWithHttpInfoAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->GetTargetingMetadataRequesttargetingGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTargetingMetadataResponse>("/metadata/targeting", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTargetingMetadataRequesttargetingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a category definition - {UpdateCategoryDefinitionRequest} Update a category definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductDefinition</returns>
        public ProductDefinition UpdateCategoryDefinitionRequestdefinitionscategoryNameCreate(string accept, string name, UpdateCategoryDefinitionRequest body = default(UpdateCategoryDefinitionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> localVarResponse = UpdateCategoryDefinitionRequestdefinitionscategoryNameCreateWithHttpInfo(accept, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a category definition - {UpdateCategoryDefinitionRequest} Update a category definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductDefinition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> UpdateCategoryDefinitionRequestdefinitionscategoryNameCreateWithHttpInfo(string accept, string name, UpdateCategoryDefinitionRequest body = default(UpdateCategoryDefinitionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->UpdateCategoryDefinitionRequestdefinitionscategoryNameCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->UpdateCategoryDefinitionRequestdefinitionscategoryNameCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductDefinition>("/metadata/definitions/category/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCategoryDefinitionRequestdefinitionscategoryNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a category definition - {UpdateCategoryDefinitionRequest} Update a category definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDefinition</returns>
        public async System.Threading.Tasks.Task<ProductDefinition> UpdateCategoryDefinitionRequestdefinitionscategoryNameCreateAsync(string accept, string name, UpdateCategoryDefinitionRequest body = default(UpdateCategoryDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> localVarResponse = await UpdateCategoryDefinitionRequestdefinitionscategoryNameCreateWithHttpInfoAsync(accept, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a category definition - {UpdateCategoryDefinitionRequest} Update a category definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the category definition</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDefinition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition>> UpdateCategoryDefinitionRequestdefinitionscategoryNameCreateWithHttpInfoAsync(string accept, string name, UpdateCategoryDefinitionRequest body = default(UpdateCategoryDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->UpdateCategoryDefinitionRequestdefinitionscategoryNameCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->UpdateCategoryDefinitionRequestdefinitionscategoryNameCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductDefinition>("/metadata/definitions/category/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCategoryDefinitionRequestdefinitionscategoryNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a marketing lookup type definition - {UpdateMarketingLookupTypeDefinitionRequest} Update a marketing lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Lookup</returns>
        public Lookup UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePost(string accept, string lookupName, UpdateMarketingLookupTypeDefinitionRequest body = default(UpdateMarketingLookupTypeDefinitionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePostWithHttpInfo(accept, lookupName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a marketing lookup type definition - {UpdateMarketingLookupTypeDefinitionRequest} Update a marketing lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Lookup</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePostWithHttpInfo(string accept, string lookupName, UpdateMarketingLookupTypeDefinitionRequest body = default(UpdateMarketingLookupTypeDefinitionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePost");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Lookup>("/metadata/LookupType/Marketing/{LookupName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a marketing lookup type definition - {UpdateMarketingLookupTypeDefinitionRequest} Update a marketing lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        public async System.Threading.Tasks.Task<Lookup> UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePostAsync(string accept, string lookupName, UpdateMarketingLookupTypeDefinitionRequest body = default(UpdateMarketingLookupTypeDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = await UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePostWithHttpInfoAsync(accept, lookupName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a marketing lookup type definition - {UpdateMarketingLookupTypeDefinitionRequest} Update a marketing lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup>> UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePostWithHttpInfoAsync(string accept, string lookupName, UpdateMarketingLookupTypeDefinitionRequest body = default(UpdateMarketingLookupTypeDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePost");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Lookup>("/metadata/LookupType/Marketing/{LookupName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMarketingLookupTypeDefinitionRequestLookupTypeMarketingLookupNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a product attribute group - {UpdateProductAttributeGroupRequest} Update a product attribute group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductPropertyDefinitionGroup</returns>
        public ProductPropertyDefinitionGroup UpdateProductAttributeGroupRequestattributegroupsproductNameCreate(string accept, string name, UpdateProductAttributeGroupRequest body = default(UpdateProductAttributeGroupRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinitionGroup> localVarResponse = UpdateProductAttributeGroupRequestattributegroupsproductNameCreateWithHttpInfo(accept, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a product attribute group - {UpdateProductAttributeGroupRequest} Update a product attribute group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductPropertyDefinitionGroup</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinitionGroup> UpdateProductAttributeGroupRequestattributegroupsproductNameCreateWithHttpInfo(string accept, string name, UpdateProductAttributeGroupRequest body = default(UpdateProductAttributeGroupRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->UpdateProductAttributeGroupRequestattributegroupsproductNameCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->UpdateProductAttributeGroupRequestattributegroupsproductNameCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductPropertyDefinitionGroup>("/metadata/attributegroups/product/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductAttributeGroupRequestattributegroupsproductNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a product attribute group - {UpdateProductAttributeGroupRequest} Update a product attribute group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductPropertyDefinitionGroup</returns>
        public async System.Threading.Tasks.Task<ProductPropertyDefinitionGroup> UpdateProductAttributeGroupRequestattributegroupsproductNameCreateAsync(string accept, string name, UpdateProductAttributeGroupRequest body = default(UpdateProductAttributeGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinitionGroup> localVarResponse = await UpdateProductAttributeGroupRequestattributegroupsproductNameCreateWithHttpInfoAsync(accept, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a product attribute group - {UpdateProductAttributeGroupRequest} Update a product attribute group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the attribute group</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductPropertyDefinitionGroup)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinitionGroup>> UpdateProductAttributeGroupRequestattributegroupsproductNameCreateWithHttpInfoAsync(string accept, string name, UpdateProductAttributeGroupRequest body = default(UpdateProductAttributeGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->UpdateProductAttributeGroupRequestattributegroupsproductNameCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->UpdateProductAttributeGroupRequestattributegroupsproductNameCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductPropertyDefinitionGroup>("/metadata/attributegroups/product/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductAttributeGroupRequestattributegroupsproductNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a product attribute - {UpdateProductAttributeRequest} Update a product attribute.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductPropertyDefinition</returns>
        public ProductPropertyDefinition UpdateProductAttributeRequestattributesproductAttributeNameCreate(string accept, string attributeName, UpdateProductAttributeRequest body = default(UpdateProductAttributeRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinition> localVarResponse = UpdateProductAttributeRequestattributesproductAttributeNameCreateWithHttpInfo(accept, attributeName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a product attribute - {UpdateProductAttributeRequest} Update a product attribute.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductPropertyDefinition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinition> UpdateProductAttributeRequestattributesproductAttributeNameCreateWithHttpInfo(string accept, string attributeName, UpdateProductAttributeRequest body = default(UpdateProductAttributeRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->UpdateProductAttributeRequestattributesproductAttributeNameCreate");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling MetadataApi->UpdateProductAttributeRequestattributesproductAttributeNameCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductPropertyDefinition>("/metadata/attributes/product/{AttributeName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductAttributeRequestattributesproductAttributeNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a product attribute - {UpdateProductAttributeRequest} Update a product attribute.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductPropertyDefinition</returns>
        public async System.Threading.Tasks.Task<ProductPropertyDefinition> UpdateProductAttributeRequestattributesproductAttributeNameCreateAsync(string accept, string attributeName, UpdateProductAttributeRequest body = default(UpdateProductAttributeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinition> localVarResponse = await UpdateProductAttributeRequestattributesproductAttributeNameCreateWithHttpInfoAsync(accept, attributeName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a product attribute - {UpdateProductAttributeRequest} Update a product attribute.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="attributeName">The name of the attribute</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductPropertyDefinition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPropertyDefinition>> UpdateProductAttributeRequestattributesproductAttributeNameCreateWithHttpInfoAsync(string accept, string attributeName, UpdateProductAttributeRequest body = default(UpdateProductAttributeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->UpdateProductAttributeRequestattributesproductAttributeNameCreate");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling MetadataApi->UpdateProductAttributeRequestattributesproductAttributeNameCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductPropertyDefinition>("/metadata/attributes/product/{AttributeName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductAttributeRequestattributesproductAttributeNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a product definition - {UpdateProductDefinitionRequest} Update a product definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductDefinition</returns>
        public ProductDefinition UpdateProductDefinitionRequestdefinitionsproductNameCreate(string accept, string name, UpdateProductDefinitionRequest body = default(UpdateProductDefinitionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> localVarResponse = UpdateProductDefinitionRequestdefinitionsproductNameCreateWithHttpInfo(accept, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a product definition - {UpdateProductDefinitionRequest} Update a product definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductDefinition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> UpdateProductDefinitionRequestdefinitionsproductNameCreateWithHttpInfo(string accept, string name, UpdateProductDefinitionRequest body = default(UpdateProductDefinitionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->UpdateProductDefinitionRequestdefinitionsproductNameCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->UpdateProductDefinitionRequestdefinitionsproductNameCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductDefinition>("/metadata/definitions/product/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductDefinitionRequestdefinitionsproductNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a product definition - {UpdateProductDefinitionRequest} Update a product definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDefinition</returns>
        public async System.Threading.Tasks.Task<ProductDefinition> UpdateProductDefinitionRequestdefinitionsproductNameCreateAsync(string accept, string name, UpdateProductDefinitionRequest body = default(UpdateProductDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> localVarResponse = await UpdateProductDefinitionRequestdefinitionsproductNameCreateWithHttpInfoAsync(accept, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a product definition - {UpdateProductDefinitionRequest} Update a product definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the product definition</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDefinition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition>> UpdateProductDefinitionRequestdefinitionsproductNameCreateWithHttpInfoAsync(string accept, string name, UpdateProductDefinitionRequest body = default(UpdateProductDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->UpdateProductDefinitionRequestdefinitionsproductNameCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->UpdateProductDefinitionRequestdefinitionsproductNameCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductDefinition>("/metadata/definitions/product/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductDefinitionRequestdefinitionsproductNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a product lookup type definition - {UpdateProductLookupTypeDefinitionRequest} Update a product lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Lookup</returns>
        public Lookup UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreate(string accept, string lookupName, UpdateProductLookupTypeDefinitionRequest body = default(UpdateProductLookupTypeDefinitionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreateWithHttpInfo(accept, lookupName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a product lookup type definition - {UpdateProductLookupTypeDefinitionRequest} Update a product lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Lookup</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreateWithHttpInfo(string accept, string lookupName, UpdateProductLookupTypeDefinitionRequest body = default(UpdateProductLookupTypeDefinitionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreate");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Lookup>("/metadata/lookups/product/{LookupName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a product lookup type definition - {UpdateProductLookupTypeDefinitionRequest} Update a product lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lookup</returns>
        public async System.Threading.Tasks.Task<Lookup> UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreateAsync(string accept, string lookupName, UpdateProductLookupTypeDefinitionRequest body = default(UpdateProductLookupTypeDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup> localVarResponse = await UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreateWithHttpInfoAsync(accept, lookupName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a product lookup type definition - {UpdateProductLookupTypeDefinitionRequest} Update a product lookup type definition
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="lookupName">The name of this lookup</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lookup)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Lookup>> UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreateWithHttpInfoAsync(string accept, string lookupName, UpdateProductLookupTypeDefinitionRequest body = default(UpdateProductLookupTypeDefinitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MetadataApi->UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreate");

            // verify the required parameter 'lookupName' is set
            if (lookupName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lookupName' when calling MetadataApi->UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("LookupName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lookupName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Lookup>("/metadata/lookups/product/{LookupName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductLookupTypeDefinitionRequestlookupsproductLookupNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
