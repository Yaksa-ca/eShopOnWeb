/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new history item related to specified order - {AddOrderHistoryRequest}
        /// </summary>
        /// <remarks>
        /// Add history item related to a specified order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AddOrderHistoryRequestScopeIdorderhistoryPost(string accept, string scopeId, AddOrderHistoryRequest body = default(AddOrderHistoryRequest));

        /// <summary>
        /// Add new history item related to specified order - {AddOrderHistoryRequest}
        /// </summary>
        /// <remarks>
        /// Add history item related to a specified order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderHistoryRequestScopeIdorderhistoryPostWithHttpInfo(string accept, string scopeId, AddOrderHistoryRequest body = default(AddOrderHistoryRequest));
        /// <summary>
        /// Add a note to an order - {AddOrderNoteRequest}
        /// </summary>
        /// <remarks>
        /// Add a note to an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The parent id of the note.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AddOrderNoteRequestScopeIdOrderIdnotesPost(string accept, string scopeId, string orderId, AddOrderNoteRequest body = default(AddOrderNoteRequest));

        /// <summary>
        /// Add a note to an order - {AddOrderNoteRequest}
        /// </summary>
        /// <remarks>
        /// Add a note to an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The parent id of the note.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrderNoteRequestScopeIdOrderIdnotesPostWithHttpInfo(string accept, string scopeId, string orderId, AddOrderNoteRequest body = default(AddOrderNoteRequest));
        /// <summary>
        /// Return the fulfillment state of an order and each of its shipments - {AddShipmentFulfillmentMessagesRequest}
        /// </summary>
        /// <remarks>
        /// Update the ExecutionMessages and ValidationResults of a ShipmentFulfillmentState.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        OrderFulfillmentState AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPost(string accept, string scopeId, string orderId, string shipmentId, AddShipmentFulfillmentMessagesRequest body = default(AddShipmentFulfillmentMessagesRequest));

        /// <summary>
        /// Return the fulfillment state of an order and each of its shipments - {AddShipmentFulfillmentMessagesRequest}
        /// </summary>
        /// <remarks>
        /// Update the ExecutionMessages and ValidationResults of a ShipmentFulfillmentState.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        ApiResponse<OrderFulfillmentState> AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, AddShipmentFulfillmentMessagesRequest body = default(AddShipmentFulfillmentMessagesRequest));
        /// <summary>
        /// Add a note to an order shipment - {AddShipmentNoteRequest}
        /// </summary>
        /// <remarks>
        /// Add a note to an order shipment.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPost(string accept, string scopeId, string orderId, string shipmentId, AddShipmentNoteRequest body = default(AddShipmentNoteRequest));

        /// <summary>
        /// Add a note to an order shipment - {AddShipmentNoteRequest}
        /// </summary>
        /// <remarks>
        /// Add a note to an order shipment.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, AddShipmentNoteRequest body = default(AddShipmentNoteRequest));
        /// <summary>
        /// Request that all shipments statuses be transitioned from their current status to the submitted status. - {ChangeOrderStatusRequest}
        /// </summary>
        /// <remarks>
        /// Request that the status of all shipments be transitioned from their current status to the given status. This request issues a request to resume the long running fulfillment workflow of each shipment and transition them to the given state.If all transitions succeed the order status will be updated
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        OrderFulfillmentState ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePost(string accept, string scopeId, string orderId, ChangeOrderStatusRequest body = default(ChangeOrderStatusRequest));

        /// <summary>
        /// Request that all shipments statuses be transitioned from their current status to the submitted status. - {ChangeOrderStatusRequest}
        /// </summary>
        /// <remarks>
        /// Request that the status of all shipments be transitioned from their current status to the given status. This request issues a request to resume the long running fulfillment workflow of each shipment and transition them to the given state.If all transitions succeed the order status will be updated
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        ApiResponse<OrderFulfillmentState> ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePostWithHttpInfo(string accept, string scopeId, string orderId, ChangeOrderStatusRequest body = default(ChangeOrderStatusRequest));
        /// <summary>
        /// Request that a shipment status be transitioned from its current status to the submitted status. - {ChangeShipmentStatusRequest}
        /// </summary>
        /// <remarks>
        /// Request that a shipment status be transitioned from its current status to the submitted status. This request will issue a request to resume the long running fulfillment workflow
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="shipmentId">The unique shipment identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        OrderFulfillmentState ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePost(string accept, string scopeId, string orderId, string shipmentId, ChangeShipmentStatusRequest body = default(ChangeShipmentStatusRequest));

        /// <summary>
        /// Request that a shipment status be transitioned from its current status to the submitted status. - {ChangeShipmentStatusRequest}
        /// </summary>
        /// <remarks>
        /// Request that a shipment status be transitioned from its current status to the submitted status. This request will issue a request to resume the long running fulfillment workflow
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="shipmentId">The unique shipment identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        ApiResponse<OrderFulfillmentState> ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, ChangeShipmentStatusRequest body = default(ChangeShipmentStatusRequest));
        /// <summary>
        /// Copy cart from an existing order - {CopyCartFromOrderRequest}
        /// </summary>
        /// <remarks>
        /// Copy a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be used for copy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        Cart CopyCartFromOrderRequestScopeIdOrderIdcopycartPost(string accept, string scopeId, string orderId, CopyCartFromOrderRequest body = default(CopyCartFromOrderRequest));

        /// <summary>
        /// Copy cart from an existing order - {CopyCartFromOrderRequest}
        /// </summary>
        /// <remarks>
        /// Copy a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be used for copy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        ApiResponse<Cart> CopyCartFromOrderRequestScopeIdOrderIdcopycartPostWithHttpInfo(string accept, string scopeId, string orderId, CopyCartFromOrderRequest body = default(CopyCartFromOrderRequest));
        /// <summary>
        /// Copy an order - {CopyOrderRequest}
        /// </summary>
        /// <remarks>
        /// Copy an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be copied.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        Cart CopyOrderRequestScopeIdOrderIdcopyPost(string accept, string scopeId, string orderId, Object body = default(Object));

        /// <summary>
        /// Copy an order - {CopyOrderRequest}
        /// </summary>
        /// <remarks>
        /// Copy an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be copied.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        ApiResponse<Cart> CopyOrderRequestScopeIdOrderIdcopyPostWithHttpInfo(string accept, string scopeId, string orderId, Object body = default(Object));
        /// <summary>
        /// Create a new order from a cart - {CreateOrderRequest}
        /// </summary>
        /// <remarks>
        /// Create a new order from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        Order CreateOrderRequestPost(string accept, CreateOrderRequest body = default(CreateOrderRequest));

        /// <summary>
        /// Create a new order from a cart - {CreateOrderRequest}
        /// </summary>
        /// <remarks>
        /// Create a new order from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> CreateOrderRequestPostWithHttpInfo(string accept, CreateOrderRequest body = default(CreateOrderRequest));
        /// <summary>
        /// Create RMA Guest - {CreateRmaGuestRequest}
        /// </summary>
        /// <remarks>
        /// Create an RMA for a Guest or Unregistered customer. You must fill at least one of the &#39;Postal Code&#39;, &#39;Last name&#39;, or &#39;Email&#39; fields. The specified field(s) will be used for validation.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RmaRequestResult</returns>
        RmaRequestResult CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPost(string accept, string scopeId, string orderNumber, CreateRmaGuestRequest body = default(CreateRmaGuestRequest));

        /// <summary>
        /// Create RMA Guest - {CreateRmaGuestRequest}
        /// </summary>
        /// <remarks>
        /// Create an RMA for a Guest or Unregistered customer. You must fill at least one of the &#39;Postal Code&#39;, &#39;Last name&#39;, or &#39;Email&#39; fields. The specified field(s) will be used for validation.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RmaRequestResult</returns>
        ApiResponse<RmaRequestResult> CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPostWithHttpInfo(string accept, string scopeId, string orderNumber, CreateRmaGuestRequest body = default(CreateRmaGuestRequest));
        /// <summary>
        /// Create RMA registered customer - {CreateRmaRegisteredRequest}
        /// </summary>
        /// <remarks>
        /// Create an RMA for a registered customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="customerId">the Identifier of the Customer who owns the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RmaRequestResult</returns>
        RmaRequestResult CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPost(string accept, string scopeId, string orderNumber, string customerId, CreateRmaRegisteredRequest body = default(CreateRmaRegisteredRequest));

        /// <summary>
        /// Create RMA registered customer - {CreateRmaRegisteredRequest}
        /// </summary>
        /// <remarks>
        /// Create an RMA for a registered customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="customerId">the Identifier of the Customer who owns the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RmaRequestResult</returns>
        ApiResponse<RmaRequestResult> CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPostWithHttpInfo(string accept, string scopeId, string orderNumber, string customerId, CreateRmaRegisteredRequest body = default(CreateRmaRegisteredRequest));
        /// <summary>
        /// Create a shipment document. - {CreateShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Create a shipment document.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ShipmentDocument</returns>
        ShipmentDocument CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost(string accept, string scopeId, string orderId, string shipmentId, string name, CreateShipmentDocumentRequest body = default(CreateShipmentDocumentRequest));

        /// <summary>
        /// Create a shipment document. - {CreateShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Create a shipment document.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ShipmentDocument</returns>
        ApiResponse<ShipmentDocument> CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, string name, CreateShipmentDocumentRequest body = default(CreateShipmentDocumentRequest));
        /// <summary>
        /// Delete a shipment document. - {DeleteShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Delete a shipment document.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The shipment document name.</param>
        /// <returns>ShipmentDocument</returns>
        ShipmentDocument DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete(string accept, string scopeId, string orderId, string shipmentId, string name);

        /// <summary>
        /// Delete a shipment document. - {DeleteShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Delete a shipment document.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The shipment document name.</param>
        /// <returns>ApiResponse of ShipmentDocument</returns>
        ApiResponse<ShipmentDocument> DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDeleteWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, string name);
        /// <summary>
        /// Return to number of orders matching the search criteria - {FindOrdersCountRequest}
        /// </summary>
        /// <remarks>
        /// Return to number of orders matching the search criteria
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>QueryCountResult</returns>
        QueryCountResult FindOrdersCountRequestScopeIdcountPost(string accept, string scopeId, FindOrdersCountRequest body = default(FindOrdersCountRequest));

        /// <summary>
        /// Return to number of orders matching the search criteria - {FindOrdersCountRequest}
        /// </summary>
        /// <remarks>
        /// Return to number of orders matching the search criteria
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of QueryCountResult</returns>
        ApiResponse<QueryCountResult> FindOrdersCountRequestScopeIdcountPostWithHttpInfo(string accept, string scopeId, FindOrdersCountRequest body = default(FindOrdersCountRequest));
        /// <summary>
        /// Search for orders - {FindOrdersRequest}
        /// </summary>
        /// <remarks>
        /// Search for orders
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderQueryResult</returns>
        OrderQueryResult FindOrdersRequestScopeIdfindPost(string accept, string scopeId, FindOrdersRequest body = default(FindOrdersRequest));

        /// <summary>
        /// Search for orders - {FindOrdersRequest}
        /// </summary>
        /// <remarks>
        /// Search for orders
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderQueryResult</returns>
        ApiResponse<OrderQueryResult> FindOrdersRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindOrdersRequest body = default(FindOrdersRequest));
        /// <summary>
        /// Retrieve shipment documents - {FindShipmentDocumentsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve shipment documents
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ShipmentDocumentQueryResult</returns>
        ShipmentDocumentQueryResult FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPost(string accept, string scopeId, FindShipmentDocumentsRequest body = default(FindShipmentDocumentsRequest));

        /// <summary>
        /// Retrieve shipment documents - {FindShipmentDocumentsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve shipment documents
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ShipmentDocumentQueryResult</returns>
        ApiResponse<ShipmentDocumentQueryResult> FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPostWithHttpInfo(string accept, string scopeId, FindShipmentDocumentsRequest body = default(FindShipmentDocumentsRequest));
        /// <summary>
        /// Retrieve shipment documents summaries - {FindShipmentDocumentsSummariesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve shipment documents summaries
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ShipmentDocumentSummaryQueryResult</returns>
        ShipmentDocumentSummaryQueryResult FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPost(string accept, string scopeId, FindShipmentDocumentsSummariesRequest body = default(FindShipmentDocumentsSummariesRequest));

        /// <summary>
        /// Retrieve shipment documents summaries - {FindShipmentDocumentsSummariesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve shipment documents summaries
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ShipmentDocumentSummaryQueryResult</returns>
        ApiResponse<ShipmentDocumentSummaryQueryResult> FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPostWithHttpInfo(string accept, string scopeId, FindShipmentDocumentsSummariesRequest body = default(FindShipmentDocumentsSummariesRequest));
        /// <summary>
        /// Retrieve all the tax providers available in the system - {GetAvailableTaxProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the tax providers available in the system
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <returns>List&lt;TaxProviderDetails&gt;</returns>
        List<TaxProviderDetails> GetAvailableTaxProvidersRequestavailableTaxProvidersGet(string accept, string cultureName = default(string));

        /// <summary>
        /// Retrieve all the tax providers available in the system - {GetAvailableTaxProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the tax providers available in the system
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;TaxProviderDetails&gt;</returns>
        ApiResponse<List<TaxProviderDetails>> GetAvailableTaxProvidersRequestavailableTaxProvidersGetWithHttpInfo(string accept, string cultureName = default(string));
        /// <summary>
        /// Get customer last order - {GetCustomerLastOrderRequest}
        /// </summary>
        /// <remarks>
        /// Get customer last order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer to retrieve last order from.</param>
        /// <returns>Order</returns>
        Order GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGet(string accept, string scopeId, string customerId);

        /// <summary>
        /// Get customer last order - {GetCustomerLastOrderRequest}
        /// </summary>
        /// <remarks>
        /// Get customer last order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer to retrieve last order from.</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGetWithHttpInfo(string accept, string scopeId, string customerId);
        /// <summary>
        /// Retrieve an order - {GetOrderByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <returns>Order</returns>
        Order GetOrderByIdRequestScopeIdOrderIdGet(string accept, string scopeId, string orderId, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?));

        /// <summary>
        /// Retrieve an order - {GetOrderByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> GetOrderByIdRequestScopeIdOrderIdGetWithHttpInfo(string accept, string scopeId, string orderId, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?));
        /// <summary>
        /// Retrieve an order - {GetOrderByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The order number for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <param name="customerId">The customer identifier for the request (optional)</param>
        /// <returns>Order</returns>
        Order GetOrderByNumberRequestScopeIdbyNumberOrderNumberGet(string accept, string scopeId, string orderNumber, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?), string customerId = default(string));

        /// <summary>
        /// Retrieve an order - {GetOrderByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The order number for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <param name="customerId">The customer identifier for the request (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> GetOrderByNumberRequestScopeIdbyNumberOrderNumberGetWithHttpInfo(string accept, string scopeId, string orderNumber, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?), string customerId = default(string));
        /// <summary>
        /// Retrieve the fulfillment state of an order and each of its shipments - {GetOrderFulfillmentStateRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the fulfillment state of an order and each of its shipments
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier for the Order</param>
        /// <returns>OrderFulfillmentState</returns>
        OrderFulfillmentState GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGet(string accept, string scopeId, string orderId);

        /// <summary>
        /// Retrieve the fulfillment state of an order and each of its shipments - {GetOrderFulfillmentStateRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the fulfillment state of an order and each of its shipments
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier for the Order</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        ApiResponse<OrderFulfillmentState> GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGetWithHttpInfo(string accept, string scopeId, string orderId);
        /// <summary>
        /// Get history items related to specified order - {GetOrderHistoryRequest}
        /// </summary>
        /// <remarks>
        /// Get history items related to specified order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The identifier of the order to be used for retrieving items. (optional)</param>
        /// <param name="shipmentId">The shipment identifier to be used to filter items from the order (optional). (optional)</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier to be used to filter items from the order (optional). (optional)</param>
        /// <returns>List&lt;OrderHistoryItem&gt;</returns>
        List<OrderHistoryItem> GetOrderHistoryRequestScopeIdorderhistoryGet(string accept, string scopeId, string orderNumber = default(string), string shipmentId = default(string), string fulfillmentLocationId = default(string));

        /// <summary>
        /// Get history items related to specified order - {GetOrderHistoryRequest}
        /// </summary>
        /// <remarks>
        /// Get history items related to specified order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The identifier of the order to be used for retrieving items. (optional)</param>
        /// <param name="shipmentId">The shipment identifier to be used to filter items from the order (optional). (optional)</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier to be used to filter items from the order (optional). (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderHistoryItem&gt;</returns>
        ApiResponse<List<OrderHistoryItem>> GetOrderHistoryRequestScopeIdorderhistoryGetWithHttpInfo(string accept, string scopeId, string orderNumber = default(string), string shipmentId = default(string), string fulfillmentLocationId = default(string));
        /// <summary>
        /// Get order notes - {GetOrderNotesRequest}
        /// </summary>
        /// <remarks>
        /// Get order notes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the Order.</param>
        /// <returns>List&lt;Note&gt;</returns>
        List<Note> GetOrderNotesRequestScopeIdOrderIdnotesGet(string accept, string scopeId, string orderId);

        /// <summary>
        /// Get order notes - {GetOrderNotesRequest}
        /// </summary>
        /// <remarks>
        /// Get order notes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the Order.</param>
        /// <returns>ApiResponse of List&lt;Note&gt;</returns>
        ApiResponse<List<Note>> GetOrderNotesRequestScopeIdOrderIdnotesGetWithHttpInfo(string accept, string scopeId, string orderId);
        /// <summary>
        /// Get the order settings - {GetOrderSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Get the order settings
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>OrderSettings</returns>
        OrderSettings GetOrderSettingsRequestsettingsGet(string accept, string scopeId = default(string));

        /// <summary>
        /// Get the order settings - {GetOrderSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Get the order settings
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of OrderSettings</returns>
        ApiResponse<OrderSettings> GetOrderSettingsRequestsettingsGetWithHttpInfo(string accept, string scopeId = default(string));
        /// <summary>
        /// Get the uri of printable version of the order - {GetPrintableOrderUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of the order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <returns>string</returns>
        string GetPrintableOrderUriRequestScopeIdOrderIdprinturiGet(string accept, string scopeId, string orderId);

        /// <summary>
        /// Get the uri of printable version of the order - {GetPrintableOrderUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of the order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetPrintableOrderUriRequestScopeIdOrderIdprinturiGetWithHttpInfo(string accept, string scopeId, string orderId);
        /// <summary>
        /// Get the uri of printable version of a list of order - {GetPrintableOrdersUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of a list of order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string GetPrintableOrdersUriRequestScopeIdprintOrdersPost(string accept, string scopeId, GetPrintableOrdersUriRequest body = default(GetPrintableOrdersUriRequest));

        /// <summary>
        /// Get the uri of printable version of a list of order - {GetPrintableOrdersUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of a list of order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetPrintableOrdersUriRequestScopeIdprintOrdersPostWithHttpInfo(string accept, string scopeId, GetPrintableOrdersUriRequest body = default(GetPrintableOrdersUriRequest));
        /// <summary>
        /// Retrieves RMA and items - {GetRmaRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a RMA using order number and RMA number
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <param name="rmaNumber">the RMA number</param>
        /// <returns>Rma</returns>
        Rma GetRmaRequestRMAScopeIdOrderNumberRmaNumberGet(string accept, string scopeId, string orderNumber, string rmaNumber);

        /// <summary>
        /// Retrieves RMA and items - {GetRmaRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a RMA using order number and RMA number
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <param name="rmaNumber">the RMA number</param>
        /// <returns>ApiResponse of Rma</returns>
        ApiResponse<Rma> GetRmaRequestRMAScopeIdOrderNumberRmaNumberGetWithHttpInfo(string accept, string scopeId, string orderNumber, string rmaNumber);
        /// <summary>
        /// Retrieves all RMAs for an order - {GetRmasByOrderRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all RMAs for a specified order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <returns>RmaListResult</returns>
        RmaListResult GetRmasByOrderRequestRMAScopeIdOrderNumberGet(string accept, string scopeId, string orderNumber);

        /// <summary>
        /// Retrieves all RMAs for an order - {GetRmasByOrderRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all RMAs for a specified order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <returns>ApiResponse of RmaListResult</returns>
        ApiResponse<RmaListResult> GetRmasByOrderRequestRMAScopeIdOrderNumberGetWithHttpInfo(string accept, string scopeId, string orderNumber);
        /// <summary>
        /// Retrieve a shipment document - {GetShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a shipment document
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <param name="name">The name of the document.</param>
        /// <returns>ShipmentDocument</returns>
        ShipmentDocument GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet(string accept, string scopeId, string orderId, string shipmentId, string name);

        /// <summary>
        /// Retrieve a shipment document - {GetShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a shipment document
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <param name="name">The name of the document.</param>
        /// <returns>ApiResponse of ShipmentDocument</returns>
        ApiResponse<ShipmentDocument> GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGetWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, string name);
        /// <summary>
        /// Get shipment notes - {GetShipmentNotesRequest}
        /// </summary>
        /// <remarks>
        /// Get shipment notes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <returns>List&lt;Note&gt;</returns>
        List<Note> GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGet(string accept, string scopeId, string shipmentId);

        /// <summary>
        /// Get shipment notes - {GetShipmentNotesRequest}
        /// </summary>
        /// <remarks>
        /// Get shipment notes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <returns>ApiResponse of List&lt;Note&gt;</returns>
        ApiResponse<List<Note>> GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGetWithHttpInfo(string accept, string scopeId, string shipmentId);
        /// <summary>
        /// Retrieve the list of tax categories in the system - {GetTaxCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the list of tax categories in the system
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="getSystemCategories">a value indicating whether include system categories or not. (optional)</param>
        /// <param name="getOnlySupportedCategories">a value indicating whether include only supported categories or not. (optional)</param>
        /// <returns>List&lt;TaxCategory&gt;</returns>
        List<TaxCategory> GetTaxCategoriesRequesttaxCategoriesGet(string accept, bool? getSystemCategories = default(bool?), bool? getOnlySupportedCategories = default(bool?));

        /// <summary>
        /// Retrieve the list of tax categories in the system - {GetTaxCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the list of tax categories in the system
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="getSystemCategories">a value indicating whether include system categories or not. (optional)</param>
        /// <param name="getOnlySupportedCategories">a value indicating whether include only supported categories or not. (optional)</param>
        /// <returns>ApiResponse of List&lt;TaxCategory&gt;</returns>
        ApiResponse<List<TaxCategory>> GetTaxCategoriesRequesttaxCategoriesGetWithHttpInfo(string accept, bool? getSystemCategories = default(bool?), bool? getOnlySupportedCategories = default(bool?));
        /// <summary>
        /// Retrieve the tax provider for a scope - {GetTaxProviderByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the tax provider for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the provider (optional)</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>TaxProviderDetails</returns>
        TaxProviderDetails GetTaxProviderByScopeRequesttaxProviderByScopeGet(string accept, string name = default(string), string cultureName = default(string), string scopeId = default(string));

        /// <summary>
        /// Retrieve the tax provider for a scope - {GetTaxProviderByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the tax provider for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the provider (optional)</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of TaxProviderDetails</returns>
        ApiResponse<TaxProviderDetails> GetTaxProviderByScopeRequesttaxProviderByScopeGetWithHttpInfo(string accept, string name = default(string), string cultureName = default(string), string scopeId = default(string));
        /// <summary>
        /// Queue a post processing task for a given order - {PostProcessOrderRequest}
        /// </summary>
        /// <remarks>
        /// Queue a post processing task for a given order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier of the order to post process</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        OrderFulfillmentState PostProcessOrderRequestScopeIdOrderIdpostProcessPost(string accept, string scopeId, string orderId, PostProcessOrderRequest body = default(PostProcessOrderRequest));

        /// <summary>
        /// Queue a post processing task for a given order - {PostProcessOrderRequest}
        /// </summary>
        /// <remarks>
        /// Queue a post processing task for a given order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier of the order to post process</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        ApiResponse<OrderFulfillmentState> PostProcessOrderRequestScopeIdOrderIdpostProcessPostWithHttpInfo(string accept, string scopeId, string orderId, PostProcessOrderRequest body = default(PostProcessOrderRequest));
        /// <summary>
        /// Refresh the payment of an order - {RefreshPaymentOrderRequest}
        /// </summary>
        /// <remarks>
        /// Refresh the payment of an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        Order RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPost(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object));

        /// <summary>
        /// Refresh the payment of an order - {RefreshPaymentOrderRequest}
        /// </summary>
        /// <remarks>
        /// Refresh the payment of an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPostWithHttpInfo(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object));
        /// <summary>
        /// Refund the payment of an order - {RefundPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Refund the payment of an order.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to refund.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        Order RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPost(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object));

        /// <summary>
        /// Refund the payment of an order - {RefundPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Refund the payment of an order.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to refund.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPostWithHttpInfo(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object));
        /// <summary>
        /// Render a shipment&#39;s template. - {RenderOrderShipmentTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Render a shipment&#39;s template.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The orderId related to the shipment.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="cultureName">The name of the culture (language) to use to render the template.</param>
        /// <param name="templateName">The name of the template to render. (optional)</param>
        /// <param name="contentName">The name of the content to render. (optional)</param>
        /// <returns>RenderOrderShipmentTemplateResponse</returns>
        RenderOrderShipmentTemplateResponse RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet(string accept, string scopeId, string orderId, string shipmentId, string cultureName, string templateName = default(string), string contentName = default(string));

        /// <summary>
        /// Render a shipment&#39;s template. - {RenderOrderShipmentTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Render a shipment&#39;s template.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The orderId related to the shipment.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="cultureName">The name of the culture (language) to use to render the template.</param>
        /// <param name="templateName">The name of the template to render. (optional)</param>
        /// <param name="contentName">The name of the content to render. (optional)</param>
        /// <returns>ApiResponse of RenderOrderShipmentTemplateResponse</returns>
        ApiResponse<RenderOrderShipmentTemplateResponse> RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGetWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, string cultureName, string templateName = default(string), string contentName = default(string));
        /// <summary>
        /// Sets the state of a shipment to failed and halts all further processing - {ReportShipmentFulfillmentFailureRequest}
        /// </summary>
        /// <remarks>
        /// Sets the state of a shipment to failed and halts all further processing. Updates the flag WorkflowInError and IsResumable for a specific shipment fulfillment state. After setting the state of a shipment to failed, the shipment can only be cancelled
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system order identifier.</param>
        /// <param name="shipmentId">The unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        OrderFulfillmentState ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePost(string accept, string scopeId, string orderId, string shipmentId, ReportShipmentFulfillmentFailureRequest body = default(ReportShipmentFulfillmentFailureRequest));

        /// <summary>
        /// Sets the state of a shipment to failed and halts all further processing - {ReportShipmentFulfillmentFailureRequest}
        /// </summary>
        /// <remarks>
        /// Sets the state of a shipment to failed and halts all further processing. Updates the flag WorkflowInError and IsResumable for a specific shipment fulfillment state. After setting the state of a shipment to failed, the shipment can only be cancelled
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system order identifier.</param>
        /// <param name="shipmentId">The unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        ApiResponse<OrderFulfillmentState> ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, ReportShipmentFulfillmentFailureRequest body = default(ReportShipmentFulfillmentFailureRequest));
        /// <summary>
        /// Restart the processing of a fulfillment after a failure - {RestartShipmentFulfillmentProcessingRequest}
        /// </summary>
        /// <remarks>
        /// Restart the processing of a fulfillment after a failure. According to the situation, this request will :- start a new workflow if there is no task id or no execution id for the task of the shipment fulfillment state- replace the task status Faulted by IdleAfterErrorRecovery if the task of the shipment fulfillment state is faulted with a faulted error code- reset the flag WorkflowInError to false and clear execution messages if WorkflowInError &#x3D; true and IsResumble &#x3D; false- reset the flags WorkflowInError and IsResumable to false, clear execution message and resume the bookmark created when the error happened if WorkflowInError &#x3D; true and IsResumble &#x3D; true
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        OrderFulfillmentState RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPost(string accept, string scopeId, string orderId, string shipmentId, Object body = default(Object));

        /// <summary>
        /// Restart the processing of a fulfillment after a failure - {RestartShipmentFulfillmentProcessingRequest}
        /// </summary>
        /// <remarks>
        /// Restart the processing of a fulfillment after a failure. According to the situation, this request will :- start a new workflow if there is no task id or no execution id for the task of the shipment fulfillment state- replace the task status Faulted by IdleAfterErrorRecovery if the task of the shipment fulfillment state is faulted with a faulted error code- reset the flag WorkflowInError to false and clear execution messages if WorkflowInError &#x3D; true and IsResumble &#x3D; false- reset the flags WorkflowInError and IsResumable to false, clear execution message and resume the bookmark created when the error happened if WorkflowInError &#x3D; true and IsResumble &#x3D; true
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        ApiResponse<OrderFulfillmentState> RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, Object body = default(Object));
        /// <summary>
        /// Resume the order which was on hold - {ResumeOrderRequest}
        /// </summary>
        /// <remarks>
        /// Update the current status of the shipments and order to set them back to their previous status (before being on hold)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        OrderFulfillmentState ResumeOrderRequestScopeIdOrderIdresumePost(string accept, string scopeId, string orderId, Object body = default(Object));

        /// <summary>
        /// Resume the order which was on hold - {ResumeOrderRequest}
        /// </summary>
        /// <remarks>
        /// Update the current status of the shipments and order to set them back to their previous status (before being on hold)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        ApiResponse<OrderFulfillmentState> ResumeOrderRequestScopeIdOrderIdresumePostWithHttpInfo(string accept, string scopeId, string orderId, Object body = default(Object));
        /// <summary>
        /// Used to update an existing order based on the provided Order. - {SaveOrderRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing order based on the provided Order. This request does not perform validation nor does it process the order using workflows.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">the unique system idenfitifier for the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        Order SaveOrderRequestScopeIdOrderIdPost(string accept, string scopeId, string orderId, SaveOrderRequest body = default(SaveOrderRequest));

        /// <summary>
        /// Used to update an existing order based on the provided Order. - {SaveOrderRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing order based on the provided Order. This request does not perform validation nor does it process the order using workflows.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">the unique system idenfitifier for the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> SaveOrderRequestScopeIdOrderIdPostWithHttpInfo(string accept, string scopeId, string orderId, SaveOrderRequest body = default(SaveOrderRequest));
        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentOrderRequest}
        /// </summary>
        /// <remarks>
        /// Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        Order SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreate(string accept, string scopeId, string orderId, string shipmentId, SetAdjustmentOrderRequest body = default(SetAdjustmentOrderRequest));

        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentOrderRequest}
        /// </summary>
        /// <remarks>
        /// Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreateWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, SetAdjustmentOrderRequest body = default(SetAdjustmentOrderRequest));
        /// <summary>
        /// Settle the payment of an order - {SettlePaymentOrderRequest}
        /// </summary>
        /// <remarks>
        /// Settle the payment of an order - The payment has to be authorized to be able to settle it.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        Order SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePost(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object));

        /// <summary>
        /// Settle the payment of an order - {SettlePaymentOrderRequest}
        /// </summary>
        /// <remarks>
        /// Settle the payment of an order - The payment has to be authorized to be able to settle it.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePostWithHttpInfo(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object));
        /// <summary>
        /// Splits a shipment and queues post processing on the new shipment - {ShipmentSplitRequest}
        /// </summary>
        /// <remarks>
        /// Splits a shipment and queues post processing on the new shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        Order ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreate(string accept, string scopeId, string orderId, string shipmentId, ShipmentSplitRequest body = default(ShipmentSplitRequest));

        /// <summary>
        /// Splits a shipment and queues post processing on the new shipment - {ShipmentSplitRequest}
        /// </summary>
        /// <remarks>
        /// Splits a shipment and queues post processing on the new shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreateWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, ShipmentSplitRequest body = default(ShipmentSplitRequest));
        /// <summary>
        /// Start the workflow of a fulfillment from the beginning - {StartNewShipmentFulfillmentWorkflowRequest}
        /// </summary>
        /// <remarks>
        /// Start the workflow of a fulfillment from the beginning. The workflow to use can be specified, if not, the workflow that normally applies is used.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        OrderFulfillmentState StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPost(string accept, string scopeId, string orderId, string shipmentId, StartNewShipmentFulfillmentWorkflowRequest body = default(StartNewShipmentFulfillmentWorkflowRequest));

        /// <summary>
        /// Start the workflow of a fulfillment from the beginning - {StartNewShipmentFulfillmentWorkflowRequest}
        /// </summary>
        /// <remarks>
        /// Start the workflow of a fulfillment from the beginning. The workflow to use can be specified, if not, the workflow that normally applies is used.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        ApiResponse<OrderFulfillmentState> StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, StartNewShipmentFulfillmentWorkflowRequest body = default(StartNewShipmentFulfillmentWorkflowRequest));
        /// <summary>
        /// Update RMA and items - {UpdateRmaRequest}
        /// </summary>
        /// <remarks>
        /// Update an RMA status or the item details
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope Id</param>
        /// <param name="orderNumber">the Order Number related to the RMA</param>
        /// <param name="rmaNumber">the RMA Number</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RmaRequestResult</returns>
        RmaRequestResult UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreate(string accept, string scopeId, string orderNumber, string rmaNumber, UpdateRmaRequest body = default(UpdateRmaRequest));

        /// <summary>
        /// Update RMA and items - {UpdateRmaRequest}
        /// </summary>
        /// <remarks>
        /// Update an RMA status or the item details
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope Id</param>
        /// <param name="orderNumber">the Order Number related to the RMA</param>
        /// <param name="rmaNumber">the RMA Number</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RmaRequestResult</returns>
        ApiResponse<RmaRequestResult> UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreateWithHttpInfo(string accept, string scopeId, string orderNumber, string rmaNumber, UpdateRmaRequest body = default(UpdateRmaRequest));
        /// <summary>
        /// Update a shipment document. - {UpdateShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Update a shipment document.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ShipmentDocument</returns>
        ShipmentDocument UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate(string accept, string scopeId, string orderId, string shipmentId, string name, UpdateShipmentDocumentRequest body = default(UpdateShipmentDocumentRequest));

        /// <summary>
        /// Update a shipment document. - {UpdateShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Update a shipment document.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ShipmentDocument</returns>
        ApiResponse<ShipmentDocument> UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreateWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, string name, UpdateShipmentDocumentRequest body = default(UpdateShipmentDocumentRequest));
        /// <summary>
        /// Update the current state of a shipment - {UpdateShipmentFulfillmentStateRequest}
        /// </summary>
        /// <remarks>
        /// This is for internal use only. Update the current state of a shipment. If order fulfillment is enabled and the update is not valid or the fulfillment does not transition, the request will fail.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        OrderFulfillmentState UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreate(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentStateRequest body = default(UpdateShipmentFulfillmentStateRequest));

        /// <summary>
        /// Update the current state of a shipment - {UpdateShipmentFulfillmentStateRequest}
        /// </summary>
        /// <remarks>
        /// This is for internal use only. Update the current state of a shipment. If order fulfillment is enabled and the update is not valid or the fulfillment does not transition, the request will fail.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        ApiResponse<OrderFulfillmentState> UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreateWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentStateRequest body = default(UpdateShipmentFulfillmentStateRequest));
        /// <summary>
        /// Update the path of the fulfillment workflow of a shipment. - {UpdateShipmentFulfillmentWorkflowXamlPathRequest}
        /// </summary>
        /// <remarks>
        /// Update the path of the fulfillment workflow of a shipment. This is the path from App_Config folder, example of value : App_data\\Workflows\\Orders\\Canada\\FulfillmentWorkflow.xaml
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        OrderFulfillmentState UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreate(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentWorkflowXamlPathRequest body = default(UpdateShipmentFulfillmentWorkflowXamlPathRequest));

        /// <summary>
        /// Update the path of the fulfillment workflow of a shipment. - {UpdateShipmentFulfillmentWorkflowXamlPathRequest}
        /// </summary>
        /// <remarks>
        /// Update the path of the fulfillment workflow of a shipment. This is the path from App_Config folder, example of value : App_data\\Workflows\\Orders\\Canada\\FulfillmentWorkflow.xaml
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        ApiResponse<OrderFulfillmentState> UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreateWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentWorkflowXamlPathRequest body = default(UpdateShipmentFulfillmentWorkflowXamlPathRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add new history item related to specified order - {AddOrderHistoryRequest}
        /// </summary>
        /// <remarks>
        /// Add history item related to a specified order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderHistoryRequestScopeIdorderhistoryPostAsync(string accept, string scopeId, AddOrderHistoryRequest body = default(AddOrderHistoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add new history item related to specified order - {AddOrderHistoryRequest}
        /// </summary>
        /// <remarks>
        /// Add history item related to a specified order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderHistoryRequestScopeIdorderhistoryPostWithHttpInfoAsync(string accept, string scopeId, AddOrderHistoryRequest body = default(AddOrderHistoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a note to an order - {AddOrderNoteRequest}
        /// </summary>
        /// <remarks>
        /// Add a note to an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The parent id of the note.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrderNoteRequestScopeIdOrderIdnotesPostAsync(string accept, string scopeId, string orderId, AddOrderNoteRequest body = default(AddOrderNoteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a note to an order - {AddOrderNoteRequest}
        /// </summary>
        /// <remarks>
        /// Add a note to an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The parent id of the note.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrderNoteRequestScopeIdOrderIdnotesPostWithHttpInfoAsync(string accept, string scopeId, string orderId, AddOrderNoteRequest body = default(AddOrderNoteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the fulfillment state of an order and each of its shipments - {AddShipmentFulfillmentMessagesRequest}
        /// </summary>
        /// <remarks>
        /// Update the ExecutionMessages and ValidationResults of a ShipmentFulfillmentState.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        System.Threading.Tasks.Task<OrderFulfillmentState> AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPostAsync(string accept, string scopeId, string orderId, string shipmentId, AddShipmentFulfillmentMessagesRequest body = default(AddShipmentFulfillmentMessagesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the fulfillment state of an order and each of its shipments - {AddShipmentFulfillmentMessagesRequest}
        /// </summary>
        /// <remarks>
        /// Update the ExecutionMessages and ValidationResults of a ShipmentFulfillmentState.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFulfillmentState>> AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, AddShipmentFulfillmentMessagesRequest body = default(AddShipmentFulfillmentMessagesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a note to an order shipment - {AddShipmentNoteRequest}
        /// </summary>
        /// <remarks>
        /// Add a note to an order shipment.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPostAsync(string accept, string scopeId, string orderId, string shipmentId, AddShipmentNoteRequest body = default(AddShipmentNoteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a note to an order shipment - {AddShipmentNoteRequest}
        /// </summary>
        /// <remarks>
        /// Add a note to an order shipment.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, AddShipmentNoteRequest body = default(AddShipmentNoteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request that all shipments statuses be transitioned from their current status to the submitted status. - {ChangeOrderStatusRequest}
        /// </summary>
        /// <remarks>
        /// Request that the status of all shipments be transitioned from their current status to the given status. This request issues a request to resume the long running fulfillment workflow of each shipment and transition them to the given state.If all transitions succeed the order status will be updated
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        System.Threading.Tasks.Task<OrderFulfillmentState> ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePostAsync(string accept, string scopeId, string orderId, ChangeOrderStatusRequest body = default(ChangeOrderStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request that all shipments statuses be transitioned from their current status to the submitted status. - {ChangeOrderStatusRequest}
        /// </summary>
        /// <remarks>
        /// Request that the status of all shipments be transitioned from their current status to the given status. This request issues a request to resume the long running fulfillment workflow of each shipment and transition them to the given state.If all transitions succeed the order status will be updated
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFulfillmentState>> ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePostWithHttpInfoAsync(string accept, string scopeId, string orderId, ChangeOrderStatusRequest body = default(ChangeOrderStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request that a shipment status be transitioned from its current status to the submitted status. - {ChangeShipmentStatusRequest}
        /// </summary>
        /// <remarks>
        /// Request that a shipment status be transitioned from its current status to the submitted status. This request will issue a request to resume the long running fulfillment workflow
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="shipmentId">The unique shipment identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        System.Threading.Tasks.Task<OrderFulfillmentState> ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePostAsync(string accept, string scopeId, string orderId, string shipmentId, ChangeShipmentStatusRequest body = default(ChangeShipmentStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request that a shipment status be transitioned from its current status to the submitted status. - {ChangeShipmentStatusRequest}
        /// </summary>
        /// <remarks>
        /// Request that a shipment status be transitioned from its current status to the submitted status. This request will issue a request to resume the long running fulfillment workflow
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="shipmentId">The unique shipment identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFulfillmentState>> ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, ChangeShipmentStatusRequest body = default(ChangeShipmentStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy cart from an existing order - {CopyCartFromOrderRequest}
        /// </summary>
        /// <remarks>
        /// Copy a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be used for copy.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        System.Threading.Tasks.Task<Cart> CopyCartFromOrderRequestScopeIdOrderIdcopycartPostAsync(string accept, string scopeId, string orderId, CopyCartFromOrderRequest body = default(CopyCartFromOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy cart from an existing order - {CopyCartFromOrderRequest}
        /// </summary>
        /// <remarks>
        /// Copy a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be used for copy.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cart>> CopyCartFromOrderRequestScopeIdOrderIdcopycartPostWithHttpInfoAsync(string accept, string scopeId, string orderId, CopyCartFromOrderRequest body = default(CopyCartFromOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy an order - {CopyOrderRequest}
        /// </summary>
        /// <remarks>
        /// Copy an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be copied.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        System.Threading.Tasks.Task<Cart> CopyOrderRequestScopeIdOrderIdcopyPostAsync(string accept, string scopeId, string orderId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy an order - {CopyOrderRequest}
        /// </summary>
        /// <remarks>
        /// Copy an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be copied.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cart>> CopyOrderRequestScopeIdOrderIdcopyPostWithHttpInfoAsync(string accept, string scopeId, string orderId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new order from a cart - {CreateOrderRequest}
        /// </summary>
        /// <remarks>
        /// Create a new order from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> CreateOrderRequestPostAsync(string accept, CreateOrderRequest body = default(CreateOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new order from a cart - {CreateOrderRequest}
        /// </summary>
        /// <remarks>
        /// Create a new order from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> CreateOrderRequestPostWithHttpInfoAsync(string accept, CreateOrderRequest body = default(CreateOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create RMA Guest - {CreateRmaGuestRequest}
        /// </summary>
        /// <remarks>
        /// Create an RMA for a Guest or Unregistered customer. You must fill at least one of the &#39;Postal Code&#39;, &#39;Last name&#39;, or &#39;Email&#39; fields. The specified field(s) will be used for validation.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaRequestResult</returns>
        System.Threading.Tasks.Task<RmaRequestResult> CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPostAsync(string accept, string scopeId, string orderNumber, CreateRmaGuestRequest body = default(CreateRmaGuestRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create RMA Guest - {CreateRmaGuestRequest}
        /// </summary>
        /// <remarks>
        /// Create an RMA for a Guest or Unregistered customer. You must fill at least one of the &#39;Postal Code&#39;, &#39;Last name&#39;, or &#39;Email&#39; fields. The specified field(s) will be used for validation.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaRequestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RmaRequestResult>> CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPostWithHttpInfoAsync(string accept, string scopeId, string orderNumber, CreateRmaGuestRequest body = default(CreateRmaGuestRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create RMA registered customer - {CreateRmaRegisteredRequest}
        /// </summary>
        /// <remarks>
        /// Create an RMA for a registered customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="customerId">the Identifier of the Customer who owns the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaRequestResult</returns>
        System.Threading.Tasks.Task<RmaRequestResult> CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPostAsync(string accept, string scopeId, string orderNumber, string customerId, CreateRmaRegisteredRequest body = default(CreateRmaRegisteredRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create RMA registered customer - {CreateRmaRegisteredRequest}
        /// </summary>
        /// <remarks>
        /// Create an RMA for a registered customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="customerId">the Identifier of the Customer who owns the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaRequestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RmaRequestResult>> CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPostWithHttpInfoAsync(string accept, string scopeId, string orderNumber, string customerId, CreateRmaRegisteredRequest body = default(CreateRmaRegisteredRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a shipment document. - {CreateShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Create a shipment document.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDocument</returns>
        System.Threading.Tasks.Task<ShipmentDocument> CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePostAsync(string accept, string scopeId, string orderId, string shipmentId, string name, CreateShipmentDocumentRequest body = default(CreateShipmentDocumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a shipment document. - {CreateShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Create a shipment document.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentDocument>> CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, string name, CreateShipmentDocumentRequest body = default(CreateShipmentDocumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a shipment document. - {DeleteShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Delete a shipment document.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The shipment document name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDocument</returns>
        System.Threading.Tasks.Task<ShipmentDocument> DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDeleteAsync(string accept, string scopeId, string orderId, string shipmentId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a shipment document. - {DeleteShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Delete a shipment document.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The shipment document name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentDocument>> DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDeleteWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return to number of orders matching the search criteria - {FindOrdersCountRequest}
        /// </summary>
        /// <remarks>
        /// Return to number of orders matching the search criteria
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryCountResult</returns>
        System.Threading.Tasks.Task<QueryCountResult> FindOrdersCountRequestScopeIdcountPostAsync(string accept, string scopeId, FindOrdersCountRequest body = default(FindOrdersCountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return to number of orders matching the search criteria - {FindOrdersCountRequest}
        /// </summary>
        /// <remarks>
        /// Return to number of orders matching the search criteria
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryCountResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryCountResult>> FindOrdersCountRequestScopeIdcountPostWithHttpInfoAsync(string accept, string scopeId, FindOrdersCountRequest body = default(FindOrdersCountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for orders - {FindOrdersRequest}
        /// </summary>
        /// <remarks>
        /// Search for orders
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderQueryResult</returns>
        System.Threading.Tasks.Task<OrderQueryResult> FindOrdersRequestScopeIdfindPostAsync(string accept, string scopeId, FindOrdersRequest body = default(FindOrdersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for orders - {FindOrdersRequest}
        /// </summary>
        /// <remarks>
        /// Search for orders
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderQueryResult>> FindOrdersRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindOrdersRequest body = default(FindOrdersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve shipment documents - {FindShipmentDocumentsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve shipment documents
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDocumentQueryResult</returns>
        System.Threading.Tasks.Task<ShipmentDocumentQueryResult> FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPostAsync(string accept, string scopeId, FindShipmentDocumentsRequest body = default(FindShipmentDocumentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve shipment documents - {FindShipmentDocumentsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve shipment documents
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDocumentQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentDocumentQueryResult>> FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPostWithHttpInfoAsync(string accept, string scopeId, FindShipmentDocumentsRequest body = default(FindShipmentDocumentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve shipment documents summaries - {FindShipmentDocumentsSummariesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve shipment documents summaries
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDocumentSummaryQueryResult</returns>
        System.Threading.Tasks.Task<ShipmentDocumentSummaryQueryResult> FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPostAsync(string accept, string scopeId, FindShipmentDocumentsSummariesRequest body = default(FindShipmentDocumentsSummariesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve shipment documents summaries - {FindShipmentDocumentsSummariesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve shipment documents summaries
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDocumentSummaryQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentDocumentSummaryQueryResult>> FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPostWithHttpInfoAsync(string accept, string scopeId, FindShipmentDocumentsSummariesRequest body = default(FindShipmentDocumentsSummariesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all the tax providers available in the system - {GetAvailableTaxProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the tax providers available in the system
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaxProviderDetails&gt;</returns>
        System.Threading.Tasks.Task<List<TaxProviderDetails>> GetAvailableTaxProvidersRequestavailableTaxProvidersGetAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all the tax providers available in the system - {GetAvailableTaxProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the tax providers available in the system
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaxProviderDetails&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaxProviderDetails>>> GetAvailableTaxProvidersRequestavailableTaxProvidersGetWithHttpInfoAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get customer last order - {GetCustomerLastOrderRequest}
        /// </summary>
        /// <remarks>
        /// Get customer last order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer to retrieve last order from.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGetAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get customer last order - {GetCustomerLastOrderRequest}
        /// </summary>
        /// <remarks>
        /// Get customer last order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer to retrieve last order from.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGetWithHttpInfoAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an order - {GetOrderByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> GetOrderByIdRequestScopeIdOrderIdGetAsync(string accept, string scopeId, string orderId, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an order - {GetOrderByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderByIdRequestScopeIdOrderIdGetWithHttpInfoAsync(string accept, string scopeId, string orderId, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an order - {GetOrderByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The order number for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <param name="customerId">The customer identifier for the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> GetOrderByNumberRequestScopeIdbyNumberOrderNumberGetAsync(string accept, string scopeId, string orderNumber, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?), string customerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an order - {GetOrderByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The order number for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <param name="customerId">The customer identifier for the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderByNumberRequestScopeIdbyNumberOrderNumberGetWithHttpInfoAsync(string accept, string scopeId, string orderNumber, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?), string customerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the fulfillment state of an order and each of its shipments - {GetOrderFulfillmentStateRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the fulfillment state of an order and each of its shipments
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier for the Order</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        System.Threading.Tasks.Task<OrderFulfillmentState> GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGetAsync(string accept, string scopeId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the fulfillment state of an order and each of its shipments - {GetOrderFulfillmentStateRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the fulfillment state of an order and each of its shipments
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier for the Order</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFulfillmentState>> GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGetWithHttpInfoAsync(string accept, string scopeId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get history items related to specified order - {GetOrderHistoryRequest}
        /// </summary>
        /// <remarks>
        /// Get history items related to specified order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The identifier of the order to be used for retrieving items. (optional)</param>
        /// <param name="shipmentId">The shipment identifier to be used to filter items from the order (optional). (optional)</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier to be used to filter items from the order (optional). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrderHistoryItem&gt;</returns>
        System.Threading.Tasks.Task<List<OrderHistoryItem>> GetOrderHistoryRequestScopeIdorderhistoryGetAsync(string accept, string scopeId, string orderNumber = default(string), string shipmentId = default(string), string fulfillmentLocationId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get history items related to specified order - {GetOrderHistoryRequest}
        /// </summary>
        /// <remarks>
        /// Get history items related to specified order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The identifier of the order to be used for retrieving items. (optional)</param>
        /// <param name="shipmentId">The shipment identifier to be used to filter items from the order (optional). (optional)</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier to be used to filter items from the order (optional). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrderHistoryItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderHistoryItem>>> GetOrderHistoryRequestScopeIdorderhistoryGetWithHttpInfoAsync(string accept, string scopeId, string orderNumber = default(string), string shipmentId = default(string), string fulfillmentLocationId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get order notes - {GetOrderNotesRequest}
        /// </summary>
        /// <remarks>
        /// Get order notes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the Order.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Note&gt;</returns>
        System.Threading.Tasks.Task<List<Note>> GetOrderNotesRequestScopeIdOrderIdnotesGetAsync(string accept, string scopeId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get order notes - {GetOrderNotesRequest}
        /// </summary>
        /// <remarks>
        /// Get order notes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the Order.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Note&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Note>>> GetOrderNotesRequestScopeIdOrderIdnotesGetWithHttpInfoAsync(string accept, string scopeId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the order settings - {GetOrderSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Get the order settings
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSettings</returns>
        System.Threading.Tasks.Task<OrderSettings> GetOrderSettingsRequestsettingsGetAsync(string accept, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the order settings - {GetOrderSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Get the order settings
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSettings>> GetOrderSettingsRequestsettingsGetWithHttpInfoAsync(string accept, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the uri of printable version of the order - {GetPrintableOrderUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of the order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetPrintableOrderUriRequestScopeIdOrderIdprinturiGetAsync(string accept, string scopeId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the uri of printable version of the order - {GetPrintableOrderUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of the order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetPrintableOrderUriRequestScopeIdOrderIdprinturiGetWithHttpInfoAsync(string accept, string scopeId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the uri of printable version of a list of order - {GetPrintableOrdersUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of a list of order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetPrintableOrdersUriRequestScopeIdprintOrdersPostAsync(string accept, string scopeId, GetPrintableOrdersUriRequest body = default(GetPrintableOrdersUriRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the uri of printable version of a list of order - {GetPrintableOrdersUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of a list of order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetPrintableOrdersUriRequestScopeIdprintOrdersPostWithHttpInfoAsync(string accept, string scopeId, GetPrintableOrdersUriRequest body = default(GetPrintableOrdersUriRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves RMA and items - {GetRmaRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a RMA using order number and RMA number
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <param name="rmaNumber">the RMA number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Rma</returns>
        System.Threading.Tasks.Task<Rma> GetRmaRequestRMAScopeIdOrderNumberRmaNumberGetAsync(string accept, string scopeId, string orderNumber, string rmaNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves RMA and items - {GetRmaRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a RMA using order number and RMA number
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <param name="rmaNumber">the RMA number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Rma)</returns>
        System.Threading.Tasks.Task<ApiResponse<Rma>> GetRmaRequestRMAScopeIdOrderNumberRmaNumberGetWithHttpInfoAsync(string accept, string scopeId, string orderNumber, string rmaNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all RMAs for an order - {GetRmasByOrderRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all RMAs for a specified order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaListResult</returns>
        System.Threading.Tasks.Task<RmaListResult> GetRmasByOrderRequestRMAScopeIdOrderNumberGetAsync(string accept, string scopeId, string orderNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all RMAs for an order - {GetRmasByOrderRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all RMAs for a specified order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RmaListResult>> GetRmasByOrderRequestRMAScopeIdOrderNumberGetWithHttpInfoAsync(string accept, string scopeId, string orderNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a shipment document - {GetShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a shipment document
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDocument</returns>
        System.Threading.Tasks.Task<ShipmentDocument> GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGetAsync(string accept, string scopeId, string orderId, string shipmentId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a shipment document - {GetShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a shipment document
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentDocument>> GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGetWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get shipment notes - {GetShipmentNotesRequest}
        /// </summary>
        /// <remarks>
        /// Get shipment notes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Note&gt;</returns>
        System.Threading.Tasks.Task<List<Note>> GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGetAsync(string accept, string scopeId, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get shipment notes - {GetShipmentNotesRequest}
        /// </summary>
        /// <remarks>
        /// Get shipment notes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Note&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Note>>> GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGetWithHttpInfoAsync(string accept, string scopeId, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the list of tax categories in the system - {GetTaxCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the list of tax categories in the system
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="getSystemCategories">a value indicating whether include system categories or not. (optional)</param>
        /// <param name="getOnlySupportedCategories">a value indicating whether include only supported categories or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaxCategory&gt;</returns>
        System.Threading.Tasks.Task<List<TaxCategory>> GetTaxCategoriesRequesttaxCategoriesGetAsync(string accept, bool? getSystemCategories = default(bool?), bool? getOnlySupportedCategories = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the list of tax categories in the system - {GetTaxCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the list of tax categories in the system
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="getSystemCategories">a value indicating whether include system categories or not. (optional)</param>
        /// <param name="getOnlySupportedCategories">a value indicating whether include only supported categories or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaxCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaxCategory>>> GetTaxCategoriesRequesttaxCategoriesGetWithHttpInfoAsync(string accept, bool? getSystemCategories = default(bool?), bool? getOnlySupportedCategories = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the tax provider for a scope - {GetTaxProviderByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the tax provider for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the provider (optional)</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxProviderDetails</returns>
        System.Threading.Tasks.Task<TaxProviderDetails> GetTaxProviderByScopeRequesttaxProviderByScopeGetAsync(string accept, string name = default(string), string cultureName = default(string), string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the tax provider for a scope - {GetTaxProviderByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the tax provider for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the provider (optional)</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxProviderDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderDetails>> GetTaxProviderByScopeRequesttaxProviderByScopeGetWithHttpInfoAsync(string accept, string name = default(string), string cultureName = default(string), string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Queue a post processing task for a given order - {PostProcessOrderRequest}
        /// </summary>
        /// <remarks>
        /// Queue a post processing task for a given order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier of the order to post process</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        System.Threading.Tasks.Task<OrderFulfillmentState> PostProcessOrderRequestScopeIdOrderIdpostProcessPostAsync(string accept, string scopeId, string orderId, PostProcessOrderRequest body = default(PostProcessOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Queue a post processing task for a given order - {PostProcessOrderRequest}
        /// </summary>
        /// <remarks>
        /// Queue a post processing task for a given order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier of the order to post process</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFulfillmentState>> PostProcessOrderRequestScopeIdOrderIdpostProcessPostWithHttpInfoAsync(string accept, string scopeId, string orderId, PostProcessOrderRequest body = default(PostProcessOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh the payment of an order - {RefreshPaymentOrderRequest}
        /// </summary>
        /// <remarks>
        /// Refresh the payment of an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPostAsync(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh the payment of an order - {RefreshPaymentOrderRequest}
        /// </summary>
        /// <remarks>
        /// Refresh the payment of an order
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPostWithHttpInfoAsync(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refund the payment of an order - {RefundPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Refund the payment of an order.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to refund.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPostAsync(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refund the payment of an order - {RefundPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Refund the payment of an order.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to refund.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPostWithHttpInfoAsync(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Render a shipment&#39;s template. - {RenderOrderShipmentTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Render a shipment&#39;s template.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The orderId related to the shipment.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="cultureName">The name of the culture (language) to use to render the template.</param>
        /// <param name="templateName">The name of the template to render. (optional)</param>
        /// <param name="contentName">The name of the content to render. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RenderOrderShipmentTemplateResponse</returns>
        System.Threading.Tasks.Task<RenderOrderShipmentTemplateResponse> RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGetAsync(string accept, string scopeId, string orderId, string shipmentId, string cultureName, string templateName = default(string), string contentName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Render a shipment&#39;s template. - {RenderOrderShipmentTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Render a shipment&#39;s template.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The orderId related to the shipment.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="cultureName">The name of the culture (language) to use to render the template.</param>
        /// <param name="templateName">The name of the template to render. (optional)</param>
        /// <param name="contentName">The name of the content to render. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RenderOrderShipmentTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RenderOrderShipmentTemplateResponse>> RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGetWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, string cultureName, string templateName = default(string), string contentName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the state of a shipment to failed and halts all further processing - {ReportShipmentFulfillmentFailureRequest}
        /// </summary>
        /// <remarks>
        /// Sets the state of a shipment to failed and halts all further processing. Updates the flag WorkflowInError and IsResumable for a specific shipment fulfillment state. After setting the state of a shipment to failed, the shipment can only be cancelled
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system order identifier.</param>
        /// <param name="shipmentId">The unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        System.Threading.Tasks.Task<OrderFulfillmentState> ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePostAsync(string accept, string scopeId, string orderId, string shipmentId, ReportShipmentFulfillmentFailureRequest body = default(ReportShipmentFulfillmentFailureRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the state of a shipment to failed and halts all further processing - {ReportShipmentFulfillmentFailureRequest}
        /// </summary>
        /// <remarks>
        /// Sets the state of a shipment to failed and halts all further processing. Updates the flag WorkflowInError and IsResumable for a specific shipment fulfillment state. After setting the state of a shipment to failed, the shipment can only be cancelled
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system order identifier.</param>
        /// <param name="shipmentId">The unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFulfillmentState>> ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, ReportShipmentFulfillmentFailureRequest body = default(ReportShipmentFulfillmentFailureRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Restart the processing of a fulfillment after a failure - {RestartShipmentFulfillmentProcessingRequest}
        /// </summary>
        /// <remarks>
        /// Restart the processing of a fulfillment after a failure. According to the situation, this request will :- start a new workflow if there is no task id or no execution id for the task of the shipment fulfillment state- replace the task status Faulted by IdleAfterErrorRecovery if the task of the shipment fulfillment state is faulted with a faulted error code- reset the flag WorkflowInError to false and clear execution messages if WorkflowInError &#x3D; true and IsResumble &#x3D; false- reset the flags WorkflowInError and IsResumable to false, clear execution message and resume the bookmark created when the error happened if WorkflowInError &#x3D; true and IsResumble &#x3D; true
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        System.Threading.Tasks.Task<OrderFulfillmentState> RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPostAsync(string accept, string scopeId, string orderId, string shipmentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Restart the processing of a fulfillment after a failure - {RestartShipmentFulfillmentProcessingRequest}
        /// </summary>
        /// <remarks>
        /// Restart the processing of a fulfillment after a failure. According to the situation, this request will :- start a new workflow if there is no task id or no execution id for the task of the shipment fulfillment state- replace the task status Faulted by IdleAfterErrorRecovery if the task of the shipment fulfillment state is faulted with a faulted error code- reset the flag WorkflowInError to false and clear execution messages if WorkflowInError &#x3D; true and IsResumble &#x3D; false- reset the flags WorkflowInError and IsResumable to false, clear execution message and resume the bookmark created when the error happened if WorkflowInError &#x3D; true and IsResumble &#x3D; true
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFulfillmentState>> RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resume the order which was on hold - {ResumeOrderRequest}
        /// </summary>
        /// <remarks>
        /// Update the current status of the shipments and order to set them back to their previous status (before being on hold)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        System.Threading.Tasks.Task<OrderFulfillmentState> ResumeOrderRequestScopeIdOrderIdresumePostAsync(string accept, string scopeId, string orderId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resume the order which was on hold - {ResumeOrderRequest}
        /// </summary>
        /// <remarks>
        /// Update the current status of the shipments and order to set them back to their previous status (before being on hold)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFulfillmentState>> ResumeOrderRequestScopeIdOrderIdresumePostWithHttpInfoAsync(string accept, string scopeId, string orderId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Used to update an existing order based on the provided Order. - {SaveOrderRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing order based on the provided Order. This request does not perform validation nor does it process the order using workflows.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">the unique system idenfitifier for the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> SaveOrderRequestScopeIdOrderIdPostAsync(string accept, string scopeId, string orderId, SaveOrderRequest body = default(SaveOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Used to update an existing order based on the provided Order. - {SaveOrderRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing order based on the provided Order. This request does not perform validation nor does it process the order using workflows.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">the unique system idenfitifier for the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> SaveOrderRequestScopeIdOrderIdPostWithHttpInfoAsync(string accept, string scopeId, string orderId, SaveOrderRequest body = default(SaveOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentOrderRequest}
        /// </summary>
        /// <remarks>
        /// Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreateAsync(string accept, string scopeId, string orderId, string shipmentId, SetAdjustmentOrderRequest body = default(SetAdjustmentOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentOrderRequest}
        /// </summary>
        /// <remarks>
        /// Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreateWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, SetAdjustmentOrderRequest body = default(SetAdjustmentOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Settle the payment of an order - {SettlePaymentOrderRequest}
        /// </summary>
        /// <remarks>
        /// Settle the payment of an order - The payment has to be authorized to be able to settle it.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePostAsync(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Settle the payment of an order - {SettlePaymentOrderRequest}
        /// </summary>
        /// <remarks>
        /// Settle the payment of an order - The payment has to be authorized to be able to settle it.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePostWithHttpInfoAsync(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Splits a shipment and queues post processing on the new shipment - {ShipmentSplitRequest}
        /// </summary>
        /// <remarks>
        /// Splits a shipment and queues post processing on the new shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreateAsync(string accept, string scopeId, string orderId, string shipmentId, ShipmentSplitRequest body = default(ShipmentSplitRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Splits a shipment and queues post processing on the new shipment - {ShipmentSplitRequest}
        /// </summary>
        /// <remarks>
        /// Splits a shipment and queues post processing on the new shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreateWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, ShipmentSplitRequest body = default(ShipmentSplitRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start the workflow of a fulfillment from the beginning - {StartNewShipmentFulfillmentWorkflowRequest}
        /// </summary>
        /// <remarks>
        /// Start the workflow of a fulfillment from the beginning. The workflow to use can be specified, if not, the workflow that normally applies is used.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        System.Threading.Tasks.Task<OrderFulfillmentState> StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPostAsync(string accept, string scopeId, string orderId, string shipmentId, StartNewShipmentFulfillmentWorkflowRequest body = default(StartNewShipmentFulfillmentWorkflowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start the workflow of a fulfillment from the beginning - {StartNewShipmentFulfillmentWorkflowRequest}
        /// </summary>
        /// <remarks>
        /// Start the workflow of a fulfillment from the beginning. The workflow to use can be specified, if not, the workflow that normally applies is used.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFulfillmentState>> StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, StartNewShipmentFulfillmentWorkflowRequest body = default(StartNewShipmentFulfillmentWorkflowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update RMA and items - {UpdateRmaRequest}
        /// </summary>
        /// <remarks>
        /// Update an RMA status or the item details
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope Id</param>
        /// <param name="orderNumber">the Order Number related to the RMA</param>
        /// <param name="rmaNumber">the RMA Number</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaRequestResult</returns>
        System.Threading.Tasks.Task<RmaRequestResult> UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreateAsync(string accept, string scopeId, string orderNumber, string rmaNumber, UpdateRmaRequest body = default(UpdateRmaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update RMA and items - {UpdateRmaRequest}
        /// </summary>
        /// <remarks>
        /// Update an RMA status or the item details
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope Id</param>
        /// <param name="orderNumber">the Order Number related to the RMA</param>
        /// <param name="rmaNumber">the RMA Number</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaRequestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RmaRequestResult>> UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreateWithHttpInfoAsync(string accept, string scopeId, string orderNumber, string rmaNumber, UpdateRmaRequest body = default(UpdateRmaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a shipment document. - {UpdateShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Update a shipment document.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDocument</returns>
        System.Threading.Tasks.Task<ShipmentDocument> UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreateAsync(string accept, string scopeId, string orderId, string shipmentId, string name, UpdateShipmentDocumentRequest body = default(UpdateShipmentDocumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a shipment document. - {UpdateShipmentDocumentRequest}
        /// </summary>
        /// <remarks>
        /// Update a shipment document.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentDocument>> UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreateWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, string name, UpdateShipmentDocumentRequest body = default(UpdateShipmentDocumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the current state of a shipment - {UpdateShipmentFulfillmentStateRequest}
        /// </summary>
        /// <remarks>
        /// This is for internal use only. Update the current state of a shipment. If order fulfillment is enabled and the update is not valid or the fulfillment does not transition, the request will fail.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        System.Threading.Tasks.Task<OrderFulfillmentState> UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreateAsync(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentStateRequest body = default(UpdateShipmentFulfillmentStateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the current state of a shipment - {UpdateShipmentFulfillmentStateRequest}
        /// </summary>
        /// <remarks>
        /// This is for internal use only. Update the current state of a shipment. If order fulfillment is enabled and the update is not valid or the fulfillment does not transition, the request will fail.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFulfillmentState>> UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreateWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentStateRequest body = default(UpdateShipmentFulfillmentStateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the path of the fulfillment workflow of a shipment. - {UpdateShipmentFulfillmentWorkflowXamlPathRequest}
        /// </summary>
        /// <remarks>
        /// Update the path of the fulfillment workflow of a shipment. This is the path from App_Config folder, example of value : App_data\\Workflows\\Orders\\Canada\\FulfillmentWorkflow.xaml
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        System.Threading.Tasks.Task<OrderFulfillmentState> UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreateAsync(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentWorkflowXamlPathRequest body = default(UpdateShipmentFulfillmentWorkflowXamlPathRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the path of the fulfillment workflow of a shipment. - {UpdateShipmentFulfillmentWorkflowXamlPathRequest}
        /// </summary>
        /// <remarks>
        /// Update the path of the fulfillment workflow of a shipment. This is the path from App_Config folder, example of value : App_data\\Workflows\\Orders\\Canada\\FulfillmentWorkflow.xaml
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFulfillmentState>> UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreateWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentWorkflowXamlPathRequest body = default(UpdateShipmentFulfillmentWorkflowXamlPathRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IOrdersApiSync, IOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IOrdersApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrdersApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add new history item related to specified order - {AddOrderHistoryRequest} Add history item related to a specified order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AddOrderHistoryRequestScopeIdorderhistoryPost(string accept, string scopeId, AddOrderHistoryRequest body = default(AddOrderHistoryRequest))
        {
            AddOrderHistoryRequestScopeIdorderhistoryPostWithHttpInfo(accept, scopeId, body);
        }

        /// <summary>
        /// Add new history item related to specified order - {AddOrderHistoryRequest} Add history item related to a specified order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> AddOrderHistoryRequestScopeIdorderhistoryPostWithHttpInfo(string accept, string scopeId, AddOrderHistoryRequest body = default(AddOrderHistoryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->AddOrderHistoryRequestScopeIdorderhistoryPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->AddOrderHistoryRequestScopeIdorderhistoryPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/orders/{ScopeId}/orderhistory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrderHistoryRequestScopeIdorderhistoryPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new history item related to specified order - {AddOrderHistoryRequest} Add history item related to a specified order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderHistoryRequestScopeIdorderhistoryPostAsync(string accept, string scopeId, AddOrderHistoryRequest body = default(AddOrderHistoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddOrderHistoryRequestScopeIdorderhistoryPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add new history item related to specified order - {AddOrderHistoryRequest} Add history item related to a specified order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> AddOrderHistoryRequestScopeIdorderhistoryPostWithHttpInfoAsync(string accept, string scopeId, AddOrderHistoryRequest body = default(AddOrderHistoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->AddOrderHistoryRequestScopeIdorderhistoryPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->AddOrderHistoryRequestScopeIdorderhistoryPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/orders/{ScopeId}/orderhistory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrderHistoryRequestScopeIdorderhistoryPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a note to an order - {AddOrderNoteRequest} Add a note to an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The parent id of the note.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AddOrderNoteRequestScopeIdOrderIdnotesPost(string accept, string scopeId, string orderId, AddOrderNoteRequest body = default(AddOrderNoteRequest))
        {
            AddOrderNoteRequestScopeIdOrderIdnotesPostWithHttpInfo(accept, scopeId, orderId, body);
        }

        /// <summary>
        /// Add a note to an order - {AddOrderNoteRequest} Add a note to an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The parent id of the note.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> AddOrderNoteRequestScopeIdOrderIdnotesPostWithHttpInfo(string accept, string scopeId, string orderId, AddOrderNoteRequest body = default(AddOrderNoteRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->AddOrderNoteRequestScopeIdOrderIdnotesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->AddOrderNoteRequestScopeIdOrderIdnotesPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->AddOrderNoteRequestScopeIdOrderIdnotesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/orders/{ScopeId}/{OrderId}/notes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrderNoteRequestScopeIdOrderIdnotesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a note to an order - {AddOrderNoteRequest} Add a note to an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The parent id of the note.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrderNoteRequestScopeIdOrderIdnotesPostAsync(string accept, string scopeId, string orderId, AddOrderNoteRequest body = default(AddOrderNoteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddOrderNoteRequestScopeIdOrderIdnotesPostWithHttpInfoAsync(accept, scopeId, orderId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a note to an order - {AddOrderNoteRequest} Add a note to an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The parent id of the note.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> AddOrderNoteRequestScopeIdOrderIdnotesPostWithHttpInfoAsync(string accept, string scopeId, string orderId, AddOrderNoteRequest body = default(AddOrderNoteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->AddOrderNoteRequestScopeIdOrderIdnotesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->AddOrderNoteRequestScopeIdOrderIdnotesPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->AddOrderNoteRequestScopeIdOrderIdnotesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/orders/{ScopeId}/{OrderId}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrderNoteRequestScopeIdOrderIdnotesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the fulfillment state of an order and each of its shipments - {AddShipmentFulfillmentMessagesRequest} Update the ExecutionMessages and ValidationResults of a ShipmentFulfillmentState.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        public OrderFulfillmentState AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPost(string accept, string scopeId, string orderId, string shipmentId, AddShipmentFulfillmentMessagesRequest body = default(AddShipmentFulfillmentMessagesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPostWithHttpInfo(accept, scopeId, orderId, shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the fulfillment state of an order and each of its shipments - {AddShipmentFulfillmentMessagesRequest} Update the ExecutionMessages and ValidationResults of a ShipmentFulfillmentState.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, AddShipmentFulfillmentMessagesRequest body = default(AddShipmentFulfillmentMessagesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/state/messages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the fulfillment state of an order and each of its shipments - {AddShipmentFulfillmentMessagesRequest} Update the ExecutionMessages and ValidationResults of a ShipmentFulfillmentState.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        public async System.Threading.Tasks.Task<OrderFulfillmentState> AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPostAsync(string accept, string scopeId, string orderId, string shipmentId, AddShipmentFulfillmentMessagesRequest body = default(AddShipmentFulfillmentMessagesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = await AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPostWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the fulfillment state of an order and each of its shipments - {AddShipmentFulfillmentMessagesRequest} Update the ExecutionMessages and ValidationResults of a ShipmentFulfillmentState.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState>> AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, AddShipmentFulfillmentMessagesRequest body = default(AddShipmentFulfillmentMessagesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/state/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddShipmentFulfillmentMessagesRequestScopeIdOrderIdshipmentsShipmentIdstatemessagesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a note to an order shipment - {AddShipmentNoteRequest} Add a note to an order shipment.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPost(string accept, string scopeId, string orderId, string shipmentId, AddShipmentNoteRequest body = default(AddShipmentNoteRequest))
        {
            AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPostWithHttpInfo(accept, scopeId, orderId, shipmentId, body);
        }

        /// <summary>
        /// Add a note to an order shipment - {AddShipmentNoteRequest} Add a note to an order shipment.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, AddShipmentNoteRequest body = default(AddShipmentNoteRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/notes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a note to an order shipment - {AddShipmentNoteRequest} Add a note to an order shipment.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPostAsync(string accept, string scopeId, string orderId, string shipmentId, AddShipmentNoteRequest body = default(AddShipmentNoteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPostWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a note to an order shipment - {AddShipmentNoteRequest} Add a note to an order shipment.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, AddShipmentNoteRequest body = default(AddShipmentNoteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddShipmentNoteRequestScopeIdOrderIdshipmentsShipmentIdnotesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request that all shipments statuses be transitioned from their current status to the submitted status. - {ChangeOrderStatusRequest} Request that the status of all shipments be transitioned from their current status to the given status. This request issues a request to resume the long running fulfillment workflow of each shipment and transition them to the given state.If all transitions succeed the order status will be updated
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        public OrderFulfillmentState ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePost(string accept, string scopeId, string orderId, ChangeOrderStatusRequest body = default(ChangeOrderStatusRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePostWithHttpInfo(accept, scopeId, orderId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request that all shipments statuses be transitioned from their current status to the submitted status. - {ChangeOrderStatusRequest} Request that the status of all shipments be transitioned from their current status to the given status. This request issues a request to resume the long running fulfillment workflow of each shipment and transition them to the given state.If all transitions succeed the order status will be updated
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePostWithHttpInfo(string accept, string scopeId, string orderId, ChangeOrderStatusRequest body = default(ChangeOrderStatusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/fulfillmentState", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request that all shipments statuses be transitioned from their current status to the submitted status. - {ChangeOrderStatusRequest} Request that the status of all shipments be transitioned from their current status to the given status. This request issues a request to resume the long running fulfillment workflow of each shipment and transition them to the given state.If all transitions succeed the order status will be updated
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        public async System.Threading.Tasks.Task<OrderFulfillmentState> ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePostAsync(string accept, string scopeId, string orderId, ChangeOrderStatusRequest body = default(ChangeOrderStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = await ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePostWithHttpInfoAsync(accept, scopeId, orderId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request that all shipments statuses be transitioned from their current status to the submitted status. - {ChangeOrderStatusRequest} Request that the status of all shipments be transitioned from their current status to the given status. This request issues a request to resume the long running fulfillment workflow of each shipment and transition them to the given state.If all transitions succeed the order status will be updated
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState>> ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePostWithHttpInfoAsync(string accept, string scopeId, string orderId, ChangeOrderStatusRequest body = default(ChangeOrderStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/fulfillmentState", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeOrderStatusRequestScopeIdOrderIdfulfillmentStatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request that a shipment status be transitioned from its current status to the submitted status. - {ChangeShipmentStatusRequest} Request that a shipment status be transitioned from its current status to the submitted status. This request will issue a request to resume the long running fulfillment workflow
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="shipmentId">The unique shipment identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        public OrderFulfillmentState ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePost(string accept, string scopeId, string orderId, string shipmentId, ChangeShipmentStatusRequest body = default(ChangeShipmentStatusRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePostWithHttpInfo(accept, scopeId, orderId, shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request that a shipment status be transitioned from its current status to the submitted status. - {ChangeShipmentStatusRequest} Request that a shipment status be transitioned from its current status to the submitted status. This request will issue a request to resume the long running fulfillment workflow
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="shipmentId">The unique shipment identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, ChangeShipmentStatusRequest body = default(ChangeShipmentStatusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/fulfillmentState", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request that a shipment status be transitioned from its current status to the submitted status. - {ChangeShipmentStatusRequest} Request that a shipment status be transitioned from its current status to the submitted status. This request will issue a request to resume the long running fulfillment workflow
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="shipmentId">The unique shipment identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        public async System.Threading.Tasks.Task<OrderFulfillmentState> ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePostAsync(string accept, string scopeId, string orderId, string shipmentId, ChangeShipmentStatusRequest body = default(ChangeShipmentStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = await ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePostWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request that a shipment status be transitioned from its current status to the submitted status. - {ChangeShipmentStatusRequest} Request that a shipment status be transitioned from its current status to the submitted status. This request will issue a request to resume the long running fulfillment workflow
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique system identifier for the order</param>
        /// <param name="shipmentId">The unique shipment identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState>> ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, ChangeShipmentStatusRequest body = default(ChangeShipmentStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/fulfillmentState", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeShipmentStatusRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy cart from an existing order - {CopyCartFromOrderRequest} Copy a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be used for copy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        public Cart CopyCartFromOrderRequestScopeIdOrderIdcopycartPost(string accept, string scopeId, string orderId, CopyCartFromOrderRequest body = default(CopyCartFromOrderRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = CopyCartFromOrderRequestScopeIdOrderIdcopycartPostWithHttpInfo(accept, scopeId, orderId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy cart from an existing order - {CopyCartFromOrderRequest} Copy a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be used for copy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> CopyCartFromOrderRequestScopeIdOrderIdcopycartPostWithHttpInfo(string accept, string scopeId, string orderId, CopyCartFromOrderRequest body = default(CopyCartFromOrderRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->CopyCartFromOrderRequestScopeIdOrderIdcopycartPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->CopyCartFromOrderRequestScopeIdOrderIdcopycartPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->CopyCartFromOrderRequestScopeIdOrderIdcopycartPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Cart>("/orders/{ScopeId}/{OrderId}/copycart", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyCartFromOrderRequestScopeIdOrderIdcopycartPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy cart from an existing order - {CopyCartFromOrderRequest} Copy a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be used for copy.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        public async System.Threading.Tasks.Task<Cart> CopyCartFromOrderRequestScopeIdOrderIdcopycartPostAsync(string accept, string scopeId, string orderId, CopyCartFromOrderRequest body = default(CopyCartFromOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = await CopyCartFromOrderRequestScopeIdOrderIdcopycartPostWithHttpInfoAsync(accept, scopeId, orderId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy cart from an existing order - {CopyCartFromOrderRequest} Copy a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be used for copy.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart>> CopyCartFromOrderRequestScopeIdOrderIdcopycartPostWithHttpInfoAsync(string accept, string scopeId, string orderId, CopyCartFromOrderRequest body = default(CopyCartFromOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->CopyCartFromOrderRequestScopeIdOrderIdcopycartPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->CopyCartFromOrderRequestScopeIdOrderIdcopycartPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->CopyCartFromOrderRequestScopeIdOrderIdcopycartPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Cart>("/orders/{ScopeId}/{OrderId}/copycart", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyCartFromOrderRequestScopeIdOrderIdcopycartPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy an order - {CopyOrderRequest} Copy an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be copied.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        public Cart CopyOrderRequestScopeIdOrderIdcopyPost(string accept, string scopeId, string orderId, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = CopyOrderRequestScopeIdOrderIdcopyPostWithHttpInfo(accept, scopeId, orderId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy an order - {CopyOrderRequest} Copy an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be copied.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> CopyOrderRequestScopeIdOrderIdcopyPostWithHttpInfo(string accept, string scopeId, string orderId, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->CopyOrderRequestScopeIdOrderIdcopyPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->CopyOrderRequestScopeIdOrderIdcopyPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->CopyOrderRequestScopeIdOrderIdcopyPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Cart>("/orders/{ScopeId}/{OrderId}/copy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyOrderRequestScopeIdOrderIdcopyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy an order - {CopyOrderRequest} Copy an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be copied.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        public async System.Threading.Tasks.Task<Cart> CopyOrderRequestScopeIdOrderIdcopyPostAsync(string accept, string scopeId, string orderId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = await CopyOrderRequestScopeIdOrderIdcopyPostWithHttpInfoAsync(accept, scopeId, orderId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy an order - {CopyOrderRequest} Copy an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the order to be copied.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart>> CopyOrderRequestScopeIdOrderIdcopyPostWithHttpInfoAsync(string accept, string scopeId, string orderId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->CopyOrderRequestScopeIdOrderIdcopyPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->CopyOrderRequestScopeIdOrderIdcopyPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->CopyOrderRequestScopeIdOrderIdcopyPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Cart>("/orders/{ScopeId}/{OrderId}/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyOrderRequestScopeIdOrderIdcopyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new order from a cart - {CreateOrderRequest} Create a new order from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        public Order CreateOrderRequestPost(string accept, CreateOrderRequest body = default(CreateOrderRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = CreateOrderRequestPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new order from a cart - {CreateOrderRequest} Create a new order from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> CreateOrderRequestPostWithHttpInfo(string accept, CreateOrderRequest body = default(CreateOrderRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->CreateOrderRequestPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Order>("/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderRequestPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new order from a cart - {CreateOrderRequest} Create a new order from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> CreateOrderRequestPostAsync(string accept, CreateOrderRequest body = default(CreateOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = await CreateOrderRequestPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new order from a cart - {CreateOrderRequest} Create a new order from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order>> CreateOrderRequestPostWithHttpInfoAsync(string accept, CreateOrderRequest body = default(CreateOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->CreateOrderRequestPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Order>("/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderRequestPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create RMA Guest - {CreateRmaGuestRequest} Create an RMA for a Guest or Unregistered customer. You must fill at least one of the &#39;Postal Code&#39;, &#39;Last name&#39;, or &#39;Email&#39; fields. The specified field(s) will be used for validation.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RmaRequestResult</returns>
        public RmaRequestResult CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPost(string accept, string scopeId, string orderNumber, CreateRmaGuestRequest body = default(CreateRmaGuestRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaRequestResult> localVarResponse = CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPostWithHttpInfo(accept, scopeId, orderNumber, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create RMA Guest - {CreateRmaGuestRequest} Create an RMA for a Guest or Unregistered customer. You must fill at least one of the &#39;Postal Code&#39;, &#39;Last name&#39;, or &#39;Email&#39; fields. The specified field(s) will be used for validation.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RmaRequestResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaRequestResult> CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPostWithHttpInfo(string accept, string scopeId, string orderNumber, CreateRmaGuestRequest body = default(CreateRmaGuestRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPost");

            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RmaRequestResult>("/orders/RMA/{ScopeId}/{OrderNumber}/Guest", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create RMA Guest - {CreateRmaGuestRequest} Create an RMA for a Guest or Unregistered customer. You must fill at least one of the &#39;Postal Code&#39;, &#39;Last name&#39;, or &#39;Email&#39; fields. The specified field(s) will be used for validation.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaRequestResult</returns>
        public async System.Threading.Tasks.Task<RmaRequestResult> CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPostAsync(string accept, string scopeId, string orderNumber, CreateRmaGuestRequest body = default(CreateRmaGuestRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaRequestResult> localVarResponse = await CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPostWithHttpInfoAsync(accept, scopeId, orderNumber, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create RMA Guest - {CreateRmaGuestRequest} Create an RMA for a Guest or Unregistered customer. You must fill at least one of the &#39;Postal Code&#39;, &#39;Last name&#39;, or &#39;Email&#39; fields. The specified field(s) will be used for validation.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaRequestResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaRequestResult>> CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPostWithHttpInfoAsync(string accept, string scopeId, string orderNumber, CreateRmaGuestRequest body = default(CreateRmaGuestRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPost");

            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RmaRequestResult>("/orders/RMA/{ScopeId}/{OrderNumber}/Guest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRmaGuestRequestRMAScopeIdOrderNumberGuestPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create RMA registered customer - {CreateRmaRegisteredRequest} Create an RMA for a registered customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="customerId">the Identifier of the Customer who owns the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RmaRequestResult</returns>
        public RmaRequestResult CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPost(string accept, string scopeId, string orderNumber, string customerId, CreateRmaRegisteredRequest body = default(CreateRmaRegisteredRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaRequestResult> localVarResponse = CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPostWithHttpInfo(accept, scopeId, orderNumber, customerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create RMA registered customer - {CreateRmaRegisteredRequest} Create an RMA for a registered customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="customerId">the Identifier of the Customer who owns the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RmaRequestResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaRequestResult> CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPostWithHttpInfo(string accept, string scopeId, string orderNumber, string customerId, CreateRmaRegisteredRequest body = default(CreateRmaRegisteredRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPost");

            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling OrdersApi->CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RmaRequestResult>("/orders/RMA/{ScopeId}/{OrderNumber}/{CustomerId}/Registered", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create RMA registered customer - {CreateRmaRegisteredRequest} Create an RMA for a registered customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="customerId">the Identifier of the Customer who owns the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaRequestResult</returns>
        public async System.Threading.Tasks.Task<RmaRequestResult> CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPostAsync(string accept, string scopeId, string orderNumber, string customerId, CreateRmaRegisteredRequest body = default(CreateRmaRegisteredRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaRequestResult> localVarResponse = await CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPostWithHttpInfoAsync(accept, scopeId, orderNumber, customerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create RMA registered customer - {CreateRmaRegisteredRequest} Create an RMA for a registered customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The Order Number related to the RMA</param>
        /// <param name="customerId">the Identifier of the Customer who owns the RMA</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaRequestResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaRequestResult>> CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPostWithHttpInfoAsync(string accept, string scopeId, string orderNumber, string customerId, CreateRmaRegisteredRequest body = default(CreateRmaRegisteredRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPost");

            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling OrdersApi->CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RmaRequestResult>("/orders/RMA/{ScopeId}/{OrderNumber}/{CustomerId}/Registered", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRmaRegisteredRequestRMAScopeIdOrderNumberCustomerIdRegisteredPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a shipment document. - {CreateShipmentDocumentRequest} Create a shipment document.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ShipmentDocument</returns>
        public ShipmentDocument CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost(string accept, string scopeId, string orderId, string shipmentId, string name, CreateShipmentDocumentRequest body = default(CreateShipmentDocumentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument> localVarResponse = CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePostWithHttpInfo(accept, scopeId, orderId, shipmentId, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a shipment document. - {CreateShipmentDocumentRequest} Create a shipment document.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ShipmentDocument</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument> CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, string name, CreateShipmentDocumentRequest body = default(CreateShipmentDocumentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling OrdersApi->CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ShipmentDocument>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/documents/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a shipment document. - {CreateShipmentDocumentRequest} Create a shipment document.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDocument</returns>
        public async System.Threading.Tasks.Task<ShipmentDocument> CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePostAsync(string accept, string scopeId, string orderId, string shipmentId, string name, CreateShipmentDocumentRequest body = default(CreateShipmentDocumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument> localVarResponse = await CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePostWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a shipment document. - {CreateShipmentDocumentRequest} Create a shipment document.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDocument)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument>> CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, string name, CreateShipmentDocumentRequest body = default(CreateShipmentDocumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling OrdersApi->CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ShipmentDocument>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/documents/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a shipment document. - {DeleteShipmentDocumentRequest} Delete a shipment document.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The shipment document name.</param>
        /// <returns>ShipmentDocument</returns>
        public ShipmentDocument DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete(string accept, string scopeId, string orderId, string shipmentId, string name)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument> localVarResponse = DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDeleteWithHttpInfo(accept, scopeId, orderId, shipmentId, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a shipment document. - {DeleteShipmentDocumentRequest} Delete a shipment document.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The shipment document name.</param>
        /// <returns>ApiResponse of ShipmentDocument</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument> DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDeleteWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, string name)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling OrdersApi->DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ShipmentDocument>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/documents/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a shipment document. - {DeleteShipmentDocumentRequest} Delete a shipment document.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The shipment document name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDocument</returns>
        public async System.Threading.Tasks.Task<ShipmentDocument> DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDeleteAsync(string accept, string scopeId, string orderId, string shipmentId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument> localVarResponse = await DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDeleteWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a shipment document. - {DeleteShipmentDocumentRequest} Delete a shipment document.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The shipment document name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDocument)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument>> DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDeleteWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling OrdersApi->DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ShipmentDocument>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/documents/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return to number of orders matching the search criteria - {FindOrdersCountRequest} Return to number of orders matching the search criteria
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>QueryCountResult</returns>
        public QueryCountResult FindOrdersCountRequestScopeIdcountPost(string accept, string scopeId, FindOrdersCountRequest body = default(FindOrdersCountRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<QueryCountResult> localVarResponse = FindOrdersCountRequestScopeIdcountPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return to number of orders matching the search criteria - {FindOrdersCountRequest} Return to number of orders matching the search criteria
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of QueryCountResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<QueryCountResult> FindOrdersCountRequestScopeIdcountPostWithHttpInfo(string accept, string scopeId, FindOrdersCountRequest body = default(FindOrdersCountRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->FindOrdersCountRequestScopeIdcountPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->FindOrdersCountRequestScopeIdcountPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<QueryCountResult>("/orders/{ScopeId}/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOrdersCountRequestScopeIdcountPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return to number of orders matching the search criteria - {FindOrdersCountRequest} Return to number of orders matching the search criteria
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryCountResult</returns>
        public async System.Threading.Tasks.Task<QueryCountResult> FindOrdersCountRequestScopeIdcountPostAsync(string accept, string scopeId, FindOrdersCountRequest body = default(FindOrdersCountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<QueryCountResult> localVarResponse = await FindOrdersCountRequestScopeIdcountPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return to number of orders matching the search criteria - {FindOrdersCountRequest} Return to number of orders matching the search criteria
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryCountResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<QueryCountResult>> FindOrdersCountRequestScopeIdcountPostWithHttpInfoAsync(string accept, string scopeId, FindOrdersCountRequest body = default(FindOrdersCountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->FindOrdersCountRequestScopeIdcountPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->FindOrdersCountRequestScopeIdcountPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<QueryCountResult>("/orders/{ScopeId}/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOrdersCountRequestScopeIdcountPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for orders - {FindOrdersRequest} Search for orders
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderQueryResult</returns>
        public OrderQueryResult FindOrdersRequestScopeIdfindPost(string accept, string scopeId, FindOrdersRequest body = default(FindOrdersRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderQueryResult> localVarResponse = FindOrdersRequestScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for orders - {FindOrdersRequest} Search for orders
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderQueryResult> FindOrdersRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindOrdersRequest body = default(FindOrdersRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->FindOrdersRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->FindOrdersRequestScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderQueryResult>("/orders/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOrdersRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for orders - {FindOrdersRequest} Search for orders
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderQueryResult</returns>
        public async System.Threading.Tasks.Task<OrderQueryResult> FindOrdersRequestScopeIdfindPostAsync(string accept, string scopeId, FindOrdersRequest body = default(FindOrdersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderQueryResult> localVarResponse = await FindOrdersRequestScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for orders - {FindOrdersRequest} Search for orders
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderQueryResult>> FindOrdersRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindOrdersRequest body = default(FindOrdersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->FindOrdersRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->FindOrdersRequestScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderQueryResult>("/orders/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOrdersRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve shipment documents - {FindShipmentDocumentsRequest} Retrieve shipment documents
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ShipmentDocumentQueryResult</returns>
        public ShipmentDocumentQueryResult FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPost(string accept, string scopeId, FindShipmentDocumentsRequest body = default(FindShipmentDocumentsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocumentQueryResult> localVarResponse = FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve shipment documents - {FindShipmentDocumentsRequest} Retrieve shipment documents
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ShipmentDocumentQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocumentQueryResult> FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPostWithHttpInfo(string accept, string scopeId, FindShipmentDocumentsRequest body = default(FindShipmentDocumentsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ShipmentDocumentQueryResult>("/orders/{ScopeId}/shipments/documents/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve shipment documents - {FindShipmentDocumentsRequest} Retrieve shipment documents
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDocumentQueryResult</returns>
        public async System.Threading.Tasks.Task<ShipmentDocumentQueryResult> FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPostAsync(string accept, string scopeId, FindShipmentDocumentsRequest body = default(FindShipmentDocumentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocumentQueryResult> localVarResponse = await FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve shipment documents - {FindShipmentDocumentsRequest} Retrieve shipment documents
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDocumentQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocumentQueryResult>> FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPostWithHttpInfoAsync(string accept, string scopeId, FindShipmentDocumentsRequest body = default(FindShipmentDocumentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ShipmentDocumentQueryResult>("/orders/{ScopeId}/shipments/documents/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindShipmentDocumentsRequestScopeIdshipmentsdocumentsfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve shipment documents summaries - {FindShipmentDocumentsSummariesRequest} Retrieve shipment documents summaries
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ShipmentDocumentSummaryQueryResult</returns>
        public ShipmentDocumentSummaryQueryResult FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPost(string accept, string scopeId, FindShipmentDocumentsSummariesRequest body = default(FindShipmentDocumentsSummariesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocumentSummaryQueryResult> localVarResponse = FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve shipment documents summaries - {FindShipmentDocumentsSummariesRequest} Retrieve shipment documents summaries
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ShipmentDocumentSummaryQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocumentSummaryQueryResult> FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPostWithHttpInfo(string accept, string scopeId, FindShipmentDocumentsSummariesRequest body = default(FindShipmentDocumentsSummariesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ShipmentDocumentSummaryQueryResult>("/orders/{ScopeId}/shipments/documents/summaries/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve shipment documents summaries - {FindShipmentDocumentsSummariesRequest} Retrieve shipment documents summaries
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDocumentSummaryQueryResult</returns>
        public async System.Threading.Tasks.Task<ShipmentDocumentSummaryQueryResult> FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPostAsync(string accept, string scopeId, FindShipmentDocumentsSummariesRequest body = default(FindShipmentDocumentsSummariesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocumentSummaryQueryResult> localVarResponse = await FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve shipment documents summaries - {FindShipmentDocumentsSummariesRequest} Retrieve shipment documents summaries
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDocumentSummaryQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocumentSummaryQueryResult>> FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPostWithHttpInfoAsync(string accept, string scopeId, FindShipmentDocumentsSummariesRequest body = default(FindShipmentDocumentsSummariesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ShipmentDocumentSummaryQueryResult>("/orders/{ScopeId}/shipments/documents/summaries/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindShipmentDocumentsSummariesRequestScopeIdshipmentsdocumentssummariesfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the tax providers available in the system - {GetAvailableTaxProvidersRequest} Retrieve all the tax providers available in the system
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <returns>List&lt;TaxProviderDetails&gt;</returns>
        public List<TaxProviderDetails> GetAvailableTaxProvidersRequestavailableTaxProvidersGet(string accept, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaxProviderDetails>> localVarResponse = GetAvailableTaxProvidersRequestavailableTaxProvidersGetWithHttpInfo(accept, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the tax providers available in the system - {GetAvailableTaxProvidersRequest} Retrieve all the tax providers available in the system
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;TaxProviderDetails&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaxProviderDetails>> GetAvailableTaxProvidersRequestavailableTaxProvidersGetWithHttpInfo(string accept, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetAvailableTaxProvidersRequestavailableTaxProvidersGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TaxProviderDetails>>("/orders/availableTaxProviders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableTaxProvidersRequestavailableTaxProvidersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the tax providers available in the system - {GetAvailableTaxProvidersRequest} Retrieve all the tax providers available in the system
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaxProviderDetails&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaxProviderDetails>> GetAvailableTaxProvidersRequestavailableTaxProvidersGetAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaxProviderDetails>> localVarResponse = await GetAvailableTaxProvidersRequestavailableTaxProvidersGetWithHttpInfoAsync(accept, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the tax providers available in the system - {GetAvailableTaxProvidersRequest} Retrieve all the tax providers available in the system
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaxProviderDetails&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaxProviderDetails>>> GetAvailableTaxProvidersRequestavailableTaxProvidersGetWithHttpInfoAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetAvailableTaxProvidersRequestavailableTaxProvidersGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TaxProviderDetails>>("/orders/availableTaxProviders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableTaxProvidersRequestavailableTaxProvidersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer last order - {GetCustomerLastOrderRequest} Get customer last order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer to retrieve last order from.</param>
        /// <returns>Order</returns>
        public Order GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGet(string accept, string scopeId, string customerId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGetWithHttpInfo(accept, scopeId, customerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer last order - {GetCustomerLastOrderRequest} Get customer last order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer to retrieve last order from.</param>
        /// <returns>ApiResponse of Order</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGetWithHttpInfo(string accept, string scopeId, string customerId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling OrdersApi->GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Order>("/orders/{ScopeId}/{CustomerId}/lastOrder", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer last order - {GetCustomerLastOrderRequest} Get customer last order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer to retrieve last order from.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGetAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = await GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGetWithHttpInfoAsync(accept, scopeId, customerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer last order - {GetCustomerLastOrderRequest} Get customer last order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer to retrieve last order from.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order>> GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGetWithHttpInfoAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling OrdersApi->GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Order>("/orders/{ScopeId}/{CustomerId}/lastOrder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerLastOrderRequestScopeIdCustomerIdlastOrderGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an order - {GetOrderByIdRequest} Retrieve an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <returns>Order</returns>
        public Order GetOrderByIdRequestScopeIdOrderIdGet(string accept, string scopeId, string orderId, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = GetOrderByIdRequestScopeIdOrderIdGetWithHttpInfo(accept, scopeId, orderId, includeLineItems, includeShipment, includePayment);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an order - {GetOrderByIdRequest} Retrieve an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> GetOrderByIdRequestScopeIdOrderIdGetWithHttpInfo(string accept, string scopeId, string orderId, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetOrderByIdRequestScopeIdOrderIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetOrderByIdRequestScopeIdOrderIdGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrderByIdRequestScopeIdOrderIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            if (includeLineItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeLineItems", includeLineItems));
            }
            if (includeShipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeShipment", includeShipment));
            }
            if (includePayment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePayment", includePayment));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Order>("/orders/{ScopeId}/{OrderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderByIdRequestScopeIdOrderIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an order - {GetOrderByIdRequest} Retrieve an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> GetOrderByIdRequestScopeIdOrderIdGetAsync(string accept, string scopeId, string orderId, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = await GetOrderByIdRequestScopeIdOrderIdGetWithHttpInfoAsync(accept, scopeId, orderId, includeLineItems, includeShipment, includePayment, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an order - {GetOrderByIdRequest} Retrieve an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order>> GetOrderByIdRequestScopeIdOrderIdGetWithHttpInfoAsync(string accept, string scopeId, string orderId, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetOrderByIdRequestScopeIdOrderIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetOrderByIdRequestScopeIdOrderIdGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrderByIdRequestScopeIdOrderIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            if (includeLineItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeLineItems", includeLineItems));
            }
            if (includeShipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeShipment", includeShipment));
            }
            if (includePayment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePayment", includePayment));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Order>("/orders/{ScopeId}/{OrderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderByIdRequestScopeIdOrderIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an order - {GetOrderByNumberRequest} Retrieve an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The order number for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <param name="customerId">The customer identifier for the request (optional)</param>
        /// <returns>Order</returns>
        public Order GetOrderByNumberRequestScopeIdbyNumberOrderNumberGet(string accept, string scopeId, string orderNumber, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?), string customerId = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = GetOrderByNumberRequestScopeIdbyNumberOrderNumberGetWithHttpInfo(accept, scopeId, orderNumber, includeLineItems, includeShipment, includePayment, customerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an order - {GetOrderByNumberRequest} Retrieve an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The order number for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <param name="customerId">The customer identifier for the request (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> GetOrderByNumberRequestScopeIdbyNumberOrderNumberGetWithHttpInfo(string accept, string scopeId, string orderNumber, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?), string customerId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetOrderByNumberRequestScopeIdbyNumberOrderNumberGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetOrderByNumberRequestScopeIdbyNumberOrderNumberGet");

            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->GetOrderByNumberRequestScopeIdbyNumberOrderNumberGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            if (includeLineItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeLineItems", includeLineItems));
            }
            if (includeShipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeShipment", includeShipment));
            }
            if (includePayment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePayment", includePayment));
            }
            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CustomerId", customerId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Order>("/orders/{ScopeId}/byNumber/{OrderNumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderByNumberRequestScopeIdbyNumberOrderNumberGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an order - {GetOrderByNumberRequest} Retrieve an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The order number for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <param name="customerId">The customer identifier for the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> GetOrderByNumberRequestScopeIdbyNumberOrderNumberGetAsync(string accept, string scopeId, string orderNumber, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?), string customerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = await GetOrderByNumberRequestScopeIdbyNumberOrderNumberGetWithHttpInfoAsync(accept, scopeId, orderNumber, includeLineItems, includeShipment, includePayment, customerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an order - {GetOrderByNumberRequest} Retrieve an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The order number for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not. (optional)</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not. (optional)</param>
        /// <param name="includePayment">a value indicating whether include payments or not. (optional)</param>
        /// <param name="customerId">The customer identifier for the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order>> GetOrderByNumberRequestScopeIdbyNumberOrderNumberGetWithHttpInfoAsync(string accept, string scopeId, string orderNumber, bool? includeLineItems = default(bool?), bool? includeShipment = default(bool?), bool? includePayment = default(bool?), string customerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetOrderByNumberRequestScopeIdbyNumberOrderNumberGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetOrderByNumberRequestScopeIdbyNumberOrderNumberGet");

            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->GetOrderByNumberRequestScopeIdbyNumberOrderNumberGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            if (includeLineItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeLineItems", includeLineItems));
            }
            if (includeShipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeShipment", includeShipment));
            }
            if (includePayment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePayment", includePayment));
            }
            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CustomerId", customerId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Order>("/orders/{ScopeId}/byNumber/{OrderNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderByNumberRequestScopeIdbyNumberOrderNumberGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the fulfillment state of an order and each of its shipments - {GetOrderFulfillmentStateRequest} Retrieve the fulfillment state of an order and each of its shipments
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier for the Order</param>
        /// <returns>OrderFulfillmentState</returns>
        public OrderFulfillmentState GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGet(string accept, string scopeId, string orderId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGetWithHttpInfo(accept, scopeId, orderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the fulfillment state of an order and each of its shipments - {GetOrderFulfillmentStateRequest} Retrieve the fulfillment state of an order and each of its shipments
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier for the Order</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGetWithHttpInfo(string accept, string scopeId, string orderId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/fulfillmentState", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the fulfillment state of an order and each of its shipments - {GetOrderFulfillmentStateRequest} Retrieve the fulfillment state of an order and each of its shipments
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier for the Order</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        public async System.Threading.Tasks.Task<OrderFulfillmentState> GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGetAsync(string accept, string scopeId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = await GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGetWithHttpInfoAsync(accept, scopeId, orderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the fulfillment state of an order and each of its shipments - {GetOrderFulfillmentStateRequest} Retrieve the fulfillment state of an order and each of its shipments
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier for the Order</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState>> GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGetWithHttpInfoAsync(string accept, string scopeId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/fulfillmentState", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderFulfillmentStateRequestScopeIdOrderIdfulfillmentStateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get history items related to specified order - {GetOrderHistoryRequest} Get history items related to specified order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The identifier of the order to be used for retrieving items. (optional)</param>
        /// <param name="shipmentId">The shipment identifier to be used to filter items from the order (optional). (optional)</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier to be used to filter items from the order (optional). (optional)</param>
        /// <returns>List&lt;OrderHistoryItem&gt;</returns>
        public List<OrderHistoryItem> GetOrderHistoryRequestScopeIdorderhistoryGet(string accept, string scopeId, string orderNumber = default(string), string shipmentId = default(string), string fulfillmentLocationId = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<OrderHistoryItem>> localVarResponse = GetOrderHistoryRequestScopeIdorderhistoryGetWithHttpInfo(accept, scopeId, orderNumber, shipmentId, fulfillmentLocationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get history items related to specified order - {GetOrderHistoryRequest} Get history items related to specified order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The identifier of the order to be used for retrieving items. (optional)</param>
        /// <param name="shipmentId">The shipment identifier to be used to filter items from the order (optional). (optional)</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier to be used to filter items from the order (optional). (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderHistoryItem&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<OrderHistoryItem>> GetOrderHistoryRequestScopeIdorderhistoryGetWithHttpInfo(string accept, string scopeId, string orderNumber = default(string), string shipmentId = default(string), string fulfillmentLocationId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetOrderHistoryRequestScopeIdorderhistoryGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetOrderHistoryRequestScopeIdorderhistoryGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (orderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderNumber", orderNumber));
            }
            if (shipmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ShipmentId", shipmentId));
            }
            if (fulfillmentLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "FulfillmentLocationId", fulfillmentLocationId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OrderHistoryItem>>("/orders/{ScopeId}/orderhistory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderHistoryRequestScopeIdorderhistoryGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get history items related to specified order - {GetOrderHistoryRequest} Get history items related to specified order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The identifier of the order to be used for retrieving items. (optional)</param>
        /// <param name="shipmentId">The shipment identifier to be used to filter items from the order (optional). (optional)</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier to be used to filter items from the order (optional). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrderHistoryItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderHistoryItem>> GetOrderHistoryRequestScopeIdorderhistoryGetAsync(string accept, string scopeId, string orderNumber = default(string), string shipmentId = default(string), string fulfillmentLocationId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<OrderHistoryItem>> localVarResponse = await GetOrderHistoryRequestScopeIdorderhistoryGetWithHttpInfoAsync(accept, scopeId, orderNumber, shipmentId, fulfillmentLocationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get history items related to specified order - {GetOrderHistoryRequest} Get history items related to specified order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">The identifier of the order to be used for retrieving items. (optional)</param>
        /// <param name="shipmentId">The shipment identifier to be used to filter items from the order (optional). (optional)</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier to be used to filter items from the order (optional). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrderHistoryItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<OrderHistoryItem>>> GetOrderHistoryRequestScopeIdorderhistoryGetWithHttpInfoAsync(string accept, string scopeId, string orderNumber = default(string), string shipmentId = default(string), string fulfillmentLocationId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetOrderHistoryRequestScopeIdorderhistoryGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetOrderHistoryRequestScopeIdorderhistoryGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (orderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderNumber", orderNumber));
            }
            if (shipmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ShipmentId", shipmentId));
            }
            if (fulfillmentLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "FulfillmentLocationId", fulfillmentLocationId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OrderHistoryItem>>("/orders/{ScopeId}/orderhistory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderHistoryRequestScopeIdorderhistoryGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get order notes - {GetOrderNotesRequest} Get order notes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the Order.</param>
        /// <returns>List&lt;Note&gt;</returns>
        public List<Note> GetOrderNotesRequestScopeIdOrderIdnotesGet(string accept, string scopeId, string orderId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Note>> localVarResponse = GetOrderNotesRequestScopeIdOrderIdnotesGetWithHttpInfo(accept, scopeId, orderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get order notes - {GetOrderNotesRequest} Get order notes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the Order.</param>
        /// <returns>ApiResponse of List&lt;Note&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Note>> GetOrderNotesRequestScopeIdOrderIdnotesGetWithHttpInfo(string accept, string scopeId, string orderId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetOrderNotesRequestScopeIdOrderIdnotesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetOrderNotesRequestScopeIdOrderIdnotesGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrderNotesRequestScopeIdOrderIdnotesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Note>>("/orders/{ScopeId}/{OrderId}/notes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderNotesRequestScopeIdOrderIdnotesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get order notes - {GetOrderNotesRequest} Get order notes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the Order.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Note&gt;</returns>
        public async System.Threading.Tasks.Task<List<Note>> GetOrderNotesRequestScopeIdOrderIdnotesGetAsync(string accept, string scopeId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Note>> localVarResponse = await GetOrderNotesRequestScopeIdOrderIdnotesGetWithHttpInfoAsync(accept, scopeId, orderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get order notes - {GetOrderNotesRequest} Get order notes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The unique identifier of the Order.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Note&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Note>>> GetOrderNotesRequestScopeIdOrderIdnotesGetWithHttpInfoAsync(string accept, string scopeId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetOrderNotesRequestScopeIdOrderIdnotesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetOrderNotesRequestScopeIdOrderIdnotesGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrderNotesRequestScopeIdOrderIdnotesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Note>>("/orders/{ScopeId}/{OrderId}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderNotesRequestScopeIdOrderIdnotesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the order settings - {GetOrderSettingsRequest} Get the order settings
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>OrderSettings</returns>
        public OrderSettings GetOrderSettingsRequestsettingsGet(string accept, string scopeId = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderSettings> localVarResponse = GetOrderSettingsRequestsettingsGetWithHttpInfo(accept, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the order settings - {GetOrderSettingsRequest} Get the order settings
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of OrderSettings</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderSettings> GetOrderSettingsRequestsettingsGetWithHttpInfo(string accept, string scopeId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetOrderSettingsRequestsettingsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderSettings>("/orders/settings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderSettingsRequestsettingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the order settings - {GetOrderSettingsRequest} Get the order settings
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderSettings</returns>
        public async System.Threading.Tasks.Task<OrderSettings> GetOrderSettingsRequestsettingsGetAsync(string accept, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderSettings> localVarResponse = await GetOrderSettingsRequestsettingsGetWithHttpInfoAsync(accept, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the order settings - {GetOrderSettingsRequest} Get the order settings
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderSettings)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderSettings>> GetOrderSettingsRequestsettingsGetWithHttpInfoAsync(string accept, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetOrderSettingsRequestsettingsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderSettings>("/orders/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderSettingsRequestsettingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri of printable version of the order - {GetPrintableOrderUriRequest} Get the uri of printable version of the order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <returns>string</returns>
        public string GetPrintableOrderUriRequestScopeIdOrderIdprinturiGet(string accept, string scopeId, string orderId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = GetPrintableOrderUriRequestScopeIdOrderIdprinturiGetWithHttpInfo(accept, scopeId, orderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri of printable version of the order - {GetPrintableOrderUriRequest} Get the uri of printable version of the order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <returns>ApiResponse of string</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> GetPrintableOrderUriRequestScopeIdOrderIdprinturiGetWithHttpInfo(string accept, string scopeId, string orderId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetPrintableOrderUriRequestScopeIdOrderIdprinturiGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetPrintableOrderUriRequestScopeIdOrderIdprinturiGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetPrintableOrderUriRequestScopeIdOrderIdprinturiGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/orders/{ScopeId}/{OrderId}/printuri", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrintableOrderUriRequestScopeIdOrderIdprinturiGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri of printable version of the order - {GetPrintableOrderUriRequest} Get the uri of printable version of the order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetPrintableOrderUriRequestScopeIdOrderIdprinturiGetAsync(string accept, string scopeId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = await GetPrintableOrderUriRequestScopeIdOrderIdprinturiGetWithHttpInfoAsync(accept, scopeId, orderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri of printable version of the order - {GetPrintableOrderUriRequest} Get the uri of printable version of the order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string>> GetPrintableOrderUriRequestScopeIdOrderIdprinturiGetWithHttpInfoAsync(string accept, string scopeId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetPrintableOrderUriRequestScopeIdOrderIdprinturiGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetPrintableOrderUriRequestScopeIdOrderIdprinturiGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetPrintableOrderUriRequestScopeIdOrderIdprinturiGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/orders/{ScopeId}/{OrderId}/printuri", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrintableOrderUriRequestScopeIdOrderIdprinturiGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri of printable version of a list of order - {GetPrintableOrdersUriRequest} Get the uri of printable version of a list of order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string GetPrintableOrdersUriRequestScopeIdprintOrdersPost(string accept, string scopeId, GetPrintableOrdersUriRequest body = default(GetPrintableOrdersUriRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = GetPrintableOrdersUriRequestScopeIdprintOrdersPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri of printable version of a list of order - {GetPrintableOrdersUriRequest} Get the uri of printable version of a list of order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> GetPrintableOrdersUriRequestScopeIdprintOrdersPostWithHttpInfo(string accept, string scopeId, GetPrintableOrdersUriRequest body = default(GetPrintableOrdersUriRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetPrintableOrdersUriRequestScopeIdprintOrdersPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetPrintableOrdersUriRequestScopeIdprintOrdersPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/orders/{ScopeId}/printOrders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrintableOrdersUriRequestScopeIdprintOrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri of printable version of a list of order - {GetPrintableOrdersUriRequest} Get the uri of printable version of a list of order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetPrintableOrdersUriRequestScopeIdprintOrdersPostAsync(string accept, string scopeId, GetPrintableOrdersUriRequest body = default(GetPrintableOrdersUriRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = await GetPrintableOrdersUriRequestScopeIdprintOrdersPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri of printable version of a list of order - {GetPrintableOrdersUriRequest} Get the uri of printable version of a list of order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string>> GetPrintableOrdersUriRequestScopeIdprintOrdersPostWithHttpInfoAsync(string accept, string scopeId, GetPrintableOrdersUriRequest body = default(GetPrintableOrdersUriRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetPrintableOrdersUriRequestScopeIdprintOrdersPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetPrintableOrdersUriRequestScopeIdprintOrdersPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/orders/{ScopeId}/printOrders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrintableOrdersUriRequestScopeIdprintOrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves RMA and items - {GetRmaRequest} Retrieves a RMA using order number and RMA number
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <param name="rmaNumber">the RMA number</param>
        /// <returns>Rma</returns>
        public Rma GetRmaRequestRMAScopeIdOrderNumberRmaNumberGet(string accept, string scopeId, string orderNumber, string rmaNumber)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Rma> localVarResponse = GetRmaRequestRMAScopeIdOrderNumberRmaNumberGetWithHttpInfo(accept, scopeId, orderNumber, rmaNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves RMA and items - {GetRmaRequest} Retrieves a RMA using order number and RMA number
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <param name="rmaNumber">the RMA number</param>
        /// <returns>ApiResponse of Rma</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Rma> GetRmaRequestRMAScopeIdOrderNumberRmaNumberGetWithHttpInfo(string accept, string scopeId, string orderNumber, string rmaNumber)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetRmaRequestRMAScopeIdOrderNumberRmaNumberGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetRmaRequestRMAScopeIdOrderNumberRmaNumberGet");

            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->GetRmaRequestRMAScopeIdOrderNumberRmaNumberGet");

            // verify the required parameter 'rmaNumber' is set
            if (rmaNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'rmaNumber' when calling OrdersApi->GetRmaRequestRMAScopeIdOrderNumberRmaNumberGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("RmaNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(rmaNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Rma>("/orders/RMA/{ScopeId}/{OrderNumber}/{RmaNumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRmaRequestRMAScopeIdOrderNumberRmaNumberGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves RMA and items - {GetRmaRequest} Retrieves a RMA using order number and RMA number
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <param name="rmaNumber">the RMA number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Rma</returns>
        public async System.Threading.Tasks.Task<Rma> GetRmaRequestRMAScopeIdOrderNumberRmaNumberGetAsync(string accept, string scopeId, string orderNumber, string rmaNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Rma> localVarResponse = await GetRmaRequestRMAScopeIdOrderNumberRmaNumberGetWithHttpInfoAsync(accept, scopeId, orderNumber, rmaNumber, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves RMA and items - {GetRmaRequest} Retrieves a RMA using order number and RMA number
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <param name="rmaNumber">the RMA number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Rma)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Rma>> GetRmaRequestRMAScopeIdOrderNumberRmaNumberGetWithHttpInfoAsync(string accept, string scopeId, string orderNumber, string rmaNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetRmaRequestRMAScopeIdOrderNumberRmaNumberGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetRmaRequestRMAScopeIdOrderNumberRmaNumberGet");

            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->GetRmaRequestRMAScopeIdOrderNumberRmaNumberGet");

            // verify the required parameter 'rmaNumber' is set
            if (rmaNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'rmaNumber' when calling OrdersApi->GetRmaRequestRMAScopeIdOrderNumberRmaNumberGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("RmaNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(rmaNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Rma>("/orders/RMA/{ScopeId}/{OrderNumber}/{RmaNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRmaRequestRMAScopeIdOrderNumberRmaNumberGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all RMAs for an order - {GetRmasByOrderRequest} Retrieves all RMAs for a specified order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <returns>RmaListResult</returns>
        public RmaListResult GetRmasByOrderRequestRMAScopeIdOrderNumberGet(string accept, string scopeId, string orderNumber)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaListResult> localVarResponse = GetRmasByOrderRequestRMAScopeIdOrderNumberGetWithHttpInfo(accept, scopeId, orderNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all RMAs for an order - {GetRmasByOrderRequest} Retrieves all RMAs for a specified order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <returns>ApiResponse of RmaListResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaListResult> GetRmasByOrderRequestRMAScopeIdOrderNumberGetWithHttpInfo(string accept, string scopeId, string orderNumber)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetRmasByOrderRequestRMAScopeIdOrderNumberGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetRmasByOrderRequestRMAScopeIdOrderNumberGet");

            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->GetRmasByOrderRequestRMAScopeIdOrderNumberGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<RmaListResult>("/orders/RMA/{ScopeId}/{OrderNumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRmasByOrderRequestRMAScopeIdOrderNumberGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all RMAs for an order - {GetRmasByOrderRequest} Retrieves all RMAs for a specified order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaListResult</returns>
        public async System.Threading.Tasks.Task<RmaListResult> GetRmasByOrderRequestRMAScopeIdOrderNumberGetAsync(string accept, string scopeId, string orderNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaListResult> localVarResponse = await GetRmasByOrderRequestRMAScopeIdOrderNumberGetWithHttpInfoAsync(accept, scopeId, orderNumber, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all RMAs for an order - {GetRmasByOrderRequest} Retrieves all RMAs for a specified order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderNumber">the order number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaListResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaListResult>> GetRmasByOrderRequestRMAScopeIdOrderNumberGetWithHttpInfoAsync(string accept, string scopeId, string orderNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetRmasByOrderRequestRMAScopeIdOrderNumberGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetRmasByOrderRequestRMAScopeIdOrderNumberGet");

            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->GetRmasByOrderRequestRMAScopeIdOrderNumberGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RmaListResult>("/orders/RMA/{ScopeId}/{OrderNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRmasByOrderRequestRMAScopeIdOrderNumberGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a shipment document - {GetShipmentDocumentRequest} Retrieve a shipment document
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <param name="name">The name of the document.</param>
        /// <returns>ShipmentDocument</returns>
        public ShipmentDocument GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet(string accept, string scopeId, string orderId, string shipmentId, string name)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument> localVarResponse = GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGetWithHttpInfo(accept, scopeId, orderId, shipmentId, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a shipment document - {GetShipmentDocumentRequest} Retrieve a shipment document
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <param name="name">The name of the document.</param>
        /// <returns>ApiResponse of ShipmentDocument</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument> GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGetWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, string name)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling OrdersApi->GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ShipmentDocument>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/documents/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a shipment document - {GetShipmentDocumentRequest} Retrieve a shipment document
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDocument</returns>
        public async System.Threading.Tasks.Task<ShipmentDocument> GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGetAsync(string accept, string scopeId, string orderId, string shipmentId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument> localVarResponse = await GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGetWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a shipment document - {GetShipmentDocumentRequest} Retrieve a shipment document
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id for the request.</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDocument)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument>> GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGetWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling OrdersApi->GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ShipmentDocument>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/documents/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get shipment notes - {GetShipmentNotesRequest} Get shipment notes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <returns>List&lt;Note&gt;</returns>
        public List<Note> GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGet(string accept, string scopeId, string shipmentId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Note>> localVarResponse = GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGetWithHttpInfo(accept, scopeId, shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get shipment notes - {GetShipmentNotesRequest} Get shipment notes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <returns>ApiResponse of List&lt;Note&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Note>> GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGetWithHttpInfo(string accept, string scopeId, string shipmentId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGet");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Note>>("/orders/{ScopeId}/{ShipmentId}/shipment/notes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get shipment notes - {GetShipmentNotesRequest} Get shipment notes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Note&gt;</returns>
        public async System.Threading.Tasks.Task<List<Note>> GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGetAsync(string accept, string scopeId, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Note>> localVarResponse = await GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGetWithHttpInfoAsync(accept, scopeId, shipmentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get shipment notes - {GetShipmentNotesRequest} Get shipment notes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Note&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Note>>> GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGetWithHttpInfoAsync(string accept, string scopeId, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGet");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Note>>("/orders/{ScopeId}/{ShipmentId}/shipment/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentNotesRequestScopeIdShipmentIdshipmentnotesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the list of tax categories in the system - {GetTaxCategoriesRequest} Retrieve the list of tax categories in the system
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="getSystemCategories">a value indicating whether include system categories or not. (optional)</param>
        /// <param name="getOnlySupportedCategories">a value indicating whether include only supported categories or not. (optional)</param>
        /// <returns>List&lt;TaxCategory&gt;</returns>
        public List<TaxCategory> GetTaxCategoriesRequesttaxCategoriesGet(string accept, bool? getSystemCategories = default(bool?), bool? getOnlySupportedCategories = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaxCategory>> localVarResponse = GetTaxCategoriesRequesttaxCategoriesGetWithHttpInfo(accept, getSystemCategories, getOnlySupportedCategories);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the list of tax categories in the system - {GetTaxCategoriesRequest} Retrieve the list of tax categories in the system
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="getSystemCategories">a value indicating whether include system categories or not. (optional)</param>
        /// <param name="getOnlySupportedCategories">a value indicating whether include only supported categories or not. (optional)</param>
        /// <returns>ApiResponse of List&lt;TaxCategory&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaxCategory>> GetTaxCategoriesRequesttaxCategoriesGetWithHttpInfo(string accept, bool? getSystemCategories = default(bool?), bool? getOnlySupportedCategories = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetTaxCategoriesRequesttaxCategoriesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (getSystemCategories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "GetSystemCategories", getSystemCategories));
            }
            if (getOnlySupportedCategories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "GetOnlySupportedCategories", getOnlySupportedCategories));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TaxCategory>>("/orders/taxCategories", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaxCategoriesRequesttaxCategoriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the list of tax categories in the system - {GetTaxCategoriesRequest} Retrieve the list of tax categories in the system
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="getSystemCategories">a value indicating whether include system categories or not. (optional)</param>
        /// <param name="getOnlySupportedCategories">a value indicating whether include only supported categories or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaxCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaxCategory>> GetTaxCategoriesRequesttaxCategoriesGetAsync(string accept, bool? getSystemCategories = default(bool?), bool? getOnlySupportedCategories = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaxCategory>> localVarResponse = await GetTaxCategoriesRequesttaxCategoriesGetWithHttpInfoAsync(accept, getSystemCategories, getOnlySupportedCategories, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the list of tax categories in the system - {GetTaxCategoriesRequest} Retrieve the list of tax categories in the system
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="getSystemCategories">a value indicating whether include system categories or not. (optional)</param>
        /// <param name="getOnlySupportedCategories">a value indicating whether include only supported categories or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaxCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaxCategory>>> GetTaxCategoriesRequesttaxCategoriesGetWithHttpInfoAsync(string accept, bool? getSystemCategories = default(bool?), bool? getOnlySupportedCategories = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetTaxCategoriesRequesttaxCategoriesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (getSystemCategories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "GetSystemCategories", getSystemCategories));
            }
            if (getOnlySupportedCategories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "GetOnlySupportedCategories", getOnlySupportedCategories));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TaxCategory>>("/orders/taxCategories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaxCategoriesRequesttaxCategoriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the tax provider for a scope - {GetTaxProviderByScopeRequest} Retrieve the tax provider for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the provider (optional)</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>TaxProviderDetails</returns>
        public TaxProviderDetails GetTaxProviderByScopeRequesttaxProviderByScopeGet(string accept, string name = default(string), string cultureName = default(string), string scopeId = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaxProviderDetails> localVarResponse = GetTaxProviderByScopeRequesttaxProviderByScopeGetWithHttpInfo(accept, name, cultureName, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the tax provider for a scope - {GetTaxProviderByScopeRequest} Retrieve the tax provider for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the provider (optional)</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of TaxProviderDetails</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaxProviderDetails> GetTaxProviderByScopeRequesttaxProviderByScopeGetWithHttpInfo(string accept, string name = default(string), string cultureName = default(string), string scopeId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetTaxProviderByScopeRequesttaxProviderByScopeGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Name", name));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<TaxProviderDetails>("/orders/taxProviderByScope", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaxProviderByScopeRequesttaxProviderByScopeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the tax provider for a scope - {GetTaxProviderByScopeRequest} Retrieve the tax provider for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the provider (optional)</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxProviderDetails</returns>
        public async System.Threading.Tasks.Task<TaxProviderDetails> GetTaxProviderByScopeRequesttaxProviderByScopeGetAsync(string accept, string name = default(string), string cultureName = default(string), string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaxProviderDetails> localVarResponse = await GetTaxProviderByScopeRequesttaxProviderByScopeGetWithHttpInfoAsync(accept, name, cultureName, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the tax provider for a scope - {GetTaxProviderByScopeRequest} Retrieve the tax provider for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The name of the provider (optional)</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxProviderDetails)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaxProviderDetails>> GetTaxProviderByScopeRequesttaxProviderByScopeGetWithHttpInfoAsync(string accept, string name = default(string), string cultureName = default(string), string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->GetTaxProviderByScopeRequesttaxProviderByScopeGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Name", name));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaxProviderDetails>("/orders/taxProviderByScope", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaxProviderByScopeRequesttaxProviderByScopeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Queue a post processing task for a given order - {PostProcessOrderRequest} Queue a post processing task for a given order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier of the order to post process</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        public OrderFulfillmentState PostProcessOrderRequestScopeIdOrderIdpostProcessPost(string accept, string scopeId, string orderId, PostProcessOrderRequest body = default(PostProcessOrderRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = PostProcessOrderRequestScopeIdOrderIdpostProcessPostWithHttpInfo(accept, scopeId, orderId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Queue a post processing task for a given order - {PostProcessOrderRequest} Queue a post processing task for a given order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier of the order to post process</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> PostProcessOrderRequestScopeIdOrderIdpostProcessPostWithHttpInfo(string accept, string scopeId, string orderId, PostProcessOrderRequest body = default(PostProcessOrderRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->PostProcessOrderRequestScopeIdOrderIdpostProcessPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->PostProcessOrderRequestScopeIdOrderIdpostProcessPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->PostProcessOrderRequestScopeIdOrderIdpostProcessPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/postProcess", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostProcessOrderRequestScopeIdOrderIdpostProcessPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Queue a post processing task for a given order - {PostProcessOrderRequest} Queue a post processing task for a given order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier of the order to post process</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        public async System.Threading.Tasks.Task<OrderFulfillmentState> PostProcessOrderRequestScopeIdOrderIdpostProcessPostAsync(string accept, string scopeId, string orderId, PostProcessOrderRequest body = default(PostProcessOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = await PostProcessOrderRequestScopeIdOrderIdpostProcessPostWithHttpInfoAsync(accept, scopeId, orderId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Queue a post processing task for a given order - {PostProcessOrderRequest} Queue a post processing task for a given order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system identifier of the order to post process</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState>> PostProcessOrderRequestScopeIdOrderIdpostProcessPostWithHttpInfoAsync(string accept, string scopeId, string orderId, PostProcessOrderRequest body = default(PostProcessOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->PostProcessOrderRequestScopeIdOrderIdpostProcessPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->PostProcessOrderRequestScopeIdOrderIdpostProcessPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->PostProcessOrderRequestScopeIdOrderIdpostProcessPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/postProcess", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostProcessOrderRequestScopeIdOrderIdpostProcessPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh the payment of an order - {RefreshPaymentOrderRequest} Refresh the payment of an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        public Order RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPost(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPostWithHttpInfo(accept, scopeId, orderId, paymentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh the payment of an order - {RefreshPaymentOrderRequest} Refresh the payment of an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPostWithHttpInfo(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling OrdersApi->RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Order>("/orders/{ScopeId}/{OrderId}/payments/{PaymentId}/refresh", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh the payment of an order - {RefreshPaymentOrderRequest} Refresh the payment of an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPostAsync(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = await RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPostWithHttpInfoAsync(accept, scopeId, orderId, paymentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh the payment of an order - {RefreshPaymentOrderRequest} Refresh the payment of an order
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order>> RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPostWithHttpInfoAsync(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling OrdersApi->RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Order>("/orders/{ScopeId}/{OrderId}/payments/{PaymentId}/refresh", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshPaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdrefreshPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refund the payment of an order - {RefundPaymentRequest} Refund the payment of an order.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to refund.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        public Order RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPost(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPostWithHttpInfo(accept, scopeId, orderId, paymentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refund the payment of an order - {RefundPaymentRequest} Refund the payment of an order.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to refund.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPostWithHttpInfo(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling OrdersApi->RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Order>("/orders/{ScopeId}/{OrderId}/payments/{PaymentId}/refund", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refund the payment of an order - {RefundPaymentRequest} Refund the payment of an order.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to refund.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPostAsync(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = await RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPostWithHttpInfoAsync(accept, scopeId, orderId, paymentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refund the payment of an order - {RefundPaymentRequest} Refund the payment of an order.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to refund.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order>> RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPostWithHttpInfoAsync(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling OrdersApi->RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Order>("/orders/{ScopeId}/{OrderId}/payments/{PaymentId}/refund", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefundPaymentRequestScopeIdOrderIdpaymentsPaymentIdrefundPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Render a shipment&#39;s template. - {RenderOrderShipmentTemplateRequest} Render a shipment&#39;s template.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The orderId related to the shipment.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="cultureName">The name of the culture (language) to use to render the template.</param>
        /// <param name="templateName">The name of the template to render. (optional)</param>
        /// <param name="contentName">The name of the content to render. (optional)</param>
        /// <returns>RenderOrderShipmentTemplateResponse</returns>
        public RenderOrderShipmentTemplateResponse RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet(string accept, string scopeId, string orderId, string shipmentId, string cultureName, string templateName = default(string), string contentName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RenderOrderShipmentTemplateResponse> localVarResponse = RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGetWithHttpInfo(accept, scopeId, orderId, shipmentId, cultureName, templateName, contentName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Render a shipment&#39;s template. - {RenderOrderShipmentTemplateRequest} Render a shipment&#39;s template.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The orderId related to the shipment.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="cultureName">The name of the culture (language) to use to render the template.</param>
        /// <param name="templateName">The name of the template to render. (optional)</param>
        /// <param name="contentName">The name of the content to render. (optional)</param>
        /// <returns>ApiResponse of RenderOrderShipmentTemplateResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RenderOrderShipmentTemplateResponse> RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGetWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, string cultureName, string templateName = default(string), string contentName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling OrdersApi->RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            if (templateName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "TemplateName", templateName));
            }
            if (contentName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ContentName", contentName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<RenderOrderShipmentTemplateResponse>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/renderTemplate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Render a shipment&#39;s template. - {RenderOrderShipmentTemplateRequest} Render a shipment&#39;s template.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The orderId related to the shipment.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="cultureName">The name of the culture (language) to use to render the template.</param>
        /// <param name="templateName">The name of the template to render. (optional)</param>
        /// <param name="contentName">The name of the content to render. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RenderOrderShipmentTemplateResponse</returns>
        public async System.Threading.Tasks.Task<RenderOrderShipmentTemplateResponse> RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGetAsync(string accept, string scopeId, string orderId, string shipmentId, string cultureName, string templateName = default(string), string contentName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RenderOrderShipmentTemplateResponse> localVarResponse = await RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGetWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, cultureName, templateName, contentName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Render a shipment&#39;s template. - {RenderOrderShipmentTemplateRequest} Render a shipment&#39;s template.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The orderId related to the shipment.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="cultureName">The name of the culture (language) to use to render the template.</param>
        /// <param name="templateName">The name of the template to render. (optional)</param>
        /// <param name="contentName">The name of the content to render. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RenderOrderShipmentTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RenderOrderShipmentTemplateResponse>> RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGetWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, string cultureName, string templateName = default(string), string contentName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling OrdersApi->RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            if (templateName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "TemplateName", templateName));
            }
            if (contentName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ContentName", contentName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RenderOrderShipmentTemplateResponse>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/renderTemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenderOrderShipmentTemplateRequestScopeIdOrderIdshipmentsShipmentIdrenderTemplateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the state of a shipment to failed and halts all further processing - {ReportShipmentFulfillmentFailureRequest} Sets the state of a shipment to failed and halts all further processing. Updates the flag WorkflowInError and IsResumable for a specific shipment fulfillment state. After setting the state of a shipment to failed, the shipment can only be cancelled
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system order identifier.</param>
        /// <param name="shipmentId">The unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        public OrderFulfillmentState ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePost(string accept, string scopeId, string orderId, string shipmentId, ReportShipmentFulfillmentFailureRequest body = default(ReportShipmentFulfillmentFailureRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePostWithHttpInfo(accept, scopeId, orderId, shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the state of a shipment to failed and halts all further processing - {ReportShipmentFulfillmentFailureRequest} Sets the state of a shipment to failed and halts all further processing. Updates the flag WorkflowInError and IsResumable for a specific shipment fulfillment state. After setting the state of a shipment to failed, the shipment can only be cancelled
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system order identifier.</param>
        /// <param name="shipmentId">The unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, ReportShipmentFulfillmentFailureRequest body = default(ReportShipmentFulfillmentFailureRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/state/failure", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the state of a shipment to failed and halts all further processing - {ReportShipmentFulfillmentFailureRequest} Sets the state of a shipment to failed and halts all further processing. Updates the flag WorkflowInError and IsResumable for a specific shipment fulfillment state. After setting the state of a shipment to failed, the shipment can only be cancelled
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system order identifier.</param>
        /// <param name="shipmentId">The unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        public async System.Threading.Tasks.Task<OrderFulfillmentState> ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePostAsync(string accept, string scopeId, string orderId, string shipmentId, ReportShipmentFulfillmentFailureRequest body = default(ReportShipmentFulfillmentFailureRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = await ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePostWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the state of a shipment to failed and halts all further processing - {ReportShipmentFulfillmentFailureRequest} Sets the state of a shipment to failed and halts all further processing. Updates the flag WorkflowInError and IsResumable for a specific shipment fulfillment state. After setting the state of a shipment to failed, the shipment can only be cancelled
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">The unique system order identifier.</param>
        /// <param name="shipmentId">The unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState>> ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, ReportShipmentFulfillmentFailureRequest body = default(ReportShipmentFulfillmentFailureRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/state/failure", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReportShipmentFulfillmentFailureRequestScopeIdOrderIdshipmentsShipmentIdstatefailurePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restart the processing of a fulfillment after a failure - {RestartShipmentFulfillmentProcessingRequest} Restart the processing of a fulfillment after a failure. According to the situation, this request will :- start a new workflow if there is no task id or no execution id for the task of the shipment fulfillment state- replace the task status Faulted by IdleAfterErrorRecovery if the task of the shipment fulfillment state is faulted with a faulted error code- reset the flag WorkflowInError to false and clear execution messages if WorkflowInError &#x3D; true and IsResumble &#x3D; false- reset the flags WorkflowInError and IsResumable to false, clear execution message and resume the bookmark created when the error happened if WorkflowInError &#x3D; true and IsResumble &#x3D; true
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        public OrderFulfillmentState RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPost(string accept, string scopeId, string orderId, string shipmentId, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPostWithHttpInfo(accept, scopeId, orderId, shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restart the processing of a fulfillment after a failure - {RestartShipmentFulfillmentProcessingRequest} Restart the processing of a fulfillment after a failure. According to the situation, this request will :- start a new workflow if there is no task id or no execution id for the task of the shipment fulfillment state- replace the task status Faulted by IdleAfterErrorRecovery if the task of the shipment fulfillment state is faulted with a faulted error code- reset the flag WorkflowInError to false and clear execution messages if WorkflowInError &#x3D; true and IsResumble &#x3D; false- reset the flags WorkflowInError and IsResumable to false, clear execution message and resume the bookmark created when the error happened if WorkflowInError &#x3D; true and IsResumble &#x3D; true
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/fulfillmentState/restartTask", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restart the processing of a fulfillment after a failure - {RestartShipmentFulfillmentProcessingRequest} Restart the processing of a fulfillment after a failure. According to the situation, this request will :- start a new workflow if there is no task id or no execution id for the task of the shipment fulfillment state- replace the task status Faulted by IdleAfterErrorRecovery if the task of the shipment fulfillment state is faulted with a faulted error code- reset the flag WorkflowInError to false and clear execution messages if WorkflowInError &#x3D; true and IsResumble &#x3D; false- reset the flags WorkflowInError and IsResumable to false, clear execution message and resume the bookmark created when the error happened if WorkflowInError &#x3D; true and IsResumble &#x3D; true
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        public async System.Threading.Tasks.Task<OrderFulfillmentState> RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPostAsync(string accept, string scopeId, string orderId, string shipmentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = await RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPostWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restart the processing of a fulfillment after a failure - {RestartShipmentFulfillmentProcessingRequest} Restart the processing of a fulfillment after a failure. According to the situation, this request will :- start a new workflow if there is no task id or no execution id for the task of the shipment fulfillment state- replace the task status Faulted by IdleAfterErrorRecovery if the task of the shipment fulfillment state is faulted with a faulted error code- reset the flag WorkflowInError to false and clear execution messages if WorkflowInError &#x3D; true and IsResumble &#x3D; false- reset the flags WorkflowInError and IsResumable to false, clear execution message and resume the bookmark created when the error happened if WorkflowInError &#x3D; true and IsResumble &#x3D; true
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState>> RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/fulfillmentState/restartTask", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestartShipmentFulfillmentProcessingRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStaterestartTaskPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume the order which was on hold - {ResumeOrderRequest} Update the current status of the shipments and order to set them back to their previous status (before being on hold)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        public OrderFulfillmentState ResumeOrderRequestScopeIdOrderIdresumePost(string accept, string scopeId, string orderId, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = ResumeOrderRequestScopeIdOrderIdresumePostWithHttpInfo(accept, scopeId, orderId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume the order which was on hold - {ResumeOrderRequest} Update the current status of the shipments and order to set them back to their previous status (before being on hold)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> ResumeOrderRequestScopeIdOrderIdresumePostWithHttpInfo(string accept, string scopeId, string orderId, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->ResumeOrderRequestScopeIdOrderIdresumePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->ResumeOrderRequestScopeIdOrderIdresumePost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->ResumeOrderRequestScopeIdOrderIdresumePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/resume", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeOrderRequestScopeIdOrderIdresumePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume the order which was on hold - {ResumeOrderRequest} Update the current status of the shipments and order to set them back to their previous status (before being on hold)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        public async System.Threading.Tasks.Task<OrderFulfillmentState> ResumeOrderRequestScopeIdOrderIdresumePostAsync(string accept, string scopeId, string orderId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = await ResumeOrderRequestScopeIdOrderIdresumePostWithHttpInfoAsync(accept, scopeId, orderId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume the order which was on hold - {ResumeOrderRequest} Update the current status of the shipments and order to set them back to their previous status (before being on hold)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState>> ResumeOrderRequestScopeIdOrderIdresumePostWithHttpInfoAsync(string accept, string scopeId, string orderId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->ResumeOrderRequestScopeIdOrderIdresumePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->ResumeOrderRequestScopeIdOrderIdresumePost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->ResumeOrderRequestScopeIdOrderIdresumePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/resume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeOrderRequestScopeIdOrderIdresumePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Used to update an existing order based on the provided Order. - {SaveOrderRequest} Update an existing order based on the provided Order. This request does not perform validation nor does it process the order using workflows.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">the unique system idenfitifier for the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        public Order SaveOrderRequestScopeIdOrderIdPost(string accept, string scopeId, string orderId, SaveOrderRequest body = default(SaveOrderRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = SaveOrderRequestScopeIdOrderIdPostWithHttpInfo(accept, scopeId, orderId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Used to update an existing order based on the provided Order. - {SaveOrderRequest} Update an existing order based on the provided Order. This request does not perform validation nor does it process the order using workflows.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">the unique system idenfitifier for the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> SaveOrderRequestScopeIdOrderIdPostWithHttpInfo(string accept, string scopeId, string orderId, SaveOrderRequest body = default(SaveOrderRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->SaveOrderRequestScopeIdOrderIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->SaveOrderRequestScopeIdOrderIdPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->SaveOrderRequestScopeIdOrderIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Order>("/orders/{ScopeId}/{OrderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveOrderRequestScopeIdOrderIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Used to update an existing order based on the provided Order. - {SaveOrderRequest} Update an existing order based on the provided Order. This request does not perform validation nor does it process the order using workflows.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">the unique system idenfitifier for the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> SaveOrderRequestScopeIdOrderIdPostAsync(string accept, string scopeId, string orderId, SaveOrderRequest body = default(SaveOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = await SaveOrderRequestScopeIdOrderIdPostWithHttpInfoAsync(accept, scopeId, orderId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Used to update an existing order based on the provided Order. - {SaveOrderRequest} Update an existing order based on the provided Order. This request does not perform validation nor does it process the order using workflows.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">the unique system idenfitifier for the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order>> SaveOrderRequestScopeIdOrderIdPostWithHttpInfoAsync(string accept, string scopeId, string orderId, SaveOrderRequest body = default(SaveOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->SaveOrderRequestScopeIdOrderIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->SaveOrderRequestScopeIdOrderIdPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->SaveOrderRequestScopeIdOrderIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Order>("/orders/{ScopeId}/{OrderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveOrderRequestScopeIdOrderIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentOrderRequest} Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        public Order SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreate(string accept, string scopeId, string orderId, string shipmentId, SetAdjustmentOrderRequest body = default(SetAdjustmentOrderRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreateWithHttpInfo(accept, scopeId, orderId, shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentOrderRequest} Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreateWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, SetAdjustmentOrderRequest body = default(SetAdjustmentOrderRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Order>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/adjustment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentOrderRequest} Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreateAsync(string accept, string scopeId, string orderId, string shipmentId, SetAdjustmentOrderRequest body = default(SetAdjustmentOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = await SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreateWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentOrderRequest} Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order>> SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreateWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, SetAdjustmentOrderRequest body = default(SetAdjustmentOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Order>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/adjustment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAdjustmentOrderRequestScopeIdOrderIdshipmentsShipmentIdadjustmentCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Settle the payment of an order - {SettlePaymentOrderRequest} Settle the payment of an order - The payment has to be authorized to be able to settle it.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        public Order SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePost(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePostWithHttpInfo(accept, scopeId, orderId, paymentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Settle the payment of an order - {SettlePaymentOrderRequest} Settle the payment of an order - The payment has to be authorized to be able to settle it.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePostWithHttpInfo(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling OrdersApi->SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Order>("/orders/{ScopeId}/{OrderId}/payments/{PaymentId}/settle", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Settle the payment of an order - {SettlePaymentOrderRequest} Settle the payment of an order - The payment has to be authorized to be able to settle it.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePostAsync(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = await SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePostWithHttpInfoAsync(accept, scopeId, orderId, paymentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Settle the payment of an order - {SettlePaymentOrderRequest} Settle the payment of an order - The payment has to be authorized to be able to settle it.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order>> SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePostWithHttpInfoAsync(string accept, string scopeId, string orderId, string paymentId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling OrdersApi->SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Order>("/orders/{ScopeId}/{OrderId}/payments/{PaymentId}/settle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SettlePaymentOrderRequestScopeIdOrderIdpaymentsPaymentIdsettlePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Splits a shipment and queues post processing on the new shipment - {ShipmentSplitRequest} Splits a shipment and queues post processing on the new shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        public Order ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreate(string accept, string scopeId, string orderId, string shipmentId, ShipmentSplitRequest body = default(ShipmentSplitRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreateWithHttpInfo(accept, scopeId, orderId, shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Splits a shipment and queues post processing on the new shipment - {ShipmentSplitRequest} Splits a shipment and queues post processing on the new shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreateWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, ShipmentSplitRequest body = default(ShipmentSplitRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreate");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Order>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/split", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Splits a shipment and queues post processing on the new shipment - {ShipmentSplitRequest} Splits a shipment and queues post processing on the new shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreateAsync(string accept, string scopeId, string orderId, string shipmentId, ShipmentSplitRequest body = default(ShipmentSplitRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = await ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreateWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Splits a shipment and queues post processing on the new shipment - {ShipmentSplitRequest} Splits a shipment and queues post processing on the new shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order>> ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreateWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, ShipmentSplitRequest body = default(ShipmentSplitRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreate");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Order>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/split", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentSplitRequestScopeIdOrderIdshipmentsShipmentIdsplitCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the workflow of a fulfillment from the beginning - {StartNewShipmentFulfillmentWorkflowRequest} Start the workflow of a fulfillment from the beginning. The workflow to use can be specified, if not, the workflow that normally applies is used.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        public OrderFulfillmentState StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPost(string accept, string scopeId, string orderId, string shipmentId, StartNewShipmentFulfillmentWorkflowRequest body = default(StartNewShipmentFulfillmentWorkflowRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPostWithHttpInfo(accept, scopeId, orderId, shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start the workflow of a fulfillment from the beginning - {StartNewShipmentFulfillmentWorkflowRequest} Start the workflow of a fulfillment from the beginning. The workflow to use can be specified, if not, the workflow that normally applies is used.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPostWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, StartNewShipmentFulfillmentWorkflowRequest body = default(StartNewShipmentFulfillmentWorkflowRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/fulfillmentState/startNewWorkflow", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the workflow of a fulfillment from the beginning - {StartNewShipmentFulfillmentWorkflowRequest} Start the workflow of a fulfillment from the beginning. The workflow to use can be specified, if not, the workflow that normally applies is used.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        public async System.Threading.Tasks.Task<OrderFulfillmentState> StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPostAsync(string accept, string scopeId, string orderId, string shipmentId, StartNewShipmentFulfillmentWorkflowRequest body = default(StartNewShipmentFulfillmentWorkflowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = await StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPostWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start the workflow of a fulfillment from the beginning - {StartNewShipmentFulfillmentWorkflowRequest} Start the workflow of a fulfillment from the beginning. The workflow to use can be specified, if not, the workflow that normally applies is used.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState>> StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPostWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, StartNewShipmentFulfillmentWorkflowRequest body = default(StartNewShipmentFulfillmentWorkflowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPost");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/fulfillmentState/startNewWorkflow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartNewShipmentFulfillmentWorkflowRequestScopeIdOrderIdshipmentsShipmentIdfulfillmentStatestartNewWorkflowPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update RMA and items - {UpdateRmaRequest} Update an RMA status or the item details
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope Id</param>
        /// <param name="orderNumber">the Order Number related to the RMA</param>
        /// <param name="rmaNumber">the RMA Number</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RmaRequestResult</returns>
        public RmaRequestResult UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreate(string accept, string scopeId, string orderNumber, string rmaNumber, UpdateRmaRequest body = default(UpdateRmaRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaRequestResult> localVarResponse = UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreateWithHttpInfo(accept, scopeId, orderNumber, rmaNumber, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update RMA and items - {UpdateRmaRequest} Update an RMA status or the item details
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope Id</param>
        /// <param name="orderNumber">the Order Number related to the RMA</param>
        /// <param name="rmaNumber">the RMA Number</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RmaRequestResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaRequestResult> UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreateWithHttpInfo(string accept, string scopeId, string orderNumber, string rmaNumber, UpdateRmaRequest body = default(UpdateRmaRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreate");

            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreate");

            // verify the required parameter 'rmaNumber' is set
            if (rmaNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'rmaNumber' when calling OrdersApi->UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("RmaNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(rmaNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<RmaRequestResult>("/orders/RMA/{ScopeId}/{OrderNumber}/{RmaNumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update RMA and items - {UpdateRmaRequest} Update an RMA status or the item details
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope Id</param>
        /// <param name="orderNumber">the Order Number related to the RMA</param>
        /// <param name="rmaNumber">the RMA Number</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaRequestResult</returns>
        public async System.Threading.Tasks.Task<RmaRequestResult> UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreateAsync(string accept, string scopeId, string orderNumber, string rmaNumber, UpdateRmaRequest body = default(UpdateRmaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaRequestResult> localVarResponse = await UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreateWithHttpInfoAsync(accept, scopeId, orderNumber, rmaNumber, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update RMA and items - {UpdateRmaRequest} Update an RMA status or the item details
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope Id</param>
        /// <param name="orderNumber">the Order Number related to the RMA</param>
        /// <param name="rmaNumber">the RMA Number</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaRequestResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RmaRequestResult>> UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreateWithHttpInfoAsync(string accept, string scopeId, string orderNumber, string rmaNumber, UpdateRmaRequest body = default(UpdateRmaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreate");

            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreate");

            // verify the required parameter 'rmaNumber' is set
            if (rmaNumber == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'rmaNumber' when calling OrdersApi->UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("RmaNumber", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(rmaNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<RmaRequestResult>("/orders/RMA/{ScopeId}/{OrderNumber}/{RmaNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRmaRequestRMAScopeIdOrderNumberRmaNumberCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a shipment document. - {UpdateShipmentDocumentRequest} Update a shipment document.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ShipmentDocument</returns>
        public ShipmentDocument UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate(string accept, string scopeId, string orderId, string shipmentId, string name, UpdateShipmentDocumentRequest body = default(UpdateShipmentDocumentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument> localVarResponse = UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreateWithHttpInfo(accept, scopeId, orderId, shipmentId, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a shipment document. - {UpdateShipmentDocumentRequest} Update a shipment document.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ShipmentDocument</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument> UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreateWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, string name, UpdateShipmentDocumentRequest body = default(UpdateShipmentDocumentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling OrdersApi->UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ShipmentDocument>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/documents/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a shipment document. - {UpdateShipmentDocumentRequest} Update a shipment document.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDocument</returns>
        public async System.Threading.Tasks.Task<ShipmentDocument> UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreateAsync(string accept, string scopeId, string orderId, string shipmentId, string name, UpdateShipmentDocumentRequest body = default(UpdateShipmentDocumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument> localVarResponse = await UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreateWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a shipment document. - {UpdateShipmentDocumentRequest} Update a shipment document.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="orderId">The order id.</param>
        /// <param name="shipmentId">The shipment id.</param>
        /// <param name="name">The name of the document.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDocument)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentDocument>> UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreateWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, string name, UpdateShipmentDocumentRequest body = default(UpdateShipmentDocumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling OrdersApi->UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ShipmentDocument>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/documents/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShipmentDocumentRequestScopeIdOrderIdshipmentsShipmentIddocumentsNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the current state of a shipment - {UpdateShipmentFulfillmentStateRequest} This is for internal use only. Update the current state of a shipment. If order fulfillment is enabled and the update is not valid or the fulfillment does not transition, the request will fail.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        public OrderFulfillmentState UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreate(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentStateRequest body = default(UpdateShipmentFulfillmentStateRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreateWithHttpInfo(accept, scopeId, orderId, shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the current state of a shipment - {UpdateShipmentFulfillmentStateRequest} This is for internal use only. Update the current state of a shipment. If order fulfillment is enabled and the update is not valid or the fulfillment does not transition, the request will fail.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreateWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentStateRequest body = default(UpdateShipmentFulfillmentStateRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreate");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the current state of a shipment - {UpdateShipmentFulfillmentStateRequest} This is for internal use only. Update the current state of a shipment. If order fulfillment is enabled and the update is not valid or the fulfillment does not transition, the request will fail.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        public async System.Threading.Tasks.Task<OrderFulfillmentState> UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreateAsync(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentStateRequest body = default(UpdateShipmentFulfillmentStateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = await UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreateWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the current state of a shipment - {UpdateShipmentFulfillmentStateRequest} This is for internal use only. Update the current state of a shipment. If order fulfillment is enabled and the update is not valid or the fulfillment does not transition, the request will fail.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState>> UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreateWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentStateRequest body = default(UpdateShipmentFulfillmentStateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreate");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShipmentFulfillmentStateRequestScopeIdOrderIdshipmentsShipmentIdstateCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the path of the fulfillment workflow of a shipment. - {UpdateShipmentFulfillmentWorkflowXamlPathRequest} Update the path of the fulfillment workflow of a shipment. This is the path from App_Config folder, example of value : App_data\\Workflows\\Orders\\Canada\\FulfillmentWorkflow.xaml
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderFulfillmentState</returns>
        public OrderFulfillmentState UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreate(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentWorkflowXamlPathRequest body = default(UpdateShipmentFulfillmentWorkflowXamlPathRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreateWithHttpInfo(accept, scopeId, orderId, shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the path of the fulfillment workflow of a shipment. - {UpdateShipmentFulfillmentWorkflowXamlPathRequest} Update the path of the fulfillment workflow of a shipment. This is the path from App_Config folder, example of value : App_data\\Workflows\\Orders\\Canada\\FulfillmentWorkflow.xaml
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderFulfillmentState</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreateWithHttpInfo(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentWorkflowXamlPathRequest body = default(UpdateShipmentFulfillmentWorkflowXamlPathRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreate");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/WorkflowXamlPath", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the path of the fulfillment workflow of a shipment. - {UpdateShipmentFulfillmentWorkflowXamlPathRequest} Update the path of the fulfillment workflow of a shipment. This is the path from App_Config folder, example of value : App_data\\Workflows\\Orders\\Canada\\FulfillmentWorkflow.xaml
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentState</returns>
        public async System.Threading.Tasks.Task<OrderFulfillmentState> UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreateAsync(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentWorkflowXamlPathRequest body = default(UpdateShipmentFulfillmentWorkflowXamlPathRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState> localVarResponse = await UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreateWithHttpInfoAsync(accept, scopeId, orderId, shipmentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the path of the fulfillment workflow of a shipment. - {UpdateShipmentFulfillmentWorkflowXamlPathRequest} Update the path of the fulfillment workflow of a shipment. This is the path from App_Config folder, example of value : App_data\\Workflows\\Orders\\Canada\\FulfillmentWorkflow.xaml
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the sales or dependant scope in which the order is processed</param>
        /// <param name="orderId">the unique system order identifier.</param>
        /// <param name="shipmentId">the unique system shipment identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentState)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderFulfillmentState>> UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreateWithHttpInfoAsync(string accept, string scopeId, string orderId, string shipmentId, UpdateShipmentFulfillmentWorkflowXamlPathRequest body = default(UpdateShipmentFulfillmentWorkflowXamlPathRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrdersApi->UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrdersApi->UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreate");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrdersApi->UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<OrderFulfillmentState>("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/WorkflowXamlPath", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShipmentFulfillmentWorkflowXamlPathRequestScopeIdOrderIdshipmentsShipmentIdWorkflowXamlPathCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
