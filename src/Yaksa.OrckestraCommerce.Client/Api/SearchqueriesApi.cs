/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchqueriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a Search Query. - {CreateSearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Creates a Search Query.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchQuery</returns>
        SearchQuery CreateSearchQueryRequestScopeIdQueryTypeNamePost(string accept, string scopeId, string queryType, string name, CreateSearchQueryRequest body = default(CreateSearchQueryRequest));

        /// <summary>
        /// Creates a Search Query. - {CreateSearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Creates a Search Query.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchQuery</returns>
        ApiResponse<SearchQuery> CreateSearchQueryRequestScopeIdQueryTypeNamePostWithHttpInfo(string accept, string scopeId, string queryType, string name, CreateSearchQueryRequest body = default(CreateSearchQueryRequest));
        /// <summary>
        /// Deletes a search query based on its Scope, its type and its name. - {DeleteSearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a search query based on its Scope, its type and its name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <returns></returns>
        void DeleteSearchQueryRequestScopeIdQueryTypeNameDelete(string accept, string scopeId, string queryType, string name);

        /// <summary>
        /// Deletes a search query based on its Scope, its type and its name. - {DeleteSearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a search query based on its Scope, its type and its name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSearchQueryRequestScopeIdQueryTypeNameDeleteWithHttpInfo(string accept, string scopeId, string queryType, string name);
        /// <summary>
        /// Finds search queries based on the Scope and the specified filters. - {FindSearchQueriesRequest}
        /// </summary>
        /// <remarks>
        /// Finds search queries based on the Scope and the specified filters.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindSearchQueriesResult</returns>
        FindSearchQueriesResult FindSearchQueriesRequestScopeIdfindPost(string accept, string scopeId, FindSearchQueriesRequest body = default(FindSearchQueriesRequest));

        /// <summary>
        /// Finds search queries based on the Scope and the specified filters. - {FindSearchQueriesRequest}
        /// </summary>
        /// <remarks>
        /// Finds search queries based on the Scope and the specified filters.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindSearchQueriesResult</returns>
        ApiResponse<FindSearchQueriesResult> FindSearchQueriesRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindSearchQueriesRequest body = default(FindSearchQueriesRequest));
        /// <summary>
        /// Gets a search query based on its Scope, its type and its name. - {GetSearchQueryByNameRequest}
        /// </summary>
        /// <remarks>
        /// Gets a search query based on its Scope, its type and its name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="useScopeStrictMode">Indicates whether the system should use a strict mode (allow only Sales Scope), or should search for a parent Sales Scope (optional)</param>
        /// <returns>SearchQuery</returns>
        SearchQuery GetSearchQueryByNameRequestScopeIdQueryTypeNameGet(string accept, string scopeId, string queryType, string name, bool? useScopeStrictMode = default(bool?));

        /// <summary>
        /// Gets a search query based on its Scope, its type and its name. - {GetSearchQueryByNameRequest}
        /// </summary>
        /// <remarks>
        /// Gets a search query based on its Scope, its type and its name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="useScopeStrictMode">Indicates whether the system should use a strict mode (allow only Sales Scope), or should search for a parent Sales Scope (optional)</param>
        /// <returns>ApiResponse of SearchQuery</returns>
        ApiResponse<SearchQuery> GetSearchQueryByNameRequestScopeIdQueryTypeNameGetWithHttpInfo(string accept, string scopeId, string queryType, string name, bool? useScopeStrictMode = default(bool?));
        /// <summary>
        /// Updates a Search Query. - {UpdateSearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Updates a Search Query.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchQuery</returns>
        SearchQuery UpdateSearchQueryRequestScopeIdQueryTypeNameCreate(string accept, string scopeId, string queryType, string name, UpdateSearchQueryRequest body = default(UpdateSearchQueryRequest));

        /// <summary>
        /// Updates a Search Query. - {UpdateSearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Updates a Search Query.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchQuery</returns>
        ApiResponse<SearchQuery> UpdateSearchQueryRequestScopeIdQueryTypeNameCreateWithHttpInfo(string accept, string scopeId, string queryType, string name, UpdateSearchQueryRequest body = default(UpdateSearchQueryRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchqueriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a Search Query. - {CreateSearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Creates a Search Query.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchQuery</returns>
        System.Threading.Tasks.Task<SearchQuery> CreateSearchQueryRequestScopeIdQueryTypeNamePostAsync(string accept, string scopeId, string queryType, string name, CreateSearchQueryRequest body = default(CreateSearchQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a Search Query. - {CreateSearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Creates a Search Query.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchQuery)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchQuery>> CreateSearchQueryRequestScopeIdQueryTypeNamePostWithHttpInfoAsync(string accept, string scopeId, string queryType, string name, CreateSearchQueryRequest body = default(CreateSearchQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a search query based on its Scope, its type and its name. - {DeleteSearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a search query based on its Scope, its type and its name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSearchQueryRequestScopeIdQueryTypeNameDeleteAsync(string accept, string scopeId, string queryType, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a search query based on its Scope, its type and its name. - {DeleteSearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a search query based on its Scope, its type and its name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSearchQueryRequestScopeIdQueryTypeNameDeleteWithHttpInfoAsync(string accept, string scopeId, string queryType, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Finds search queries based on the Scope and the specified filters. - {FindSearchQueriesRequest}
        /// </summary>
        /// <remarks>
        /// Finds search queries based on the Scope and the specified filters.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindSearchQueriesResult</returns>
        System.Threading.Tasks.Task<FindSearchQueriesResult> FindSearchQueriesRequestScopeIdfindPostAsync(string accept, string scopeId, FindSearchQueriesRequest body = default(FindSearchQueriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Finds search queries based on the Scope and the specified filters. - {FindSearchQueriesRequest}
        /// </summary>
        /// <remarks>
        /// Finds search queries based on the Scope and the specified filters.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindSearchQueriesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindSearchQueriesResult>> FindSearchQueriesRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindSearchQueriesRequest body = default(FindSearchQueriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a search query based on its Scope, its type and its name. - {GetSearchQueryByNameRequest}
        /// </summary>
        /// <remarks>
        /// Gets a search query based on its Scope, its type and its name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="useScopeStrictMode">Indicates whether the system should use a strict mode (allow only Sales Scope), or should search for a parent Sales Scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchQuery</returns>
        System.Threading.Tasks.Task<SearchQuery> GetSearchQueryByNameRequestScopeIdQueryTypeNameGetAsync(string accept, string scopeId, string queryType, string name, bool? useScopeStrictMode = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a search query based on its Scope, its type and its name. - {GetSearchQueryByNameRequest}
        /// </summary>
        /// <remarks>
        /// Gets a search query based on its Scope, its type and its name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="useScopeStrictMode">Indicates whether the system should use a strict mode (allow only Sales Scope), or should search for a parent Sales Scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchQuery)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchQuery>> GetSearchQueryByNameRequestScopeIdQueryTypeNameGetWithHttpInfoAsync(string accept, string scopeId, string queryType, string name, bool? useScopeStrictMode = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a Search Query. - {UpdateSearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Updates a Search Query.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchQuery</returns>
        System.Threading.Tasks.Task<SearchQuery> UpdateSearchQueryRequestScopeIdQueryTypeNameCreateAsync(string accept, string scopeId, string queryType, string name, UpdateSearchQueryRequest body = default(UpdateSearchQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a Search Query. - {UpdateSearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Updates a Search Query.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchQuery)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchQuery>> UpdateSearchQueryRequestScopeIdQueryTypeNameCreateWithHttpInfoAsync(string accept, string scopeId, string queryType, string name, UpdateSearchQueryRequest body = default(UpdateSearchQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchqueriesApi : ISearchqueriesApiSync, ISearchqueriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchqueriesApi : ISearchqueriesApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchqueriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchqueriesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchqueriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchqueriesApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchqueriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchqueriesApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchqueriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SearchqueriesApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a Search Query. - {CreateSearchQueryRequest} Creates a Search Query.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchQuery</returns>
        public SearchQuery CreateSearchQueryRequestScopeIdQueryTypeNamePost(string accept, string scopeId, string queryType, string name, CreateSearchQueryRequest body = default(CreateSearchQueryRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQuery> localVarResponse = CreateSearchQueryRequestScopeIdQueryTypeNamePostWithHttpInfo(accept, scopeId, queryType, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Search Query. - {CreateSearchQueryRequest} Creates a Search Query.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchQuery</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQuery> CreateSearchQueryRequestScopeIdQueryTypeNamePostWithHttpInfo(string accept, string scopeId, string queryType, string name, CreateSearchQueryRequest body = default(CreateSearchQueryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchqueriesApi->CreateSearchQueryRequestScopeIdQueryTypeNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchqueriesApi->CreateSearchQueryRequestScopeIdQueryTypeNamePost");

            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryType' when calling SearchqueriesApi->CreateSearchQueryRequestScopeIdQueryTypeNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling SearchqueriesApi->CreateSearchQueryRequestScopeIdQueryTypeNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryType)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchQuery>("/searchqueries/{ScopeId}/{QueryType}/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSearchQueryRequestScopeIdQueryTypeNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a Search Query. - {CreateSearchQueryRequest} Creates a Search Query.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchQuery</returns>
        public async System.Threading.Tasks.Task<SearchQuery> CreateSearchQueryRequestScopeIdQueryTypeNamePostAsync(string accept, string scopeId, string queryType, string name, CreateSearchQueryRequest body = default(CreateSearchQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQuery> localVarResponse = await CreateSearchQueryRequestScopeIdQueryTypeNamePostWithHttpInfoAsync(accept, scopeId, queryType, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Search Query. - {CreateSearchQueryRequest} Creates a Search Query.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchQuery)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQuery>> CreateSearchQueryRequestScopeIdQueryTypeNamePostWithHttpInfoAsync(string accept, string scopeId, string queryType, string name, CreateSearchQueryRequest body = default(CreateSearchQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchqueriesApi->CreateSearchQueryRequestScopeIdQueryTypeNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchqueriesApi->CreateSearchQueryRequestScopeIdQueryTypeNamePost");

            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryType' when calling SearchqueriesApi->CreateSearchQueryRequestScopeIdQueryTypeNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling SearchqueriesApi->CreateSearchQueryRequestScopeIdQueryTypeNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryType)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchQuery>("/searchqueries/{ScopeId}/{QueryType}/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSearchQueryRequestScopeIdQueryTypeNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a search query based on its Scope, its type and its name. - {DeleteSearchQueryRequest} Deletes a search query based on its Scope, its type and its name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <returns></returns>
        public void DeleteSearchQueryRequestScopeIdQueryTypeNameDelete(string accept, string scopeId, string queryType, string name)
        {
            DeleteSearchQueryRequestScopeIdQueryTypeNameDeleteWithHttpInfo(accept, scopeId, queryType, name);
        }

        /// <summary>
        /// Deletes a search query based on its Scope, its type and its name. - {DeleteSearchQueryRequest} Deletes a search query based on its Scope, its type and its name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteSearchQueryRequestScopeIdQueryTypeNameDeleteWithHttpInfo(string accept, string scopeId, string queryType, string name)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchqueriesApi->DeleteSearchQueryRequestScopeIdQueryTypeNameDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchqueriesApi->DeleteSearchQueryRequestScopeIdQueryTypeNameDelete");

            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryType' when calling SearchqueriesApi->DeleteSearchQueryRequestScopeIdQueryTypeNameDelete");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling SearchqueriesApi->DeleteSearchQueryRequestScopeIdQueryTypeNameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryType)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/searchqueries/{ScopeId}/{QueryType}/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSearchQueryRequestScopeIdQueryTypeNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a search query based on its Scope, its type and its name. - {DeleteSearchQueryRequest} Deletes a search query based on its Scope, its type and its name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSearchQueryRequestScopeIdQueryTypeNameDeleteAsync(string accept, string scopeId, string queryType, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSearchQueryRequestScopeIdQueryTypeNameDeleteWithHttpInfoAsync(accept, scopeId, queryType, name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a search query based on its Scope, its type and its name. - {DeleteSearchQueryRequest} Deletes a search query based on its Scope, its type and its name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteSearchQueryRequestScopeIdQueryTypeNameDeleteWithHttpInfoAsync(string accept, string scopeId, string queryType, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchqueriesApi->DeleteSearchQueryRequestScopeIdQueryTypeNameDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchqueriesApi->DeleteSearchQueryRequestScopeIdQueryTypeNameDelete");

            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryType' when calling SearchqueriesApi->DeleteSearchQueryRequestScopeIdQueryTypeNameDelete");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling SearchqueriesApi->DeleteSearchQueryRequestScopeIdQueryTypeNameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryType)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/searchqueries/{ScopeId}/{QueryType}/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSearchQueryRequestScopeIdQueryTypeNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finds search queries based on the Scope and the specified filters. - {FindSearchQueriesRequest} Finds search queries based on the Scope and the specified filters.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindSearchQueriesResult</returns>
        public FindSearchQueriesResult FindSearchQueriesRequestScopeIdfindPost(string accept, string scopeId, FindSearchQueriesRequest body = default(FindSearchQueriesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindSearchQueriesResult> localVarResponse = FindSearchQueriesRequestScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finds search queries based on the Scope and the specified filters. - {FindSearchQueriesRequest} Finds search queries based on the Scope and the specified filters.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindSearchQueriesResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindSearchQueriesResult> FindSearchQueriesRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindSearchQueriesRequest body = default(FindSearchQueriesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchqueriesApi->FindSearchQueriesRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchqueriesApi->FindSearchQueriesRequestScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindSearchQueriesResult>("/searchqueries/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSearchQueriesRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finds search queries based on the Scope and the specified filters. - {FindSearchQueriesRequest} Finds search queries based on the Scope and the specified filters.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindSearchQueriesResult</returns>
        public async System.Threading.Tasks.Task<FindSearchQueriesResult> FindSearchQueriesRequestScopeIdfindPostAsync(string accept, string scopeId, FindSearchQueriesRequest body = default(FindSearchQueriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindSearchQueriesResult> localVarResponse = await FindSearchQueriesRequestScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finds search queries based on the Scope and the specified filters. - {FindSearchQueriesRequest} Finds search queries based on the Scope and the specified filters.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindSearchQueriesResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindSearchQueriesResult>> FindSearchQueriesRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindSearchQueriesRequest body = default(FindSearchQueriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchqueriesApi->FindSearchQueriesRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchqueriesApi->FindSearchQueriesRequestScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FindSearchQueriesResult>("/searchqueries/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSearchQueriesRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a search query based on its Scope, its type and its name. - {GetSearchQueryByNameRequest} Gets a search query based on its Scope, its type and its name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="useScopeStrictMode">Indicates whether the system should use a strict mode (allow only Sales Scope), or should search for a parent Sales Scope (optional)</param>
        /// <returns>SearchQuery</returns>
        public SearchQuery GetSearchQueryByNameRequestScopeIdQueryTypeNameGet(string accept, string scopeId, string queryType, string name, bool? useScopeStrictMode = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQuery> localVarResponse = GetSearchQueryByNameRequestScopeIdQueryTypeNameGetWithHttpInfo(accept, scopeId, queryType, name, useScopeStrictMode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a search query based on its Scope, its type and its name. - {GetSearchQueryByNameRequest} Gets a search query based on its Scope, its type and its name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="useScopeStrictMode">Indicates whether the system should use a strict mode (allow only Sales Scope), or should search for a parent Sales Scope (optional)</param>
        /// <returns>ApiResponse of SearchQuery</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQuery> GetSearchQueryByNameRequestScopeIdQueryTypeNameGetWithHttpInfo(string accept, string scopeId, string queryType, string name, bool? useScopeStrictMode = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchqueriesApi->GetSearchQueryByNameRequestScopeIdQueryTypeNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchqueriesApi->GetSearchQueryByNameRequestScopeIdQueryTypeNameGet");

            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryType' when calling SearchqueriesApi->GetSearchQueryByNameRequestScopeIdQueryTypeNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling SearchqueriesApi->GetSearchQueryByNameRequestScopeIdQueryTypeNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryType)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (useScopeStrictMode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "UseScopeStrictMode", useScopeStrictMode));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchQuery>("/searchqueries/{ScopeId}/{QueryType}/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSearchQueryByNameRequestScopeIdQueryTypeNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a search query based on its Scope, its type and its name. - {GetSearchQueryByNameRequest} Gets a search query based on its Scope, its type and its name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="useScopeStrictMode">Indicates whether the system should use a strict mode (allow only Sales Scope), or should search for a parent Sales Scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchQuery</returns>
        public async System.Threading.Tasks.Task<SearchQuery> GetSearchQueryByNameRequestScopeIdQueryTypeNameGetAsync(string accept, string scopeId, string queryType, string name, bool? useScopeStrictMode = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQuery> localVarResponse = await GetSearchQueryByNameRequestScopeIdQueryTypeNameGetWithHttpInfoAsync(accept, scopeId, queryType, name, useScopeStrictMode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a search query based on its Scope, its type and its name. - {GetSearchQueryByNameRequest} Gets a search query based on its Scope, its type and its name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="useScopeStrictMode">Indicates whether the system should use a strict mode (allow only Sales Scope), or should search for a parent Sales Scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchQuery)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQuery>> GetSearchQueryByNameRequestScopeIdQueryTypeNameGetWithHttpInfoAsync(string accept, string scopeId, string queryType, string name, bool? useScopeStrictMode = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchqueriesApi->GetSearchQueryByNameRequestScopeIdQueryTypeNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchqueriesApi->GetSearchQueryByNameRequestScopeIdQueryTypeNameGet");

            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryType' when calling SearchqueriesApi->GetSearchQueryByNameRequestScopeIdQueryTypeNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling SearchqueriesApi->GetSearchQueryByNameRequestScopeIdQueryTypeNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryType)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (useScopeStrictMode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "UseScopeStrictMode", useScopeStrictMode));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchQuery>("/searchqueries/{ScopeId}/{QueryType}/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSearchQueryByNameRequestScopeIdQueryTypeNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a Search Query. - {UpdateSearchQueryRequest} Updates a Search Query.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchQuery</returns>
        public SearchQuery UpdateSearchQueryRequestScopeIdQueryTypeNameCreate(string accept, string scopeId, string queryType, string name, UpdateSearchQueryRequest body = default(UpdateSearchQueryRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQuery> localVarResponse = UpdateSearchQueryRequestScopeIdQueryTypeNameCreateWithHttpInfo(accept, scopeId, queryType, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Search Query. - {UpdateSearchQueryRequest} Updates a Search Query.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchQuery</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQuery> UpdateSearchQueryRequestScopeIdQueryTypeNameCreateWithHttpInfo(string accept, string scopeId, string queryType, string name, UpdateSearchQueryRequest body = default(UpdateSearchQueryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchqueriesApi->UpdateSearchQueryRequestScopeIdQueryTypeNameCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchqueriesApi->UpdateSearchQueryRequestScopeIdQueryTypeNameCreate");

            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryType' when calling SearchqueriesApi->UpdateSearchQueryRequestScopeIdQueryTypeNameCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling SearchqueriesApi->UpdateSearchQueryRequestScopeIdQueryTypeNameCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryType)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<SearchQuery>("/searchqueries/{ScopeId}/{QueryType}/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSearchQueryRequestScopeIdQueryTypeNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a Search Query. - {UpdateSearchQueryRequest} Updates a Search Query.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchQuery</returns>
        public async System.Threading.Tasks.Task<SearchQuery> UpdateSearchQueryRequestScopeIdQueryTypeNameCreateAsync(string accept, string scopeId, string queryType, string name, UpdateSearchQueryRequest body = default(UpdateSearchQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQuery> localVarResponse = await UpdateSearchQueryRequestScopeIdQueryTypeNameCreateWithHttpInfoAsync(accept, scopeId, queryType, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Search Query. - {UpdateSearchQueryRequest} Updates a Search Query.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="name">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchQuery)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQuery>> UpdateSearchQueryRequestScopeIdQueryTypeNameCreateWithHttpInfoAsync(string accept, string scopeId, string queryType, string name, UpdateSearchQueryRequest body = default(UpdateSearchQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchqueriesApi->UpdateSearchQueryRequestScopeIdQueryTypeNameCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchqueriesApi->UpdateSearchQueryRequestScopeIdQueryTypeNameCreate");

            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryType' when calling SearchqueriesApi->UpdateSearchQueryRequestScopeIdQueryTypeNameCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling SearchqueriesApi->UpdateSearchQueryRequestScopeIdQueryTypeNameCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryType)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SearchQuery>("/searchqueries/{ScopeId}/{QueryType}/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSearchQueryRequestScopeIdQueryTypeNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
