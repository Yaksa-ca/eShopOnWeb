/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryQuantitiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve inventory quantities for the specified inventory location id - {GetInventoryQuantitiesByLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve inventory quantities for the specified inventory location id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="skip">The number of results to skip (optional)</param>
        /// <param name="take">The number of results to return (optional)</param>
        /// <param name="excludeItemsWithQuantityEqualToZero">Wheather or not inventory items having a quantity equal to zero should be excluded from the result (optional)</param>
        /// <returns>InventoryQuantityResult</returns>
        InventoryQuantityResult GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGet(string accept, string scopeId, string inventoryLocationId, int? skip = default(int?), int? take = default(int?), bool? excludeItemsWithQuantityEqualToZero = default(bool?));

        /// <summary>
        /// Retrieve inventory quantities for the specified inventory location id - {GetInventoryQuantitiesByLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve inventory quantities for the specified inventory location id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="skip">The number of results to skip (optional)</param>
        /// <param name="take">The number of results to return (optional)</param>
        /// <param name="excludeItemsWithQuantityEqualToZero">Wheather or not inventory items having a quantity equal to zero should be excluded from the result (optional)</param>
        /// <returns>ApiResponse of InventoryQuantityResult</returns>
        ApiResponse<InventoryQuantityResult> GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGetWithHttpInfo(string accept, string scopeId, string inventoryLocationId, int? skip = default(int?), int? take = default(int?), bool? excludeItemsWithQuantityEqualToZero = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryQuantitiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve inventory quantities for the specified inventory location id - {GetInventoryQuantitiesByLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve inventory quantities for the specified inventory location id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="skip">The number of results to skip (optional)</param>
        /// <param name="take">The number of results to return (optional)</param>
        /// <param name="excludeItemsWithQuantityEqualToZero">Wheather or not inventory items having a quantity equal to zero should be excluded from the result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryQuantityResult</returns>
        System.Threading.Tasks.Task<InventoryQuantityResult> GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGetAsync(string accept, string scopeId, string inventoryLocationId, int? skip = default(int?), int? take = default(int?), bool? excludeItemsWithQuantityEqualToZero = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve inventory quantities for the specified inventory location id - {GetInventoryQuantitiesByLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve inventory quantities for the specified inventory location id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="skip">The number of results to skip (optional)</param>
        /// <param name="take">The number of results to return (optional)</param>
        /// <param name="excludeItemsWithQuantityEqualToZero">Wheather or not inventory items having a quantity equal to zero should be excluded from the result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryQuantityResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryQuantityResult>> GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string inventoryLocationId, int? skip = default(int?), int? take = default(int?), bool? excludeItemsWithQuantityEqualToZero = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryQuantitiesApi : IInventoryQuantitiesApiSync, IInventoryQuantitiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InventoryQuantitiesApi : IInventoryQuantitiesApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryQuantitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InventoryQuantitiesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryQuantitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InventoryQuantitiesApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryQuantitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InventoryQuantitiesApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryQuantitiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InventoryQuantitiesApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve inventory quantities for the specified inventory location id - {GetInventoryQuantitiesByLocationRequest} Retrieve inventory quantities for the specified inventory location id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="skip">The number of results to skip (optional)</param>
        /// <param name="take">The number of results to return (optional)</param>
        /// <param name="excludeItemsWithQuantityEqualToZero">Wheather or not inventory items having a quantity equal to zero should be excluded from the result (optional)</param>
        /// <returns>InventoryQuantityResult</returns>
        public InventoryQuantityResult GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGet(string accept, string scopeId, string inventoryLocationId, int? skip = default(int?), int? take = default(int?), bool? excludeItemsWithQuantityEqualToZero = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryQuantityResult> localVarResponse = GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGetWithHttpInfo(accept, scopeId, inventoryLocationId, skip, take, excludeItemsWithQuantityEqualToZero);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve inventory quantities for the specified inventory location id - {GetInventoryQuantitiesByLocationRequest} Retrieve inventory quantities for the specified inventory location id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="skip">The number of results to skip (optional)</param>
        /// <param name="take">The number of results to return (optional)</param>
        /// <param name="excludeItemsWithQuantityEqualToZero">Wheather or not inventory items having a quantity equal to zero should be excluded from the result (optional)</param>
        /// <returns>ApiResponse of InventoryQuantityResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryQuantityResult> GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGetWithHttpInfo(string accept, string scopeId, string inventoryLocationId, int? skip = default(int?), int? take = default(int?), bool? excludeItemsWithQuantityEqualToZero = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryQuantitiesApi->GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryQuantitiesApi->GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGet");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryQuantitiesApi->GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (excludeItemsWithQuantityEqualToZero != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ExcludeItemsWithQuantityEqualToZero", excludeItemsWithQuantityEqualToZero));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryQuantityResult>("/inventoryQuantities/{ScopeId}/byLocation/{InventoryLocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve inventory quantities for the specified inventory location id - {GetInventoryQuantitiesByLocationRequest} Retrieve inventory quantities for the specified inventory location id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="skip">The number of results to skip (optional)</param>
        /// <param name="take">The number of results to return (optional)</param>
        /// <param name="excludeItemsWithQuantityEqualToZero">Wheather or not inventory items having a quantity equal to zero should be excluded from the result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryQuantityResult</returns>
        public async System.Threading.Tasks.Task<InventoryQuantityResult> GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGetAsync(string accept, string scopeId, string inventoryLocationId, int? skip = default(int?), int? take = default(int?), bool? excludeItemsWithQuantityEqualToZero = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryQuantityResult> localVarResponse = await GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGetWithHttpInfoAsync(accept, scopeId, inventoryLocationId, skip, take, excludeItemsWithQuantityEqualToZero, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve inventory quantities for the specified inventory location id - {GetInventoryQuantitiesByLocationRequest} Retrieve inventory quantities for the specified inventory location id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="skip">The number of results to skip (optional)</param>
        /// <param name="take">The number of results to return (optional)</param>
        /// <param name="excludeItemsWithQuantityEqualToZero">Wheather or not inventory items having a quantity equal to zero should be excluded from the result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryQuantityResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryQuantityResult>> GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string inventoryLocationId, int? skip = default(int?), int? take = default(int?), bool? excludeItemsWithQuantityEqualToZero = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryQuantitiesApi->GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryQuantitiesApi->GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGet");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryQuantitiesApi->GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Take", take));
            }
            if (excludeItemsWithQuantityEqualToZero != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ExcludeItemsWithQuantityEqualToZero", excludeItemsWithQuantityEqualToZero));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InventoryQuantityResult>("/inventoryQuantities/{ScopeId}/byLocation/{InventoryLocationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryQuantitiesByLocationRequestScopeIdbyLocationInventoryLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
