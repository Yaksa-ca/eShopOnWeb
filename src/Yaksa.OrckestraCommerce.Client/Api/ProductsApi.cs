/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Copies products from Global scope to a sales scope - {AddFromGlobalRequest}
        /// </summary>
        /// <remarks>
        /// Copies products from Global scope to a sales scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo AddFromGlobalRequestScopeIdfromGlobalPost(string accept, string scopeId, AddFromGlobalRequest body = default(AddFromGlobalRequest));

        /// <summary>
        /// Copies products from Global scope to a sales scope - {AddFromGlobalRequest}
        /// </summary>
        /// <remarks>
        /// Copies products from Global scope to a sales scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> AddFromGlobalRequestScopeIdfromGlobalPostWithHttpInfo(string accept, string scopeId, AddFromGlobalRequest body = default(AddFromGlobalRequest));
        /// <summary>
        /// Adds or updates the given price lists into the specified scope - {AddOrUpdatePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Adds or updates the given price lists into the specified scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AddOrUpdatePriceListRequestScopeIdpriceListsPost(string accept, string scopeId, AddOrUpdatePriceListRequest body = default(AddOrUpdatePriceListRequest));

        /// <summary>
        /// Adds or updates the given price lists into the specified scope - {AddOrUpdatePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Adds or updates the given price lists into the specified scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrUpdatePriceListRequestScopeIdpriceListsPostWithHttpInfo(string accept, string scopeId, AddOrUpdatePriceListRequest body = default(AddOrUpdatePriceListRequest));
        /// <summary>
        /// Adds a price List Entry - {AddPriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Adds a price List Entry
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to add a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PriceListEntry</returns>
        PriceListEntry AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPost(string accept, string scopeId, string productId, AddPriceListEntryRequest body = default(AddPriceListEntryRequest));

        /// <summary>
        /// Adds a price List Entry - {AddPriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Adds a price List Entry
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to add a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PriceListEntry</returns>
        ApiResponse<PriceListEntry> AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPostWithHttpInfo(string accept, string scopeId, string productId, AddPriceListEntryRequest body = default(AddPriceListEntryRequest));
        /// <summary>
        /// Starts a task that updates category associations for multiple products - {BulkAssignProductCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that updates category associations for multiple products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPost(string accept, string scopeId, BulkAssignProductCategoriesRequest body = default(BulkAssignProductCategoriesRequest));

        /// <summary>
        /// Starts a task that updates category associations for multiple products - {BulkAssignProductCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that updates category associations for multiple products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPostWithHttpInfo(string accept, string scopeId, BulkAssignProductCategoriesRequest body = default(BulkAssignProductCategoriesRequest));
        /// <summary>
        /// Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts - {BulkRevertProductChangesRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo BulkRevertProductChangesRequestScopeIdbulkRevertPost(string accept, string scopeId, BulkRevertProductChangesRequest body = default(BulkRevertProductChangesRequest));

        /// <summary>
        /// Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts - {BulkRevertProductChangesRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> BulkRevertProductChangesRequestScopeIdbulkRevertPostWithHttpInfo(string accept, string scopeId, BulkRevertProductChangesRequest body = default(BulkRevertProductChangesRequest));
        /// <summary>
        /// Starts a task that updates publication status for multiple products - {BulkUpdatePublicationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that updates publication status for multiple products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPost(string accept, string scopeId, BulkUpdatePublicationStatusRequest body = default(BulkUpdatePublicationStatusRequest));

        /// <summary>
        /// Starts a task that updates publication status for multiple products - {BulkUpdatePublicationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that updates publication status for multiple products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPostWithHttpInfo(string accept, string scopeId, BulkUpdatePublicationStatusRequest body = default(BulkUpdatePublicationStatusRequest));
        /// <summary>
        /// Retrieve the price of a product - {CalculatePricesofProductsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the price product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;ProductPrice&gt;</returns>
        List<ProductPrice> CalculatePricesofProductsRequestScopeIdpricesPost(string accept, string scopeId, CalculatePricesofProductsRequest body = default(CalculatePricesofProductsRequest));

        /// <summary>
        /// Retrieve the price of a product - {CalculatePricesofProductsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the price product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductPrice&gt;</returns>
        ApiResponse<List<ProductPrice>> CalculatePricesofProductsRequestScopeIdpricesPostWithHttpInfo(string accept, string scopeId, CalculatePricesofProductsRequest body = default(CalculatePricesofProductsRequest));
        /// <summary>
        /// Retrieve the price of a product - {CalculateProductPriceRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the price product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductPrice</returns>
        ProductPrice CalculateProductPriceRequestScopeIdProductIdpricePost(string accept, string scopeId, string productId, CalculateProductPriceRequest body = default(CalculateProductPriceRequest));

        /// <summary>
        /// Retrieve the price of a product - {CalculateProductPriceRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the price product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductPrice</returns>
        ApiResponse<ProductPrice> CalculateProductPriceRequestScopeIdProductIdpricePostWithHttpInfo(string accept, string scopeId, string productId, CalculateProductPriceRequest body = default(CalculateProductPriceRequest));
        /// <summary>
        /// A request to copy a product - {CopyProductRequest}
        /// </summary>
        /// <remarks>
        /// A request to copy a product
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product to be copied</param>
        /// <param name="newProductId">The id of the product to be created</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Product</returns>
        Product CopyProductRequestScopeIdProductIdcopyNewProductIdCreate(string accept, string scopeId, string productId, string newProductId, Object body = default(Object));

        /// <summary>
        /// A request to copy a product - {CopyProductRequest}
        /// </summary>
        /// <remarks>
        /// A request to copy a product
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product to be copied</param>
        /// <param name="newProductId">The id of the product to be created</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> CopyProductRequestScopeIdProductIdcopyNewProductIdCreateWithHttpInfo(string accept, string scopeId, string productId, string newProductId, Object body = default(Object));
        /// <summary>
        /// Creates a price list into the specified scope - {CreatePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Creates a price list into the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PriceList</returns>
        PriceList CreatePriceListRequestScopeIdpriceListsPriceListIdPost(string accept, string scopeId, string priceListId, CreatePriceListRequest body = default(CreatePriceListRequest));

        /// <summary>
        /// Creates a price list into the specified scope - {CreatePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Creates a price list into the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PriceList</returns>
        ApiResponse<PriceList> CreatePriceListRequestScopeIdpriceListsPriceListIdPostWithHttpInfo(string accept, string scopeId, string priceListId, CreatePriceListRequest body = default(CreatePriceListRequest));
        /// <summary>
        /// Creates a product in the specified scope - {CreateProductRequest}
        /// </summary>
        /// <remarks>
        /// Creates a product in the specified scope.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Product</returns>
        Product CreateProductRequestScopeIdPost(string accept, string scopeId, CreateProductRequest body = default(CreateProductRequest));

        /// <summary>
        /// Creates a product in the specified scope - {CreateProductRequest}
        /// </summary>
        /// <remarks>
        /// Creates a product in the specified scope.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> CreateProductRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateProductRequest body = default(CreateProductRequest));
        /// <summary>
        /// Deletes a price List Entry - {DeletePriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a price List Entry
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to delete a price list entry</param>
        /// <param name="priceListId">The id of the price list for which we want to delete a price list entry</param>
        /// <param name="variantId">The id of the variant for which we want to delete a price list entry (optional)</param>
        /// <returns></returns>
        void DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete(string accept, string scopeId, string productId, string priceListId, string variantId = default(string));

        /// <summary>
        /// Deletes a price List Entry - {DeletePriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a price List Entry
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to delete a price list entry</param>
        /// <param name="priceListId">The id of the price list for which we want to delete a price list entry</param>
        /// <param name="variantId">The id of the variant for which we want to delete a price list entry (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDeleteWithHttpInfo(string accept, string scopeId, string productId, string priceListId, string variantId = default(string));
        /// <summary>
        /// Deletes a price list - {DeletePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a price list only if that price list does not have any price list entries neither in the scope nor in its dependent scopes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the price list.</param>
        /// <param name="deletePriceListEntries">The value indicating whether the related price list entries should be deleted as well. (optional)</param>
        /// <returns></returns>
        void DeletePriceListRequestScopeIdpriceListsPriceListIdDelete(string accept, string scopeId, string priceListId, bool? deletePriceListEntries = default(bool?));

        /// <summary>
        /// Deletes a price list - {DeletePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a price list only if that price list does not have any price list entries neither in the scope nor in its dependent scopes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the price list.</param>
        /// <param name="deletePriceListEntries">The value indicating whether the related price list entries should be deleted as well. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePriceListRequestScopeIdpriceListsPriceListIdDeleteWithHttpInfo(string accept, string scopeId, string priceListId, bool? deletePriceListEntries = default(bool?));
        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdRequest}
        /// </summary>
        /// <remarks>
        /// Deletes product from the scope and all child scopes
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <returns></returns>
        void DeleteProductByIdRequestScopeIdproductProductIdDelete(string accept, string scopeId, string productId);

        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdRequest}
        /// </summary>
        /// <remarks>
        /// Deletes product from the scope and all child scopes
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductByIdRequestScopeIdproductProductIdDeleteWithHttpInfo(string accept, string scopeId, string productId);
        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdV2Request}
        /// </summary>
        /// <remarks>
        /// Deletes product from the scope and all child scopes
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <returns></returns>
        void DeleteProductByIdV2Requestv2ScopeIdProductIdDelete(string accept, string scopeId, string productId);

        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdV2Request}
        /// </summary>
        /// <remarks>
        /// Deletes product from the scope and all child scopes
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductByIdV2Requestv2ScopeIdProductIdDeleteWithHttpInfo(string accept, string scopeId, string productId);
        /// <summary>
        /// Delete a product draft - {DeleteProductDraftRequest}
        /// </summary>
        /// <remarks>
        /// Delete a product draft
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to delete the draft</param>
        /// <returns></returns>
        void DeleteProductDraftRequestScopeIddraftProductIdDelete(string accept, string scopeId, string productId);

        /// <summary>
        /// Delete a product draft - {DeleteProductDraftRequest}
        /// </summary>
        /// <remarks>
        /// Delete a product draft
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to delete the draft</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductDraftRequestScopeIddraftProductIdDeleteWithHttpInfo(string accept, string scopeId, string productId);
        /// <summary>
        /// Delete a setting used in product module - {DeleteProductSettingsEntryRequest}
        /// </summary>
        /// <remarks>
        /// Delete a setting used in product module
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entry">the product settings entry to delete</param>
        /// <returns></returns>
        void DeleteProductSettingsEntryRequestsettingsEntryDelete(string accept, string entry);

        /// <summary>
        /// Delete a setting used in product module - {DeleteProductSettingsEntryRequest}
        /// </summary>
        /// <remarks>
        /// Delete a setting used in product module
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entry">the product settings entry to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductSettingsEntryRequestsettingsEntryDeleteWithHttpInfo(string accept, string entry);
        /// <summary>
        /// Starts a task that deletes multiple products - {DeleteProductsRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that deletes multiple products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo DeleteProductsRequestScopeIdbulkDeletePost(string accept, string scopeId, DeleteProductsRequest body = default(DeleteProductsRequest));

        /// <summary>
        /// Starts a task that deletes multiple products - {DeleteProductsRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that deletes multiple products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> DeleteProductsRequestScopeIdbulkDeletePostWithHttpInfo(string accept, string scopeId, DeleteProductsRequest body = default(DeleteProductsRequest));
        /// <summary>
        /// Cleanup unused media storage - {DeleteUnusedMediaStorageRequest}
        /// </summary>
        /// <remarks>
        /// Delete unused media storage request
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="url">the Url of the media. (optional)</param>
        /// <returns>DeleteUnusedMediaStorageResponse</returns>
        DeleteUnusedMediaStorageResponse DeleteUnusedMediaStorageRequestmediastorageDelete(string accept, string url = default(string));

        /// <summary>
        /// Cleanup unused media storage - {DeleteUnusedMediaStorageRequest}
        /// </summary>
        /// <remarks>
        /// Delete unused media storage request
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="url">the Url of the media. (optional)</param>
        /// <returns>ApiResponse of DeleteUnusedMediaStorageResponse</returns>
        ApiResponse<DeleteUnusedMediaStorageResponse> DeleteUnusedMediaStorageRequestmediastorageDeleteWithHttpInfo(string accept, string url = default(string));
        /// <summary>
        /// Find all price lists - {FindPriceListsRequest}
        /// </summary>
        /// <remarks>
        /// Find all price lists. Represents a group of prices that are applied to products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <param name="startDate">Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date. (optional)</param>
        /// <param name="endDate">Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date. (optional)</param>
        /// <returns>List&lt;PriceList&gt;</returns>
        List<PriceList> FindPriceListsRequestScopeIdpriceListsfindGet(string accept, string scopeId, string cultureName = default(string), bool? includeExpiredEntries = default(bool?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));

        /// <summary>
        /// Find all price lists - {FindPriceListsRequest}
        /// </summary>
        /// <remarks>
        /// Find all price lists. Represents a group of prices that are applied to products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <param name="startDate">Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date. (optional)</param>
        /// <param name="endDate">Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date. (optional)</param>
        /// <returns>ApiResponse of List&lt;PriceList&gt;</returns>
        ApiResponse<List<PriceList>> FindPriceListsRequestScopeIdpriceListsfindGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string), bool? includeExpiredEntries = default(bool?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));
        /// <summary>
        /// Retrieve the price of a set of Product and its Variants - {FindProductPricesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the price of a set of Product and its Variants
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;ProductPrice&gt;</returns>
        List<ProductPrice> FindProductPricesRequestScopeIdproductPricesPost(string accept, string scopeId, FindProductPricesRequest body = default(FindProductPricesRequest));

        /// <summary>
        /// Retrieve the price of a set of Product and its Variants - {FindProductPricesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the price of a set of Product and its Variants
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductPrice&gt;</returns>
        ApiResponse<List<ProductPrice>> FindProductPricesRequestScopeIdproductPricesPostWithHttpInfo(string accept, string scopeId, FindProductPricesRequest body = default(FindProductPricesRequest));
        /// <summary>
        /// Retrieves the Price List Info for a product at a specific DateTime - {GetEffectivePriceEntryInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves the Price List Info for a product at a specific DateTime
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve the effective price</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve the effective price (optional)</param>
        /// <param name="referenceDate">The Reference Date, null &#x3D; Now (optional)</param>
        /// <returns>EffectivePriceEntryInfo</returns>
        EffectivePriceEntryInfo GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGet(string accept, string scopeId, string productId, string variantId = default(string), DateTime? referenceDate = default(DateTime?));

        /// <summary>
        /// Retrieves the Price List Info for a product at a specific DateTime - {GetEffectivePriceEntryInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves the Price List Info for a product at a specific DateTime
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve the effective price</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve the effective price (optional)</param>
        /// <param name="referenceDate">The Reference Date, null &#x3D; Now (optional)</param>
        /// <returns>ApiResponse of EffectivePriceEntryInfo</returns>
        ApiResponse<EffectivePriceEntryInfo> GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGetWithHttpInfo(string accept, string scopeId, string productId, string variantId = default(string), DateTime? referenceDate = default(DateTime?));
        /// <summary>
        /// Retrieve the media by sku, it can be the product or the variant sku - {GetMediaBySkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the media by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MediaList</returns>
        MediaList GetMediaBySkuRequestScopeIdbySkuSkumediaPost(string accept, string scopeId, string sku, GetMediaBySkuRequest body = default(GetMediaBySkuRequest));

        /// <summary>
        /// Retrieve the media by sku, it can be the product or the variant sku - {GetMediaBySkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the media by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MediaList</returns>
        ApiResponse<MediaList> GetMediaBySkuRequestScopeIdbySkuSkumediaPostWithHttpInfo(string accept, string scopeId, string sku, GetMediaBySkuRequest body = default(GetMediaBySkuRequest));
        /// <summary>
        /// Retrieve a media by Id - {GetMediaRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a media by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <returns>ProductMedia</returns>
        ProductMedia GetMediaRequestScopeIdProductIdmediaMediaIdGet(string accept, string scopeId, string productId, string mediaId);

        /// <summary>
        /// Retrieve a media by Id - {GetMediaRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a media by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <returns>ApiResponse of ProductMedia</returns>
        ApiResponse<ProductMedia> GetMediaRequestScopeIdProductIdmediaMediaIdGetWithHttpInfo(string accept, string scopeId, string productId, string mediaId);
        /// <summary>
        /// Get the settings used in products media - {GetMediaSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Get the settings used in products media
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>MediaSettings</returns>
        MediaSettings GetMediaSettingsRequestmediasettingsGet(string accept);

        /// <summary>
        /// Get the settings used in products media - {GetMediaSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Get the settings used in products media
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of MediaSettings</returns>
        ApiResponse<MediaSettings> GetMediaSettingsRequestmediasettingsGetWithHttpInfo(string accept);
        /// <summary>
        /// Retrieve price list entries - {GetPriceListEntriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves price list entries for a given product or variant in a specific scope.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve price list entries</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve price list entries (optional)</param>
        /// <param name="useParentScope">Returns values from the parent scope of the one provided in the request or not, default is false (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <returns>List&lt;PriceListEntry&gt;</returns>
        List<PriceListEntry> GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGet(string accept, string scopeId, string productId, string variantId = default(string), bool? useParentScope = default(bool?), bool? includeExpiredEntries = default(bool?));

        /// <summary>
        /// Retrieve price list entries - {GetPriceListEntriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves price list entries for a given product or variant in a specific scope.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve price list entries</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve price list entries (optional)</param>
        /// <param name="useParentScope">Returns values from the parent scope of the one provided in the request or not, default is false (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <returns>ApiResponse of List&lt;PriceListEntry&gt;</returns>
        ApiResponse<List<PriceListEntry>> GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGetWithHttpInfo(string accept, string scopeId, string productId, string variantId = default(string), bool? useParentScope = default(bool?), bool? includeExpiredEntries = default(bool?));
        /// <summary>
        /// Gets all price lists - {GetPriceListsRequest}
        /// </summary>
        /// <remarks>
        /// Gets all price lists. Represents a group of prices that are applied to products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;PriceList&gt;</returns>
        List<PriceList> GetPriceListsRequestScopeIdpriceListsGet(string accept, string scopeId, string cultureName = default(string));

        /// <summary>
        /// Gets all price lists - {GetPriceListsRequest}
        /// </summary>
        /// <remarks>
        /// Gets all price lists. Represents a group of prices that are applied to products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;PriceList&gt;</returns>
        ApiResponse<List<PriceList>> GetPriceListsRequestScopeIdpriceListsGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string));
        /// <summary>
        /// Retrieve and merge all the product attributes from all product definitions - {GetProductAttributesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve and merge all the product attributes from all product definitions
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ProductAttributes</returns>
        ProductAttributes GetProductAttributesRequestattributesGet(string accept);

        /// <summary>
        /// Retrieve and merge all the product attributes from all product definitions - {GetProductAttributesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve and merge all the product attributes from all product definitions
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of ProductAttributes</returns>
        ApiResponse<ProductAttributes> GetProductAttributesRequestattributesGetWithHttpInfo(string accept);
        /// <summary>
        /// Retrieve the entity definition defined in the system related to the Name parameter specified in the request - {GetProductDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// A definition is a list of properties that is allowed to be set to the instance of product or category being used
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve the related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ProductDefinition</returns>
        ProductDefinition GetProductDefinitionRequestdefinitionsNameGet(string accept, string name, string cultureName = default(string));

        /// <summary>
        /// Retrieve the entity definition defined in the system related to the Name parameter specified in the request - {GetProductDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// A definition is a list of properties that is allowed to be set to the instance of product or category being used
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve the related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of ProductDefinition</returns>
        ApiResponse<ProductDefinition> GetProductDefinitionRequestdefinitionsNameGetWithHttpInfo(string accept, string name, string cultureName = default(string));
        /// <summary>
        /// Retrieve the entity definitions defined in the system related to the EntityType parameter specified in the request - {GetProductDefinitionsRequest}
        /// </summary>
        /// <remarks>
        /// A definition is a list of properties that is allowed to be set to the instance of product or category being used. You could also specify a list of entity definitions name to retrieve. If you don&#39;t specify this list, all entity definitions will be return
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="productType">The type of definition, either Product or Category are the possible values</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>List&lt;ProductDefinition&gt;</returns>
        List<ProductDefinition> GetProductDefinitionsRequestdefinitionsGet(string accept, string productType, string cultureName = default(string));

        /// <summary>
        /// Retrieve the entity definitions defined in the system related to the EntityType parameter specified in the request - {GetProductDefinitionsRequest}
        /// </summary>
        /// <remarks>
        /// A definition is a list of properties that is allowed to be set to the instance of product or category being used. You could also specify a list of entity definitions name to retrieve. If you don&#39;t specify this list, all entity definitions will be return
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="productType">The type of definition, either Product or Category are the possible values</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductDefinition&gt;</returns>
        ApiResponse<List<ProductDefinition>> GetProductDefinitionsRequestdefinitionsGetWithHttpInfo(string accept, string productType, string cultureName = default(string));
        /// <summary>
        /// Retrieve a product draft by product id - {GetProductDraftRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product draft by product id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ProductDraft</returns>
        ProductDraft GetProductDraftRequestScopeIddraftProductIdGet(string accept, string scopeId, string productId, string cultureName = default(string));

        /// <summary>
        /// Retrieve a product draft by product id - {GetProductDraftRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product draft by product id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of ProductDraft</returns>
        ApiResponse<ProductDraft> GetProductDraftRequestScopeIddraftProductIdGetWithHttpInfo(string accept, string scopeId, string productId, string cultureName = default(string));
        /// <summary>
        /// Retrieve a product draft states by product id - {GetProductDraftStatesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product draft states by product id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <returns>LocalizedDraftState</returns>
        LocalizedDraftState GetProductDraftStatesRequestScopeIddraftStatesProductIdGet(string accept, string scopeId, string productId);

        /// <summary>
        /// Retrieve a product draft states by product id - {GetProductDraftStatesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product draft states by product id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <returns>ApiResponse of LocalizedDraftState</returns>
        ApiResponse<LocalizedDraftState> GetProductDraftStatesRequestScopeIddraftStatesProductIdGetWithHttpInfo(string accept, string scopeId, string productId);
        /// <summary>
        /// Retrieve product prices by Id - {GetProductPriceEntriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve product&#39;s prices by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetProductPriceEntriesResult</returns>
        GetProductPriceEntriesResult GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPost(string accept, string scopeId, string productId, GetProductPriceEntriesRequest body = default(GetProductPriceEntriesRequest));

        /// <summary>
        /// Retrieve product prices by Id - {GetProductPriceEntriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve product&#39;s prices by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetProductPriceEntriesResult</returns>
        ApiResponse<GetProductPriceEntriesResult> GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPostWithHttpInfo(string accept, string scopeId, string productId, GetProductPriceEntriesRequest body = default(GetProductPriceEntriesRequest));
        /// <summary>
        /// Retrieve a product relationships - {GetProductRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;Relationship&gt;</returns>
        List<Relationship> GetProductRelationshipsRequestScopeIdProductIdrelationshipsGet(string accept, string scopeId, string productId, string cultureName = default(string));

        /// <summary>
        /// Retrieve a product relationships - {GetProductRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Relationship&gt;</returns>
        ApiResponse<List<Relationship>> GetProductRelationshipsRequestScopeIdProductIdrelationshipsGetWithHttpInfo(string accept, string scopeId, string productId, string cultureName = default(string));
        /// <summary>
        /// Retrieve a product by Id - {GetProductRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includeImageUrl"> Gets or sets a value indicating whether or not to include the image url. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>Product</returns>
        Product GetProductRequestScopeIdProductIdGet(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string));

        /// <summary>
        /// Retrieve a product by Id - {GetProductRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includeImageUrl"> Gets or sets a value indicating whether or not to include the image url. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> GetProductRequestScopeIdProductIdGetWithHttpInfo(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string));
        /// <summary>
        /// Get the settings used in product module - {GetProductSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Get the settings used in product module
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ProductSettings</returns>
        ProductSettings GetProductSettingsRequestsettingsGet(string accept, string scopeId = default(string));

        /// <summary>
        /// Get the settings used in product module - {GetProductSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Get the settings used in product module
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of ProductSettings</returns>
        ApiResponse<ProductSettings> GetProductSettingsRequestsettingsGetWithHttpInfo(string accept, string scopeId = default(string));
        /// <summary>
        /// Retrieve a product by Id - {GetProductV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve a product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The business id for the product to retrieve</param>
        /// <param name="includeImageUrl">A value indicating whether or not to include the image url. (optional)</param>
        /// <param name="publishedVersion">A value indicating whether the published version of the product should be returned. (optional)</param>
        /// <param name="includeInheritanceInformation">A value indicating whether to include the list of overridden properties and variants. Applicable for sales scopes. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>Product</returns>
        Product GetProductV2Requestv2ScopeIdProductIdGet(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? publishedVersion = default(bool?), bool? includeInheritanceInformation = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string));

        /// <summary>
        /// Retrieve a product by Id - {GetProductV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve a product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The business id for the product to retrieve</param>
        /// <param name="includeImageUrl">A value indicating whether or not to include the image url. (optional)</param>
        /// <param name="publishedVersion">A value indicating whether the published version of the product should be returned. (optional)</param>
        /// <param name="includeInheritanceInformation">A value indicating whether to include the list of overridden properties and variants. Applicable for sales scopes. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> GetProductV2Requestv2ScopeIdProductIdGetWithHttpInfo(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? publishedVersion = default(bool?), bool? includeInheritanceInformation = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string));
        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of products by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductList</returns>
        ProductList GetProductsByIdsRequestScopeIdbyIdsPost(string accept, string scopeId, GetProductsByIdsRequest body = default(GetProductsByIdsRequest));

        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of products by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductList</returns>
        ApiResponse<ProductList> GetProductsByIdsRequestScopeIdbyIdsPostWithHttpInfo(string accept, string scopeId, GetProductsByIdsRequest body = default(GetProductsByIdsRequest));
        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve products by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductList</returns>
        ProductList GetProductsByIdsV2Requestv2ScopeIdbyIdsPost(string accept, string scopeId, GetProductsByIdsV2Request body = default(GetProductsByIdsV2Request));

        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve products by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductList</returns>
        ApiResponse<ProductList> GetProductsByIdsV2Requestv2ScopeIdbyIdsPostWithHttpInfo(string accept, string scopeId, GetProductsByIdsV2Request body = default(GetProductsByIdsV2Request));
        /// <summary>
        /// Retrieve specified properties of all products with a given publication status and categories - {GetProductsByPublicationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products with a given publication status and categories
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetProductsByPublicationStatusResult</returns>
        GetProductsByPublicationStatusResult GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPost(string accept, string scopeId, GetProductsByPublicationStatusRequest body = default(GetProductsByPublicationStatusRequest));

        /// <summary>
        /// Retrieve specified properties of all products with a given publication status and categories - {GetProductsByPublicationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products with a given publication status and categories
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetProductsByPublicationStatusResult</returns>
        ApiResponse<GetProductsByPublicationStatusResult> GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPostWithHttpInfo(string accept, string scopeId, GetProductsByPublicationStatusRequest body = default(GetProductsByPublicationStatusRequest));
        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> GetProductsBySkuRequestScopeIdbySkuSkuGet(string accept, string scopeId, string sku, bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string));

        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> GetProductsBySkuRequestScopeIdbySkuSkuGetWithHttpInfo(string accept, string scopeId, string sku, bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string));
        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="searchVariantSkus">Gets or sets a value indicating whether or not to search for variant SKU-s, in addition to searching in product SKU-s. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>ProductList</returns>
        ProductList GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGet(string accept, string scopeId, string sku, bool? searchVariantSkus = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string));

        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="searchVariantSkus">Gets or sets a value indicating whether or not to search for variant SKU-s, in addition to searching in product SKU-s. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>ApiResponse of ProductList</returns>
        ApiResponse<ProductList> GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGetWithHttpInfo(string accept, string scopeId, string sku, bool? searchVariantSkus = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string));
        /// <summary>
        /// Retrieve products by SKU-s - {GetProductsBySkusV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve products by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductList</returns>
        ProductList GetProductsBySkusV2Requestv2ScopeIdbySkusPost(string accept, string scopeId, GetProductsBySkusV2Request body = default(GetProductsBySkusV2Request));

        /// <summary>
        /// Retrieve products by SKU-s - {GetProductsBySkusV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve products by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductList</returns>
        ApiResponse<ProductList> GetProductsBySkusV2Requestv2ScopeIdbySkusPostWithHttpInfo(string accept, string scopeId, GetProductsBySkusV2Request body = default(GetProductsBySkusV2Request));
        /// <summary>
        /// Retrieve the numbers of products by category - {GetProductsCountByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the numbers of products by category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy the &#39;get products&#39; should  be started. If nothing is specified the root is used as starting point</param>
        /// <param name="includeDescendantsCategories">Whether or not the descendant categories content should be recursively included below the specified starting categoryId (optional)</param>
        /// <returns>GetProductsCountByCategoryResponse</returns>
        GetProductsCountByCategoryResponse GetProductsCountByCategoryRequestScopeIdCategoryIdcountGet(string accept, string scopeId, string categoryId, bool? includeDescendantsCategories = default(bool?));

        /// <summary>
        /// Retrieve the numbers of products by category - {GetProductsCountByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the numbers of products by category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy the &#39;get products&#39; should  be started. If nothing is specified the root is used as starting point</param>
        /// <param name="includeDescendantsCategories">Whether or not the descendant categories content should be recursively included below the specified starting categoryId (optional)</param>
        /// <returns>ApiResponse of GetProductsCountByCategoryResponse</returns>
        ApiResponse<GetProductsCountByCategoryResponse> GetProductsCountByCategoryRequestScopeIdCategoryIdcountGetWithHttpInfo(string accept, string scopeId, string categoryId, bool? includeDescendantsCategories = default(bool?));
        /// <summary>
        /// Retrieve product prices by Id - {GetProductsPriceEntriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve product&#39;s prices by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;GetProductPriceEntriesResult&gt;</returns>
        List<GetProductPriceEntriesResult> GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPost(string accept, string scopeId, GetProductsPriceEntriesRequest body = default(GetProductsPriceEntriesRequest));

        /// <summary>
        /// Retrieve product prices by Id - {GetProductsPriceEntriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve product&#39;s prices by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;GetProductPriceEntriesResult&gt;</returns>
        ApiResponse<List<GetProductPriceEntriesResult>> GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPostWithHttpInfo(string accept, string scopeId, GetProductsPriceEntriesRequest body = default(GetProductsPriceEntriesRequest));
        /// <summary>
        /// Retrieve specified properties of all products in a given category - {GetProductsPropertiesByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products in a given category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>GetProductsPropertiesResult</returns>
        GetProductsPropertiesResult GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGet(string accept, string scopeId, string categoryId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string));

        /// <summary>
        /// Retrieve specified properties of all products in a given category - {GetProductsPropertiesByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products in a given category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>ApiResponse of GetProductsPropertiesResult</returns>
        ApiResponse<GetProductsPropertiesResult> GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string));
        /// <summary>
        /// Retrieve specified properties of all products in a given state and categories - {GetProductsPropertiesByDraftStateAndCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products in a given state and categories
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetProductByCategoryAndStateResults</returns>
        GetProductByCategoryAndStateResults GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPost(string accept, string scopeId, GetProductsPropertiesByDraftStateAndCategoriesRequest body = default(GetProductsPropertiesByDraftStateAndCategoriesRequest));

        /// <summary>
        /// Retrieve specified properties of all products in a given state and categories - {GetProductsPropertiesByDraftStateAndCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products in a given state and categories
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetProductByCategoryAndStateResults</returns>
        ApiResponse<GetProductByCategoryAndStateResults> GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPostWithHttpInfo(string accept, string scopeId, GetProductsPropertiesByDraftStateAndCategoriesRequest body = default(GetProductsPropertiesByDraftStateAndCategoriesRequest));
        /// <summary>
        /// Retrieve specified properties of all products in a given state - {GetProductsPropertiesByDraftStateRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products in a given state
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="draftState">The draft state used to filter the products</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>GetProductsPropertiesResult</returns>
        GetProductsPropertiesResult GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGet(string accept, string scopeId, string draftState, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string));

        /// <summary>
        /// Retrieve specified properties of all products in a given state - {GetProductsPropertiesByDraftStateRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products in a given state
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="draftState">The draft state used to filter the products</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>ApiResponse of GetProductsPropertiesResult</returns>
        ApiResponse<GetProductsPropertiesResult> GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGetWithHttpInfo(string accept, string scopeId, string draftState, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string));
        /// <summary>
        /// Retrieve specified properties of all products flagged as new - {GetProductsPropertiesFlagAsNewRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products flagged as new
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>GetProductsPropertiesResult</returns>
        GetProductsPropertiesResult GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGet(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string));

        /// <summary>
        /// Retrieve specified properties of all products flagged as new - {GetProductsPropertiesFlagAsNewRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products flagged as new
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>ApiResponse of GetProductsPropertiesResult</returns>
        ApiResponse<GetProductsPropertiesResult> GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string));
        /// <summary>
        /// Retrieve properties of all product with notification - {GetProductsPropertiesWithNotificationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve properties of all products with notification
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>GetProductsPropertiesResult</returns>
        GetProductsPropertiesResult GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGet(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string));

        /// <summary>
        /// Retrieve properties of all product with notification - {GetProductsPropertiesWithNotificationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve properties of all products with notification
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>ApiResponse of GetProductsPropertiesResult</returns>
        ApiResponse<GetProductsPropertiesResult> GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string));
        /// <summary>
        /// Gets statistics for products - {GetProductsStatisticsRequest}
        /// </summary>
        /// <remarks>
        /// Gets statistics for products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>GetProductsStatisticsResult</returns>
        GetProductsStatisticsResult GetProductsStatisticsRequestScopeIdstatisticsGet(string accept, string scopeId);

        /// <summary>
        /// Gets statistics for products - {GetProductsStatisticsRequest}
        /// </summary>
        /// <remarks>
        /// Gets statistics for products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>ApiResponse of GetProductsStatisticsResult</returns>
        ApiResponse<GetProductsStatisticsResult> GetProductsStatisticsRequestScopeIdstatisticsGetWithHttpInfo(string accept, string scopeId);
        /// <summary>
        /// Retrieve the products quick links count - {GetQuickLinksCountDetailsRequest}
        /// </summary>
        /// <remarks>
        /// Represents items of quick links count related to products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogName">The catalog name to be used for quick links count</param>
        /// <param name="cultureName">The culture name that should be used to retrieve data</param>
        /// <returns>List&lt;QuickLinkCountDetails&gt;</returns>
        List<QuickLinkCountDetails> GetQuickLinksCountDetailsRequestquicklinksGet(string accept, string catalogName, string cultureName);

        /// <summary>
        /// Retrieve the products quick links count - {GetQuickLinksCountDetailsRequest}
        /// </summary>
        /// <remarks>
        /// Represents items of quick links count related to products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogName">The catalog name to be used for quick links count</param>
        /// <param name="cultureName">The culture name that should be used to retrieve data</param>
        /// <returns>ApiResponse of List&lt;QuickLinkCountDetails&gt;</returns>
        ApiResponse<List<QuickLinkCountDetails>> GetQuickLinksCountDetailsRequestquicklinksGetWithHttpInfo(string accept, string catalogName, string cultureName);
        /// <summary>
        /// Retrieve all the product&#39;s variants - {GetVariantsByProductRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the product&#39;s variants
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope associated to the requested product</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;Variant&gt;</returns>
        List<Variant> GetVariantsByProductRequestScopeIdProductIdvariantsGet(string accept, string scopeId, string productId, bool? includePriceLists = default(bool?), string cultureName = default(string));

        /// <summary>
        /// Retrieve all the product&#39;s variants - {GetVariantsByProductRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the product&#39;s variants
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope associated to the requested product</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Variant&gt;</returns>
        ApiResponse<List<Variant>> GetVariantsByProductRequestScopeIdProductIdvariantsGetWithHttpInfo(string accept, string scopeId, string productId, bool? includePriceLists = default(bool?), string cultureName = default(string));
        /// <summary>
        /// Checks whether the product exists in the specified scope - {ProductExistsRequest}
        /// </summary>
        /// <remarks>
        /// Checks whether the product exists in the specified scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product.</param>
        /// <returns>ProductExistsResponse</returns>
        ProductExistsResponse ProductExistsRequestexistsScopeIdProductIdGet(string accept, string scopeId, string productId);

        /// <summary>
        /// Checks whether the product exists in the specified scope - {ProductExistsRequest}
        /// </summary>
        /// <remarks>
        /// Checks whether the product exists in the specified scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product.</param>
        /// <returns>ApiResponse of ProductExistsResponse</returns>
        ApiResponse<ProductExistsResponse> ProductExistsRequestexistsScopeIdProductIdGetWithHttpInfo(string accept, string scopeId, string productId);
        /// <summary>
        /// Repair Broken Inheritence for the product - {RepairProductInheritanceRequest}
        /// </summary>
        /// <remarks>
        /// Repair Broken Inheritence From Global:  a. adds the properties that exist in global but not in sales  b. revert the properties that has been changed compare to global   c. keep the properties that have been added in sales but do not exist in global  d. revert variants to the global version
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to repair the inheritence</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreate(string accept, string scopeId, string productId, Object body = default(Object));

        /// <summary>
        /// Repair Broken Inheritence for the product - {RepairProductInheritanceRequest}
        /// </summary>
        /// <remarks>
        /// Repair Broken Inheritence From Global:  a. adds the properties that exist in global but not in sales  b. revert the properties that has been changed compare to global   c. keep the properties that have been added in sales but do not exist in global  d. revert variants to the global version
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to repair the inheritence</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreateWithHttpInfo(string accept, string scopeId, string productId, Object body = default(Object));
        /// <summary>
        /// Reverts not published product changes by replacing working copies of products with their published counterparts - {RevertProductChangesRequest}
        /// </summary>
        /// <remarks>
        /// Reverts not published product changes by replacing working copies of products with their published counterparts.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void RevertProductChangesRequestScopeIdrevertPost(string accept, string scopeId, RevertProductChangesRequest body = default(RevertProductChangesRequest));

        /// <summary>
        /// Reverts not published product changes by replacing working copies of products with their published counterparts - {RevertProductChangesRequest}
        /// </summary>
        /// <remarks>
        /// Reverts not published product changes by replacing working copies of products with their published counterparts.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevertProductChangesRequestScopeIdrevertPostWithHttpInfo(string accept, string scopeId, RevertProductChangesRequest body = default(RevertProductChangesRequest));
        /// <summary>
        /// Synchronizes a product - {SyncProductRequest}
        /// </summary>
        /// <remarks>
        /// Synchronizes a product
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SyncProductRequestsyncScopeIdProductIdCreate(string accept, string scopeId, string productId, SyncProductRequest body = default(SyncProductRequest));

        /// <summary>
        /// Synchronizes a product - {SyncProductRequest}
        /// </summary>
        /// <remarks>
        /// Synchronizes a product
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SyncProductRequestsyncScopeIdProductIdCreateWithHttpInfo(string accept, string scopeId, string productId, SyncProductRequest body = default(SyncProductRequest));
        /// <summary>
        /// Update media resized instances - {UpdateMediaResizedInstancesRequest}
        /// </summary>
        /// <remarks>
        /// Update media resized instances
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductMedia</returns>
        ProductMedia UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate(string accept, string scopeId, string productId, string mediaId, UpdateMediaResizedInstancesRequest body = default(UpdateMediaResizedInstancesRequest));

        /// <summary>
        /// Update media resized instances - {UpdateMediaResizedInstancesRequest}
        /// </summary>
        /// <remarks>
        /// Update media resized instances
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductMedia</returns>
        ApiResponse<ProductMedia> UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreateWithHttpInfo(string accept, string scopeId, string productId, string mediaId, UpdateMediaResizedInstancesRequest body = default(UpdateMediaResizedInstancesRequest));
        /// <summary>
        /// Update the settings used in product media - {UpdateMediaSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Update the settings used in product media
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MediaSettings</returns>
        MediaSettings UpdateMediaSettingsRequestmediasettingsCreate(string accept, UpdateMediaSettingsRequest body = default(UpdateMediaSettingsRequest));

        /// <summary>
        /// Update the settings used in product media - {UpdateMediaSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Update the settings used in product media
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MediaSettings</returns>
        ApiResponse<MediaSettings> UpdateMediaSettingsRequestmediasettingsCreateWithHttpInfo(string accept, UpdateMediaSettingsRequest body = default(UpdateMediaSettingsRequest));
        /// <summary>
        /// Updates a price List Entry - {UpdatePriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Updates a price List Entry
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PriceListEntry</returns>
        PriceListEntry UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreate(string accept, string scopeId, string productId, UpdatePriceListEntryRequest body = default(UpdatePriceListEntryRequest));

        /// <summary>
        /// Updates a price List Entry - {UpdatePriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Updates a price List Entry
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PriceListEntry</returns>
        ApiResponse<PriceListEntry> UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreateWithHttpInfo(string accept, string scopeId, string productId, UpdatePriceListEntryRequest body = default(UpdatePriceListEntryRequest));
        /// <summary>
        /// Updates a price list in the specified scope - {UpdatePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Updates a price list in the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PriceList</returns>
        PriceList UpdatePriceListRequestScopeIdpriceListsPriceListIdCreate(string accept, string scopeId, string priceListId, UpdatePriceListRequest body = default(UpdatePriceListRequest));

        /// <summary>
        /// Updates a price list in the specified scope - {UpdatePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Updates a price list in the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PriceList</returns>
        ApiResponse<PriceList> UpdatePriceListRequestScopeIdpriceListsPriceListIdCreateWithHttpInfo(string accept, string scopeId, string priceListId, UpdatePriceListRequest body = default(UpdatePriceListRequest));
        /// <summary>
        /// Update a product draft - {UpdateProductDraftRequest}
        /// </summary>
        /// <remarks>
        /// Update a product draft
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update the draft</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductDraft</returns>
        ProductDraft UpdateProductDraftRequestScopeIddraftProductIdPost(string accept, string scopeId, string productId, UpdateProductDraftRequest body = default(UpdateProductDraftRequest));

        /// <summary>
        /// Update a product draft - {UpdateProductDraftRequest}
        /// </summary>
        /// <remarks>
        /// Update a product draft
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update the draft</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductDraft</returns>
        ApiResponse<ProductDraft> UpdateProductDraftRequestScopeIddraftProductIdPostWithHttpInfo(string accept, string scopeId, string productId, UpdateProductDraftRequest body = default(UpdateProductDraftRequest));
        /// <summary>
        /// Updates publication status for a list of products - {UpdateProductPublicationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Updates publication status for a list of products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateProductPublicationStatusRequestScopeIdpublicationStatusPost(string accept, string scopeId, UpdateProductPublicationStatusRequest body = default(UpdateProductPublicationStatusRequest));

        /// <summary>
        /// Updates publication status for a list of products - {UpdateProductPublicationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Updates publication status for a list of products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProductPublicationStatusRequestScopeIdpublicationStatusPostWithHttpInfo(string accept, string scopeId, UpdateProductPublicationStatusRequest body = default(UpdateProductPublicationStatusRequest));
        /// <summary>
        /// Updates a product - {UpdateProductRequest}
        /// </summary>
        /// <remarks>
        /// Updates a product
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Product</returns>
        Product UpdateProductRequestScopeIdProductIdCreate(string accept, string scopeId, string productId, UpdateProductRequest body = default(UpdateProductRequest));

        /// <summary>
        /// Updates a product - {UpdateProductRequest}
        /// </summary>
        /// <remarks>
        /// Updates a product
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> UpdateProductRequestScopeIdProductIdCreateWithHttpInfo(string accept, string scopeId, string productId, UpdateProductRequest body = default(UpdateProductRequest));
        /// <summary>
        /// Update the settings used in product module - {UpdateProductSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Update the settings used in product module
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductSettings</returns>
        ProductSettings UpdateProductSettingsRequestsettingsCreate(string accept, UpdateProductSettingsRequest body = default(UpdateProductSettingsRequest));

        /// <summary>
        /// Update the settings used in product module - {UpdateProductSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Update the settings used in product module
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductSettings</returns>
        ApiResponse<ProductSettings> UpdateProductSettingsRequestsettingsCreateWithHttpInfo(string accept, UpdateProductSettingsRequest body = default(UpdateProductSettingsRequest));
        /// <summary>
        /// Batch update all variants price for a product for a specific pricelist - {UpdateVariantsPriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Batch update all variants price for a product for a specific pricelist
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update the price list entries</param>
        /// <param name="priceListId">The id of the the price list for which we want to update the price list entries</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate(string accept, string scopeId, string productId, string priceListId, UpdateVariantsPriceListEntryRequest body = default(UpdateVariantsPriceListEntryRequest));

        /// <summary>
        /// Batch update all variants price for a product for a specific pricelist - {UpdateVariantsPriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Batch update all variants price for a product for a specific pricelist
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update the price list entries</param>
        /// <param name="priceListId">The id of the the price list for which we want to update the price list entries</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreateWithHttpInfo(string accept, string scopeId, string productId, string priceListId, UpdateVariantsPriceListEntryRequest body = default(UpdateVariantsPriceListEntryRequest));
        /// <summary>
        /// Uploads a media file and attaches it to the product/variant - {UploadMediaRequest}
        /// </summary>
        /// <remarks>
        /// Uploads a media file Send media files via multipart/form-data
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId"> the id of the product for which we want to upload media.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Product</returns>
        Product UploadMediaRequestmediaScopeIdProductIduploadPost(string accept, string scopeId, string productId, UploadMediaRequest body = default(UploadMediaRequest));

        /// <summary>
        /// Uploads a media file and attaches it to the product/variant - {UploadMediaRequest}
        /// </summary>
        /// <remarks>
        /// Uploads a media file Send media files via multipart/form-data
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId"> the id of the product for which we want to upload media.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> UploadMediaRequestmediaScopeIdProductIduploadPostWithHttpInfo(string accept, string scopeId, string productId, UploadMediaRequest body = default(UploadMediaRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Copies products from Global scope to a sales scope - {AddFromGlobalRequest}
        /// </summary>
        /// <remarks>
        /// Copies products from Global scope to a sales scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> AddFromGlobalRequestScopeIdfromGlobalPostAsync(string accept, string scopeId, AddFromGlobalRequest body = default(AddFromGlobalRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copies products from Global scope to a sales scope - {AddFromGlobalRequest}
        /// </summary>
        /// <remarks>
        /// Copies products from Global scope to a sales scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> AddFromGlobalRequestScopeIdfromGlobalPostWithHttpInfoAsync(string accept, string scopeId, AddFromGlobalRequest body = default(AddFromGlobalRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds or updates the given price lists into the specified scope - {AddOrUpdatePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Adds or updates the given price lists into the specified scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrUpdatePriceListRequestScopeIdpriceListsPostAsync(string accept, string scopeId, AddOrUpdatePriceListRequest body = default(AddOrUpdatePriceListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds or updates the given price lists into the specified scope - {AddOrUpdatePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Adds or updates the given price lists into the specified scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrUpdatePriceListRequestScopeIdpriceListsPostWithHttpInfoAsync(string accept, string scopeId, AddOrUpdatePriceListRequest body = default(AddOrUpdatePriceListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds a price List Entry - {AddPriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Adds a price List Entry
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to add a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceListEntry</returns>
        System.Threading.Tasks.Task<PriceListEntry> AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPostAsync(string accept, string scopeId, string productId, AddPriceListEntryRequest body = default(AddPriceListEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a price List Entry - {AddPriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Adds a price List Entry
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to add a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceListEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<PriceListEntry>> AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPostWithHttpInfoAsync(string accept, string scopeId, string productId, AddPriceListEntryRequest body = default(AddPriceListEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Starts a task that updates category associations for multiple products - {BulkAssignProductCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that updates category associations for multiple products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPostAsync(string accept, string scopeId, BulkAssignProductCategoriesRequest body = default(BulkAssignProductCategoriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Starts a task that updates category associations for multiple products - {BulkAssignProductCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that updates category associations for multiple products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPostWithHttpInfoAsync(string accept, string scopeId, BulkAssignProductCategoriesRequest body = default(BulkAssignProductCategoriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts - {BulkRevertProductChangesRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> BulkRevertProductChangesRequestScopeIdbulkRevertPostAsync(string accept, string scopeId, BulkRevertProductChangesRequest body = default(BulkRevertProductChangesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts - {BulkRevertProductChangesRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> BulkRevertProductChangesRequestScopeIdbulkRevertPostWithHttpInfoAsync(string accept, string scopeId, BulkRevertProductChangesRequest body = default(BulkRevertProductChangesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Starts a task that updates publication status for multiple products - {BulkUpdatePublicationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that updates publication status for multiple products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPostAsync(string accept, string scopeId, BulkUpdatePublicationStatusRequest body = default(BulkUpdatePublicationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Starts a task that updates publication status for multiple products - {BulkUpdatePublicationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that updates publication status for multiple products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPostWithHttpInfoAsync(string accept, string scopeId, BulkUpdatePublicationStatusRequest body = default(BulkUpdatePublicationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the price of a product - {CalculatePricesofProductsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the price product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProductPrice&gt;</returns>
        System.Threading.Tasks.Task<List<ProductPrice>> CalculatePricesofProductsRequestScopeIdpricesPostAsync(string accept, string scopeId, CalculatePricesofProductsRequest body = default(CalculatePricesofProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the price of a product - {CalculatePricesofProductsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the price product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductPrice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductPrice>>> CalculatePricesofProductsRequestScopeIdpricesPostWithHttpInfoAsync(string accept, string scopeId, CalculatePricesofProductsRequest body = default(CalculatePricesofProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the price of a product - {CalculateProductPriceRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the price product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductPrice</returns>
        System.Threading.Tasks.Task<ProductPrice> CalculateProductPriceRequestScopeIdProductIdpricePostAsync(string accept, string scopeId, string productId, CalculateProductPriceRequest body = default(CalculateProductPriceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the price of a product - {CalculateProductPriceRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the price product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductPrice)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPrice>> CalculateProductPriceRequestScopeIdProductIdpricePostWithHttpInfoAsync(string accept, string scopeId, string productId, CalculateProductPriceRequest body = default(CalculateProductPriceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// A request to copy a product - {CopyProductRequest}
        /// </summary>
        /// <remarks>
        /// A request to copy a product
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product to be copied</param>
        /// <param name="newProductId">The id of the product to be created</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> CopyProductRequestScopeIdProductIdcopyNewProductIdCreateAsync(string accept, string scopeId, string productId, string newProductId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// A request to copy a product - {CopyProductRequest}
        /// </summary>
        /// <remarks>
        /// A request to copy a product
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product to be copied</param>
        /// <param name="newProductId">The id of the product to be created</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> CopyProductRequestScopeIdProductIdcopyNewProductIdCreateWithHttpInfoAsync(string accept, string scopeId, string productId, string newProductId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a price list into the specified scope - {CreatePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Creates a price list into the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceList</returns>
        System.Threading.Tasks.Task<PriceList> CreatePriceListRequestScopeIdpriceListsPriceListIdPostAsync(string accept, string scopeId, string priceListId, CreatePriceListRequest body = default(CreatePriceListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a price list into the specified scope - {CreatePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Creates a price list into the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PriceList>> CreatePriceListRequestScopeIdpriceListsPriceListIdPostWithHttpInfoAsync(string accept, string scopeId, string priceListId, CreatePriceListRequest body = default(CreatePriceListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a product in the specified scope - {CreateProductRequest}
        /// </summary>
        /// <remarks>
        /// Creates a product in the specified scope.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> CreateProductRequestScopeIdPostAsync(string accept, string scopeId, CreateProductRequest body = default(CreateProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a product in the specified scope - {CreateProductRequest}
        /// </summary>
        /// <remarks>
        /// Creates a product in the specified scope.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> CreateProductRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateProductRequest body = default(CreateProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a price List Entry - {DeletePriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a price List Entry
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to delete a price list entry</param>
        /// <param name="priceListId">The id of the price list for which we want to delete a price list entry</param>
        /// <param name="variantId">The id of the variant for which we want to delete a price list entry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDeleteAsync(string accept, string scopeId, string productId, string priceListId, string variantId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a price List Entry - {DeletePriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a price List Entry
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to delete a price list entry</param>
        /// <param name="priceListId">The id of the price list for which we want to delete a price list entry</param>
        /// <param name="variantId">The id of the variant for which we want to delete a price list entry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDeleteWithHttpInfoAsync(string accept, string scopeId, string productId, string priceListId, string variantId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a price list - {DeletePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a price list only if that price list does not have any price list entries neither in the scope nor in its dependent scopes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the price list.</param>
        /// <param name="deletePriceListEntries">The value indicating whether the related price list entries should be deleted as well. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePriceListRequestScopeIdpriceListsPriceListIdDeleteAsync(string accept, string scopeId, string priceListId, bool? deletePriceListEntries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a price list - {DeletePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a price list only if that price list does not have any price list entries neither in the scope nor in its dependent scopes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the price list.</param>
        /// <param name="deletePriceListEntries">The value indicating whether the related price list entries should be deleted as well. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePriceListRequestScopeIdpriceListsPriceListIdDeleteWithHttpInfoAsync(string accept, string scopeId, string priceListId, bool? deletePriceListEntries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdRequest}
        /// </summary>
        /// <remarks>
        /// Deletes product from the scope and all child scopes
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductByIdRequestScopeIdproductProductIdDeleteAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdRequest}
        /// </summary>
        /// <remarks>
        /// Deletes product from the scope and all child scopes
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductByIdRequestScopeIdproductProductIdDeleteWithHttpInfoAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdV2Request}
        /// </summary>
        /// <remarks>
        /// Deletes product from the scope and all child scopes
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductByIdV2Requestv2ScopeIdProductIdDeleteAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdV2Request}
        /// </summary>
        /// <remarks>
        /// Deletes product from the scope and all child scopes
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductByIdV2Requestv2ScopeIdProductIdDeleteWithHttpInfoAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a product draft - {DeleteProductDraftRequest}
        /// </summary>
        /// <remarks>
        /// Delete a product draft
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to delete the draft</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductDraftRequestScopeIddraftProductIdDeleteAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a product draft - {DeleteProductDraftRequest}
        /// </summary>
        /// <remarks>
        /// Delete a product draft
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to delete the draft</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductDraftRequestScopeIddraftProductIdDeleteWithHttpInfoAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a setting used in product module - {DeleteProductSettingsEntryRequest}
        /// </summary>
        /// <remarks>
        /// Delete a setting used in product module
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entry">the product settings entry to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductSettingsEntryRequestsettingsEntryDeleteAsync(string accept, string entry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a setting used in product module - {DeleteProductSettingsEntryRequest}
        /// </summary>
        /// <remarks>
        /// Delete a setting used in product module
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entry">the product settings entry to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductSettingsEntryRequestsettingsEntryDeleteWithHttpInfoAsync(string accept, string entry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Starts a task that deletes multiple products - {DeleteProductsRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that deletes multiple products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> DeleteProductsRequestScopeIdbulkDeletePostAsync(string accept, string scopeId, DeleteProductsRequest body = default(DeleteProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Starts a task that deletes multiple products - {DeleteProductsRequest}
        /// </summary>
        /// <remarks>
        /// Starts a task that deletes multiple products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> DeleteProductsRequestScopeIdbulkDeletePostWithHttpInfoAsync(string accept, string scopeId, DeleteProductsRequest body = default(DeleteProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cleanup unused media storage - {DeleteUnusedMediaStorageRequest}
        /// </summary>
        /// <remarks>
        /// Delete unused media storage request
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="url">the Url of the media. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteUnusedMediaStorageResponse</returns>
        System.Threading.Tasks.Task<DeleteUnusedMediaStorageResponse> DeleteUnusedMediaStorageRequestmediastorageDeleteAsync(string accept, string url = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cleanup unused media storage - {DeleteUnusedMediaStorageRequest}
        /// </summary>
        /// <remarks>
        /// Delete unused media storage request
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="url">the Url of the media. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteUnusedMediaStorageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteUnusedMediaStorageResponse>> DeleteUnusedMediaStorageRequestmediastorageDeleteWithHttpInfoAsync(string accept, string url = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find all price lists - {FindPriceListsRequest}
        /// </summary>
        /// <remarks>
        /// Find all price lists. Represents a group of prices that are applied to products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <param name="startDate">Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date. (optional)</param>
        /// <param name="endDate">Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PriceList&gt;</returns>
        System.Threading.Tasks.Task<List<PriceList>> FindPriceListsRequestScopeIdpriceListsfindGetAsync(string accept, string scopeId, string cultureName = default(string), bool? includeExpiredEntries = default(bool?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find all price lists - {FindPriceListsRequest}
        /// </summary>
        /// <remarks>
        /// Find all price lists. Represents a group of prices that are applied to products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <param name="startDate">Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date. (optional)</param>
        /// <param name="endDate">Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PriceList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PriceList>>> FindPriceListsRequestScopeIdpriceListsfindGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), bool? includeExpiredEntries = default(bool?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the price of a set of Product and its Variants - {FindProductPricesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the price of a set of Product and its Variants
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProductPrice&gt;</returns>
        System.Threading.Tasks.Task<List<ProductPrice>> FindProductPricesRequestScopeIdproductPricesPostAsync(string accept, string scopeId, FindProductPricesRequest body = default(FindProductPricesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the price of a set of Product and its Variants - {FindProductPricesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the price of a set of Product and its Variants
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductPrice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductPrice>>> FindProductPricesRequestScopeIdproductPricesPostWithHttpInfoAsync(string accept, string scopeId, FindProductPricesRequest body = default(FindProductPricesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the Price List Info for a product at a specific DateTime - {GetEffectivePriceEntryInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves the Price List Info for a product at a specific DateTime
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve the effective price</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve the effective price (optional)</param>
        /// <param name="referenceDate">The Reference Date, null &#x3D; Now (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EffectivePriceEntryInfo</returns>
        System.Threading.Tasks.Task<EffectivePriceEntryInfo> GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGetAsync(string accept, string scopeId, string productId, string variantId = default(string), DateTime? referenceDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the Price List Info for a product at a specific DateTime - {GetEffectivePriceEntryInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves the Price List Info for a product at a specific DateTime
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve the effective price</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve the effective price (optional)</param>
        /// <param name="referenceDate">The Reference Date, null &#x3D; Now (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EffectivePriceEntryInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<EffectivePriceEntryInfo>> GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGetWithHttpInfoAsync(string accept, string scopeId, string productId, string variantId = default(string), DateTime? referenceDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the media by sku, it can be the product or the variant sku - {GetMediaBySkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the media by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MediaList</returns>
        System.Threading.Tasks.Task<MediaList> GetMediaBySkuRequestScopeIdbySkuSkumediaPostAsync(string accept, string scopeId, string sku, GetMediaBySkuRequest body = default(GetMediaBySkuRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the media by sku, it can be the product or the variant sku - {GetMediaBySkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the media by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MediaList)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaList>> GetMediaBySkuRequestScopeIdbySkuSkumediaPostWithHttpInfoAsync(string accept, string scopeId, string sku, GetMediaBySkuRequest body = default(GetMediaBySkuRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a media by Id - {GetMediaRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a media by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductMedia</returns>
        System.Threading.Tasks.Task<ProductMedia> GetMediaRequestScopeIdProductIdmediaMediaIdGetAsync(string accept, string scopeId, string productId, string mediaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a media by Id - {GetMediaRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a media by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductMedia)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductMedia>> GetMediaRequestScopeIdProductIdmediaMediaIdGetWithHttpInfoAsync(string accept, string scopeId, string productId, string mediaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the settings used in products media - {GetMediaSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Get the settings used in products media
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MediaSettings</returns>
        System.Threading.Tasks.Task<MediaSettings> GetMediaSettingsRequestmediasettingsGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the settings used in products media - {GetMediaSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Get the settings used in products media
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MediaSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaSettings>> GetMediaSettingsRequestmediasettingsGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve price list entries - {GetPriceListEntriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves price list entries for a given product or variant in a specific scope.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve price list entries</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve price list entries (optional)</param>
        /// <param name="useParentScope">Returns values from the parent scope of the one provided in the request or not, default is false (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PriceListEntry&gt;</returns>
        System.Threading.Tasks.Task<List<PriceListEntry>> GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGetAsync(string accept, string scopeId, string productId, string variantId = default(string), bool? useParentScope = default(bool?), bool? includeExpiredEntries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve price list entries - {GetPriceListEntriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves price list entries for a given product or variant in a specific scope.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve price list entries</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve price list entries (optional)</param>
        /// <param name="useParentScope">Returns values from the parent scope of the one provided in the request or not, default is false (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PriceListEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PriceListEntry>>> GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGetWithHttpInfoAsync(string accept, string scopeId, string productId, string variantId = default(string), bool? useParentScope = default(bool?), bool? includeExpiredEntries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets all price lists - {GetPriceListsRequest}
        /// </summary>
        /// <remarks>
        /// Gets all price lists. Represents a group of prices that are applied to products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PriceList&gt;</returns>
        System.Threading.Tasks.Task<List<PriceList>> GetPriceListsRequestScopeIdpriceListsGetAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all price lists - {GetPriceListsRequest}
        /// </summary>
        /// <remarks>
        /// Gets all price lists. Represents a group of prices that are applied to products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PriceList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PriceList>>> GetPriceListsRequestScopeIdpriceListsGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve and merge all the product attributes from all product definitions - {GetProductAttributesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve and merge all the product attributes from all product definitions
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductAttributes</returns>
        System.Threading.Tasks.Task<ProductAttributes> GetProductAttributesRequestattributesGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve and merge all the product attributes from all product definitions - {GetProductAttributesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve and merge all the product attributes from all product definitions
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductAttributes)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductAttributes>> GetProductAttributesRequestattributesGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the entity definition defined in the system related to the Name parameter specified in the request - {GetProductDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// A definition is a list of properties that is allowed to be set to the instance of product or category being used
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve the related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDefinition</returns>
        System.Threading.Tasks.Task<ProductDefinition> GetProductDefinitionRequestdefinitionsNameGetAsync(string accept, string name, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the entity definition defined in the system related to the Name parameter specified in the request - {GetProductDefinitionRequest}
        /// </summary>
        /// <remarks>
        /// A definition is a list of properties that is allowed to be set to the instance of product or category being used
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve the related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductDefinition>> GetProductDefinitionRequestdefinitionsNameGetWithHttpInfoAsync(string accept, string name, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the entity definitions defined in the system related to the EntityType parameter specified in the request - {GetProductDefinitionsRequest}
        /// </summary>
        /// <remarks>
        /// A definition is a list of properties that is allowed to be set to the instance of product or category being used. You could also specify a list of entity definitions name to retrieve. If you don&#39;t specify this list, all entity definitions will be return
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="productType">The type of definition, either Product or Category are the possible values</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProductDefinition&gt;</returns>
        System.Threading.Tasks.Task<List<ProductDefinition>> GetProductDefinitionsRequestdefinitionsGetAsync(string accept, string productType, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the entity definitions defined in the system related to the EntityType parameter specified in the request - {GetProductDefinitionsRequest}
        /// </summary>
        /// <remarks>
        /// A definition is a list of properties that is allowed to be set to the instance of product or category being used. You could also specify a list of entity definitions name to retrieve. If you don&#39;t specify this list, all entity definitions will be return
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="productType">The type of definition, either Product or Category are the possible values</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductDefinition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductDefinition>>> GetProductDefinitionsRequestdefinitionsGetWithHttpInfoAsync(string accept, string productType, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a product draft by product id - {GetProductDraftRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product draft by product id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDraft</returns>
        System.Threading.Tasks.Task<ProductDraft> GetProductDraftRequestScopeIddraftProductIdGetAsync(string accept, string scopeId, string productId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a product draft by product id - {GetProductDraftRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product draft by product id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDraft)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductDraft>> GetProductDraftRequestScopeIddraftProductIdGetWithHttpInfoAsync(string accept, string scopeId, string productId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a product draft states by product id - {GetProductDraftStatesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product draft states by product id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocalizedDraftState</returns>
        System.Threading.Tasks.Task<LocalizedDraftState> GetProductDraftStatesRequestScopeIddraftStatesProductIdGetAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a product draft states by product id - {GetProductDraftStatesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product draft states by product id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocalizedDraftState)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocalizedDraftState>> GetProductDraftStatesRequestScopeIddraftStatesProductIdGetWithHttpInfoAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve product prices by Id - {GetProductPriceEntriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve product&#39;s prices by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductPriceEntriesResult</returns>
        System.Threading.Tasks.Task<GetProductPriceEntriesResult> GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPostAsync(string accept, string scopeId, string productId, GetProductPriceEntriesRequest body = default(GetProductPriceEntriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve product prices by Id - {GetProductPriceEntriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve product&#39;s prices by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductPriceEntriesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductPriceEntriesResult>> GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPostWithHttpInfoAsync(string accept, string scopeId, string productId, GetProductPriceEntriesRequest body = default(GetProductPriceEntriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a product relationships - {GetProductRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Relationship&gt;</returns>
        System.Threading.Tasks.Task<List<Relationship>> GetProductRelationshipsRequestScopeIdProductIdrelationshipsGetAsync(string accept, string scopeId, string productId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a product relationships - {GetProductRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Relationship&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Relationship>>> GetProductRelationshipsRequestScopeIdProductIdrelationshipsGetWithHttpInfoAsync(string accept, string scopeId, string productId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a product by Id - {GetProductRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includeImageUrl"> Gets or sets a value indicating whether or not to include the image url. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> GetProductRequestScopeIdProductIdGetAsync(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a product by Id - {GetProductRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includeImageUrl"> Gets or sets a value indicating whether or not to include the image url. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> GetProductRequestScopeIdProductIdGetWithHttpInfoAsync(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the settings used in product module - {GetProductSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Get the settings used in product module
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductSettings</returns>
        System.Threading.Tasks.Task<ProductSettings> GetProductSettingsRequestsettingsGetAsync(string accept, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the settings used in product module - {GetProductSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Get the settings used in product module
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSettings>> GetProductSettingsRequestsettingsGetWithHttpInfoAsync(string accept, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a product by Id - {GetProductV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve a product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The business id for the product to retrieve</param>
        /// <param name="includeImageUrl">A value indicating whether or not to include the image url. (optional)</param>
        /// <param name="publishedVersion">A value indicating whether the published version of the product should be returned. (optional)</param>
        /// <param name="includeInheritanceInformation">A value indicating whether to include the list of overridden properties and variants. Applicable for sales scopes. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> GetProductV2Requestv2ScopeIdProductIdGetAsync(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? publishedVersion = default(bool?), bool? includeInheritanceInformation = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a product by Id - {GetProductV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve a product by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The business id for the product to retrieve</param>
        /// <param name="includeImageUrl">A value indicating whether or not to include the image url. (optional)</param>
        /// <param name="publishedVersion">A value indicating whether the published version of the product should be returned. (optional)</param>
        /// <param name="includeInheritanceInformation">A value indicating whether to include the list of overridden properties and variants. Applicable for sales scopes. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> GetProductV2Requestv2ScopeIdProductIdGetWithHttpInfoAsync(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? publishedVersion = default(bool?), bool? includeInheritanceInformation = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of products by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductList</returns>
        System.Threading.Tasks.Task<ProductList> GetProductsByIdsRequestScopeIdbyIdsPostAsync(string accept, string scopeId, GetProductsByIdsRequest body = default(GetProductsByIdsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of products by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductList>> GetProductsByIdsRequestScopeIdbyIdsPostWithHttpInfoAsync(string accept, string scopeId, GetProductsByIdsRequest body = default(GetProductsByIdsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve products by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductList</returns>
        System.Threading.Tasks.Task<ProductList> GetProductsByIdsV2Requestv2ScopeIdbyIdsPostAsync(string accept, string scopeId, GetProductsByIdsV2Request body = default(GetProductsByIdsV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve products by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductList>> GetProductsByIdsV2Requestv2ScopeIdbyIdsPostWithHttpInfoAsync(string accept, string scopeId, GetProductsByIdsV2Request body = default(GetProductsByIdsV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve specified properties of all products with a given publication status and categories - {GetProductsByPublicationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products with a given publication status and categories
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsByPublicationStatusResult</returns>
        System.Threading.Tasks.Task<GetProductsByPublicationStatusResult> GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPostAsync(string accept, string scopeId, GetProductsByPublicationStatusRequest body = default(GetProductsByPublicationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve specified properties of all products with a given publication status and categories - {GetProductsByPublicationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products with a given publication status and categories
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsByPublicationStatusResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductsByPublicationStatusResult>> GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPostWithHttpInfoAsync(string accept, string scopeId, GetProductsByPublicationStatusRequest body = default(GetProductsByPublicationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> GetProductsBySkuRequestScopeIdbySkuSkuGetAsync(string accept, string scopeId, string sku, bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> GetProductsBySkuRequestScopeIdbySkuSkuGetWithHttpInfoAsync(string accept, string scopeId, string sku, bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="searchVariantSkus">Gets or sets a value indicating whether or not to search for variant SKU-s, in addition to searching in product SKU-s. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductList</returns>
        System.Threading.Tasks.Task<ProductList> GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGetAsync(string accept, string scopeId, string sku, bool? searchVariantSkus = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="searchVariantSkus">Gets or sets a value indicating whether or not to search for variant SKU-s, in addition to searching in product SKU-s. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductList>> GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGetWithHttpInfoAsync(string accept, string scopeId, string sku, bool? searchVariantSkus = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve products by SKU-s - {GetProductsBySkusV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve products by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductList</returns>
        System.Threading.Tasks.Task<ProductList> GetProductsBySkusV2Requestv2ScopeIdbySkusPostAsync(string accept, string scopeId, GetProductsBySkusV2Request body = default(GetProductsBySkusV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve products by SKU-s - {GetProductsBySkusV2Request}
        /// </summary>
        /// <remarks>
        /// Retrieve products by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductList>> GetProductsBySkusV2Requestv2ScopeIdbySkusPostWithHttpInfoAsync(string accept, string scopeId, GetProductsBySkusV2Request body = default(GetProductsBySkusV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the numbers of products by category - {GetProductsCountByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the numbers of products by category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy the &#39;get products&#39; should  be started. If nothing is specified the root is used as starting point</param>
        /// <param name="includeDescendantsCategories">Whether or not the descendant categories content should be recursively included below the specified starting categoryId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsCountByCategoryResponse</returns>
        System.Threading.Tasks.Task<GetProductsCountByCategoryResponse> GetProductsCountByCategoryRequestScopeIdCategoryIdcountGetAsync(string accept, string scopeId, string categoryId, bool? includeDescendantsCategories = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the numbers of products by category - {GetProductsCountByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the numbers of products by category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy the &#39;get products&#39; should  be started. If nothing is specified the root is used as starting point</param>
        /// <param name="includeDescendantsCategories">Whether or not the descendant categories content should be recursively included below the specified starting categoryId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsCountByCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductsCountByCategoryResponse>> GetProductsCountByCategoryRequestScopeIdCategoryIdcountGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, bool? includeDescendantsCategories = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve product prices by Id - {GetProductsPriceEntriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve product&#39;s prices by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetProductPriceEntriesResult&gt;</returns>
        System.Threading.Tasks.Task<List<GetProductPriceEntriesResult>> GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPostAsync(string accept, string scopeId, GetProductsPriceEntriesRequest body = default(GetProductsPriceEntriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve product prices by Id - {GetProductsPriceEntriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve product&#39;s prices by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetProductPriceEntriesResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetProductPriceEntriesResult>>> GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPostWithHttpInfoAsync(string accept, string scopeId, GetProductsPriceEntriesRequest body = default(GetProductsPriceEntriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve specified properties of all products in a given category - {GetProductsPropertiesByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products in a given category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsPropertiesResult</returns>
        System.Threading.Tasks.Task<GetProductsPropertiesResult> GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGetAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve specified properties of all products in a given category - {GetProductsPropertiesByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products in a given category
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsPropertiesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductsPropertiesResult>> GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve specified properties of all products in a given state and categories - {GetProductsPropertiesByDraftStateAndCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products in a given state and categories
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductByCategoryAndStateResults</returns>
        System.Threading.Tasks.Task<GetProductByCategoryAndStateResults> GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPostAsync(string accept, string scopeId, GetProductsPropertiesByDraftStateAndCategoriesRequest body = default(GetProductsPropertiesByDraftStateAndCategoriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve specified properties of all products in a given state and categories - {GetProductsPropertiesByDraftStateAndCategoriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products in a given state and categories
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductByCategoryAndStateResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductByCategoryAndStateResults>> GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPostWithHttpInfoAsync(string accept, string scopeId, GetProductsPropertiesByDraftStateAndCategoriesRequest body = default(GetProductsPropertiesByDraftStateAndCategoriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve specified properties of all products in a given state - {GetProductsPropertiesByDraftStateRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products in a given state
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="draftState">The draft state used to filter the products</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsPropertiesResult</returns>
        System.Threading.Tasks.Task<GetProductsPropertiesResult> GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGetAsync(string accept, string scopeId, string draftState, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve specified properties of all products in a given state - {GetProductsPropertiesByDraftStateRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products in a given state
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="draftState">The draft state used to filter the products</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsPropertiesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductsPropertiesResult>> GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGetWithHttpInfoAsync(string accept, string scopeId, string draftState, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve specified properties of all products flagged as new - {GetProductsPropertiesFlagAsNewRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products flagged as new
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsPropertiesResult</returns>
        System.Threading.Tasks.Task<GetProductsPropertiesResult> GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGetAsync(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve specified properties of all products flagged as new - {GetProductsPropertiesFlagAsNewRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve specified properties of all products flagged as new
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsPropertiesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductsPropertiesResult>> GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve properties of all product with notification - {GetProductsPropertiesWithNotificationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve properties of all products with notification
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsPropertiesResult</returns>
        System.Threading.Tasks.Task<GetProductsPropertiesResult> GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGetAsync(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve properties of all product with notification - {GetProductsPropertiesWithNotificationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve properties of all products with notification
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsPropertiesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductsPropertiesResult>> GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets statistics for products - {GetProductsStatisticsRequest}
        /// </summary>
        /// <remarks>
        /// Gets statistics for products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsStatisticsResult</returns>
        System.Threading.Tasks.Task<GetProductsStatisticsResult> GetProductsStatisticsRequestScopeIdstatisticsGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets statistics for products - {GetProductsStatisticsRequest}
        /// </summary>
        /// <remarks>
        /// Gets statistics for products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsStatisticsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductsStatisticsResult>> GetProductsStatisticsRequestScopeIdstatisticsGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the products quick links count - {GetQuickLinksCountDetailsRequest}
        /// </summary>
        /// <remarks>
        /// Represents items of quick links count related to products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogName">The catalog name to be used for quick links count</param>
        /// <param name="cultureName">The culture name that should be used to retrieve data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;QuickLinkCountDetails&gt;</returns>
        System.Threading.Tasks.Task<List<QuickLinkCountDetails>> GetQuickLinksCountDetailsRequestquicklinksGetAsync(string accept, string catalogName, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the products quick links count - {GetQuickLinksCountDetailsRequest}
        /// </summary>
        /// <remarks>
        /// Represents items of quick links count related to products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogName">The catalog name to be used for quick links count</param>
        /// <param name="cultureName">The culture name that should be used to retrieve data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;QuickLinkCountDetails&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuickLinkCountDetails>>> GetQuickLinksCountDetailsRequestquicklinksGetWithHttpInfoAsync(string accept, string catalogName, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all the product&#39;s variants - {GetVariantsByProductRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the product&#39;s variants
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope associated to the requested product</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Variant&gt;</returns>
        System.Threading.Tasks.Task<List<Variant>> GetVariantsByProductRequestScopeIdProductIdvariantsGetAsync(string accept, string scopeId, string productId, bool? includePriceLists = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all the product&#39;s variants - {GetVariantsByProductRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the product&#39;s variants
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope associated to the requested product</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Variant&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Variant>>> GetVariantsByProductRequestScopeIdProductIdvariantsGetWithHttpInfoAsync(string accept, string scopeId, string productId, bool? includePriceLists = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Checks whether the product exists in the specified scope - {ProductExistsRequest}
        /// </summary>
        /// <remarks>
        /// Checks whether the product exists in the specified scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductExistsResponse</returns>
        System.Threading.Tasks.Task<ProductExistsResponse> ProductExistsRequestexistsScopeIdProductIdGetAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Checks whether the product exists in the specified scope - {ProductExistsRequest}
        /// </summary>
        /// <remarks>
        /// Checks whether the product exists in the specified scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductExistsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductExistsResponse>> ProductExistsRequestexistsScopeIdProductIdGetWithHttpInfoAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Repair Broken Inheritence for the product - {RepairProductInheritanceRequest}
        /// </summary>
        /// <remarks>
        /// Repair Broken Inheritence From Global:  a. adds the properties that exist in global but not in sales  b. revert the properties that has been changed compare to global   c. keep the properties that have been added in sales but do not exist in global  d. revert variants to the global version
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to repair the inheritence</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreateAsync(string accept, string scopeId, string productId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Repair Broken Inheritence for the product - {RepairProductInheritanceRequest}
        /// </summary>
        /// <remarks>
        /// Repair Broken Inheritence From Global:  a. adds the properties that exist in global but not in sales  b. revert the properties that has been changed compare to global   c. keep the properties that have been added in sales but do not exist in global  d. revert variants to the global version
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to repair the inheritence</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreateWithHttpInfoAsync(string accept, string scopeId, string productId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reverts not published product changes by replacing working copies of products with their published counterparts - {RevertProductChangesRequest}
        /// </summary>
        /// <remarks>
        /// Reverts not published product changes by replacing working copies of products with their published counterparts.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevertProductChangesRequestScopeIdrevertPostAsync(string accept, string scopeId, RevertProductChangesRequest body = default(RevertProductChangesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reverts not published product changes by replacing working copies of products with their published counterparts - {RevertProductChangesRequest}
        /// </summary>
        /// <remarks>
        /// Reverts not published product changes by replacing working copies of products with their published counterparts.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevertProductChangesRequestScopeIdrevertPostWithHttpInfoAsync(string accept, string scopeId, RevertProductChangesRequest body = default(RevertProductChangesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Synchronizes a product - {SyncProductRequest}
        /// </summary>
        /// <remarks>
        /// Synchronizes a product
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SyncProductRequestsyncScopeIdProductIdCreateAsync(string accept, string scopeId, string productId, SyncProductRequest body = default(SyncProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Synchronizes a product - {SyncProductRequest}
        /// </summary>
        /// <remarks>
        /// Synchronizes a product
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SyncProductRequestsyncScopeIdProductIdCreateWithHttpInfoAsync(string accept, string scopeId, string productId, SyncProductRequest body = default(SyncProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update media resized instances - {UpdateMediaResizedInstancesRequest}
        /// </summary>
        /// <remarks>
        /// Update media resized instances
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductMedia</returns>
        System.Threading.Tasks.Task<ProductMedia> UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreateAsync(string accept, string scopeId, string productId, string mediaId, UpdateMediaResizedInstancesRequest body = default(UpdateMediaResizedInstancesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update media resized instances - {UpdateMediaResizedInstancesRequest}
        /// </summary>
        /// <remarks>
        /// Update media resized instances
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductMedia)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductMedia>> UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreateWithHttpInfoAsync(string accept, string scopeId, string productId, string mediaId, UpdateMediaResizedInstancesRequest body = default(UpdateMediaResizedInstancesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the settings used in product media - {UpdateMediaSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Update the settings used in product media
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MediaSettings</returns>
        System.Threading.Tasks.Task<MediaSettings> UpdateMediaSettingsRequestmediasettingsCreateAsync(string accept, UpdateMediaSettingsRequest body = default(UpdateMediaSettingsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the settings used in product media - {UpdateMediaSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Update the settings used in product media
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MediaSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaSettings>> UpdateMediaSettingsRequestmediasettingsCreateWithHttpInfoAsync(string accept, UpdateMediaSettingsRequest body = default(UpdateMediaSettingsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a price List Entry - {UpdatePriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Updates a price List Entry
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceListEntry</returns>
        System.Threading.Tasks.Task<PriceListEntry> UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreateAsync(string accept, string scopeId, string productId, UpdatePriceListEntryRequest body = default(UpdatePriceListEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a price List Entry - {UpdatePriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Updates a price List Entry
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceListEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<PriceListEntry>> UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreateWithHttpInfoAsync(string accept, string scopeId, string productId, UpdatePriceListEntryRequest body = default(UpdatePriceListEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a price list in the specified scope - {UpdatePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Updates a price list in the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceList</returns>
        System.Threading.Tasks.Task<PriceList> UpdatePriceListRequestScopeIdpriceListsPriceListIdCreateAsync(string accept, string scopeId, string priceListId, UpdatePriceListRequest body = default(UpdatePriceListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a price list in the specified scope - {UpdatePriceListRequest}
        /// </summary>
        /// <remarks>
        /// Updates a price list in the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PriceList>> UpdatePriceListRequestScopeIdpriceListsPriceListIdCreateWithHttpInfoAsync(string accept, string scopeId, string priceListId, UpdatePriceListRequest body = default(UpdatePriceListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a product draft - {UpdateProductDraftRequest}
        /// </summary>
        /// <remarks>
        /// Update a product draft
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update the draft</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDraft</returns>
        System.Threading.Tasks.Task<ProductDraft> UpdateProductDraftRequestScopeIddraftProductIdPostAsync(string accept, string scopeId, string productId, UpdateProductDraftRequest body = default(UpdateProductDraftRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a product draft - {UpdateProductDraftRequest}
        /// </summary>
        /// <remarks>
        /// Update a product draft
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update the draft</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDraft)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductDraft>> UpdateProductDraftRequestScopeIddraftProductIdPostWithHttpInfoAsync(string accept, string scopeId, string productId, UpdateProductDraftRequest body = default(UpdateProductDraftRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates publication status for a list of products - {UpdateProductPublicationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Updates publication status for a list of products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProductPublicationStatusRequestScopeIdpublicationStatusPostAsync(string accept, string scopeId, UpdateProductPublicationStatusRequest body = default(UpdateProductPublicationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates publication status for a list of products - {UpdateProductPublicationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Updates publication status for a list of products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProductPublicationStatusRequestScopeIdpublicationStatusPostWithHttpInfoAsync(string accept, string scopeId, UpdateProductPublicationStatusRequest body = default(UpdateProductPublicationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a product - {UpdateProductRequest}
        /// </summary>
        /// <remarks>
        /// Updates a product
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> UpdateProductRequestScopeIdProductIdCreateAsync(string accept, string scopeId, string productId, UpdateProductRequest body = default(UpdateProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a product - {UpdateProductRequest}
        /// </summary>
        /// <remarks>
        /// Updates a product
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> UpdateProductRequestScopeIdProductIdCreateWithHttpInfoAsync(string accept, string scopeId, string productId, UpdateProductRequest body = default(UpdateProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the settings used in product module - {UpdateProductSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Update the settings used in product module
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductSettings</returns>
        System.Threading.Tasks.Task<ProductSettings> UpdateProductSettingsRequestsettingsCreateAsync(string accept, UpdateProductSettingsRequest body = default(UpdateProductSettingsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the settings used in product module - {UpdateProductSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Update the settings used in product module
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSettings>> UpdateProductSettingsRequestsettingsCreateWithHttpInfoAsync(string accept, UpdateProductSettingsRequest body = default(UpdateProductSettingsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Batch update all variants price for a product for a specific pricelist - {UpdateVariantsPriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Batch update all variants price for a product for a specific pricelist
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update the price list entries</param>
        /// <param name="priceListId">The id of the the price list for which we want to update the price list entries</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreateAsync(string accept, string scopeId, string productId, string priceListId, UpdateVariantsPriceListEntryRequest body = default(UpdateVariantsPriceListEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Batch update all variants price for a product for a specific pricelist - {UpdateVariantsPriceListEntryRequest}
        /// </summary>
        /// <remarks>
        /// Batch update all variants price for a product for a specific pricelist
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update the price list entries</param>
        /// <param name="priceListId">The id of the the price list for which we want to update the price list entries</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreateWithHttpInfoAsync(string accept, string scopeId, string productId, string priceListId, UpdateVariantsPriceListEntryRequest body = default(UpdateVariantsPriceListEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Uploads a media file and attaches it to the product/variant - {UploadMediaRequest}
        /// </summary>
        /// <remarks>
        /// Uploads a media file Send media files via multipart/form-data
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId"> the id of the product for which we want to upload media.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> UploadMediaRequestmediaScopeIdProductIduploadPostAsync(string accept, string scopeId, string productId, UploadMediaRequest body = default(UploadMediaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Uploads a media file and attaches it to the product/variant - {UploadMediaRequest}
        /// </summary>
        /// <remarks>
        /// Uploads a media file Send media files via multipart/form-data
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId"> the id of the product for which we want to upload media.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> UploadMediaRequestmediaScopeIdProductIduploadPostWithHttpInfoAsync(string accept, string scopeId, string productId, UploadMediaRequest body = default(UploadMediaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApi : IProductsApiSync, IProductsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductsApi : IProductsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Copies products from Global scope to a sales scope - {AddFromGlobalRequest} Copies products from Global scope to a sales scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo AddFromGlobalRequestScopeIdfromGlobalPost(string accept, string scopeId, AddFromGlobalRequest body = default(AddFromGlobalRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = AddFromGlobalRequestScopeIdfromGlobalPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copies products from Global scope to a sales scope - {AddFromGlobalRequest} Copies products from Global scope to a sales scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> AddFromGlobalRequestScopeIdfromGlobalPostWithHttpInfo(string accept, string scopeId, AddFromGlobalRequest body = default(AddFromGlobalRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->AddFromGlobalRequestScopeIdfromGlobalPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->AddFromGlobalRequestScopeIdfromGlobalPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/products/{ScopeId}/fromGlobal", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFromGlobalRequestScopeIdfromGlobalPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copies products from Global scope to a sales scope - {AddFromGlobalRequest} Copies products from Global scope to a sales scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> AddFromGlobalRequestScopeIdfromGlobalPostAsync(string accept, string scopeId, AddFromGlobalRequest body = default(AddFromGlobalRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await AddFromGlobalRequestScopeIdfromGlobalPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copies products from Global scope to a sales scope - {AddFromGlobalRequest} Copies products from Global scope to a sales scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> AddFromGlobalRequestScopeIdfromGlobalPostWithHttpInfoAsync(string accept, string scopeId, AddFromGlobalRequest body = default(AddFromGlobalRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->AddFromGlobalRequestScopeIdfromGlobalPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->AddFromGlobalRequestScopeIdfromGlobalPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/products/{ScopeId}/fromGlobal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFromGlobalRequestScopeIdfromGlobalPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds or updates the given price lists into the specified scope - {AddOrUpdatePriceListRequest} Adds or updates the given price lists into the specified scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AddOrUpdatePriceListRequestScopeIdpriceListsPost(string accept, string scopeId, AddOrUpdatePriceListRequest body = default(AddOrUpdatePriceListRequest))
        {
            AddOrUpdatePriceListRequestScopeIdpriceListsPostWithHttpInfo(accept, scopeId, body);
        }

        /// <summary>
        /// Adds or updates the given price lists into the specified scope - {AddOrUpdatePriceListRequest} Adds or updates the given price lists into the specified scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> AddOrUpdatePriceListRequestScopeIdpriceListsPostWithHttpInfo(string accept, string scopeId, AddOrUpdatePriceListRequest body = default(AddOrUpdatePriceListRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->AddOrUpdatePriceListRequestScopeIdpriceListsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->AddOrUpdatePriceListRequestScopeIdpriceListsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/products/{ScopeId}/priceLists", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdatePriceListRequestScopeIdpriceListsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds or updates the given price lists into the specified scope - {AddOrUpdatePriceListRequest} Adds or updates the given price lists into the specified scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrUpdatePriceListRequestScopeIdpriceListsPostAsync(string accept, string scopeId, AddOrUpdatePriceListRequest body = default(AddOrUpdatePriceListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddOrUpdatePriceListRequestScopeIdpriceListsPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Adds or updates the given price lists into the specified scope - {AddOrUpdatePriceListRequest} Adds or updates the given price lists into the specified scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> AddOrUpdatePriceListRequestScopeIdpriceListsPostWithHttpInfoAsync(string accept, string scopeId, AddOrUpdatePriceListRequest body = default(AddOrUpdatePriceListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->AddOrUpdatePriceListRequestScopeIdpriceListsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->AddOrUpdatePriceListRequestScopeIdpriceListsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/products/{ScopeId}/priceLists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdatePriceListRequestScopeIdpriceListsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a price List Entry - {AddPriceListEntryRequest} Adds a price List Entry
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to add a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PriceListEntry</returns>
        public PriceListEntry AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPost(string accept, string scopeId, string productId, AddPriceListEntryRequest body = default(AddPriceListEntryRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceListEntry> localVarResponse = AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPostWithHttpInfo(accept, scopeId, productId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a price List Entry - {AddPriceListEntryRequest} Adds a price List Entry
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to add a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PriceListEntry</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceListEntry> AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPostWithHttpInfo(string accept, string scopeId, string productId, AddPriceListEntryRequest body = default(AddPriceListEntryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPost");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PriceListEntry>("/products/{ScopeId}/{ProductId}/priceListEntries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a price List Entry - {AddPriceListEntryRequest} Adds a price List Entry
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to add a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceListEntry</returns>
        public async System.Threading.Tasks.Task<PriceListEntry> AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPostAsync(string accept, string scopeId, string productId, AddPriceListEntryRequest body = default(AddPriceListEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceListEntry> localVarResponse = await AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPostWithHttpInfoAsync(accept, scopeId, productId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a price List Entry - {AddPriceListEntryRequest} Adds a price List Entry
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to add a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceListEntry)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceListEntry>> AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPostWithHttpInfoAsync(string accept, string scopeId, string productId, AddPriceListEntryRequest body = default(AddPriceListEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPost");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PriceListEntry>("/products/{ScopeId}/{ProductId}/priceListEntries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPriceListEntryRequestScopeIdProductIdpriceListEntriesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts a task that updates category associations for multiple products - {BulkAssignProductCategoriesRequest} Starts a task that updates category associations for multiple products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPost(string accept, string scopeId, BulkAssignProductCategoriesRequest body = default(BulkAssignProductCategoriesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a task that updates category associations for multiple products - {BulkAssignProductCategoriesRequest} Starts a task that updates category associations for multiple products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPostWithHttpInfo(string accept, string scopeId, BulkAssignProductCategoriesRequest body = default(BulkAssignProductCategoriesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/products/{ScopeId}/bulkAssignCategories", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts a task that updates category associations for multiple products - {BulkAssignProductCategoriesRequest} Starts a task that updates category associations for multiple products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPostAsync(string accept, string scopeId, BulkAssignProductCategoriesRequest body = default(BulkAssignProductCategoriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a task that updates category associations for multiple products - {BulkAssignProductCategoriesRequest} Starts a task that updates category associations for multiple products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPostWithHttpInfoAsync(string accept, string scopeId, BulkAssignProductCategoriesRequest body = default(BulkAssignProductCategoriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/products/{ScopeId}/bulkAssignCategories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkAssignProductCategoriesRequestScopeIdbulkAssignCategoriesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts - {BulkRevertProductChangesRequest} Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo BulkRevertProductChangesRequestScopeIdbulkRevertPost(string accept, string scopeId, BulkRevertProductChangesRequest body = default(BulkRevertProductChangesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = BulkRevertProductChangesRequestScopeIdbulkRevertPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts - {BulkRevertProductChangesRequest} Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> BulkRevertProductChangesRequestScopeIdbulkRevertPostWithHttpInfo(string accept, string scopeId, BulkRevertProductChangesRequest body = default(BulkRevertProductChangesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->BulkRevertProductChangesRequestScopeIdbulkRevertPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->BulkRevertProductChangesRequestScopeIdbulkRevertPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/products/{ScopeId}/bulkRevert", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkRevertProductChangesRequestScopeIdbulkRevertPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts - {BulkRevertProductChangesRequest} Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> BulkRevertProductChangesRequestScopeIdbulkRevertPostAsync(string accept, string scopeId, BulkRevertProductChangesRequest body = default(BulkRevertProductChangesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await BulkRevertProductChangesRequestScopeIdbulkRevertPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts - {BulkRevertProductChangesRequest} Starts a task that reverts not published product changes for multiple products by replacing working copies of products with their published counterparts.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> BulkRevertProductChangesRequestScopeIdbulkRevertPostWithHttpInfoAsync(string accept, string scopeId, BulkRevertProductChangesRequest body = default(BulkRevertProductChangesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->BulkRevertProductChangesRequestScopeIdbulkRevertPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->BulkRevertProductChangesRequestScopeIdbulkRevertPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/products/{ScopeId}/bulkRevert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkRevertProductChangesRequestScopeIdbulkRevertPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts a task that updates publication status for multiple products - {BulkUpdatePublicationStatusRequest} Starts a task that updates publication status for multiple products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPost(string accept, string scopeId, BulkUpdatePublicationStatusRequest body = default(BulkUpdatePublicationStatusRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a task that updates publication status for multiple products - {BulkUpdatePublicationStatusRequest} Starts a task that updates publication status for multiple products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPostWithHttpInfo(string accept, string scopeId, BulkUpdatePublicationStatusRequest body = default(BulkUpdatePublicationStatusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/products/{ScopeId}/bulkUpdatePublicationStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts a task that updates publication status for multiple products - {BulkUpdatePublicationStatusRequest} Starts a task that updates publication status for multiple products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPostAsync(string accept, string scopeId, BulkUpdatePublicationStatusRequest body = default(BulkUpdatePublicationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a task that updates publication status for multiple products - {BulkUpdatePublicationStatusRequest} Starts a task that updates publication status for multiple products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPostWithHttpInfoAsync(string accept, string scopeId, BulkUpdatePublicationStatusRequest body = default(BulkUpdatePublicationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/products/{ScopeId}/bulkUpdatePublicationStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkUpdatePublicationStatusRequestScopeIdbulkUpdatePublicationStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the price of a product - {CalculatePricesofProductsRequest} Retrieve the price product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;ProductPrice&gt;</returns>
        public List<ProductPrice> CalculatePricesofProductsRequestScopeIdpricesPost(string accept, string scopeId, CalculatePricesofProductsRequest body = default(CalculatePricesofProductsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductPrice>> localVarResponse = CalculatePricesofProductsRequestScopeIdpricesPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the price of a product - {CalculatePricesofProductsRequest} Retrieve the price product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductPrice&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductPrice>> CalculatePricesofProductsRequestScopeIdpricesPostWithHttpInfo(string accept, string scopeId, CalculatePricesofProductsRequest body = default(CalculatePricesofProductsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->CalculatePricesofProductsRequestScopeIdpricesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->CalculatePricesofProductsRequestScopeIdpricesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ProductPrice>>("/products/{ScopeId}/prices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CalculatePricesofProductsRequestScopeIdpricesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the price of a product - {CalculatePricesofProductsRequest} Retrieve the price product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProductPrice&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductPrice>> CalculatePricesofProductsRequestScopeIdpricesPostAsync(string accept, string scopeId, CalculatePricesofProductsRequest body = default(CalculatePricesofProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductPrice>> localVarResponse = await CalculatePricesofProductsRequestScopeIdpricesPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the price of a product - {CalculatePricesofProductsRequest} Retrieve the price product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductPrice&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductPrice>>> CalculatePricesofProductsRequestScopeIdpricesPostWithHttpInfoAsync(string accept, string scopeId, CalculatePricesofProductsRequest body = default(CalculatePricesofProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->CalculatePricesofProductsRequestScopeIdpricesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->CalculatePricesofProductsRequestScopeIdpricesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ProductPrice>>("/products/{ScopeId}/prices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CalculatePricesofProductsRequestScopeIdpricesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the price of a product - {CalculateProductPriceRequest} Retrieve the price product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductPrice</returns>
        public ProductPrice CalculateProductPriceRequestScopeIdProductIdpricePost(string accept, string scopeId, string productId, CalculateProductPriceRequest body = default(CalculateProductPriceRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPrice> localVarResponse = CalculateProductPriceRequestScopeIdProductIdpricePostWithHttpInfo(accept, scopeId, productId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the price of a product - {CalculateProductPriceRequest} Retrieve the price product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductPrice</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPrice> CalculateProductPriceRequestScopeIdProductIdpricePostWithHttpInfo(string accept, string scopeId, string productId, CalculateProductPriceRequest body = default(CalculateProductPriceRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->CalculateProductPriceRequestScopeIdProductIdpricePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->CalculateProductPriceRequestScopeIdProductIdpricePost");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->CalculateProductPriceRequestScopeIdProductIdpricePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductPrice>("/products/{ScopeId}/{ProductId}/price", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CalculateProductPriceRequestScopeIdProductIdpricePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the price of a product - {CalculateProductPriceRequest} Retrieve the price product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductPrice</returns>
        public async System.Threading.Tasks.Task<ProductPrice> CalculateProductPriceRequestScopeIdProductIdpricePostAsync(string accept, string scopeId, string productId, CalculateProductPriceRequest body = default(CalculateProductPriceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPrice> localVarResponse = await CalculateProductPriceRequestScopeIdProductIdpricePostWithHttpInfoAsync(accept, scopeId, productId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the price of a product - {CalculateProductPriceRequest} Retrieve the price product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductPrice)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductPrice>> CalculateProductPriceRequestScopeIdProductIdpricePostWithHttpInfoAsync(string accept, string scopeId, string productId, CalculateProductPriceRequest body = default(CalculateProductPriceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->CalculateProductPriceRequestScopeIdProductIdpricePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->CalculateProductPriceRequestScopeIdProductIdpricePost");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->CalculateProductPriceRequestScopeIdProductIdpricePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductPrice>("/products/{ScopeId}/{ProductId}/price", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CalculateProductPriceRequestScopeIdProductIdpricePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// A request to copy a product - {CopyProductRequest} A request to copy a product
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product to be copied</param>
        /// <param name="newProductId">The id of the product to be created</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Product</returns>
        public Product CopyProductRequestScopeIdProductIdcopyNewProductIdCreate(string accept, string scopeId, string productId, string newProductId, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = CopyProductRequestScopeIdProductIdcopyNewProductIdCreateWithHttpInfo(accept, scopeId, productId, newProductId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A request to copy a product - {CopyProductRequest} A request to copy a product
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product to be copied</param>
        /// <param name="newProductId">The id of the product to be created</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> CopyProductRequestScopeIdProductIdcopyNewProductIdCreateWithHttpInfo(string accept, string scopeId, string productId, string newProductId, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->CopyProductRequestScopeIdProductIdcopyNewProductIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->CopyProductRequestScopeIdProductIdcopyNewProductIdCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->CopyProductRequestScopeIdProductIdcopyNewProductIdCreate");

            // verify the required parameter 'newProductId' is set
            if (newProductId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'newProductId' when calling ProductsApi->CopyProductRequestScopeIdProductIdcopyNewProductIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("NewProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(newProductId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Product>("/products/{ScopeId}/{ProductId}/copy/{NewProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyProductRequestScopeIdProductIdcopyNewProductIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// A request to copy a product - {CopyProductRequest} A request to copy a product
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product to be copied</param>
        /// <param name="newProductId">The id of the product to be created</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> CopyProductRequestScopeIdProductIdcopyNewProductIdCreateAsync(string accept, string scopeId, string productId, string newProductId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = await CopyProductRequestScopeIdProductIdcopyNewProductIdCreateWithHttpInfoAsync(accept, scopeId, productId, newProductId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A request to copy a product - {CopyProductRequest} A request to copy a product
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product to be copied</param>
        /// <param name="newProductId">The id of the product to be created</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product>> CopyProductRequestScopeIdProductIdcopyNewProductIdCreateWithHttpInfoAsync(string accept, string scopeId, string productId, string newProductId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->CopyProductRequestScopeIdProductIdcopyNewProductIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->CopyProductRequestScopeIdProductIdcopyNewProductIdCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->CopyProductRequestScopeIdProductIdcopyNewProductIdCreate");

            // verify the required parameter 'newProductId' is set
            if (newProductId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'newProductId' when calling ProductsApi->CopyProductRequestScopeIdProductIdcopyNewProductIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("NewProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(newProductId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Product>("/products/{ScopeId}/{ProductId}/copy/{NewProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyProductRequestScopeIdProductIdcopyNewProductIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a price list into the specified scope - {CreatePriceListRequest} Creates a price list into the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PriceList</returns>
        public PriceList CreatePriceListRequestScopeIdpriceListsPriceListIdPost(string accept, string scopeId, string priceListId, CreatePriceListRequest body = default(CreatePriceListRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceList> localVarResponse = CreatePriceListRequestScopeIdpriceListsPriceListIdPostWithHttpInfo(accept, scopeId, priceListId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a price list into the specified scope - {CreatePriceListRequest} Creates a price list into the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PriceList</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceList> CreatePriceListRequestScopeIdpriceListsPriceListIdPostWithHttpInfo(string accept, string scopeId, string priceListId, CreatePriceListRequest body = default(CreatePriceListRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->CreatePriceListRequestScopeIdpriceListsPriceListIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->CreatePriceListRequestScopeIdpriceListsPriceListIdPost");

            // verify the required parameter 'priceListId' is set
            if (priceListId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'priceListId' when calling ProductsApi->CreatePriceListRequestScopeIdpriceListsPriceListIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PriceListId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(priceListId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PriceList>("/products/{ScopeId}/priceLists/{PriceListId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePriceListRequestScopeIdpriceListsPriceListIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a price list into the specified scope - {CreatePriceListRequest} Creates a price list into the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceList</returns>
        public async System.Threading.Tasks.Task<PriceList> CreatePriceListRequestScopeIdpriceListsPriceListIdPostAsync(string accept, string scopeId, string priceListId, CreatePriceListRequest body = default(CreatePriceListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceList> localVarResponse = await CreatePriceListRequestScopeIdpriceListsPriceListIdPostWithHttpInfoAsync(accept, scopeId, priceListId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a price list into the specified scope - {CreatePriceListRequest} Creates a price list into the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceList)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceList>> CreatePriceListRequestScopeIdpriceListsPriceListIdPostWithHttpInfoAsync(string accept, string scopeId, string priceListId, CreatePriceListRequest body = default(CreatePriceListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->CreatePriceListRequestScopeIdpriceListsPriceListIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->CreatePriceListRequestScopeIdpriceListsPriceListIdPost");

            // verify the required parameter 'priceListId' is set
            if (priceListId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'priceListId' when calling ProductsApi->CreatePriceListRequestScopeIdpriceListsPriceListIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PriceListId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(priceListId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PriceList>("/products/{ScopeId}/priceLists/{PriceListId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePriceListRequestScopeIdpriceListsPriceListIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a product in the specified scope - {CreateProductRequest} Creates a product in the specified scope.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Product</returns>
        public Product CreateProductRequestScopeIdPost(string accept, string scopeId, CreateProductRequest body = default(CreateProductRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = CreateProductRequestScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a product in the specified scope - {CreateProductRequest} Creates a product in the specified scope.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> CreateProductRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateProductRequest body = default(CreateProductRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->CreateProductRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->CreateProductRequestScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Product>("/products/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a product in the specified scope - {CreateProductRequest} Creates a product in the specified scope.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> CreateProductRequestScopeIdPostAsync(string accept, string scopeId, CreateProductRequest body = default(CreateProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = await CreateProductRequestScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a product in the specified scope - {CreateProductRequest} Creates a product in the specified scope.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product>> CreateProductRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateProductRequest body = default(CreateProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->CreateProductRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->CreateProductRequestScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Product>("/products/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a price List Entry - {DeletePriceListEntryRequest} Deletes a price List Entry
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to delete a price list entry</param>
        /// <param name="priceListId">The id of the price list for which we want to delete a price list entry</param>
        /// <param name="variantId">The id of the variant for which we want to delete a price list entry (optional)</param>
        /// <returns></returns>
        public void DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete(string accept, string scopeId, string productId, string priceListId, string variantId = default(string))
        {
            DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDeleteWithHttpInfo(accept, scopeId, productId, priceListId, variantId);
        }

        /// <summary>
        /// Deletes a price List Entry - {DeletePriceListEntryRequest} Deletes a price List Entry
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to delete a price list entry</param>
        /// <param name="priceListId">The id of the price list for which we want to delete a price list entry</param>
        /// <param name="variantId">The id of the variant for which we want to delete a price list entry (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDeleteWithHttpInfo(string accept, string scopeId, string productId, string priceListId, string variantId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete");

            // verify the required parameter 'priceListId' is set
            if (priceListId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'priceListId' when calling ProductsApi->DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PriceListId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(priceListId)); // path parameter
            if (variantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "VariantId", variantId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/products/{ScopeId}/{ProductId}/priceListEntries/{PriceListId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a price List Entry - {DeletePriceListEntryRequest} Deletes a price List Entry
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to delete a price list entry</param>
        /// <param name="priceListId">The id of the price list for which we want to delete a price list entry</param>
        /// <param name="variantId">The id of the variant for which we want to delete a price list entry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDeleteAsync(string accept, string scopeId, string productId, string priceListId, string variantId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDeleteWithHttpInfoAsync(accept, scopeId, productId, priceListId, variantId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a price List Entry - {DeletePriceListEntryRequest} Deletes a price List Entry
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to delete a price list entry</param>
        /// <param name="priceListId">The id of the price list for which we want to delete a price list entry</param>
        /// <param name="variantId">The id of the variant for which we want to delete a price list entry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDeleteWithHttpInfoAsync(string accept, string scopeId, string productId, string priceListId, string variantId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete");

            // verify the required parameter 'priceListId' is set
            if (priceListId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'priceListId' when calling ProductsApi->DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PriceListId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(priceListId)); // path parameter
            if (variantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "VariantId", variantId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/products/{ScopeId}/{ProductId}/priceListEntries/{PriceListId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePriceListEntryRequestScopeIdProductIdpriceListEntriesPriceListIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a price list - {DeletePriceListRequest} Deletes a price list only if that price list does not have any price list entries neither in the scope nor in its dependent scopes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the price list.</param>
        /// <param name="deletePriceListEntries">The value indicating whether the related price list entries should be deleted as well. (optional)</param>
        /// <returns></returns>
        public void DeletePriceListRequestScopeIdpriceListsPriceListIdDelete(string accept, string scopeId, string priceListId, bool? deletePriceListEntries = default(bool?))
        {
            DeletePriceListRequestScopeIdpriceListsPriceListIdDeleteWithHttpInfo(accept, scopeId, priceListId, deletePriceListEntries);
        }

        /// <summary>
        /// Deletes a price list - {DeletePriceListRequest} Deletes a price list only if that price list does not have any price list entries neither in the scope nor in its dependent scopes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the price list.</param>
        /// <param name="deletePriceListEntries">The value indicating whether the related price list entries should be deleted as well. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeletePriceListRequestScopeIdpriceListsPriceListIdDeleteWithHttpInfo(string accept, string scopeId, string priceListId, bool? deletePriceListEntries = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeletePriceListRequestScopeIdpriceListsPriceListIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->DeletePriceListRequestScopeIdpriceListsPriceListIdDelete");

            // verify the required parameter 'priceListId' is set
            if (priceListId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'priceListId' when calling ProductsApi->DeletePriceListRequestScopeIdpriceListsPriceListIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PriceListId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(priceListId)); // path parameter
            if (deletePriceListEntries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "DeletePriceListEntries", deletePriceListEntries));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/products/{ScopeId}/priceLists/{PriceListId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePriceListRequestScopeIdpriceListsPriceListIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a price list - {DeletePriceListRequest} Deletes a price list only if that price list does not have any price list entries neither in the scope nor in its dependent scopes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the price list.</param>
        /// <param name="deletePriceListEntries">The value indicating whether the related price list entries should be deleted as well. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePriceListRequestScopeIdpriceListsPriceListIdDeleteAsync(string accept, string scopeId, string priceListId, bool? deletePriceListEntries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePriceListRequestScopeIdpriceListsPriceListIdDeleteWithHttpInfoAsync(accept, scopeId, priceListId, deletePriceListEntries, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a price list - {DeletePriceListRequest} Deletes a price list only if that price list does not have any price list entries neither in the scope nor in its dependent scopes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the price list.</param>
        /// <param name="deletePriceListEntries">The value indicating whether the related price list entries should be deleted as well. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeletePriceListRequestScopeIdpriceListsPriceListIdDeleteWithHttpInfoAsync(string accept, string scopeId, string priceListId, bool? deletePriceListEntries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeletePriceListRequestScopeIdpriceListsPriceListIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->DeletePriceListRequestScopeIdpriceListsPriceListIdDelete");

            // verify the required parameter 'priceListId' is set
            if (priceListId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'priceListId' when calling ProductsApi->DeletePriceListRequestScopeIdpriceListsPriceListIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PriceListId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(priceListId)); // path parameter
            if (deletePriceListEntries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "DeletePriceListEntries", deletePriceListEntries));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/products/{ScopeId}/priceLists/{PriceListId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePriceListRequestScopeIdpriceListsPriceListIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdRequest} Deletes product from the scope and all child scopes
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <returns></returns>
        public void DeleteProductByIdRequestScopeIdproductProductIdDelete(string accept, string scopeId, string productId)
        {
            DeleteProductByIdRequestScopeIdproductProductIdDeleteWithHttpInfo(accept, scopeId, productId);
        }

        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdRequest} Deletes product from the scope and all child scopes
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteProductByIdRequestScopeIdproductProductIdDeleteWithHttpInfo(string accept, string scopeId, string productId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeleteProductByIdRequestScopeIdproductProductIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->DeleteProductByIdRequestScopeIdproductProductIdDelete");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteProductByIdRequestScopeIdproductProductIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/products/{ScopeId}/product/{ProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductByIdRequestScopeIdproductProductIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdRequest} Deletes product from the scope and all child scopes
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductByIdRequestScopeIdproductProductIdDeleteAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProductByIdRequestScopeIdproductProductIdDeleteWithHttpInfoAsync(accept, scopeId, productId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdRequest} Deletes product from the scope and all child scopes
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteProductByIdRequestScopeIdproductProductIdDeleteWithHttpInfoAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeleteProductByIdRequestScopeIdproductProductIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->DeleteProductByIdRequestScopeIdproductProductIdDelete");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteProductByIdRequestScopeIdproductProductIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/products/{ScopeId}/product/{ProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductByIdRequestScopeIdproductProductIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdV2Request} Deletes product from the scope and all child scopes
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <returns></returns>
        public void DeleteProductByIdV2Requestv2ScopeIdProductIdDelete(string accept, string scopeId, string productId)
        {
            DeleteProductByIdV2Requestv2ScopeIdProductIdDeleteWithHttpInfo(accept, scopeId, productId);
        }

        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdV2Request} Deletes product from the scope and all child scopes
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteProductByIdV2Requestv2ScopeIdProductIdDeleteWithHttpInfo(string accept, string scopeId, string productId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeleteProductByIdV2Requestv2ScopeIdProductIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->DeleteProductByIdV2Requestv2ScopeIdProductIdDelete");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteProductByIdV2Requestv2ScopeIdProductIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/products/v2/{ScopeId}/{ProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductByIdV2Requestv2ScopeIdProductIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdV2Request} Deletes product from the scope and all child scopes
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductByIdV2Requestv2ScopeIdProductIdDeleteAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProductByIdV2Requestv2ScopeIdProductIdDeleteWithHttpInfoAsync(accept, scopeId, productId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes product from the scope and all child scopes - {DeleteProductByIdV2Request} Deletes product from the scope and all child scopes
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteProductByIdV2Requestv2ScopeIdProductIdDeleteWithHttpInfoAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeleteProductByIdV2Requestv2ScopeIdProductIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->DeleteProductByIdV2Requestv2ScopeIdProductIdDelete");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteProductByIdV2Requestv2ScopeIdProductIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/products/v2/{ScopeId}/{ProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductByIdV2Requestv2ScopeIdProductIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a product draft - {DeleteProductDraftRequest} Delete a product draft
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to delete the draft</param>
        /// <returns></returns>
        public void DeleteProductDraftRequestScopeIddraftProductIdDelete(string accept, string scopeId, string productId)
        {
            DeleteProductDraftRequestScopeIddraftProductIdDeleteWithHttpInfo(accept, scopeId, productId);
        }

        /// <summary>
        /// Delete a product draft - {DeleteProductDraftRequest} Delete a product draft
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to delete the draft</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteProductDraftRequestScopeIddraftProductIdDeleteWithHttpInfo(string accept, string scopeId, string productId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeleteProductDraftRequestScopeIddraftProductIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->DeleteProductDraftRequestScopeIddraftProductIdDelete");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteProductDraftRequestScopeIddraftProductIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/products/{ScopeId}/draft/{ProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductDraftRequestScopeIddraftProductIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a product draft - {DeleteProductDraftRequest} Delete a product draft
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to delete the draft</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductDraftRequestScopeIddraftProductIdDeleteAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProductDraftRequestScopeIddraftProductIdDeleteWithHttpInfoAsync(accept, scopeId, productId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a product draft - {DeleteProductDraftRequest} Delete a product draft
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to delete the draft</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteProductDraftRequestScopeIddraftProductIdDeleteWithHttpInfoAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeleteProductDraftRequestScopeIddraftProductIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->DeleteProductDraftRequestScopeIddraftProductIdDelete");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteProductDraftRequestScopeIddraftProductIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/products/{ScopeId}/draft/{ProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductDraftRequestScopeIddraftProductIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a setting used in product module - {DeleteProductSettingsEntryRequest} Delete a setting used in product module
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entry">the product settings entry to delete</param>
        /// <returns></returns>
        public void DeleteProductSettingsEntryRequestsettingsEntryDelete(string accept, string entry)
        {
            DeleteProductSettingsEntryRequestsettingsEntryDeleteWithHttpInfo(accept, entry);
        }

        /// <summary>
        /// Delete a setting used in product module - {DeleteProductSettingsEntryRequest} Delete a setting used in product module
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entry">the product settings entry to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteProductSettingsEntryRequestsettingsEntryDeleteWithHttpInfo(string accept, string entry)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeleteProductSettingsEntryRequestsettingsEntryDelete");

            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entry' when calling ProductsApi->DeleteProductSettingsEntryRequestsettingsEntryDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Entry", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entry)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/products/settings/{Entry}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductSettingsEntryRequestsettingsEntryDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a setting used in product module - {DeleteProductSettingsEntryRequest} Delete a setting used in product module
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entry">the product settings entry to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductSettingsEntryRequestsettingsEntryDeleteAsync(string accept, string entry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProductSettingsEntryRequestsettingsEntryDeleteWithHttpInfoAsync(accept, entry, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a setting used in product module - {DeleteProductSettingsEntryRequest} Delete a setting used in product module
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="entry">the product settings entry to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteProductSettingsEntryRequestsettingsEntryDeleteWithHttpInfoAsync(string accept, string entry, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeleteProductSettingsEntryRequestsettingsEntryDelete");

            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entry' when calling ProductsApi->DeleteProductSettingsEntryRequestsettingsEntryDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Entry", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entry)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/products/settings/{Entry}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductSettingsEntryRequestsettingsEntryDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts a task that deletes multiple products - {DeleteProductsRequest} Starts a task that deletes multiple products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo DeleteProductsRequestScopeIdbulkDeletePost(string accept, string scopeId, DeleteProductsRequest body = default(DeleteProductsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = DeleteProductsRequestScopeIdbulkDeletePostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a task that deletes multiple products - {DeleteProductsRequest} Starts a task that deletes multiple products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> DeleteProductsRequestScopeIdbulkDeletePostWithHttpInfo(string accept, string scopeId, DeleteProductsRequest body = default(DeleteProductsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeleteProductsRequestScopeIdbulkDeletePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->DeleteProductsRequestScopeIdbulkDeletePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/products/{ScopeId}/bulkDelete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductsRequestScopeIdbulkDeletePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts a task that deletes multiple products - {DeleteProductsRequest} Starts a task that deletes multiple products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> DeleteProductsRequestScopeIdbulkDeletePostAsync(string accept, string scopeId, DeleteProductsRequest body = default(DeleteProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await DeleteProductsRequestScopeIdbulkDeletePostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a task that deletes multiple products - {DeleteProductsRequest} Starts a task that deletes multiple products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> DeleteProductsRequestScopeIdbulkDeletePostWithHttpInfoAsync(string accept, string scopeId, DeleteProductsRequest body = default(DeleteProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeleteProductsRequestScopeIdbulkDeletePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->DeleteProductsRequestScopeIdbulkDeletePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/products/{ScopeId}/bulkDelete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductsRequestScopeIdbulkDeletePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cleanup unused media storage - {DeleteUnusedMediaStorageRequest} Delete unused media storage request
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="url">the Url of the media. (optional)</param>
        /// <returns>DeleteUnusedMediaStorageResponse</returns>
        public DeleteUnusedMediaStorageResponse DeleteUnusedMediaStorageRequestmediastorageDelete(string accept, string url = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeleteUnusedMediaStorageResponse> localVarResponse = DeleteUnusedMediaStorageRequestmediastorageDeleteWithHttpInfo(accept, url);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cleanup unused media storage - {DeleteUnusedMediaStorageRequest} Delete unused media storage request
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="url">the Url of the media. (optional)</param>
        /// <returns>ApiResponse of DeleteUnusedMediaStorageResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeleteUnusedMediaStorageResponse> DeleteUnusedMediaStorageRequestmediastorageDeleteWithHttpInfo(string accept, string url = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeleteUnusedMediaStorageRequestmediastorageDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (url != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Url", url));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteUnusedMediaStorageResponse>("/products/media/storage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUnusedMediaStorageRequestmediastorageDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cleanup unused media storage - {DeleteUnusedMediaStorageRequest} Delete unused media storage request
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="url">the Url of the media. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteUnusedMediaStorageResponse</returns>
        public async System.Threading.Tasks.Task<DeleteUnusedMediaStorageResponse> DeleteUnusedMediaStorageRequestmediastorageDeleteAsync(string accept, string url = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeleteUnusedMediaStorageResponse> localVarResponse = await DeleteUnusedMediaStorageRequestmediastorageDeleteWithHttpInfoAsync(accept, url, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cleanup unused media storage - {DeleteUnusedMediaStorageRequest} Delete unused media storage request
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="url">the Url of the media. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteUnusedMediaStorageResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeleteUnusedMediaStorageResponse>> DeleteUnusedMediaStorageRequestmediastorageDeleteWithHttpInfoAsync(string accept, string url = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->DeleteUnusedMediaStorageRequestmediastorageDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (url != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Url", url));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteUnusedMediaStorageResponse>("/products/media/storage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUnusedMediaStorageRequestmediastorageDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find all price lists - {FindPriceListsRequest} Find all price lists. Represents a group of prices that are applied to products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <param name="startDate">Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date. (optional)</param>
        /// <param name="endDate">Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date. (optional)</param>
        /// <returns>List&lt;PriceList&gt;</returns>
        public List<PriceList> FindPriceListsRequestScopeIdpriceListsfindGet(string accept, string scopeId, string cultureName = default(string), bool? includeExpiredEntries = default(bool?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PriceList>> localVarResponse = FindPriceListsRequestScopeIdpriceListsfindGetWithHttpInfo(accept, scopeId, cultureName, includeExpiredEntries, startDate, endDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find all price lists - {FindPriceListsRequest} Find all price lists. Represents a group of prices that are applied to products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <param name="startDate">Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date. (optional)</param>
        /// <param name="endDate">Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date. (optional)</param>
        /// <returns>ApiResponse of List&lt;PriceList&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PriceList>> FindPriceListsRequestScopeIdpriceListsfindGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string), bool? includeExpiredEntries = default(bool?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->FindPriceListsRequestScopeIdpriceListsfindGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->FindPriceListsRequestScopeIdpriceListsfindGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeExpiredEntries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeExpiredEntries", includeExpiredEntries));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "EndDate", endDate));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PriceList>>("/products/{ScopeId}/priceLists/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindPriceListsRequestScopeIdpriceListsfindGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find all price lists - {FindPriceListsRequest} Find all price lists. Represents a group of prices that are applied to products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <param name="startDate">Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date. (optional)</param>
        /// <param name="endDate">Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PriceList&gt;</returns>
        public async System.Threading.Tasks.Task<List<PriceList>> FindPriceListsRequestScopeIdpriceListsfindGetAsync(string accept, string scopeId, string cultureName = default(string), bool? includeExpiredEntries = default(bool?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PriceList>> localVarResponse = await FindPriceListsRequestScopeIdpriceListsfindGetWithHttpInfoAsync(accept, scopeId, cultureName, includeExpiredEntries, startDate, endDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find all price lists - {FindPriceListsRequest} Find all price lists. Represents a group of prices that are applied to products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <param name="startDate">Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date. (optional)</param>
        /// <param name="endDate">Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PriceList&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PriceList>>> FindPriceListsRequestScopeIdpriceListsfindGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), bool? includeExpiredEntries = default(bool?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->FindPriceListsRequestScopeIdpriceListsfindGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->FindPriceListsRequestScopeIdpriceListsfindGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeExpiredEntries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeExpiredEntries", includeExpiredEntries));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "EndDate", endDate));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PriceList>>("/products/{ScopeId}/priceLists/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindPriceListsRequestScopeIdpriceListsfindGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the price of a set of Product and its Variants - {FindProductPricesRequest} Retrieve the price of a set of Product and its Variants
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;ProductPrice&gt;</returns>
        public List<ProductPrice> FindProductPricesRequestScopeIdproductPricesPost(string accept, string scopeId, FindProductPricesRequest body = default(FindProductPricesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductPrice>> localVarResponse = FindProductPricesRequestScopeIdproductPricesPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the price of a set of Product and its Variants - {FindProductPricesRequest} Retrieve the price of a set of Product and its Variants
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductPrice&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductPrice>> FindProductPricesRequestScopeIdproductPricesPostWithHttpInfo(string accept, string scopeId, FindProductPricesRequest body = default(FindProductPricesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->FindProductPricesRequestScopeIdproductPricesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->FindProductPricesRequestScopeIdproductPricesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ProductPrice>>("/products/{ScopeId}/productPrices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindProductPricesRequestScopeIdproductPricesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the price of a set of Product and its Variants - {FindProductPricesRequest} Retrieve the price of a set of Product and its Variants
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProductPrice&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductPrice>> FindProductPricesRequestScopeIdproductPricesPostAsync(string accept, string scopeId, FindProductPricesRequest body = default(FindProductPricesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductPrice>> localVarResponse = await FindProductPricesRequestScopeIdproductPricesPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the price of a set of Product and its Variants - {FindProductPricesRequest} Retrieve the price of a set of Product and its Variants
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Scope of the request.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductPrice&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductPrice>>> FindProductPricesRequestScopeIdproductPricesPostWithHttpInfoAsync(string accept, string scopeId, FindProductPricesRequest body = default(FindProductPricesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->FindProductPricesRequestScopeIdproductPricesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->FindProductPricesRequestScopeIdproductPricesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ProductPrice>>("/products/{ScopeId}/productPrices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindProductPricesRequestScopeIdproductPricesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the Price List Info for a product at a specific DateTime - {GetEffectivePriceEntryInfoRequest} Retrieves the Price List Info for a product at a specific DateTime
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve the effective price</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve the effective price (optional)</param>
        /// <param name="referenceDate">The Reference Date, null &#x3D; Now (optional)</param>
        /// <returns>EffectivePriceEntryInfo</returns>
        public EffectivePriceEntryInfo GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGet(string accept, string scopeId, string productId, string variantId = default(string), DateTime? referenceDate = default(DateTime?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<EffectivePriceEntryInfo> localVarResponse = GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGetWithHttpInfo(accept, scopeId, productId, variantId, referenceDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the Price List Info for a product at a specific DateTime - {GetEffectivePriceEntryInfoRequest} Retrieves the Price List Info for a product at a specific DateTime
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve the effective price</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve the effective price (optional)</param>
        /// <param name="referenceDate">The Reference Date, null &#x3D; Now (optional)</param>
        /// <returns>ApiResponse of EffectivePriceEntryInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<EffectivePriceEntryInfo> GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGetWithHttpInfo(string accept, string scopeId, string productId, string variantId = default(string), DateTime? referenceDate = default(DateTime?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (variantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "VariantId", variantId));
            }
            if (referenceDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ReferenceDate", referenceDate));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<EffectivePriceEntryInfo>("/products/{ScopeId}/{ProductId}/effectivePriceEntryInfo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the Price List Info for a product at a specific DateTime - {GetEffectivePriceEntryInfoRequest} Retrieves the Price List Info for a product at a specific DateTime
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve the effective price</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve the effective price (optional)</param>
        /// <param name="referenceDate">The Reference Date, null &#x3D; Now (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EffectivePriceEntryInfo</returns>
        public async System.Threading.Tasks.Task<EffectivePriceEntryInfo> GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGetAsync(string accept, string scopeId, string productId, string variantId = default(string), DateTime? referenceDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<EffectivePriceEntryInfo> localVarResponse = await GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGetWithHttpInfoAsync(accept, scopeId, productId, variantId, referenceDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the Price List Info for a product at a specific DateTime - {GetEffectivePriceEntryInfoRequest} Retrieves the Price List Info for a product at a specific DateTime
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve the effective price</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve the effective price (optional)</param>
        /// <param name="referenceDate">The Reference Date, null &#x3D; Now (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EffectivePriceEntryInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<EffectivePriceEntryInfo>> GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGetWithHttpInfoAsync(string accept, string scopeId, string productId, string variantId = default(string), DateTime? referenceDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (variantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "VariantId", variantId));
            }
            if (referenceDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ReferenceDate", referenceDate));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EffectivePriceEntryInfo>("/products/{ScopeId}/{ProductId}/effectivePriceEntryInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEffectivePriceEntryInfoRequestScopeIdProductIdeffectivePriceEntryInfoGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the media by sku, it can be the product or the variant sku - {GetMediaBySkuRequest} Retrieve the media by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MediaList</returns>
        public MediaList GetMediaBySkuRequestScopeIdbySkuSkumediaPost(string accept, string scopeId, string sku, GetMediaBySkuRequest body = default(GetMediaBySkuRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MediaList> localVarResponse = GetMediaBySkuRequestScopeIdbySkuSkumediaPostWithHttpInfo(accept, scopeId, sku, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the media by sku, it can be the product or the variant sku - {GetMediaBySkuRequest} Retrieve the media by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MediaList</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MediaList> GetMediaBySkuRequestScopeIdbySkuSkumediaPostWithHttpInfo(string accept, string scopeId, string sku, GetMediaBySkuRequest body = default(GetMediaBySkuRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetMediaBySkuRequestScopeIdbySkuSkumediaPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetMediaBySkuRequestScopeIdbySkuSkumediaPost");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->GetMediaBySkuRequestScopeIdbySkuSkumediaPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MediaList>("/products/{ScopeId}/bySku/{Sku}/media", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMediaBySkuRequestScopeIdbySkuSkumediaPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the media by sku, it can be the product or the variant sku - {GetMediaBySkuRequest} Retrieve the media by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MediaList</returns>
        public async System.Threading.Tasks.Task<MediaList> GetMediaBySkuRequestScopeIdbySkuSkumediaPostAsync(string accept, string scopeId, string sku, GetMediaBySkuRequest body = default(GetMediaBySkuRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MediaList> localVarResponse = await GetMediaBySkuRequestScopeIdbySkuSkumediaPostWithHttpInfoAsync(accept, scopeId, sku, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the media by sku, it can be the product or the variant sku - {GetMediaBySkuRequest} Retrieve the media by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MediaList)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MediaList>> GetMediaBySkuRequestScopeIdbySkuSkumediaPostWithHttpInfoAsync(string accept, string scopeId, string sku, GetMediaBySkuRequest body = default(GetMediaBySkuRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetMediaBySkuRequestScopeIdbySkuSkumediaPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetMediaBySkuRequestScopeIdbySkuSkumediaPost");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->GetMediaBySkuRequestScopeIdbySkuSkumediaPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MediaList>("/products/{ScopeId}/bySku/{Sku}/media", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMediaBySkuRequestScopeIdbySkuSkumediaPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a media by Id - {GetMediaRequest} Retrieve a media by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <returns>ProductMedia</returns>
        public ProductMedia GetMediaRequestScopeIdProductIdmediaMediaIdGet(string accept, string scopeId, string productId, string mediaId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductMedia> localVarResponse = GetMediaRequestScopeIdProductIdmediaMediaIdGetWithHttpInfo(accept, scopeId, productId, mediaId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a media by Id - {GetMediaRequest} Retrieve a media by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <returns>ApiResponse of ProductMedia</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductMedia> GetMediaRequestScopeIdProductIdmediaMediaIdGetWithHttpInfo(string accept, string scopeId, string productId, string mediaId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetMediaRequestScopeIdProductIdmediaMediaIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetMediaRequestScopeIdProductIdmediaMediaIdGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetMediaRequestScopeIdProductIdmediaMediaIdGet");

            // verify the required parameter 'mediaId' is set
            if (mediaId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'mediaId' when calling ProductsApi->GetMediaRequestScopeIdProductIdmediaMediaIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("MediaId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(mediaId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductMedia>("/products/{ScopeId}/{ProductId}/media/{MediaId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMediaRequestScopeIdProductIdmediaMediaIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a media by Id - {GetMediaRequest} Retrieve a media by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductMedia</returns>
        public async System.Threading.Tasks.Task<ProductMedia> GetMediaRequestScopeIdProductIdmediaMediaIdGetAsync(string accept, string scopeId, string productId, string mediaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductMedia> localVarResponse = await GetMediaRequestScopeIdProductIdmediaMediaIdGetWithHttpInfoAsync(accept, scopeId, productId, mediaId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a media by Id - {GetMediaRequest} Retrieve a media by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductMedia)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductMedia>> GetMediaRequestScopeIdProductIdmediaMediaIdGetWithHttpInfoAsync(string accept, string scopeId, string productId, string mediaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetMediaRequestScopeIdProductIdmediaMediaIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetMediaRequestScopeIdProductIdmediaMediaIdGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetMediaRequestScopeIdProductIdmediaMediaIdGet");

            // verify the required parameter 'mediaId' is set
            if (mediaId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'mediaId' when calling ProductsApi->GetMediaRequestScopeIdProductIdmediaMediaIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("MediaId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(mediaId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductMedia>("/products/{ScopeId}/{ProductId}/media/{MediaId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMediaRequestScopeIdProductIdmediaMediaIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the settings used in products media - {GetMediaSettingsRequest} Get the settings used in products media
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>MediaSettings</returns>
        public MediaSettings GetMediaSettingsRequestmediasettingsGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MediaSettings> localVarResponse = GetMediaSettingsRequestmediasettingsGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the settings used in products media - {GetMediaSettingsRequest} Get the settings used in products media
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of MediaSettings</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MediaSettings> GetMediaSettingsRequestmediasettingsGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetMediaSettingsRequestmediasettingsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<MediaSettings>("/products/media/settings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMediaSettingsRequestmediasettingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the settings used in products media - {GetMediaSettingsRequest} Get the settings used in products media
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MediaSettings</returns>
        public async System.Threading.Tasks.Task<MediaSettings> GetMediaSettingsRequestmediasettingsGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MediaSettings> localVarResponse = await GetMediaSettingsRequestmediasettingsGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the settings used in products media - {GetMediaSettingsRequest} Get the settings used in products media
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MediaSettings)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MediaSettings>> GetMediaSettingsRequestmediasettingsGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetMediaSettingsRequestmediasettingsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MediaSettings>("/products/media/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMediaSettingsRequestmediasettingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve price list entries - {GetPriceListEntriesRequest} Retrieves price list entries for a given product or variant in a specific scope.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve price list entries</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve price list entries (optional)</param>
        /// <param name="useParentScope">Returns values from the parent scope of the one provided in the request or not, default is false (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <returns>List&lt;PriceListEntry&gt;</returns>
        public List<PriceListEntry> GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGet(string accept, string scopeId, string productId, string variantId = default(string), bool? useParentScope = default(bool?), bool? includeExpiredEntries = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PriceListEntry>> localVarResponse = GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGetWithHttpInfo(accept, scopeId, productId, variantId, useParentScope, includeExpiredEntries);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve price list entries - {GetPriceListEntriesRequest} Retrieves price list entries for a given product or variant in a specific scope.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve price list entries</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve price list entries (optional)</param>
        /// <param name="useParentScope">Returns values from the parent scope of the one provided in the request or not, default is false (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <returns>ApiResponse of List&lt;PriceListEntry&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PriceListEntry>> GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGetWithHttpInfo(string accept, string scopeId, string productId, string variantId = default(string), bool? useParentScope = default(bool?), bool? includeExpiredEntries = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (variantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "VariantId", variantId));
            }
            if (useParentScope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "UseParentScope", useParentScope));
            }
            if (includeExpiredEntries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeExpiredEntries", includeExpiredEntries));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PriceListEntry>>("/products/{ScopeId}/{ProductId}/priceListEntries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve price list entries - {GetPriceListEntriesRequest} Retrieves price list entries for a given product or variant in a specific scope.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve price list entries</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve price list entries (optional)</param>
        /// <param name="useParentScope">Returns values from the parent scope of the one provided in the request or not, default is false (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PriceListEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<PriceListEntry>> GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGetAsync(string accept, string scopeId, string productId, string variantId = default(string), bool? useParentScope = default(bool?), bool? includeExpiredEntries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PriceListEntry>> localVarResponse = await GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGetWithHttpInfoAsync(accept, scopeId, productId, variantId, useParentScope, includeExpiredEntries, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve price list entries - {GetPriceListEntriesRequest} Retrieves price list entries for a given product or variant in a specific scope.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to retrieve price list entries</param>
        /// <param name="variantId">The id of the variant for which we want to retrieve price list entries (optional)</param>
        /// <param name="useParentScope">Returns values from the parent scope of the one provided in the request or not, default is false (optional)</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PriceListEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PriceListEntry>>> GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGetWithHttpInfoAsync(string accept, string scopeId, string productId, string variantId = default(string), bool? useParentScope = default(bool?), bool? includeExpiredEntries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (variantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "VariantId", variantId));
            }
            if (useParentScope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "UseParentScope", useParentScope));
            }
            if (includeExpiredEntries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeExpiredEntries", includeExpiredEntries));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PriceListEntry>>("/products/{ScopeId}/{ProductId}/priceListEntries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPriceListEntriesRequestScopeIdProductIdpriceListEntriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all price lists - {GetPriceListsRequest} Gets all price lists. Represents a group of prices that are applied to products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;PriceList&gt;</returns>
        public List<PriceList> GetPriceListsRequestScopeIdpriceListsGet(string accept, string scopeId, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PriceList>> localVarResponse = GetPriceListsRequestScopeIdpriceListsGetWithHttpInfo(accept, scopeId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all price lists - {GetPriceListsRequest} Gets all price lists. Represents a group of prices that are applied to products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;PriceList&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PriceList>> GetPriceListsRequestScopeIdpriceListsGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetPriceListsRequestScopeIdpriceListsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetPriceListsRequestScopeIdpriceListsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PriceList>>("/products/{ScopeId}/priceLists", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPriceListsRequestScopeIdpriceListsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all price lists - {GetPriceListsRequest} Gets all price lists. Represents a group of prices that are applied to products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PriceList&gt;</returns>
        public async System.Threading.Tasks.Task<List<PriceList>> GetPriceListsRequestScopeIdpriceListsGetAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PriceList>> localVarResponse = await GetPriceListsRequestScopeIdpriceListsGetWithHttpInfoAsync(accept, scopeId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all price lists - {GetPriceListsRequest} Gets all price lists. Represents a group of prices that are applied to products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PriceList&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PriceList>>> GetPriceListsRequestScopeIdpriceListsGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetPriceListsRequestScopeIdpriceListsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetPriceListsRequestScopeIdpriceListsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PriceList>>("/products/{ScopeId}/priceLists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPriceListsRequestScopeIdpriceListsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve and merge all the product attributes from all product definitions - {GetProductAttributesRequest} Retrieve and merge all the product attributes from all product definitions
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ProductAttributes</returns>
        public ProductAttributes GetProductAttributesRequestattributesGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductAttributes> localVarResponse = GetProductAttributesRequestattributesGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve and merge all the product attributes from all product definitions - {GetProductAttributesRequest} Retrieve and merge all the product attributes from all product definitions
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of ProductAttributes</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductAttributes> GetProductAttributesRequestattributesGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductAttributesRequestattributesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductAttributes>("/products/attributes/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductAttributesRequestattributesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve and merge all the product attributes from all product definitions - {GetProductAttributesRequest} Retrieve and merge all the product attributes from all product definitions
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductAttributes</returns>
        public async System.Threading.Tasks.Task<ProductAttributes> GetProductAttributesRequestattributesGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductAttributes> localVarResponse = await GetProductAttributesRequestattributesGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve and merge all the product attributes from all product definitions - {GetProductAttributesRequest} Retrieve and merge all the product attributes from all product definitions
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductAttributes)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductAttributes>> GetProductAttributesRequestattributesGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductAttributesRequestattributesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductAttributes>("/products/attributes/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductAttributesRequestattributesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the entity definition defined in the system related to the Name parameter specified in the request - {GetProductDefinitionRequest} A definition is a list of properties that is allowed to be set to the instance of product or category being used
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve the related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ProductDefinition</returns>
        public ProductDefinition GetProductDefinitionRequestdefinitionsNameGet(string accept, string name, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> localVarResponse = GetProductDefinitionRequestdefinitionsNameGetWithHttpInfo(accept, name, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the entity definition defined in the system related to the Name parameter specified in the request - {GetProductDefinitionRequest} A definition is a list of properties that is allowed to be set to the instance of product or category being used
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve the related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of ProductDefinition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> GetProductDefinitionRequestdefinitionsNameGetWithHttpInfo(string accept, string name, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductDefinitionRequestdefinitionsNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling ProductsApi->GetProductDefinitionRequestdefinitionsNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductDefinition>("/products/definitions/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductDefinitionRequestdefinitionsNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the entity definition defined in the system related to the Name parameter specified in the request - {GetProductDefinitionRequest} A definition is a list of properties that is allowed to be set to the instance of product or category being used
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve the related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDefinition</returns>
        public async System.Threading.Tasks.Task<ProductDefinition> GetProductDefinitionRequestdefinitionsNameGetAsync(string accept, string name, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition> localVarResponse = await GetProductDefinitionRequestdefinitionsNameGetWithHttpInfoAsync(accept, name, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the entity definition defined in the system related to the Name parameter specified in the request - {GetProductDefinitionRequest} A definition is a list of properties that is allowed to be set to the instance of product or category being used
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">The id to retrieve the related entity definition</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDefinition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDefinition>> GetProductDefinitionRequestdefinitionsNameGetWithHttpInfoAsync(string accept, string name, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductDefinitionRequestdefinitionsNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling ProductsApi->GetProductDefinitionRequestdefinitionsNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductDefinition>("/products/definitions/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductDefinitionRequestdefinitionsNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the entity definitions defined in the system related to the EntityType parameter specified in the request - {GetProductDefinitionsRequest} A definition is a list of properties that is allowed to be set to the instance of product or category being used. You could also specify a list of entity definitions name to retrieve. If you don&#39;t specify this list, all entity definitions will be return
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="productType">The type of definition, either Product or Category are the possible values</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>List&lt;ProductDefinition&gt;</returns>
        public List<ProductDefinition> GetProductDefinitionsRequestdefinitionsGet(string accept, string productType, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductDefinition>> localVarResponse = GetProductDefinitionsRequestdefinitionsGetWithHttpInfo(accept, productType, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the entity definitions defined in the system related to the EntityType parameter specified in the request - {GetProductDefinitionsRequest} A definition is a list of properties that is allowed to be set to the instance of product or category being used. You could also specify a list of entity definitions name to retrieve. If you don&#39;t specify this list, all entity definitions will be return
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="productType">The type of definition, either Product or Category are the possible values</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductDefinition&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductDefinition>> GetProductDefinitionsRequestdefinitionsGetWithHttpInfo(string accept, string productType, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductDefinitionsRequestdefinitionsGet");

            // verify the required parameter 'productType' is set
            if (productType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productType' when calling ProductsApi->GetProductDefinitionsRequestdefinitionsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ProductType", productType));
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ProductDefinition>>("/products/definitions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductDefinitionsRequestdefinitionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the entity definitions defined in the system related to the EntityType parameter specified in the request - {GetProductDefinitionsRequest} A definition is a list of properties that is allowed to be set to the instance of product or category being used. You could also specify a list of entity definitions name to retrieve. If you don&#39;t specify this list, all entity definitions will be return
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="productType">The type of definition, either Product or Category are the possible values</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProductDefinition&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductDefinition>> GetProductDefinitionsRequestdefinitionsGetAsync(string accept, string productType, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductDefinition>> localVarResponse = await GetProductDefinitionsRequestdefinitionsGetWithHttpInfoAsync(accept, productType, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the entity definitions defined in the system related to the EntityType parameter specified in the request - {GetProductDefinitionsRequest} A definition is a list of properties that is allowed to be set to the instance of product or category being used. You could also specify a list of entity definitions name to retrieve. If you don&#39;t specify this list, all entity definitions will be return
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="productType">The type of definition, either Product or Category are the possible values</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductDefinition&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductDefinition>>> GetProductDefinitionsRequestdefinitionsGetWithHttpInfoAsync(string accept, string productType, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductDefinitionsRequestdefinitionsGet");

            // verify the required parameter 'productType' is set
            if (productType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productType' when calling ProductsApi->GetProductDefinitionsRequestdefinitionsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ProductType", productType));
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ProductDefinition>>("/products/definitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductDefinitionsRequestdefinitionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a product draft by product id - {GetProductDraftRequest} Retrieve a product draft by product id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ProductDraft</returns>
        public ProductDraft GetProductDraftRequestScopeIddraftProductIdGet(string accept, string scopeId, string productId, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDraft> localVarResponse = GetProductDraftRequestScopeIddraftProductIdGetWithHttpInfo(accept, scopeId, productId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a product draft by product id - {GetProductDraftRequest} Retrieve a product draft by product id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of ProductDraft</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDraft> GetProductDraftRequestScopeIddraftProductIdGetWithHttpInfo(string accept, string scopeId, string productId, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductDraftRequestScopeIddraftProductIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductDraftRequestScopeIddraftProductIdGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductDraftRequestScopeIddraftProductIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductDraft>("/products/{ScopeId}/draft/{ProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductDraftRequestScopeIddraftProductIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a product draft by product id - {GetProductDraftRequest} Retrieve a product draft by product id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDraft</returns>
        public async System.Threading.Tasks.Task<ProductDraft> GetProductDraftRequestScopeIddraftProductIdGetAsync(string accept, string scopeId, string productId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDraft> localVarResponse = await GetProductDraftRequestScopeIddraftProductIdGetWithHttpInfoAsync(accept, scopeId, productId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a product draft by product id - {GetProductDraftRequest} Retrieve a product draft by product id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDraft)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDraft>> GetProductDraftRequestScopeIddraftProductIdGetWithHttpInfoAsync(string accept, string scopeId, string productId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductDraftRequestScopeIddraftProductIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductDraftRequestScopeIddraftProductIdGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductDraftRequestScopeIddraftProductIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductDraft>("/products/{ScopeId}/draft/{ProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductDraftRequestScopeIddraftProductIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a product draft states by product id - {GetProductDraftStatesRequest} Retrieve a product draft states by product id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <returns>LocalizedDraftState</returns>
        public LocalizedDraftState GetProductDraftStatesRequestScopeIddraftStatesProductIdGet(string accept, string scopeId, string productId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<LocalizedDraftState> localVarResponse = GetProductDraftStatesRequestScopeIddraftStatesProductIdGetWithHttpInfo(accept, scopeId, productId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a product draft states by product id - {GetProductDraftStatesRequest} Retrieve a product draft states by product id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <returns>ApiResponse of LocalizedDraftState</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<LocalizedDraftState> GetProductDraftStatesRequestScopeIddraftStatesProductIdGetWithHttpInfo(string accept, string scopeId, string productId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductDraftStatesRequestScopeIddraftStatesProductIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductDraftStatesRequestScopeIddraftStatesProductIdGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductDraftStatesRequestScopeIddraftStatesProductIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<LocalizedDraftState>("/products/{ScopeId}/draftStates/{ProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductDraftStatesRequestScopeIddraftStatesProductIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a product draft states by product id - {GetProductDraftStatesRequest} Retrieve a product draft states by product id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocalizedDraftState</returns>
        public async System.Threading.Tasks.Task<LocalizedDraftState> GetProductDraftStatesRequestScopeIddraftStatesProductIdGetAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<LocalizedDraftState> localVarResponse = await GetProductDraftStatesRequestScopeIddraftStatesProductIdGetWithHttpInfoAsync(accept, scopeId, productId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a product draft states by product id - {GetProductDraftStatesRequest} Retrieve a product draft states by product id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocalizedDraftState)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<LocalizedDraftState>> GetProductDraftStatesRequestScopeIddraftStatesProductIdGetWithHttpInfoAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductDraftStatesRequestScopeIddraftStatesProductIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductDraftStatesRequestScopeIddraftStatesProductIdGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductDraftStatesRequestScopeIddraftStatesProductIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LocalizedDraftState>("/products/{ScopeId}/draftStates/{ProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductDraftStatesRequestScopeIddraftStatesProductIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve product prices by Id - {GetProductPriceEntriesRequest} Retrieve product&#39;s prices by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetProductPriceEntriesResult</returns>
        public GetProductPriceEntriesResult GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPost(string accept, string scopeId, string productId, GetProductPriceEntriesRequest body = default(GetProductPriceEntriesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductPriceEntriesResult> localVarResponse = GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPostWithHttpInfo(accept, scopeId, productId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve product prices by Id - {GetProductPriceEntriesRequest} Retrieve product&#39;s prices by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetProductPriceEntriesResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductPriceEntriesResult> GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPostWithHttpInfo(string accept, string scopeId, string productId, GetProductPriceEntriesRequest body = default(GetProductPriceEntriesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPost");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetProductPriceEntriesResult>("/products/{ScopeId}/{ProductId}/productPriceEntries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve product prices by Id - {GetProductPriceEntriesRequest} Retrieve product&#39;s prices by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductPriceEntriesResult</returns>
        public async System.Threading.Tasks.Task<GetProductPriceEntriesResult> GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPostAsync(string accept, string scopeId, string productId, GetProductPriceEntriesRequest body = default(GetProductPriceEntriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductPriceEntriesResult> localVarResponse = await GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPostWithHttpInfoAsync(accept, scopeId, productId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve product prices by Id - {GetProductPriceEntriesRequest} Retrieve product&#39;s prices by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductPriceEntriesResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductPriceEntriesResult>> GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPostWithHttpInfoAsync(string accept, string scopeId, string productId, GetProductPriceEntriesRequest body = default(GetProductPriceEntriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPost");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetProductPriceEntriesResult>("/products/{ScopeId}/{ProductId}/productPriceEntries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductPriceEntriesRequestScopeIdProductIdproductPriceEntriesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a product relationships - {GetProductRelationshipsRequest} Retrieve a product relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;Relationship&gt;</returns>
        public List<Relationship> GetProductRelationshipsRequestScopeIdProductIdrelationshipsGet(string accept, string scopeId, string productId, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Relationship>> localVarResponse = GetProductRelationshipsRequestScopeIdProductIdrelationshipsGetWithHttpInfo(accept, scopeId, productId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a product relationships - {GetProductRelationshipsRequest} Retrieve a product relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Relationship&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Relationship>> GetProductRelationshipsRequestScopeIdProductIdrelationshipsGetWithHttpInfo(string accept, string scopeId, string productId, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductRelationshipsRequestScopeIdProductIdrelationshipsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductRelationshipsRequestScopeIdProductIdrelationshipsGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductRelationshipsRequestScopeIdProductIdrelationshipsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Relationship>>("/products/{ScopeId}/{ProductId}/relationships", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductRelationshipsRequestScopeIdProductIdrelationshipsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a product relationships - {GetProductRelationshipsRequest} Retrieve a product relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Relationship&gt;</returns>
        public async System.Threading.Tasks.Task<List<Relationship>> GetProductRelationshipsRequestScopeIdProductIdrelationshipsGetAsync(string accept, string scopeId, string productId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Relationship>> localVarResponse = await GetProductRelationshipsRequestScopeIdProductIdrelationshipsGetWithHttpInfoAsync(accept, scopeId, productId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a product relationships - {GetProductRelationshipsRequest} Retrieve a product relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The product id</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Relationship&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Relationship>>> GetProductRelationshipsRequestScopeIdProductIdrelationshipsGetWithHttpInfoAsync(string accept, string scopeId, string productId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductRelationshipsRequestScopeIdProductIdrelationshipsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductRelationshipsRequestScopeIdProductIdrelationshipsGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductRelationshipsRequestScopeIdProductIdrelationshipsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Relationship>>("/products/{ScopeId}/{ProductId}/relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductRelationshipsRequestScopeIdProductIdrelationshipsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a product by Id - {GetProductRequest} Retrieve a product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includeImageUrl"> Gets or sets a value indicating whether or not to include the image url. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>Product</returns>
        public Product GetProductRequestScopeIdProductIdGet(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = GetProductRequestScopeIdProductIdGetWithHttpInfo(accept, scopeId, productId, includeImageUrl, includeVariants, includePriceLists, includeRelationships, includeMedia, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a product by Id - {GetProductRequest} Retrieve a product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includeImageUrl"> Gets or sets a value indicating whether or not to include the image url. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> GetProductRequestScopeIdProductIdGetWithHttpInfo(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductRequestScopeIdProductIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductRequestScopeIdProductIdGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductRequestScopeIdProductIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (includeImageUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeImageUrl", includeImageUrl));
            }
            if (includeVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeVariants", includeVariants));
            }
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (includeMedia != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeMedia", includeMedia));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Product>("/products/{ScopeId}/{ProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductRequestScopeIdProductIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a product by Id - {GetProductRequest} Retrieve a product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includeImageUrl"> Gets or sets a value indicating whether or not to include the image url. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> GetProductRequestScopeIdProductIdGetAsync(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = await GetProductRequestScopeIdProductIdGetWithHttpInfoAsync(accept, scopeId, productId, includeImageUrl, includeVariants, includePriceLists, includeRelationships, includeMedia, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a product by Id - {GetProductRequest} Retrieve a product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includeImageUrl"> Gets or sets a value indicating whether or not to include the image url. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product>> GetProductRequestScopeIdProductIdGetWithHttpInfoAsync(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductRequestScopeIdProductIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductRequestScopeIdProductIdGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductRequestScopeIdProductIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (includeImageUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeImageUrl", includeImageUrl));
            }
            if (includeVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeVariants", includeVariants));
            }
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (includeMedia != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeMedia", includeMedia));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Product>("/products/{ScopeId}/{ProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductRequestScopeIdProductIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the settings used in product module - {GetProductSettingsRequest} Get the settings used in product module
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ProductSettings</returns>
        public ProductSettings GetProductSettingsRequestsettingsGet(string accept, string scopeId = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductSettings> localVarResponse = GetProductSettingsRequestsettingsGetWithHttpInfo(accept, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the settings used in product module - {GetProductSettingsRequest} Get the settings used in product module
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of ProductSettings</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductSettings> GetProductSettingsRequestsettingsGetWithHttpInfo(string accept, string scopeId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductSettingsRequestsettingsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductSettings>("/products/settings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductSettingsRequestsettingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the settings used in product module - {GetProductSettingsRequest} Get the settings used in product module
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductSettings</returns>
        public async System.Threading.Tasks.Task<ProductSettings> GetProductSettingsRequestsettingsGetAsync(string accept, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductSettings> localVarResponse = await GetProductSettingsRequestsettingsGetWithHttpInfoAsync(accept, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the settings used in product module - {GetProductSettingsRequest} Get the settings used in product module
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductSettings)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductSettings>> GetProductSettingsRequestsettingsGetWithHttpInfoAsync(string accept, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductSettingsRequestsettingsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductSettings>("/products/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductSettingsRequestsettingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a product by Id - {GetProductV2Request} Retrieve a product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The business id for the product to retrieve</param>
        /// <param name="includeImageUrl">A value indicating whether or not to include the image url. (optional)</param>
        /// <param name="publishedVersion">A value indicating whether the published version of the product should be returned. (optional)</param>
        /// <param name="includeInheritanceInformation">A value indicating whether to include the list of overridden properties and variants. Applicable for sales scopes. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>Product</returns>
        public Product GetProductV2Requestv2ScopeIdProductIdGet(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? publishedVersion = default(bool?), bool? includeInheritanceInformation = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = GetProductV2Requestv2ScopeIdProductIdGetWithHttpInfo(accept, scopeId, productId, includeImageUrl, publishedVersion, includeInheritanceInformation, includeVariants, includePriceLists, includeRelationships, includeMedia, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a product by Id - {GetProductV2Request} Retrieve a product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The business id for the product to retrieve</param>
        /// <param name="includeImageUrl">A value indicating whether or not to include the image url. (optional)</param>
        /// <param name="publishedVersion">A value indicating whether the published version of the product should be returned. (optional)</param>
        /// <param name="includeInheritanceInformation">A value indicating whether to include the list of overridden properties and variants. Applicable for sales scopes. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> GetProductV2Requestv2ScopeIdProductIdGetWithHttpInfo(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? publishedVersion = default(bool?), bool? includeInheritanceInformation = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductV2Requestv2ScopeIdProductIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductV2Requestv2ScopeIdProductIdGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductV2Requestv2ScopeIdProductIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (includeImageUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeImageUrl", includeImageUrl));
            }
            if (publishedVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PublishedVersion", publishedVersion));
            }
            if (includeInheritanceInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeInheritanceInformation", includeInheritanceInformation));
            }
            if (includeVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeVariants", includeVariants));
            }
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (includeMedia != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeMedia", includeMedia));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Product>("/products/v2/{ScopeId}/{ProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductV2Requestv2ScopeIdProductIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a product by Id - {GetProductV2Request} Retrieve a product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The business id for the product to retrieve</param>
        /// <param name="includeImageUrl">A value indicating whether or not to include the image url. (optional)</param>
        /// <param name="publishedVersion">A value indicating whether the published version of the product should be returned. (optional)</param>
        /// <param name="includeInheritanceInformation">A value indicating whether to include the list of overridden properties and variants. Applicable for sales scopes. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> GetProductV2Requestv2ScopeIdProductIdGetAsync(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? publishedVersion = default(bool?), bool? includeInheritanceInformation = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = await GetProductV2Requestv2ScopeIdProductIdGetWithHttpInfoAsync(accept, scopeId, productId, includeImageUrl, publishedVersion, includeInheritanceInformation, includeVariants, includePriceLists, includeRelationships, includeMedia, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a product by Id - {GetProductV2Request} Retrieve a product by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The business id for the product to retrieve</param>
        /// <param name="includeImageUrl">A value indicating whether or not to include the image url. (optional)</param>
        /// <param name="publishedVersion">A value indicating whether the published version of the product should be returned. (optional)</param>
        /// <param name="includeInheritanceInformation">A value indicating whether to include the list of overridden properties and variants. Applicable for sales scopes. (optional)</param>
        /// <param name="includeVariants">whether or not to include the variants (if they exists) of the product. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the product. (optional)</param>
        /// <param name="includeMedia"> Gets or sets a value indicating whether or not to include the media of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product>> GetProductV2Requestv2ScopeIdProductIdGetWithHttpInfoAsync(string accept, string scopeId, string productId, bool? includeImageUrl = default(bool?), bool? publishedVersion = default(bool?), bool? includeInheritanceInformation = default(bool?), bool? includeVariants = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), bool? includeMedia = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductV2Requestv2ScopeIdProductIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductV2Requestv2ScopeIdProductIdGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductV2Requestv2ScopeIdProductIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (includeImageUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeImageUrl", includeImageUrl));
            }
            if (publishedVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PublishedVersion", publishedVersion));
            }
            if (includeInheritanceInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeInheritanceInformation", includeInheritanceInformation));
            }
            if (includeVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeVariants", includeVariants));
            }
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (includeMedia != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeMedia", includeMedia));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Product>("/products/v2/{ScopeId}/{ProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductV2Requestv2ScopeIdProductIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsRequest} Retrieve a list of products by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductList</returns>
        public ProductList GetProductsByIdsRequestScopeIdbyIdsPost(string accept, string scopeId, GetProductsByIdsRequest body = default(GetProductsByIdsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList> localVarResponse = GetProductsByIdsRequestScopeIdbyIdsPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsRequest} Retrieve a list of products by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductList</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList> GetProductsByIdsRequestScopeIdbyIdsPostWithHttpInfo(string accept, string scopeId, GetProductsByIdsRequest body = default(GetProductsByIdsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsByIdsRequestScopeIdbyIdsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsByIdsRequestScopeIdbyIdsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductList>("/products/{ScopeId}/byIds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsByIdsRequestScopeIdbyIdsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsRequest} Retrieve a list of products by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductList</returns>
        public async System.Threading.Tasks.Task<ProductList> GetProductsByIdsRequestScopeIdbyIdsPostAsync(string accept, string scopeId, GetProductsByIdsRequest body = default(GetProductsByIdsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList> localVarResponse = await GetProductsByIdsRequestScopeIdbyIdsPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsRequest} Retrieve a list of products by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductList)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList>> GetProductsByIdsRequestScopeIdbyIdsPostWithHttpInfoAsync(string accept, string scopeId, GetProductsByIdsRequest body = default(GetProductsByIdsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsByIdsRequestScopeIdbyIdsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsByIdsRequestScopeIdbyIdsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductList>("/products/{ScopeId}/byIds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsByIdsRequestScopeIdbyIdsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsV2Request} Retrieve products by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductList</returns>
        public ProductList GetProductsByIdsV2Requestv2ScopeIdbyIdsPost(string accept, string scopeId, GetProductsByIdsV2Request body = default(GetProductsByIdsV2Request))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList> localVarResponse = GetProductsByIdsV2Requestv2ScopeIdbyIdsPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsV2Request} Retrieve products by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductList</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList> GetProductsByIdsV2Requestv2ScopeIdbyIdsPostWithHttpInfo(string accept, string scopeId, GetProductsByIdsV2Request body = default(GetProductsByIdsV2Request))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsByIdsV2Requestv2ScopeIdbyIdsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsByIdsV2Requestv2ScopeIdbyIdsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductList>("/products/v2/{ScopeId}/byIds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsByIdsV2Requestv2ScopeIdbyIdsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsV2Request} Retrieve products by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductList</returns>
        public async System.Threading.Tasks.Task<ProductList> GetProductsByIdsV2Requestv2ScopeIdbyIdsPostAsync(string accept, string scopeId, GetProductsByIdsV2Request body = default(GetProductsByIdsV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList> localVarResponse = await GetProductsByIdsV2Requestv2ScopeIdbyIdsPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve products by Ids - {GetProductsByIdsV2Request} Retrieve products by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductList)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList>> GetProductsByIdsV2Requestv2ScopeIdbyIdsPostWithHttpInfoAsync(string accept, string scopeId, GetProductsByIdsV2Request body = default(GetProductsByIdsV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsByIdsV2Requestv2ScopeIdbyIdsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsByIdsV2Requestv2ScopeIdbyIdsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductList>("/products/v2/{ScopeId}/byIds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsByIdsV2Requestv2ScopeIdbyIdsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve specified properties of all products with a given publication status and categories - {GetProductsByPublicationStatusRequest} Retrieve specified properties of all products with a given publication status and categories
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetProductsByPublicationStatusResult</returns>
        public GetProductsByPublicationStatusResult GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPost(string accept, string scopeId, GetProductsByPublicationStatusRequest body = default(GetProductsByPublicationStatusRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsByPublicationStatusResult> localVarResponse = GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve specified properties of all products with a given publication status and categories - {GetProductsByPublicationStatusRequest} Retrieve specified properties of all products with a given publication status and categories
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetProductsByPublicationStatusResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsByPublicationStatusResult> GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPostWithHttpInfo(string accept, string scopeId, GetProductsByPublicationStatusRequest body = default(GetProductsByPublicationStatusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetProductsByPublicationStatusResult>("/products/{ScopeId}/byPublicationStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve specified properties of all products with a given publication status and categories - {GetProductsByPublicationStatusRequest} Retrieve specified properties of all products with a given publication status and categories
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsByPublicationStatusResult</returns>
        public async System.Threading.Tasks.Task<GetProductsByPublicationStatusResult> GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPostAsync(string accept, string scopeId, GetProductsByPublicationStatusRequest body = default(GetProductsByPublicationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsByPublicationStatusResult> localVarResponse = await GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve specified properties of all products with a given publication status and categories - {GetProductsByPublicationStatusRequest} Retrieve specified properties of all products with a given publication status and categories
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsByPublicationStatusResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsByPublicationStatusResult>> GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPostWithHttpInfoAsync(string accept, string scopeId, GetProductsByPublicationStatusRequest body = default(GetProductsByPublicationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetProductsByPublicationStatusResult>("/products/{ScopeId}/byPublicationStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsByPublicationStatusRequestScopeIdbyPublicationStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuRequest} Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> GetProductsBySkuRequestScopeIdbySkuSkuGet(string accept, string scopeId, string sku, bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Product>> localVarResponse = GetProductsBySkuRequestScopeIdbySkuSkuGetWithHttpInfo(accept, scopeId, sku, includePriceLists, includeRelationships, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuRequest} Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Product>> GetProductsBySkuRequestScopeIdbySkuSkuGetWithHttpInfo(string accept, string scopeId, string sku, bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsBySkuRequestScopeIdbySkuSkuGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsBySkuRequestScopeIdbySkuSkuGet");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->GetProductsBySkuRequestScopeIdbySkuSkuGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Product>>("/products/{ScopeId}/bySku/{Sku}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsBySkuRequestScopeIdbySkuSkuGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuRequest} Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> GetProductsBySkuRequestScopeIdbySkuSkuGetAsync(string accept, string scopeId, string sku, bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Product>> localVarResponse = await GetProductsBySkuRequestScopeIdbySkuSkuGetWithHttpInfoAsync(accept, scopeId, sku, includePriceLists, includeRelationships, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuRequest} Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Product>>> GetProductsBySkuRequestScopeIdbySkuSkuGetWithHttpInfoAsync(string accept, string scopeId, string sku, bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsBySkuRequestScopeIdbySkuSkuGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsBySkuRequestScopeIdbySkuSkuGet");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->GetProductsBySkuRequestScopeIdbySkuSkuGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Product>>("/products/{ScopeId}/bySku/{Sku}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsBySkuRequestScopeIdbySkuSkuGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuV2Request} Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="searchVariantSkus">Gets or sets a value indicating whether or not to search for variant SKU-s, in addition to searching in product SKU-s. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>ProductList</returns>
        public ProductList GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGet(string accept, string scopeId, string sku, bool? searchVariantSkus = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList> localVarResponse = GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGetWithHttpInfo(accept, scopeId, sku, searchVariantSkus, includePriceLists, includeRelationships, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuV2Request} Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="searchVariantSkus">Gets or sets a value indicating whether or not to search for variant SKU-s, in addition to searching in product SKU-s. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <returns>ApiResponse of ProductList</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList> GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGetWithHttpInfo(string accept, string scopeId, string sku, bool? searchVariantSkus = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGet");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            if (searchVariantSkus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchVariantSkus", searchVariantSkus));
            }
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductList>("/products/v2/{ScopeId}/bySku/{Sku}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuV2Request} Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="searchVariantSkus">Gets or sets a value indicating whether or not to search for variant SKU-s, in addition to searching in product SKU-s. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductList</returns>
        public async System.Threading.Tasks.Task<ProductList> GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGetAsync(string accept, string scopeId, string sku, bool? searchVariantSkus = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList> localVarResponse = await GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGetWithHttpInfoAsync(accept, scopeId, sku, searchVariantSkus, includePriceLists, includeRelationships, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the products by sku, it can be the product or the variant sku - {GetProductsBySkuV2Request} Retrieve the products by the specified the stock keeping unit code (SKU). It is either the Sku of the product or the Sku of one of its variants. The products variants are always returned. According to the sku uniqueness level defined, more than one product may be returned.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">the stock keeping unit code (SKU) for the products to retrieve</param>
        /// <param name="searchVariantSkus">Gets or sets a value indicating whether or not to search for variant SKU-s, in addition to searching in product SKU-s. (optional)</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the products. (optional)</param>
        /// <param name="includeRelationships"> Gets or sets a value indicating whether or not to include the relationships of the products. (optional)</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductList)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList>> GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGetWithHttpInfoAsync(string accept, string scopeId, string sku, bool? searchVariantSkus = default(bool?), bool? includePriceLists = default(bool?), bool? includeRelationships = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGet");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            if (searchVariantSkus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SearchVariantSkus", searchVariantSkus));
            }
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            if (includeRelationships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRelationships", includeRelationships));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductList>("/products/v2/{ScopeId}/bySku/{Sku}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsBySkuV2Requestv2ScopeIdbySkuSkuGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve products by SKU-s - {GetProductsBySkusV2Request} Retrieve products by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductList</returns>
        public ProductList GetProductsBySkusV2Requestv2ScopeIdbySkusPost(string accept, string scopeId, GetProductsBySkusV2Request body = default(GetProductsBySkusV2Request))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList> localVarResponse = GetProductsBySkusV2Requestv2ScopeIdbySkusPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve products by SKU-s - {GetProductsBySkusV2Request} Retrieve products by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductList</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList> GetProductsBySkusV2Requestv2ScopeIdbySkusPostWithHttpInfo(string accept, string scopeId, GetProductsBySkusV2Request body = default(GetProductsBySkusV2Request))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsBySkusV2Requestv2ScopeIdbySkusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsBySkusV2Requestv2ScopeIdbySkusPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductList>("/products/v2/{ScopeId}/bySkus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsBySkusV2Requestv2ScopeIdbySkusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve products by SKU-s - {GetProductsBySkusV2Request} Retrieve products by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductList</returns>
        public async System.Threading.Tasks.Task<ProductList> GetProductsBySkusV2Requestv2ScopeIdbySkusPostAsync(string accept, string scopeId, GetProductsBySkusV2Request body = default(GetProductsBySkusV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList> localVarResponse = await GetProductsBySkusV2Requestv2ScopeIdbySkusPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve products by SKU-s - {GetProductsBySkusV2Request} Retrieve products by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductList)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductList>> GetProductsBySkusV2Requestv2ScopeIdbySkusPostWithHttpInfoAsync(string accept, string scopeId, GetProductsBySkusV2Request body = default(GetProductsBySkusV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsBySkusV2Requestv2ScopeIdbySkusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsBySkusV2Requestv2ScopeIdbySkusPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductList>("/products/v2/{ScopeId}/bySkus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsBySkusV2Requestv2ScopeIdbySkusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the numbers of products by category - {GetProductsCountByCategoryRequest} Retrieve the numbers of products by category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy the &#39;get products&#39; should  be started. If nothing is specified the root is used as starting point</param>
        /// <param name="includeDescendantsCategories">Whether or not the descendant categories content should be recursively included below the specified starting categoryId (optional)</param>
        /// <returns>GetProductsCountByCategoryResponse</returns>
        public GetProductsCountByCategoryResponse GetProductsCountByCategoryRequestScopeIdCategoryIdcountGet(string accept, string scopeId, string categoryId, bool? includeDescendantsCategories = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsCountByCategoryResponse> localVarResponse = GetProductsCountByCategoryRequestScopeIdCategoryIdcountGetWithHttpInfo(accept, scopeId, categoryId, includeDescendantsCategories);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the numbers of products by category - {GetProductsCountByCategoryRequest} Retrieve the numbers of products by category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy the &#39;get products&#39; should  be started. If nothing is specified the root is used as starting point</param>
        /// <param name="includeDescendantsCategories">Whether or not the descendant categories content should be recursively included below the specified starting categoryId (optional)</param>
        /// <returns>ApiResponse of GetProductsCountByCategoryResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsCountByCategoryResponse> GetProductsCountByCategoryRequestScopeIdCategoryIdcountGetWithHttpInfo(string accept, string scopeId, string categoryId, bool? includeDescendantsCategories = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsCountByCategoryRequestScopeIdCategoryIdcountGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsCountByCategoryRequestScopeIdCategoryIdcountGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling ProductsApi->GetProductsCountByCategoryRequestScopeIdCategoryIdcountGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (includeDescendantsCategories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeDescendantsCategories", includeDescendantsCategories));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProductsCountByCategoryResponse>("/products/{ScopeId}/{CategoryId}/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsCountByCategoryRequestScopeIdCategoryIdcountGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the numbers of products by category - {GetProductsCountByCategoryRequest} Retrieve the numbers of products by category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy the &#39;get products&#39; should  be started. If nothing is specified the root is used as starting point</param>
        /// <param name="includeDescendantsCategories">Whether or not the descendant categories content should be recursively included below the specified starting categoryId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsCountByCategoryResponse</returns>
        public async System.Threading.Tasks.Task<GetProductsCountByCategoryResponse> GetProductsCountByCategoryRequestScopeIdCategoryIdcountGetAsync(string accept, string scopeId, string categoryId, bool? includeDescendantsCategories = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsCountByCategoryResponse> localVarResponse = await GetProductsCountByCategoryRequestScopeIdCategoryIdcountGetWithHttpInfoAsync(accept, scopeId, categoryId, includeDescendantsCategories, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the numbers of products by category - {GetProductsCountByCategoryRequest} Retrieve the numbers of products by category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy the &#39;get products&#39; should  be started. If nothing is specified the root is used as starting point</param>
        /// <param name="includeDescendantsCategories">Whether or not the descendant categories content should be recursively included below the specified starting categoryId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsCountByCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsCountByCategoryResponse>> GetProductsCountByCategoryRequestScopeIdCategoryIdcountGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, bool? includeDescendantsCategories = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsCountByCategoryRequestScopeIdCategoryIdcountGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsCountByCategoryRequestScopeIdCategoryIdcountGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling ProductsApi->GetProductsCountByCategoryRequestScopeIdCategoryIdcountGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (includeDescendantsCategories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeDescendantsCategories", includeDescendantsCategories));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProductsCountByCategoryResponse>("/products/{ScopeId}/{CategoryId}/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsCountByCategoryRequestScopeIdCategoryIdcountGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve product prices by Id - {GetProductsPriceEntriesRequest} Retrieve product&#39;s prices by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;GetProductPriceEntriesResult&gt;</returns>
        public List<GetProductPriceEntriesResult> GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPost(string accept, string scopeId, GetProductsPriceEntriesRequest body = default(GetProductsPriceEntriesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<GetProductPriceEntriesResult>> localVarResponse = GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve product prices by Id - {GetProductsPriceEntriesRequest} Retrieve product&#39;s prices by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;GetProductPriceEntriesResult&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<GetProductPriceEntriesResult>> GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPostWithHttpInfo(string accept, string scopeId, GetProductsPriceEntriesRequest body = default(GetProductsPriceEntriesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<GetProductPriceEntriesResult>>("/products/{ScopeId}/productPriceEntries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve product prices by Id - {GetProductsPriceEntriesRequest} Retrieve product&#39;s prices by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetProductPriceEntriesResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetProductPriceEntriesResult>> GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPostAsync(string accept, string scopeId, GetProductsPriceEntriesRequest body = default(GetProductsPriceEntriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<GetProductPriceEntriesResult>> localVarResponse = await GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve product prices by Id - {GetProductsPriceEntriesRequest} Retrieve product&#39;s prices by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetProductPriceEntriesResult&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<GetProductPriceEntriesResult>>> GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPostWithHttpInfoAsync(string accept, string scopeId, GetProductsPriceEntriesRequest body = default(GetProductsPriceEntriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<GetProductPriceEntriesResult>>("/products/{ScopeId}/productPriceEntries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsPriceEntriesRequestScopeIdproductPriceEntriesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve specified properties of all products in a given category - {GetProductsPropertiesByCategoryRequest} Retrieve specified properties of all products in a given category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>GetProductsPropertiesResult</returns>
        public GetProductsPropertiesResult GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGet(string accept, string scopeId, string categoryId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult> localVarResponse = GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGetWithHttpInfo(accept, scopeId, categoryId, cultureName, propertiesNames, startingIndex, maximumItems, sortBy, sortDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve specified properties of all products in a given category - {GetProductsPropertiesByCategoryRequest} Retrieve specified properties of all products in a given category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>ApiResponse of GetProductsPropertiesResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult> GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGetWithHttpInfo(string accept, string scopeId, string categoryId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling ProductsApi->GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (propertiesNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "PropertiesNames", propertiesNames));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortBy", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProductsPropertiesResult>("/products/{ScopeId}/byCategoryId/{CategoryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve specified properties of all products in a given category - {GetProductsPropertiesByCategoryRequest} Retrieve specified properties of all products in a given category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsPropertiesResult</returns>
        public async System.Threading.Tasks.Task<GetProductsPropertiesResult> GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGetAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult> localVarResponse = await GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGetWithHttpInfoAsync(accept, scopeId, categoryId, cultureName, propertiesNames, startingIndex, maximumItems, sortBy, sortDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve specified properties of all products in a given category - {GetProductsPropertiesByCategoryRequest} Retrieve specified properties of all products in a given category
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsPropertiesResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult>> GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGetWithHttpInfoAsync(string accept, string scopeId, string categoryId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGet");

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryId' when calling ProductsApi->GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (propertiesNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "PropertiesNames", propertiesNames));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortBy", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProductsPropertiesResult>("/products/{ScopeId}/byCategoryId/{CategoryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsPropertiesByCategoryRequestScopeIdbyCategoryIdCategoryIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve specified properties of all products in a given state and categories - {GetProductsPropertiesByDraftStateAndCategoriesRequest} Retrieve specified properties of all products in a given state and categories
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetProductByCategoryAndStateResults</returns>
        public GetProductByCategoryAndStateResults GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPost(string accept, string scopeId, GetProductsPropertiesByDraftStateAndCategoriesRequest body = default(GetProductsPropertiesByDraftStateAndCategoriesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductByCategoryAndStateResults> localVarResponse = GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve specified properties of all products in a given state and categories - {GetProductsPropertiesByDraftStateAndCategoriesRequest} Retrieve specified properties of all products in a given state and categories
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetProductByCategoryAndStateResults</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductByCategoryAndStateResults> GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPostWithHttpInfo(string accept, string scopeId, GetProductsPropertiesByDraftStateAndCategoriesRequest body = default(GetProductsPropertiesByDraftStateAndCategoriesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetProductByCategoryAndStateResults>("/products/{ScopeId}/byDraftStateAndCategories", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve specified properties of all products in a given state and categories - {GetProductsPropertiesByDraftStateAndCategoriesRequest} Retrieve specified properties of all products in a given state and categories
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductByCategoryAndStateResults</returns>
        public async System.Threading.Tasks.Task<GetProductByCategoryAndStateResults> GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPostAsync(string accept, string scopeId, GetProductsPropertiesByDraftStateAndCategoriesRequest body = default(GetProductsPropertiesByDraftStateAndCategoriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductByCategoryAndStateResults> localVarResponse = await GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve specified properties of all products in a given state and categories - {GetProductsPropertiesByDraftStateAndCategoriesRequest} Retrieve specified properties of all products in a given state and categories
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductByCategoryAndStateResults)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductByCategoryAndStateResults>> GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPostWithHttpInfoAsync(string accept, string scopeId, GetProductsPropertiesByDraftStateAndCategoriesRequest body = default(GetProductsPropertiesByDraftStateAndCategoriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetProductByCategoryAndStateResults>("/products/{ScopeId}/byDraftStateAndCategories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsPropertiesByDraftStateAndCategoriesRequestScopeIdbyDraftStateAndCategoriesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve specified properties of all products in a given state - {GetProductsPropertiesByDraftStateRequest} Retrieve specified properties of all products in a given state
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="draftState">The draft state used to filter the products</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>GetProductsPropertiesResult</returns>
        public GetProductsPropertiesResult GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGet(string accept, string scopeId, string draftState, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult> localVarResponse = GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGetWithHttpInfo(accept, scopeId, draftState, cultureName, propertiesNames, startingIndex, maximumItems, sortBy, sortDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve specified properties of all products in a given state - {GetProductsPropertiesByDraftStateRequest} Retrieve specified properties of all products in a given state
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="draftState">The draft state used to filter the products</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>ApiResponse of GetProductsPropertiesResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult> GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGetWithHttpInfo(string accept, string scopeId, string draftState, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGet");

            // verify the required parameter 'draftState' is set
            if (draftState == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'draftState' when calling ProductsApi->GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("DraftState", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(draftState)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (propertiesNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "PropertiesNames", propertiesNames));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortBy", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProductsPropertiesResult>("/products/{ScopeId}/byDraftState/{DraftState}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve specified properties of all products in a given state - {GetProductsPropertiesByDraftStateRequest} Retrieve specified properties of all products in a given state
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="draftState">The draft state used to filter the products</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsPropertiesResult</returns>
        public async System.Threading.Tasks.Task<GetProductsPropertiesResult> GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGetAsync(string accept, string scopeId, string draftState, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult> localVarResponse = await GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGetWithHttpInfoAsync(accept, scopeId, draftState, cultureName, propertiesNames, startingIndex, maximumItems, sortBy, sortDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve specified properties of all products in a given state - {GetProductsPropertiesByDraftStateRequest} Retrieve specified properties of all products in a given state
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="draftState">The draft state used to filter the products</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsPropertiesResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult>> GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGetWithHttpInfoAsync(string accept, string scopeId, string draftState, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGet");

            // verify the required parameter 'draftState' is set
            if (draftState == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'draftState' when calling ProductsApi->GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("DraftState", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(draftState)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (propertiesNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "PropertiesNames", propertiesNames));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortBy", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProductsPropertiesResult>("/products/{ScopeId}/byDraftState/{DraftState}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsPropertiesByDraftStateRequestScopeIdbyDraftStateDraftStateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve specified properties of all products flagged as new - {GetProductsPropertiesFlagAsNewRequest} Retrieve specified properties of all products flagged as new
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>GetProductsPropertiesResult</returns>
        public GetProductsPropertiesResult GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGet(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult> localVarResponse = GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGetWithHttpInfo(accept, scopeId, cultureName, propertiesNames, startingIndex, maximumItems, sortBy, sortDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve specified properties of all products flagged as new - {GetProductsPropertiesFlagAsNewRequest} Retrieve specified properties of all products flagged as new
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>ApiResponse of GetProductsPropertiesResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult> GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (propertiesNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "PropertiesNames", propertiesNames));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortBy", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProductsPropertiesResult>("/products/{ScopeId}/flagAsNew", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve specified properties of all products flagged as new - {GetProductsPropertiesFlagAsNewRequest} Retrieve specified properties of all products flagged as new
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsPropertiesResult</returns>
        public async System.Threading.Tasks.Task<GetProductsPropertiesResult> GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGetAsync(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult> localVarResponse = await GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGetWithHttpInfoAsync(accept, scopeId, cultureName, propertiesNames, startingIndex, maximumItems, sortBy, sortDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve specified properties of all products flagged as new - {GetProductsPropertiesFlagAsNewRequest} Retrieve specified properties of all products flagged as new
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsPropertiesResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult>> GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (propertiesNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "PropertiesNames", propertiesNames));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortBy", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProductsPropertiesResult>("/products/{ScopeId}/flagAsNew", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsPropertiesFlagAsNewRequestScopeIdflagAsNewGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve properties of all product with notification - {GetProductsPropertiesWithNotificationRequest} Retrieve properties of all products with notification
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>GetProductsPropertiesResult</returns>
        public GetProductsPropertiesResult GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGet(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult> localVarResponse = GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGetWithHttpInfo(accept, scopeId, cultureName, propertiesNames, startingIndex, maximumItems, sortBy, sortDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve properties of all product with notification - {GetProductsPropertiesWithNotificationRequest} Retrieve properties of all products with notification
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <returns>ApiResponse of GetProductsPropertiesResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult> GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (propertiesNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "PropertiesNames", propertiesNames));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortBy", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProductsPropertiesResult>("/products/{ScopeId}/withNotification", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve properties of all product with notification - {GetProductsPropertiesWithNotificationRequest} Retrieve properties of all products with notification
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsPropertiesResult</returns>
        public async System.Threading.Tasks.Task<GetProductsPropertiesResult> GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGetAsync(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult> localVarResponse = await GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGetWithHttpInfoAsync(accept, scopeId, cultureName, propertiesNames, startingIndex, maximumItems, sortBy, sortDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve properties of all product with notification - {GetProductsPropertiesWithNotificationRequest} Retrieve properties of all products with notification
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture in which the data will be returned (optional)</param>
        /// <param name="propertiesNames">the list of properties to return (optional)</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose) (optional)</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10 (optional)</param>
        /// <param name="sortBy">The name of the property to be sorted (optional)</param>
        /// <param name="sortDirection">The sorting direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsPropertiesResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsPropertiesResult>> GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), List<string> propertiesNames = default(List<string>), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortBy = default(string), string sortDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (propertiesNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "PropertiesNames", propertiesNames));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortBy", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProductsPropertiesResult>("/products/{ScopeId}/withNotification", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsPropertiesWithNotificationRequestScopeIdwithNotificationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets statistics for products - {GetProductsStatisticsRequest} Gets statistics for products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>GetProductsStatisticsResult</returns>
        public GetProductsStatisticsResult GetProductsStatisticsRequestScopeIdstatisticsGet(string accept, string scopeId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsStatisticsResult> localVarResponse = GetProductsStatisticsRequestScopeIdstatisticsGetWithHttpInfo(accept, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets statistics for products - {GetProductsStatisticsRequest} Gets statistics for products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>ApiResponse of GetProductsStatisticsResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsStatisticsResult> GetProductsStatisticsRequestScopeIdstatisticsGetWithHttpInfo(string accept, string scopeId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsStatisticsRequestScopeIdstatisticsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsStatisticsRequestScopeIdstatisticsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProductsStatisticsResult>("/products/{ScopeId}/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsStatisticsRequestScopeIdstatisticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets statistics for products - {GetProductsStatisticsRequest} Gets statistics for products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductsStatisticsResult</returns>
        public async System.Threading.Tasks.Task<GetProductsStatisticsResult> GetProductsStatisticsRequestScopeIdstatisticsGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsStatisticsResult> localVarResponse = await GetProductsStatisticsRequestScopeIdstatisticsGetWithHttpInfoAsync(accept, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets statistics for products - {GetProductsStatisticsRequest} Gets statistics for products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductsStatisticsResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductsStatisticsResult>> GetProductsStatisticsRequestScopeIdstatisticsGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetProductsStatisticsRequestScopeIdstatisticsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetProductsStatisticsRequestScopeIdstatisticsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProductsStatisticsResult>("/products/{ScopeId}/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductsStatisticsRequestScopeIdstatisticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the products quick links count - {GetQuickLinksCountDetailsRequest} Represents items of quick links count related to products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogName">The catalog name to be used for quick links count</param>
        /// <param name="cultureName">The culture name that should be used to retrieve data</param>
        /// <returns>List&lt;QuickLinkCountDetails&gt;</returns>
        public List<QuickLinkCountDetails> GetQuickLinksCountDetailsRequestquicklinksGet(string accept, string catalogName, string cultureName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<QuickLinkCountDetails>> localVarResponse = GetQuickLinksCountDetailsRequestquicklinksGetWithHttpInfo(accept, catalogName, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the products quick links count - {GetQuickLinksCountDetailsRequest} Represents items of quick links count related to products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogName">The catalog name to be used for quick links count</param>
        /// <param name="cultureName">The culture name that should be used to retrieve data</param>
        /// <returns>ApiResponse of List&lt;QuickLinkCountDetails&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<QuickLinkCountDetails>> GetQuickLinksCountDetailsRequestquicklinksGetWithHttpInfo(string accept, string catalogName, string cultureName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetQuickLinksCountDetailsRequestquicklinksGet");

            // verify the required parameter 'catalogName' is set
            if (catalogName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'catalogName' when calling ProductsApi->GetQuickLinksCountDetailsRequestquicklinksGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling ProductsApi->GetQuickLinksCountDetailsRequestquicklinksGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CatalogName", catalogName));
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<QuickLinkCountDetails>>("/products/quicklinks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuickLinksCountDetailsRequestquicklinksGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the products quick links count - {GetQuickLinksCountDetailsRequest} Represents items of quick links count related to products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogName">The catalog name to be used for quick links count</param>
        /// <param name="cultureName">The culture name that should be used to retrieve data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;QuickLinkCountDetails&gt;</returns>
        public async System.Threading.Tasks.Task<List<QuickLinkCountDetails>> GetQuickLinksCountDetailsRequestquicklinksGetAsync(string accept, string catalogName, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<QuickLinkCountDetails>> localVarResponse = await GetQuickLinksCountDetailsRequestquicklinksGetWithHttpInfoAsync(accept, catalogName, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the products quick links count - {GetQuickLinksCountDetailsRequest} Represents items of quick links count related to products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogName">The catalog name to be used for quick links count</param>
        /// <param name="cultureName">The culture name that should be used to retrieve data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;QuickLinkCountDetails&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<QuickLinkCountDetails>>> GetQuickLinksCountDetailsRequestquicklinksGetWithHttpInfoAsync(string accept, string catalogName, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetQuickLinksCountDetailsRequestquicklinksGet");

            // verify the required parameter 'catalogName' is set
            if (catalogName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'catalogName' when calling ProductsApi->GetQuickLinksCountDetailsRequestquicklinksGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling ProductsApi->GetQuickLinksCountDetailsRequestquicklinksGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CatalogName", catalogName));
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<QuickLinkCountDetails>>("/products/quicklinks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuickLinksCountDetailsRequestquicklinksGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the product&#39;s variants - {GetVariantsByProductRequest} Retrieve all the product&#39;s variants
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope associated to the requested product</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;Variant&gt;</returns>
        public List<Variant> GetVariantsByProductRequestScopeIdProductIdvariantsGet(string accept, string scopeId, string productId, bool? includePriceLists = default(bool?), string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Variant>> localVarResponse = GetVariantsByProductRequestScopeIdProductIdvariantsGetWithHttpInfo(accept, scopeId, productId, includePriceLists, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the product&#39;s variants - {GetVariantsByProductRequest} Retrieve all the product&#39;s variants
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope associated to the requested product</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Variant&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Variant>> GetVariantsByProductRequestScopeIdProductIdvariantsGetWithHttpInfo(string accept, string scopeId, string productId, bool? includePriceLists = default(bool?), string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetVariantsByProductRequestScopeIdProductIdvariantsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetVariantsByProductRequestScopeIdProductIdvariantsGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetVariantsByProductRequestScopeIdProductIdvariantsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Variant>>("/products/{ScopeId}/{ProductId}/variants", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariantsByProductRequestScopeIdProductIdvariantsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the product&#39;s variants - {GetVariantsByProductRequest} Retrieve all the product&#39;s variants
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope associated to the requested product</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Variant&gt;</returns>
        public async System.Threading.Tasks.Task<List<Variant>> GetVariantsByProductRequestScopeIdProductIdvariantsGetAsync(string accept, string scopeId, string productId, bool? includePriceLists = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Variant>> localVarResponse = await GetVariantsByProductRequestScopeIdProductIdvariantsGetWithHttpInfoAsync(accept, scopeId, productId, includePriceLists, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the product&#39;s variants - {GetVariantsByProductRequest} Retrieve all the product&#39;s variants
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope associated to the requested product</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="includePriceLists">whether or not to include the price lists of the product. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Variant&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Variant>>> GetVariantsByProductRequestScopeIdProductIdvariantsGetWithHttpInfoAsync(string accept, string scopeId, string productId, bool? includePriceLists = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->GetVariantsByProductRequestScopeIdProductIdvariantsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->GetVariantsByProductRequestScopeIdProductIdvariantsGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetVariantsByProductRequestScopeIdProductIdvariantsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (includePriceLists != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePriceLists", includePriceLists));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Variant>>("/products/{ScopeId}/{ProductId}/variants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariantsByProductRequestScopeIdProductIdvariantsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks whether the product exists in the specified scope - {ProductExistsRequest} Checks whether the product exists in the specified scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product.</param>
        /// <returns>ProductExistsResponse</returns>
        public ProductExistsResponse ProductExistsRequestexistsScopeIdProductIdGet(string accept, string scopeId, string productId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductExistsResponse> localVarResponse = ProductExistsRequestexistsScopeIdProductIdGetWithHttpInfo(accept, scopeId, productId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks whether the product exists in the specified scope - {ProductExistsRequest} Checks whether the product exists in the specified scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product.</param>
        /// <returns>ApiResponse of ProductExistsResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductExistsResponse> ProductExistsRequestexistsScopeIdProductIdGetWithHttpInfo(string accept, string scopeId, string productId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->ProductExistsRequestexistsScopeIdProductIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->ProductExistsRequestexistsScopeIdProductIdGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ProductExistsRequestexistsScopeIdProductIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductExistsResponse>("/products/exists/{ScopeId}/{ProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductExistsRequestexistsScopeIdProductIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks whether the product exists in the specified scope - {ProductExistsRequest} Checks whether the product exists in the specified scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductExistsResponse</returns>
        public async System.Threading.Tasks.Task<ProductExistsResponse> ProductExistsRequestexistsScopeIdProductIdGetAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductExistsResponse> localVarResponse = await ProductExistsRequestexistsScopeIdProductIdGetWithHttpInfoAsync(accept, scopeId, productId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks whether the product exists in the specified scope - {ProductExistsRequest} Checks whether the product exists in the specified scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductExistsResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductExistsResponse>> ProductExistsRequestexistsScopeIdProductIdGetWithHttpInfoAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->ProductExistsRequestexistsScopeIdProductIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->ProductExistsRequestexistsScopeIdProductIdGet");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ProductExistsRequestexistsScopeIdProductIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductExistsResponse>("/products/exists/{ScopeId}/{ProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductExistsRequestexistsScopeIdProductIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Repair Broken Inheritence for the product - {RepairProductInheritanceRequest} Repair Broken Inheritence From Global:  a. adds the properties that exist in global but not in sales  b. revert the properties that has been changed compare to global   c. keep the properties that have been added in sales but do not exist in global  d. revert variants to the global version
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to repair the inheritence</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreate(string accept, string scopeId, string productId, Object body = default(Object))
        {
            RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreateWithHttpInfo(accept, scopeId, productId, body);
        }

        /// <summary>
        /// Repair Broken Inheritence for the product - {RepairProductInheritanceRequest} Repair Broken Inheritence From Global:  a. adds the properties that exist in global but not in sales  b. revert the properties that has been changed compare to global   c. keep the properties that have been added in sales but do not exist in global  d. revert variants to the global version
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to repair the inheritence</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreateWithHttpInfo(string accept, string scopeId, string productId, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/products/{ScopeId}/{ProductId}/repairInheritance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Repair Broken Inheritence for the product - {RepairProductInheritanceRequest} Repair Broken Inheritence From Global:  a. adds the properties that exist in global but not in sales  b. revert the properties that has been changed compare to global   c. keep the properties that have been added in sales but do not exist in global  d. revert variants to the global version
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to repair the inheritence</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreateAsync(string accept, string scopeId, string productId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreateWithHttpInfoAsync(accept, scopeId, productId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Repair Broken Inheritence for the product - {RepairProductInheritanceRequest} Repair Broken Inheritence From Global:  a. adds the properties that exist in global but not in sales  b. revert the properties that has been changed compare to global   c. keep the properties that have been added in sales but do not exist in global  d. revert variants to the global version
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to repair the inheritence</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreateWithHttpInfoAsync(string accept, string scopeId, string productId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/products/{ScopeId}/{ProductId}/repairInheritance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RepairProductInheritanceRequestScopeIdProductIdrepairInheritanceCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reverts not published product changes by replacing working copies of products with their published counterparts - {RevertProductChangesRequest} Reverts not published product changes by replacing working copies of products with their published counterparts.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void RevertProductChangesRequestScopeIdrevertPost(string accept, string scopeId, RevertProductChangesRequest body = default(RevertProductChangesRequest))
        {
            RevertProductChangesRequestScopeIdrevertPostWithHttpInfo(accept, scopeId, body);
        }

        /// <summary>
        /// Reverts not published product changes by replacing working copies of products with their published counterparts - {RevertProductChangesRequest} Reverts not published product changes by replacing working copies of products with their published counterparts.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> RevertProductChangesRequestScopeIdrevertPostWithHttpInfo(string accept, string scopeId, RevertProductChangesRequest body = default(RevertProductChangesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->RevertProductChangesRequestScopeIdrevertPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->RevertProductChangesRequestScopeIdrevertPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/products/{ScopeId}/revert", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevertProductChangesRequestScopeIdrevertPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reverts not published product changes by replacing working copies of products with their published counterparts - {RevertProductChangesRequest} Reverts not published product changes by replacing working copies of products with their published counterparts.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevertProductChangesRequestScopeIdrevertPostAsync(string accept, string scopeId, RevertProductChangesRequest body = default(RevertProductChangesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevertProductChangesRequestScopeIdrevertPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Reverts not published product changes by replacing working copies of products with their published counterparts - {RevertProductChangesRequest} Reverts not published product changes by replacing working copies of products with their published counterparts.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> RevertProductChangesRequestScopeIdrevertPostWithHttpInfoAsync(string accept, string scopeId, RevertProductChangesRequest body = default(RevertProductChangesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->RevertProductChangesRequestScopeIdrevertPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->RevertProductChangesRequestScopeIdrevertPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/products/{ScopeId}/revert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevertProductChangesRequestScopeIdrevertPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Synchronizes a product - {SyncProductRequest} Synchronizes a product
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SyncProductRequestsyncScopeIdProductIdCreate(string accept, string scopeId, string productId, SyncProductRequest body = default(SyncProductRequest))
        {
            SyncProductRequestsyncScopeIdProductIdCreateWithHttpInfo(accept, scopeId, productId, body);
        }

        /// <summary>
        /// Synchronizes a product - {SyncProductRequest} Synchronizes a product
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> SyncProductRequestsyncScopeIdProductIdCreateWithHttpInfo(string accept, string scopeId, string productId, SyncProductRequest body = default(SyncProductRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->SyncProductRequestsyncScopeIdProductIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->SyncProductRequestsyncScopeIdProductIdCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->SyncProductRequestsyncScopeIdProductIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/products/sync/{ScopeId}/{ProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncProductRequestsyncScopeIdProductIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Synchronizes a product - {SyncProductRequest} Synchronizes a product
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SyncProductRequestsyncScopeIdProductIdCreateAsync(string accept, string scopeId, string productId, SyncProductRequest body = default(SyncProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SyncProductRequestsyncScopeIdProductIdCreateWithHttpInfoAsync(accept, scopeId, productId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Synchronizes a product - {SyncProductRequest} Synchronizes a product
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> SyncProductRequestsyncScopeIdProductIdCreateWithHttpInfoAsync(string accept, string scopeId, string productId, SyncProductRequest body = default(SyncProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->SyncProductRequestsyncScopeIdProductIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->SyncProductRequestsyncScopeIdProductIdCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->SyncProductRequestsyncScopeIdProductIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/products/sync/{ScopeId}/{ProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncProductRequestsyncScopeIdProductIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update media resized instances - {UpdateMediaResizedInstancesRequest} Update media resized instances
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductMedia</returns>
        public ProductMedia UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate(string accept, string scopeId, string productId, string mediaId, UpdateMediaResizedInstancesRequest body = default(UpdateMediaResizedInstancesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductMedia> localVarResponse = UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreateWithHttpInfo(accept, scopeId, productId, mediaId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update media resized instances - {UpdateMediaResizedInstancesRequest} Update media resized instances
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductMedia</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductMedia> UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreateWithHttpInfo(string accept, string scopeId, string productId, string mediaId, UpdateMediaResizedInstancesRequest body = default(UpdateMediaResizedInstancesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate");

            // verify the required parameter 'mediaId' is set
            if (mediaId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'mediaId' when calling ProductsApi->UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("MediaId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(mediaId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductMedia>("/products/{ScopeId}/{ProductId}/media/{MediaId}/resized", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update media resized instances - {UpdateMediaResizedInstancesRequest} Update media resized instances
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductMedia</returns>
        public async System.Threading.Tasks.Task<ProductMedia> UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreateAsync(string accept, string scopeId, string productId, string mediaId, UpdateMediaResizedInstancesRequest body = default(UpdateMediaResizedInstancesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductMedia> localVarResponse = await UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreateWithHttpInfoAsync(accept, scopeId, productId, mediaId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update media resized instances - {UpdateMediaResizedInstancesRequest} Update media resized instances
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">the business id for the product to retrieve</param>
        /// <param name="mediaId">a media id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductMedia)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductMedia>> UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreateWithHttpInfoAsync(string accept, string scopeId, string productId, string mediaId, UpdateMediaResizedInstancesRequest body = default(UpdateMediaResizedInstancesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate");

            // verify the required parameter 'mediaId' is set
            if (mediaId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'mediaId' when calling ProductsApi->UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("MediaId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(mediaId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductMedia>("/products/{ScopeId}/{ProductId}/media/{MediaId}/resized", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMediaResizedInstancesRequestScopeIdProductIdmediaMediaIdresizedCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the settings used in product media - {UpdateMediaSettingsRequest} Update the settings used in product media
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MediaSettings</returns>
        public MediaSettings UpdateMediaSettingsRequestmediasettingsCreate(string accept, UpdateMediaSettingsRequest body = default(UpdateMediaSettingsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MediaSettings> localVarResponse = UpdateMediaSettingsRequestmediasettingsCreateWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the settings used in product media - {UpdateMediaSettingsRequest} Update the settings used in product media
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MediaSettings</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MediaSettings> UpdateMediaSettingsRequestmediasettingsCreateWithHttpInfo(string accept, UpdateMediaSettingsRequest body = default(UpdateMediaSettingsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateMediaSettingsRequestmediasettingsCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<MediaSettings>("/products/media/settings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMediaSettingsRequestmediasettingsCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the settings used in product media - {UpdateMediaSettingsRequest} Update the settings used in product media
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MediaSettings</returns>
        public async System.Threading.Tasks.Task<MediaSettings> UpdateMediaSettingsRequestmediasettingsCreateAsync(string accept, UpdateMediaSettingsRequest body = default(UpdateMediaSettingsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MediaSettings> localVarResponse = await UpdateMediaSettingsRequestmediasettingsCreateWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the settings used in product media - {UpdateMediaSettingsRequest} Update the settings used in product media
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MediaSettings)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MediaSettings>> UpdateMediaSettingsRequestmediasettingsCreateWithHttpInfoAsync(string accept, UpdateMediaSettingsRequest body = default(UpdateMediaSettingsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateMediaSettingsRequestmediasettingsCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MediaSettings>("/products/media/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMediaSettingsRequestmediasettingsCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a price List Entry - {UpdatePriceListEntryRequest} Updates a price List Entry
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PriceListEntry</returns>
        public PriceListEntry UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreate(string accept, string scopeId, string productId, UpdatePriceListEntryRequest body = default(UpdatePriceListEntryRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceListEntry> localVarResponse = UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreateWithHttpInfo(accept, scopeId, productId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a price List Entry - {UpdatePriceListEntryRequest} Updates a price List Entry
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PriceListEntry</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceListEntry> UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreateWithHttpInfo(string accept, string scopeId, string productId, UpdatePriceListEntryRequest body = default(UpdatePriceListEntryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PriceListEntry>("/products/{ScopeId}/{ProductId}/priceListEntries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a price List Entry - {UpdatePriceListEntryRequest} Updates a price List Entry
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceListEntry</returns>
        public async System.Threading.Tasks.Task<PriceListEntry> UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreateAsync(string accept, string scopeId, string productId, UpdatePriceListEntryRequest body = default(UpdatePriceListEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceListEntry> localVarResponse = await UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreateWithHttpInfoAsync(accept, scopeId, productId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a price List Entry - {UpdatePriceListEntryRequest} Updates a price List Entry
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update a price list entry</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceListEntry)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceListEntry>> UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreateWithHttpInfoAsync(string accept, string scopeId, string productId, UpdatePriceListEntryRequest body = default(UpdatePriceListEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PriceListEntry>("/products/{ScopeId}/{ProductId}/priceListEntries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePriceListEntryRequestScopeIdProductIdpriceListEntriesCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a price list in the specified scope - {UpdatePriceListRequest} Updates a price list in the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PriceList</returns>
        public PriceList UpdatePriceListRequestScopeIdpriceListsPriceListIdCreate(string accept, string scopeId, string priceListId, UpdatePriceListRequest body = default(UpdatePriceListRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceList> localVarResponse = UpdatePriceListRequestScopeIdpriceListsPriceListIdCreateWithHttpInfo(accept, scopeId, priceListId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a price list in the specified scope - {UpdatePriceListRequest} Updates a price list in the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PriceList</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceList> UpdatePriceListRequestScopeIdpriceListsPriceListIdCreateWithHttpInfo(string accept, string scopeId, string priceListId, UpdatePriceListRequest body = default(UpdatePriceListRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdatePriceListRequestScopeIdpriceListsPriceListIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdatePriceListRequestScopeIdpriceListsPriceListIdCreate");

            // verify the required parameter 'priceListId' is set
            if (priceListId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'priceListId' when calling ProductsApi->UpdatePriceListRequestScopeIdpriceListsPriceListIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PriceListId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(priceListId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PriceList>("/products/{ScopeId}/priceLists/{PriceListId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePriceListRequestScopeIdpriceListsPriceListIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a price list in the specified scope - {UpdatePriceListRequest} Updates a price list in the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PriceList</returns>
        public async System.Threading.Tasks.Task<PriceList> UpdatePriceListRequestScopeIdpriceListsPriceListIdCreateAsync(string accept, string scopeId, string priceListId, UpdatePriceListRequest body = default(UpdatePriceListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceList> localVarResponse = await UpdatePriceListRequestScopeIdpriceListsPriceListIdCreateWithHttpInfoAsync(accept, scopeId, priceListId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a price list in the specified scope - {UpdatePriceListRequest} Updates a price list in the specified scope. Its priority sequence is automatically calculated according to the specified price list with the next higher priority sequence.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="priceListId">The identifier of the PriceList.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PriceList)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PriceList>> UpdatePriceListRequestScopeIdpriceListsPriceListIdCreateWithHttpInfoAsync(string accept, string scopeId, string priceListId, UpdatePriceListRequest body = default(UpdatePriceListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdatePriceListRequestScopeIdpriceListsPriceListIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdatePriceListRequestScopeIdpriceListsPriceListIdCreate");

            // verify the required parameter 'priceListId' is set
            if (priceListId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'priceListId' when calling ProductsApi->UpdatePriceListRequestScopeIdpriceListsPriceListIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PriceListId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(priceListId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PriceList>("/products/{ScopeId}/priceLists/{PriceListId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePriceListRequestScopeIdpriceListsPriceListIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a product draft - {UpdateProductDraftRequest} Update a product draft
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update the draft</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductDraft</returns>
        public ProductDraft UpdateProductDraftRequestScopeIddraftProductIdPost(string accept, string scopeId, string productId, UpdateProductDraftRequest body = default(UpdateProductDraftRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDraft> localVarResponse = UpdateProductDraftRequestScopeIddraftProductIdPostWithHttpInfo(accept, scopeId, productId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a product draft - {UpdateProductDraftRequest} Update a product draft
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update the draft</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductDraft</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDraft> UpdateProductDraftRequestScopeIddraftProductIdPostWithHttpInfo(string accept, string scopeId, string productId, UpdateProductDraftRequest body = default(UpdateProductDraftRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateProductDraftRequestScopeIddraftProductIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdateProductDraftRequestScopeIddraftProductIdPost");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateProductDraftRequestScopeIddraftProductIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductDraft>("/products/{ScopeId}/draft/{ProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductDraftRequestScopeIddraftProductIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a product draft - {UpdateProductDraftRequest} Update a product draft
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update the draft</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductDraft</returns>
        public async System.Threading.Tasks.Task<ProductDraft> UpdateProductDraftRequestScopeIddraftProductIdPostAsync(string accept, string scopeId, string productId, UpdateProductDraftRequest body = default(UpdateProductDraftRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDraft> localVarResponse = await UpdateProductDraftRequestScopeIddraftProductIdPostWithHttpInfoAsync(accept, scopeId, productId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a product draft - {UpdateProductDraftRequest} Update a product draft
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update the draft</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductDraft)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductDraft>> UpdateProductDraftRequestScopeIddraftProductIdPostWithHttpInfoAsync(string accept, string scopeId, string productId, UpdateProductDraftRequest body = default(UpdateProductDraftRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateProductDraftRequestScopeIddraftProductIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdateProductDraftRequestScopeIddraftProductIdPost");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateProductDraftRequestScopeIddraftProductIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductDraft>("/products/{ScopeId}/draft/{ProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductDraftRequestScopeIddraftProductIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates publication status for a list of products - {UpdateProductPublicationStatusRequest} Updates publication status for a list of products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateProductPublicationStatusRequestScopeIdpublicationStatusPost(string accept, string scopeId, UpdateProductPublicationStatusRequest body = default(UpdateProductPublicationStatusRequest))
        {
            UpdateProductPublicationStatusRequestScopeIdpublicationStatusPostWithHttpInfo(accept, scopeId, body);
        }

        /// <summary>
        /// Updates publication status for a list of products - {UpdateProductPublicationStatusRequest} Updates publication status for a list of products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> UpdateProductPublicationStatusRequestScopeIdpublicationStatusPostWithHttpInfo(string accept, string scopeId, UpdateProductPublicationStatusRequest body = default(UpdateProductPublicationStatusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateProductPublicationStatusRequestScopeIdpublicationStatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdateProductPublicationStatusRequestScopeIdpublicationStatusPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/products/{ScopeId}/publicationStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductPublicationStatusRequestScopeIdpublicationStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates publication status for a list of products - {UpdateProductPublicationStatusRequest} Updates publication status for a list of products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProductPublicationStatusRequestScopeIdpublicationStatusPostAsync(string accept, string scopeId, UpdateProductPublicationStatusRequest body = default(UpdateProductPublicationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateProductPublicationStatusRequestScopeIdpublicationStatusPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates publication status for a list of products - {UpdateProductPublicationStatusRequest} Updates publication status for a list of products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> UpdateProductPublicationStatusRequestScopeIdpublicationStatusPostWithHttpInfoAsync(string accept, string scopeId, UpdateProductPublicationStatusRequest body = default(UpdateProductPublicationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateProductPublicationStatusRequestScopeIdpublicationStatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdateProductPublicationStatusRequestScopeIdpublicationStatusPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/products/{ScopeId}/publicationStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductPublicationStatusRequestScopeIdpublicationStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a product - {UpdateProductRequest} Updates a product
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Product</returns>
        public Product UpdateProductRequestScopeIdProductIdCreate(string accept, string scopeId, string productId, UpdateProductRequest body = default(UpdateProductRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = UpdateProductRequestScopeIdProductIdCreateWithHttpInfo(accept, scopeId, productId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a product - {UpdateProductRequest} Updates a product
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> UpdateProductRequestScopeIdProductIdCreateWithHttpInfo(string accept, string scopeId, string productId, UpdateProductRequest body = default(UpdateProductRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateProductRequestScopeIdProductIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdateProductRequestScopeIdProductIdCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateProductRequestScopeIdProductIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Product>("/products/{ScopeId}/{ProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductRequestScopeIdProductIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a product - {UpdateProductRequest} Updates a product
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> UpdateProductRequestScopeIdProductIdCreateAsync(string accept, string scopeId, string productId, UpdateProductRequest body = default(UpdateProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = await UpdateProductRequestScopeIdProductIdCreateWithHttpInfoAsync(accept, scopeId, productId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a product - {UpdateProductRequest} Updates a product
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">Gets or sets the id of the product for which we want to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product>> UpdateProductRequestScopeIdProductIdCreateWithHttpInfoAsync(string accept, string scopeId, string productId, UpdateProductRequest body = default(UpdateProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateProductRequestScopeIdProductIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdateProductRequestScopeIdProductIdCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateProductRequestScopeIdProductIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Product>("/products/{ScopeId}/{ProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductRequestScopeIdProductIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the settings used in product module - {UpdateProductSettingsRequest} Update the settings used in product module
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductSettings</returns>
        public ProductSettings UpdateProductSettingsRequestsettingsCreate(string accept, UpdateProductSettingsRequest body = default(UpdateProductSettingsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductSettings> localVarResponse = UpdateProductSettingsRequestsettingsCreateWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the settings used in product module - {UpdateProductSettingsRequest} Update the settings used in product module
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductSettings</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductSettings> UpdateProductSettingsRequestsettingsCreateWithHttpInfo(string accept, UpdateProductSettingsRequest body = default(UpdateProductSettingsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateProductSettingsRequestsettingsCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductSettings>("/products/settings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductSettingsRequestsettingsCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the settings used in product module - {UpdateProductSettingsRequest} Update the settings used in product module
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductSettings</returns>
        public async System.Threading.Tasks.Task<ProductSettings> UpdateProductSettingsRequestsettingsCreateAsync(string accept, UpdateProductSettingsRequest body = default(UpdateProductSettingsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductSettings> localVarResponse = await UpdateProductSettingsRequestsettingsCreateWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the settings used in product module - {UpdateProductSettingsRequest} Update the settings used in product module
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductSettings)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductSettings>> UpdateProductSettingsRequestsettingsCreateWithHttpInfoAsync(string accept, UpdateProductSettingsRequest body = default(UpdateProductSettingsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateProductSettingsRequestsettingsCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductSettings>("/products/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductSettingsRequestsettingsCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch update all variants price for a product for a specific pricelist - {UpdateVariantsPriceListEntryRequest} Batch update all variants price for a product for a specific pricelist
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update the price list entries</param>
        /// <param name="priceListId">The id of the the price list for which we want to update the price list entries</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate(string accept, string scopeId, string productId, string priceListId, UpdateVariantsPriceListEntryRequest body = default(UpdateVariantsPriceListEntryRequest))
        {
            UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreateWithHttpInfo(accept, scopeId, productId, priceListId, body);
        }

        /// <summary>
        /// Batch update all variants price for a product for a specific pricelist - {UpdateVariantsPriceListEntryRequest} Batch update all variants price for a product for a specific pricelist
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update the price list entries</param>
        /// <param name="priceListId">The id of the the price list for which we want to update the price list entries</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreateWithHttpInfo(string accept, string scopeId, string productId, string priceListId, UpdateVariantsPriceListEntryRequest body = default(UpdateVariantsPriceListEntryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate");

            // verify the required parameter 'priceListId' is set
            if (priceListId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'priceListId' when calling ProductsApi->UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PriceListId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(priceListId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/products/{ScopeId}/{ProductId}/variantsPrices/{PriceListId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch update all variants price for a product for a specific pricelist - {UpdateVariantsPriceListEntryRequest} Batch update all variants price for a product for a specific pricelist
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update the price list entries</param>
        /// <param name="priceListId">The id of the the price list for which we want to update the price list entries</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreateAsync(string accept, string scopeId, string productId, string priceListId, UpdateVariantsPriceListEntryRequest body = default(UpdateVariantsPriceListEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreateWithHttpInfoAsync(accept, scopeId, productId, priceListId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Batch update all variants price for a product for a specific pricelist - {UpdateVariantsPriceListEntryRequest} Batch update all variants price for a product for a specific pricelist
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The id of the product for which we want to update the price list entries</param>
        /// <param name="priceListId">The id of the the price list for which we want to update the price list entries</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreateWithHttpInfoAsync(string accept, string scopeId, string productId, string priceListId, UpdateVariantsPriceListEntryRequest body = default(UpdateVariantsPriceListEntryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate");

            // verify the required parameter 'priceListId' is set
            if (priceListId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'priceListId' when calling ProductsApi->UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PriceListId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(priceListId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/products/{ScopeId}/{ProductId}/variantsPrices/{PriceListId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateVariantsPriceListEntryRequestScopeIdProductIdvariantsPricesPriceListIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Uploads a media file and attaches it to the product/variant - {UploadMediaRequest} Uploads a media file Send media files via multipart/form-data
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId"> the id of the product for which we want to upload media.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Product</returns>
        public Product UploadMediaRequestmediaScopeIdProductIduploadPost(string accept, string scopeId, string productId, UploadMediaRequest body = default(UploadMediaRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = UploadMediaRequestmediaScopeIdProductIduploadPostWithHttpInfo(accept, scopeId, productId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads a media file and attaches it to the product/variant - {UploadMediaRequest} Uploads a media file Send media files via multipart/form-data
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId"> the id of the product for which we want to upload media.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> UploadMediaRequestmediaScopeIdProductIduploadPostWithHttpInfo(string accept, string scopeId, string productId, UploadMediaRequest body = default(UploadMediaRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UploadMediaRequestmediaScopeIdProductIduploadPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UploadMediaRequestmediaScopeIdProductIduploadPost");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UploadMediaRequestmediaScopeIdProductIduploadPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Product>("/products/media/{ScopeId}/{ProductId}/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadMediaRequestmediaScopeIdProductIduploadPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Uploads a media file and attaches it to the product/variant - {UploadMediaRequest} Uploads a media file Send media files via multipart/form-data
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId"> the id of the product for which we want to upload media.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> UploadMediaRequestmediaScopeIdProductIduploadPostAsync(string accept, string scopeId, string productId, UploadMediaRequest body = default(UploadMediaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = await UploadMediaRequestmediaScopeIdProductIduploadPostWithHttpInfoAsync(accept, scopeId, productId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads a media file and attaches it to the product/variant - {UploadMediaRequest} Uploads a media file Send media files via multipart/form-data
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId"> the id of the product for which we want to upload media.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product>> UploadMediaRequestmediaScopeIdProductIduploadPostWithHttpInfoAsync(string accept, string scopeId, string productId, UploadMediaRequest body = default(UploadMediaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ProductsApi->UploadMediaRequestmediaScopeIdProductIduploadPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ProductsApi->UploadMediaRequestmediaScopeIdProductIduploadPost");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UploadMediaRequestmediaScopeIdProductIduploadPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Product>("/products/media/{ScopeId}/{ProductId}/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadMediaRequestmediaScopeIdProductIduploadPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
