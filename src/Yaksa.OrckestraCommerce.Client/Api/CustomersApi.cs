/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add an address to a customer&#39;s addresses - {AddAddressToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Add an address to a customer&#39;s addresses.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Address</returns>
        Address AddAddressToCustomerRequestScopeIdCustomerIdaddressesPost(string accept, string scopeId, string customerId, AddAddressToCustomerRequest body = default(AddAddressToCustomerRequest));

        /// <summary>
        /// Add an address to a customer&#39;s addresses - {AddAddressToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Add an address to a customer&#39;s addresses.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> AddAddressToCustomerRequestScopeIdCustomerIdaddressesPostWithHttpInfo(string accept, string scopeId, string customerId, AddAddressToCustomerRequest body = default(AddAddressToCustomerRequest));
        /// <summary>
        /// Add a note to a customer - {AddCustomerNoteRequest}
        /// </summary>
        /// <remarks>
        /// Add a note to a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AddCustomerNoteRequestScopeIdCustomerIdnotesPost(string accept, string scopeId, string customerId, AddCustomerNoteRequest body = default(AddCustomerNoteRequest));

        /// <summary>
        /// Add a note to a customer - {AddCustomerNoteRequest}
        /// </summary>
        /// <remarks>
        /// Add a note to a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddCustomerNoteRequestScopeIdCustomerIdnotesPostWithHttpInfo(string accept, string scopeId, string customerId, AddCustomerNoteRequest body = default(AddCustomerNoteRequest));
        /// <summary>
        /// Add customer payment profile related to a specific payment provider - {AddCustomerPaymentProfileRequest}
        /// </summary>
        /// <remarks>
        /// Add customer payment profile related to a specific payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PaymentProfile</returns>
        PaymentProfile AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost(string accept, string scopeId, string customerId, string paymentProviderName, AddCustomerPaymentProfileRequest body = default(AddCustomerPaymentProfileRequest));

        /// <summary>
        /// Add customer payment profile related to a specific payment provider - {AddCustomerPaymentProfileRequest}
        /// </summary>
        /// <remarks>
        /// Add customer payment profile related to a specific payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PaymentProfile</returns>
        ApiResponse<PaymentProfile> AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePostWithHttpInfo(string accept, string scopeId, string customerId, string paymentProviderName, AddCustomerPaymentProfileRequest body = default(AddCustomerPaymentProfileRequest));
        /// <summary>
        /// Add or updates a customer address - {AddOrUpdateCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Add or updates a customer address
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Address</returns>
        Address AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreate(string accept, string customerId, string addressId, AddOrUpdateCustomerAddressRequest body = default(AddOrUpdateCustomerAddressRequest));

        /// <summary>
        /// Add or updates a customer address - {AddOrUpdateCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Add or updates a customer address
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreateWithHttpInfo(string accept, string customerId, string addressId, AddOrUpdateCustomerAddressRequest body = default(AddOrUpdateCustomerAddressRequest));
        /// <summary>
        /// Add organizations to a customer - {AddOrganizationsToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Add organizations to a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPost(string accept, string scopeId, string customerId, AddOrganizationsToCustomerRequest body = default(AddOrganizationsToCustomerRequest));

        /// <summary>
        /// Add organizations to a customer - {AddOrganizationsToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Add organizations to a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPostWithHttpInfo(string accept, string scopeId, string customerId, AddOrganizationsToCustomerRequest body = default(AddOrganizationsToCustomerRequest));
        /// <summary>
        /// Associate a customer to an entity - {AssociateCustomerEntityRequest}
        /// </summary>
        /// <remarks>
        /// Associate a customer to an entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost(string accept, string customerId, string scopeId, string attributeName, string entityId, Object body = default(Object));

        /// <summary>
        /// Associate a customer to an entity - {AssociateCustomerEntityRequest}
        /// </summary>
        /// <remarks>
        /// Associate a customer to an entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPostWithHttpInfo(string accept, string customerId, string scopeId, string attributeName, string entityId, Object body = default(Object));
        /// <summary>
        /// Create a customer - {CreateCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Create a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the customer belong.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        Customer CreateCustomerRequestScopeIdPost(string accept, string scopeId, CreateCustomerRequest body = default(CreateCustomerRequest));

        /// <summary>
        /// Create a customer - {CreateCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Create a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the customer belong.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CreateCustomerRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateCustomerRequest body = default(CreateCustomerRequest));
        /// <summary>
        /// Remove the PaymentMethod associated with a customer - {DeleteCustomerPaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Remove the PaymentMethod associated with a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to be removed</param>
        /// <returns></returns>
        void DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId);

        /// <summary>
        /// Remove the PaymentMethod associated with a customer - {DeleteCustomerPaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Remove the PaymentMethod associated with a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDeleteWithHttpInfo(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId);
        /// <summary>
        /// Removes the association between a customer an entity - {DisassociateCustomerEntityRequest}
        /// </summary>
        /// <remarks>
        /// Removes the association between a customer an entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <returns></returns>
        void DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete(string accept, string customerId, string scopeId, string attributeName, string entityId);

        /// <summary>
        /// Removes the association between a customer an entity - {DisassociateCustomerEntityRequest}
        /// </summary>
        /// <remarks>
        /// Removes the association between a customer an entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDeleteWithHttpInfo(string accept, string customerId, string scopeId, string attributeName, string entityId);
        /// <summary>
        /// Search for customers - {FindCustomersRequest}
        /// </summary>
        /// <remarks>
        /// Search for customers.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CustomerQueryResult</returns>
        CustomerQueryResult FindCustomersRequestScopeIdfindPost(string accept, string scopeId, FindCustomersRequest body = default(FindCustomersRequest));

        /// <summary>
        /// Search for customers - {FindCustomersRequest}
        /// </summary>
        /// <remarks>
        /// Search for customers.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CustomerQueryResult</returns>
        ApiResponse<CustomerQueryResult> FindCustomersRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindCustomersRequest body = default(FindCustomersRequest));
        /// <summary>
        /// Retrieve the addresses of a customer - {GetCustomerAddressesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the addresses of a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <returns>List&lt;Address&gt;</returns>
        List<Address> GetCustomerAddressesRequestScopeIdCustomerIdaddressesGet(string accept, string scopeId, string customerId);

        /// <summary>
        /// Retrieve the addresses of a customer - {GetCustomerAddressesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the addresses of a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <returns>ApiResponse of List&lt;Address&gt;</returns>
        ApiResponse<List<Address>> GetCustomerAddressesRequestScopeIdCustomerIdaddressesGetWithHttpInfo(string accept, string scopeId, string customerId);
        /// <summary>
        /// Retrieve a customer by user name - {GetCustomerByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a customer by user name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">The username associated to the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>Customer</returns>
        Customer GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGet(string accept, string scopeId, string username, bool? includeAddresses = default(bool?));

        /// <summary>
        /// Retrieve a customer by user name - {GetCustomerByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a customer by user name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">The username associated to the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGetWithHttpInfo(string accept, string scopeId, string username, bool? includeAddresses = default(bool?));
        /// <summary>
        /// Retrieve the customer from a password reset ticket - {GetCustomerFromPasswordTicketRequest}
        /// </summary>
        /// <remarks>
        /// Decrypts a password reset ticket and returns a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ticket">The ticket</param>
        /// <returns>Customer</returns>
        Customer GetCustomerFromPasswordTicketRequestbyTicketGet(string accept, string ticket);

        /// <summary>
        /// Retrieve the customer from a password reset ticket - {GetCustomerFromPasswordTicketRequest}
        /// </summary>
        /// <remarks>
        /// Decrypts a password reset ticket and returns a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ticket">The ticket</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> GetCustomerFromPasswordTicketRequestbyTicketGetWithHttpInfo(string accept, string ticket);
        /// <summary>
        /// Get customer notes - {GetCustomerNotesRequest}
        /// </summary>
        /// <remarks>
        /// Get customer notes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <returns>List&lt;Note&gt;</returns>
        List<Note> GetCustomerNotesRequestScopeIdCustomerIdnotesGet(string accept, string scopeId, string customerId);

        /// <summary>
        /// Get customer notes - {GetCustomerNotesRequest}
        /// </summary>
        /// <remarks>
        /// Get customer notes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <returns>ApiResponse of List&lt;Note&gt;</returns>
        ApiResponse<List<Note>> GetCustomerNotesRequestScopeIdCustomerIdnotesGetWithHttpInfo(string accept, string scopeId, string customerId);
        /// <summary>
        /// Retrieve the order history of a customer - {GetCustomerOrderHistoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the order history of a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <param name="ordersCreatedAfter">Shows the orders after this date. (optional)</param>
        /// <returns>OrderQueryResult</returns>
        OrderQueryResult GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGet(string accept, string scopeId, string customerId, DateTime? ordersCreatedAfter = default(DateTime?));

        /// <summary>
        /// Retrieve the order history of a customer - {GetCustomerOrderHistoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the order history of a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <param name="ordersCreatedAfter">Shows the orders after this date. (optional)</param>
        /// <returns>ApiResponse of OrderQueryResult</returns>
        ApiResponse<OrderQueryResult> GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGetWithHttpInfo(string accept, string scopeId, string customerId, DateTime? ordersCreatedAfter = default(DateTime?));
        /// <summary>
        /// Get customer organizations for a scope - {GetCustomerOrganizationsRequest}
        /// </summary>
        /// <remarks>
        /// Get customer organizations for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="includeAllAddresses">Gets or sets a value indicating whether all addresses should be returned or only the first one. If False only one organization address will be returned using either IsPreferredBilling or IsPreferredShipping as priority. If True every organization addresses for the customer will be returned (optional)</param>
        /// <returns>List&lt;Organization&gt;</returns>
        List<Organization> GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGet(string accept, string scopeId, string customerId, bool? includeAllAddresses = default(bool?));

        /// <summary>
        /// Get customer organizations for a scope - {GetCustomerOrganizationsRequest}
        /// </summary>
        /// <remarks>
        /// Get customer organizations for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="includeAllAddresses">Gets or sets a value indicating whether all addresses should be returned or only the first one. If False only one organization address will be returned using either IsPreferredBilling or IsPreferredShipping as priority. If True every organization addresses for the customer will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        ApiResponse<List<Organization>> GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGetWithHttpInfo(string accept, string scopeId, string customerId, bool? includeAllAddresses = default(bool?));
        /// <summary>
        /// Retrieve the Payment methods from a payment provider for a customer - {GetCustomerPaymentMethodsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the payment methods from a provider previously used by a specific customer. This request calls the method GetPaymentMethods(string customerId) of the payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <returns>List&lt;PaymentMethod&gt;</returns>
        List<PaymentMethod> GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet(string accept, string scopeId, string customerId, string paymentProviderName);

        /// <summary>
        /// Retrieve the Payment methods from a payment provider for a customer - {GetCustomerPaymentMethodsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the payment methods from a provider previously used by a specific customer. This request calls the method GetPaymentMethods(string customerId) of the payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <returns>ApiResponse of List&lt;PaymentMethod&gt;</returns>
        ApiResponse<List<PaymentMethod>> GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGetWithHttpInfo(string accept, string scopeId, string customerId, string paymentProviderName);
        /// <summary>
        /// Retrieve customer payment profile related to a specific payment provider - {GetCustomerPaymentProfileRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customer payment profile related to a specific payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer to retrieve.</param>
        /// <param name="paymentProviderName">The name of the payment provider.</param>
        /// <returns>PaymentProfile</returns>
        PaymentProfile GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet(string accept, string scopeId, string customerId, string paymentProviderName);

        /// <summary>
        /// Retrieve customer payment profile related to a specific payment provider - {GetCustomerPaymentProfileRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customer payment profile related to a specific payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer to retrieve.</param>
        /// <param name="paymentProviderName">The name of the payment provider.</param>
        /// <returns>ApiResponse of PaymentProfile</returns>
        ApiResponse<PaymentProfile> GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGetWithHttpInfo(string accept, string scopeId, string customerId, string paymentProviderName);
        /// <summary>
        /// Get customer payment profiles for a scope - {GetCustomerPaymentProfilesRequest}
        /// </summary>
        /// <remarks>
        /// Get customer payment profiles for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <returns>List&lt;PaymentProfile&gt;</returns>
        List<PaymentProfile> GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGet(string accept, string scopeId, string customerId);

        /// <summary>
        /// Get customer payment profiles for a scope - {GetCustomerPaymentProfilesRequest}
        /// </summary>
        /// <remarks>
        /// Get customer payment profiles for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <returns>ApiResponse of List&lt;PaymentProfile&gt;</returns>
        ApiResponse<List<PaymentProfile>> GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGetWithHttpInfo(string accept, string scopeId, string customerId);
        /// <summary>
        /// Retrieve a customer - {GetCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>Customer</returns>
        Customer GetCustomerRequestScopeIdCustomerIdGet(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?));

        /// <summary>
        /// Retrieve a customer - {GetCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> GetCustomerRequestScopeIdCustomerIdGetWithHttpInfo(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?));
        /// <summary>
        /// Retrieve the customer&#39;s stores - {GetCustomerStoresRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customer&#39;s stores.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="includeAddresses">The value indicating whether the addresses should be included (optional)</param>
        /// <returns>CustomerStoresAssociations</returns>
        CustomerStoresAssociations GetCustomerStoresRequestScopeIdCustomerIdstoresGet(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?));

        /// <summary>
        /// Retrieve the customer&#39;s stores - {GetCustomerStoresRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customer&#39;s stores.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="includeAddresses">The value indicating whether the addresses should be included (optional)</param>
        /// <returns>ApiResponse of CustomerStoresAssociations</returns>
        ApiResponse<CustomerStoresAssociations> GetCustomerStoresRequestScopeIdCustomerIdstoresGetWithHttpInfo(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?));
        /// <summary>
        /// Remove organizations from a customer - {RemoveOrganizationsToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Remove organizations from a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer</param>
        /// <param name="associatedIds">The list of unique identifier for the associated entities (optional)</param>
        /// <returns></returns>
        void RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDelete(string accept, string scopeId, string customerId, List<string> associatedIds = default(List<string>));

        /// <summary>
        /// Remove organizations from a customer - {RemoveOrganizationsToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Remove organizations from a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer</param>
        /// <param name="associatedIds">The list of unique identifier for the associated entities (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDeleteWithHttpInfo(string accept, string scopeId, string customerId, List<string> associatedIds = default(List<string>));
        /// <summary>
        /// Sets the default PaymentMethod for a customer profile - {SetDefaultCustomerPaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Sets the default PaymentMethod for a customer profile
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to set as default</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PaymentMethod</returns>
        PaymentMethod SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId, SetDefaultCustomerPaymentMethodRequest body = default(SetDefaultCustomerPaymentMethodRequest));

        /// <summary>
        /// Sets the default PaymentMethod for a customer profile - {SetDefaultCustomerPaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Sets the default PaymentMethod for a customer profile
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to set as default</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PaymentMethod</returns>
        ApiResponse<PaymentMethod> SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreateWithHttpInfo(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId, SetDefaultCustomerPaymentMethodRequest body = default(SetDefaultCustomerPaymentMethodRequest));
        /// <summary>
        /// Update a customer payment profile related to a specific payment provider - {UpdateCustomerPaymentProfileRequest}
        /// </summary>
        /// <remarks>
        /// Update a customert payment profile related to a specific payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PaymentProfile</returns>
        PaymentProfile UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate(string accept, string scopeId, string customerId, string paymentProviderName, UpdateCustomerPaymentProfileRequest body = default(UpdateCustomerPaymentProfileRequest));

        /// <summary>
        /// Update a customer payment profile related to a specific payment provider - {UpdateCustomerPaymentProfileRequest}
        /// </summary>
        /// <remarks>
        /// Update a customert payment profile related to a specific payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PaymentProfile</returns>
        ApiResponse<PaymentProfile> UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreateWithHttpInfo(string accept, string scopeId, string customerId, string paymentProviderName, UpdateCustomerPaymentProfileRequest body = default(UpdateCustomerPaymentProfileRequest));
        /// <summary>
        /// Updates a customer - {UpdateCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Updates a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        Customer UpdateCustomerRequestScopeIdCustomerIdCreate(string accept, string scopeId, string customerId, UpdateCustomerRequest body = default(UpdateCustomerRequest));

        /// <summary>
        /// Updates a customer - {UpdateCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Updates a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> UpdateCustomerRequestScopeIdCustomerIdCreateWithHttpInfo(string accept, string scopeId, string customerId, UpdateCustomerRequest body = default(UpdateCustomerRequest));
        /// <summary>
        /// Updates the customer&#39;s preferred store - {UpdatePreferredStoreRequest}
        /// </summary>
        /// <remarks>
        /// Updates the customer&#39;s preferred store
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        Customer UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreate(string accept, string scopeId, string customerId, UpdatePreferredStoreRequest body = default(UpdatePreferredStoreRequest));

        /// <summary>
        /// Updates the customer&#39;s preferred store - {UpdatePreferredStoreRequest}
        /// </summary>
        /// <remarks>
        /// Updates the customer&#39;s preferred store
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreateWithHttpInfo(string accept, string scopeId, string customerId, UpdatePreferredStoreRequest body = default(UpdatePreferredStoreRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add an address to a customer&#39;s addresses - {AddAddressToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Add an address to a customer&#39;s addresses.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        System.Threading.Tasks.Task<Address> AddAddressToCustomerRequestScopeIdCustomerIdaddressesPostAsync(string accept, string scopeId, string customerId, AddAddressToCustomerRequest body = default(AddAddressToCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add an address to a customer&#39;s addresses - {AddAddressToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Add an address to a customer&#39;s addresses.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<Address>> AddAddressToCustomerRequestScopeIdCustomerIdaddressesPostWithHttpInfoAsync(string accept, string scopeId, string customerId, AddAddressToCustomerRequest body = default(AddAddressToCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a note to a customer - {AddCustomerNoteRequest}
        /// </summary>
        /// <remarks>
        /// Add a note to a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddCustomerNoteRequestScopeIdCustomerIdnotesPostAsync(string accept, string scopeId, string customerId, AddCustomerNoteRequest body = default(AddCustomerNoteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a note to a customer - {AddCustomerNoteRequest}
        /// </summary>
        /// <remarks>
        /// Add a note to a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddCustomerNoteRequestScopeIdCustomerIdnotesPostWithHttpInfoAsync(string accept, string scopeId, string customerId, AddCustomerNoteRequest body = default(AddCustomerNoteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add customer payment profile related to a specific payment provider - {AddCustomerPaymentProfileRequest}
        /// </summary>
        /// <remarks>
        /// Add customer payment profile related to a specific payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentProfile</returns>
        System.Threading.Tasks.Task<PaymentProfile> AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePostAsync(string accept, string scopeId, string customerId, string paymentProviderName, AddCustomerPaymentProfileRequest body = default(AddCustomerPaymentProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add customer payment profile related to a specific payment provider - {AddCustomerPaymentProfileRequest}
        /// </summary>
        /// <remarks>
        /// Add customer payment profile related to a specific payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentProfile>> AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePostWithHttpInfoAsync(string accept, string scopeId, string customerId, string paymentProviderName, AddCustomerPaymentProfileRequest body = default(AddCustomerPaymentProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add or updates a customer address - {AddOrUpdateCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Add or updates a customer address
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        System.Threading.Tasks.Task<Address> AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreateAsync(string accept, string customerId, string addressId, AddOrUpdateCustomerAddressRequest body = default(AddOrUpdateCustomerAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or updates a customer address - {AddOrUpdateCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Add or updates a customer address
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<Address>> AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreateWithHttpInfoAsync(string accept, string customerId, string addressId, AddOrUpdateCustomerAddressRequest body = default(AddOrUpdateCustomerAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add organizations to a customer - {AddOrganizationsToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Add organizations to a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPostAsync(string accept, string scopeId, string customerId, AddOrganizationsToCustomerRequest body = default(AddOrganizationsToCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add organizations to a customer - {AddOrganizationsToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Add organizations to a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPostWithHttpInfoAsync(string accept, string scopeId, string customerId, AddOrganizationsToCustomerRequest body = default(AddOrganizationsToCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate a customer to an entity - {AssociateCustomerEntityRequest}
        /// </summary>
        /// <remarks>
        /// Associate a customer to an entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPostAsync(string accept, string customerId, string scopeId, string attributeName, string entityId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate a customer to an entity - {AssociateCustomerEntityRequest}
        /// </summary>
        /// <remarks>
        /// Associate a customer to an entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPostWithHttpInfoAsync(string accept, string customerId, string scopeId, string attributeName, string entityId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a customer - {CreateCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Create a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the customer belong.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CreateCustomerRequestScopeIdPostAsync(string accept, string scopeId, CreateCustomerRequest body = default(CreateCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a customer - {CreateCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Create a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the customer belong.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CreateCustomerRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateCustomerRequest body = default(CreateCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove the PaymentMethod associated with a customer - {DeleteCustomerPaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Remove the PaymentMethod associated with a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to be removed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDeleteAsync(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove the PaymentMethod associated with a customer - {DeleteCustomerPaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Remove the PaymentMethod associated with a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to be removed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes the association between a customer an entity - {DisassociateCustomerEntityRequest}
        /// </summary>
        /// <remarks>
        /// Removes the association between a customer an entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDeleteAsync(string accept, string customerId, string scopeId, string attributeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes the association between a customer an entity - {DisassociateCustomerEntityRequest}
        /// </summary>
        /// <remarks>
        /// Removes the association between a customer an entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDeleteWithHttpInfoAsync(string accept, string customerId, string scopeId, string attributeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for customers - {FindCustomersRequest}
        /// </summary>
        /// <remarks>
        /// Search for customers.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerQueryResult</returns>
        System.Threading.Tasks.Task<CustomerQueryResult> FindCustomersRequestScopeIdfindPostAsync(string accept, string scopeId, FindCustomersRequest body = default(FindCustomersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for customers - {FindCustomersRequest}
        /// </summary>
        /// <remarks>
        /// Search for customers.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerQueryResult>> FindCustomersRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindCustomersRequest body = default(FindCustomersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the addresses of a customer - {GetCustomerAddressesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the addresses of a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Address&gt;</returns>
        System.Threading.Tasks.Task<List<Address>> GetCustomerAddressesRequestScopeIdCustomerIdaddressesGetAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the addresses of a customer - {GetCustomerAddressesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the addresses of a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Address&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Address>>> GetCustomerAddressesRequestScopeIdCustomerIdaddressesGetWithHttpInfoAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a customer by user name - {GetCustomerByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a customer by user name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">The username associated to the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGetAsync(string accept, string scopeId, string username, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a customer by user name - {GetCustomerByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a customer by user name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">The username associated to the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGetWithHttpInfoAsync(string accept, string scopeId, string username, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the customer from a password reset ticket - {GetCustomerFromPasswordTicketRequest}
        /// </summary>
        /// <remarks>
        /// Decrypts a password reset ticket and returns a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ticket">The ticket</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> GetCustomerFromPasswordTicketRequestbyTicketGetAsync(string accept, string ticket, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the customer from a password reset ticket - {GetCustomerFromPasswordTicketRequest}
        /// </summary>
        /// <remarks>
        /// Decrypts a password reset ticket and returns a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ticket">The ticket</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> GetCustomerFromPasswordTicketRequestbyTicketGetWithHttpInfoAsync(string accept, string ticket, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get customer notes - {GetCustomerNotesRequest}
        /// </summary>
        /// <remarks>
        /// Get customer notes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Note&gt;</returns>
        System.Threading.Tasks.Task<List<Note>> GetCustomerNotesRequestScopeIdCustomerIdnotesGetAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get customer notes - {GetCustomerNotesRequest}
        /// </summary>
        /// <remarks>
        /// Get customer notes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Note&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Note>>> GetCustomerNotesRequestScopeIdCustomerIdnotesGetWithHttpInfoAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the order history of a customer - {GetCustomerOrderHistoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the order history of a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <param name="ordersCreatedAfter">Shows the orders after this date. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderQueryResult</returns>
        System.Threading.Tasks.Task<OrderQueryResult> GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGetAsync(string accept, string scopeId, string customerId, DateTime? ordersCreatedAfter = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the order history of a customer - {GetCustomerOrderHistoryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the order history of a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <param name="ordersCreatedAfter">Shows the orders after this date. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderQueryResult>> GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGetWithHttpInfoAsync(string accept, string scopeId, string customerId, DateTime? ordersCreatedAfter = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get customer organizations for a scope - {GetCustomerOrganizationsRequest}
        /// </summary>
        /// <remarks>
        /// Get customer organizations for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="includeAllAddresses">Gets or sets a value indicating whether all addresses should be returned or only the first one. If False only one organization address will be returned using either IsPreferredBilling or IsPreferredShipping as priority. If True every organization addresses for the customer will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        System.Threading.Tasks.Task<List<Organization>> GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGetAsync(string accept, string scopeId, string customerId, bool? includeAllAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get customer organizations for a scope - {GetCustomerOrganizationsRequest}
        /// </summary>
        /// <remarks>
        /// Get customer organizations for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="includeAllAddresses">Gets or sets a value indicating whether all addresses should be returned or only the first one. If False only one organization address will be returned using either IsPreferredBilling or IsPreferredShipping as priority. If True every organization addresses for the customer will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Organization>>> GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGetWithHttpInfoAsync(string accept, string scopeId, string customerId, bool? includeAllAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the Payment methods from a payment provider for a customer - {GetCustomerPaymentMethodsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the payment methods from a provider previously used by a specific customer. This request calls the method GetPaymentMethods(string customerId) of the payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PaymentMethod&gt;</returns>
        System.Threading.Tasks.Task<List<PaymentMethod>> GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGetAsync(string accept, string scopeId, string customerId, string paymentProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the Payment methods from a payment provider for a customer - {GetCustomerPaymentMethodsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the payment methods from a provider previously used by a specific customer. This request calls the method GetPaymentMethods(string customerId) of the payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PaymentMethod&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PaymentMethod>>> GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string paymentProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve customer payment profile related to a specific payment provider - {GetCustomerPaymentProfileRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customer payment profile related to a specific payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer to retrieve.</param>
        /// <param name="paymentProviderName">The name of the payment provider.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentProfile</returns>
        System.Threading.Tasks.Task<PaymentProfile> GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGetAsync(string accept, string scopeId, string customerId, string paymentProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve customer payment profile related to a specific payment provider - {GetCustomerPaymentProfileRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customer payment profile related to a specific payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer to retrieve.</param>
        /// <param name="paymentProviderName">The name of the payment provider.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentProfile>> GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string paymentProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get customer payment profiles for a scope - {GetCustomerPaymentProfilesRequest}
        /// </summary>
        /// <remarks>
        /// Get customer payment profiles for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PaymentProfile&gt;</returns>
        System.Threading.Tasks.Task<List<PaymentProfile>> GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGetAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get customer payment profiles for a scope - {GetCustomerPaymentProfilesRequest}
        /// </summary>
        /// <remarks>
        /// Get customer payment profiles for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PaymentProfile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PaymentProfile>>> GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGetWithHttpInfoAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a customer - {GetCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> GetCustomerRequestScopeIdCustomerIdGetAsync(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a customer - {GetCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> GetCustomerRequestScopeIdCustomerIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the customer&#39;s stores - {GetCustomerStoresRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customer&#39;s stores.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="includeAddresses">The value indicating whether the addresses should be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerStoresAssociations</returns>
        System.Threading.Tasks.Task<CustomerStoresAssociations> GetCustomerStoresRequestScopeIdCustomerIdstoresGetAsync(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the customer&#39;s stores - {GetCustomerStoresRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customer&#39;s stores.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="includeAddresses">The value indicating whether the addresses should be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerStoresAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerStoresAssociations>> GetCustomerStoresRequestScopeIdCustomerIdstoresGetWithHttpInfoAsync(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove organizations from a customer - {RemoveOrganizationsToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Remove organizations from a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer</param>
        /// <param name="associatedIds">The list of unique identifier for the associated entities (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDeleteAsync(string accept, string scopeId, string customerId, List<string> associatedIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove organizations from a customer - {RemoveOrganizationsToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Remove organizations from a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer</param>
        /// <param name="associatedIds">The list of unique identifier for the associated entities (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, List<string> associatedIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the default PaymentMethod for a customer profile - {SetDefaultCustomerPaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Sets the default PaymentMethod for a customer profile
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to set as default</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentMethod</returns>
        System.Threading.Tasks.Task<PaymentMethod> SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreateAsync(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId, SetDefaultCustomerPaymentMethodRequest body = default(SetDefaultCustomerPaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the default PaymentMethod for a customer profile - {SetDefaultCustomerPaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Sets the default PaymentMethod for a customer profile
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to set as default</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentMethod)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethod>> SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId, SetDefaultCustomerPaymentMethodRequest body = default(SetDefaultCustomerPaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a customer payment profile related to a specific payment provider - {UpdateCustomerPaymentProfileRequest}
        /// </summary>
        /// <remarks>
        /// Update a customert payment profile related to a specific payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentProfile</returns>
        System.Threading.Tasks.Task<PaymentProfile> UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreateAsync(string accept, string scopeId, string customerId, string paymentProviderName, UpdateCustomerPaymentProfileRequest body = default(UpdateCustomerPaymentProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a customer payment profile related to a specific payment provider - {UpdateCustomerPaymentProfileRequest}
        /// </summary>
        /// <remarks>
        /// Update a customert payment profile related to a specific payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentProfile>> UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string paymentProviderName, UpdateCustomerPaymentProfileRequest body = default(UpdateCustomerPaymentProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a customer - {UpdateCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Updates a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> UpdateCustomerRequestScopeIdCustomerIdCreateAsync(string accept, string scopeId, string customerId, UpdateCustomerRequest body = default(UpdateCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a customer - {UpdateCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Updates a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> UpdateCustomerRequestScopeIdCustomerIdCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, UpdateCustomerRequest body = default(UpdateCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the customer&#39;s preferred store - {UpdatePreferredStoreRequest}
        /// </summary>
        /// <remarks>
        /// Updates the customer&#39;s preferred store
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreateAsync(string accept, string scopeId, string customerId, UpdatePreferredStoreRequest body = default(UpdatePreferredStoreRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the customer&#39;s preferred store - {UpdatePreferredStoreRequest}
        /// </summary>
        /// <remarks>
        /// Updates the customer&#39;s preferred store
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, UpdatePreferredStoreRequest body = default(UpdatePreferredStoreRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApi : ICustomersApiSync, ICustomersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomersApi : ICustomersApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomersApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomersApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add an address to a customer&#39;s addresses - {AddAddressToCustomerRequest} Add an address to a customer&#39;s addresses.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Address</returns>
        public Address AddAddressToCustomerRequestScopeIdCustomerIdaddressesPost(string accept, string scopeId, string customerId, AddAddressToCustomerRequest body = default(AddAddressToCustomerRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = AddAddressToCustomerRequestScopeIdCustomerIdaddressesPostWithHttpInfo(accept, scopeId, customerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an address to a customer&#39;s addresses - {AddAddressToCustomerRequest} Add an address to a customer&#39;s addresses.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Address</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> AddAddressToCustomerRequestScopeIdCustomerIdaddressesPostWithHttpInfo(string accept, string scopeId, string customerId, AddAddressToCustomerRequest body = default(AddAddressToCustomerRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->AddAddressToCustomerRequestScopeIdCustomerIdaddressesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->AddAddressToCustomerRequestScopeIdCustomerIdaddressesPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->AddAddressToCustomerRequestScopeIdCustomerIdaddressesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Address>("/customers/{ScopeId}/{CustomerId}/addresses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAddressToCustomerRequestScopeIdCustomerIdaddressesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an address to a customer&#39;s addresses - {AddAddressToCustomerRequest} Add an address to a customer&#39;s addresses.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        public async System.Threading.Tasks.Task<Address> AddAddressToCustomerRequestScopeIdCustomerIdaddressesPostAsync(string accept, string scopeId, string customerId, AddAddressToCustomerRequest body = default(AddAddressToCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = await AddAddressToCustomerRequestScopeIdCustomerIdaddressesPostWithHttpInfoAsync(accept, scopeId, customerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an address to a customer&#39;s addresses - {AddAddressToCustomerRequest} Add an address to a customer&#39;s addresses.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address>> AddAddressToCustomerRequestScopeIdCustomerIdaddressesPostWithHttpInfoAsync(string accept, string scopeId, string customerId, AddAddressToCustomerRequest body = default(AddAddressToCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->AddAddressToCustomerRequestScopeIdCustomerIdaddressesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->AddAddressToCustomerRequestScopeIdCustomerIdaddressesPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->AddAddressToCustomerRequestScopeIdCustomerIdaddressesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Address>("/customers/{ScopeId}/{CustomerId}/addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAddressToCustomerRequestScopeIdCustomerIdaddressesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a note to a customer - {AddCustomerNoteRequest} Add a note to a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AddCustomerNoteRequestScopeIdCustomerIdnotesPost(string accept, string scopeId, string customerId, AddCustomerNoteRequest body = default(AddCustomerNoteRequest))
        {
            AddCustomerNoteRequestScopeIdCustomerIdnotesPostWithHttpInfo(accept, scopeId, customerId, body);
        }

        /// <summary>
        /// Add a note to a customer - {AddCustomerNoteRequest} Add a note to a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> AddCustomerNoteRequestScopeIdCustomerIdnotesPostWithHttpInfo(string accept, string scopeId, string customerId, AddCustomerNoteRequest body = default(AddCustomerNoteRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->AddCustomerNoteRequestScopeIdCustomerIdnotesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->AddCustomerNoteRequestScopeIdCustomerIdnotesPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->AddCustomerNoteRequestScopeIdCustomerIdnotesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/customers/{ScopeId}/{CustomerId}/notes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCustomerNoteRequestScopeIdCustomerIdnotesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a note to a customer - {AddCustomerNoteRequest} Add a note to a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddCustomerNoteRequestScopeIdCustomerIdnotesPostAsync(string accept, string scopeId, string customerId, AddCustomerNoteRequest body = default(AddCustomerNoteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddCustomerNoteRequestScopeIdCustomerIdnotesPostWithHttpInfoAsync(accept, scopeId, customerId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a note to a customer - {AddCustomerNoteRequest} Add a note to a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> AddCustomerNoteRequestScopeIdCustomerIdnotesPostWithHttpInfoAsync(string accept, string scopeId, string customerId, AddCustomerNoteRequest body = default(AddCustomerNoteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->AddCustomerNoteRequestScopeIdCustomerIdnotesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->AddCustomerNoteRequestScopeIdCustomerIdnotesPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->AddCustomerNoteRequestScopeIdCustomerIdnotesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/customers/{ScopeId}/{CustomerId}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCustomerNoteRequestScopeIdCustomerIdnotesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add customer payment profile related to a specific payment provider - {AddCustomerPaymentProfileRequest} Add customer payment profile related to a specific payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PaymentProfile</returns>
        public PaymentProfile AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost(string accept, string scopeId, string customerId, string paymentProviderName, AddCustomerPaymentProfileRequest body = default(AddCustomerPaymentProfileRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProfile> localVarResponse = AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePostWithHttpInfo(accept, scopeId, customerId, paymentProviderName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add customer payment profile related to a specific payment provider - {AddCustomerPaymentProfileRequest} Add customer payment profile related to a specific payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PaymentProfile</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProfile> AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePostWithHttpInfo(string accept, string scopeId, string customerId, string paymentProviderName, AddCustomerPaymentProfileRequest body = default(AddCustomerPaymentProfileRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CustomersApi->AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentProfile>("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentProfile", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add customer payment profile related to a specific payment provider - {AddCustomerPaymentProfileRequest} Add customer payment profile related to a specific payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentProfile</returns>
        public async System.Threading.Tasks.Task<PaymentProfile> AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePostAsync(string accept, string scopeId, string customerId, string paymentProviderName, AddCustomerPaymentProfileRequest body = default(AddCustomerPaymentProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProfile> localVarResponse = await AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePostWithHttpInfoAsync(accept, scopeId, customerId, paymentProviderName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add customer payment profile related to a specific payment provider - {AddCustomerPaymentProfileRequest} Add customer payment profile related to a specific payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentProfile)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProfile>> AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePostWithHttpInfoAsync(string accept, string scopeId, string customerId, string paymentProviderName, AddCustomerPaymentProfileRequest body = default(AddCustomerPaymentProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CustomersApi->AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentProfile>("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentProfile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfilePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or updates a customer address - {AddOrUpdateCustomerAddressRequest} Add or updates a customer address
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Address</returns>
        public Address AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreate(string accept, string customerId, string addressId, AddOrUpdateCustomerAddressRequest body = default(AddOrUpdateCustomerAddressRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreateWithHttpInfo(accept, customerId, addressId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or updates a customer address - {AddOrUpdateCustomerAddressRequest} Add or updates a customer address
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Address</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreateWithHttpInfo(string accept, string customerId, string addressId, AddOrUpdateCustomerAddressRequest body = default(AddOrUpdateCustomerAddressRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreate");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling CustomersApi->AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Address>("/customers/{CustomerId}/addresses/{AddressId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or updates a customer address - {AddOrUpdateCustomerAddressRequest} Add or updates a customer address
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        public async System.Threading.Tasks.Task<Address> AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreateAsync(string accept, string customerId, string addressId, AddOrUpdateCustomerAddressRequest body = default(AddOrUpdateCustomerAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = await AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreateWithHttpInfoAsync(accept, customerId, addressId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or updates a customer address - {AddOrUpdateCustomerAddressRequest} Add or updates a customer address
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address>> AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreateWithHttpInfoAsync(string accept, string customerId, string addressId, AddOrUpdateCustomerAddressRequest body = default(AddOrUpdateCustomerAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreate");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling CustomersApi->AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Address>("/customers/{CustomerId}/addresses/{AddressId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateCustomerAddressRequestCustomerIdaddressesAddressIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add organizations to a customer - {AddOrganizationsToCustomerRequest} Add organizations to a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPost(string accept, string scopeId, string customerId, AddOrganizationsToCustomerRequest body = default(AddOrganizationsToCustomerRequest))
        {
            AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPostWithHttpInfo(accept, scopeId, customerId, body);
        }

        /// <summary>
        /// Add organizations to a customer - {AddOrganizationsToCustomerRequest} Add organizations to a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPostWithHttpInfo(string accept, string scopeId, string customerId, AddOrganizationsToCustomerRequest body = default(AddOrganizationsToCustomerRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/customers/{ScopeId}/{CustomerId}/organizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add organizations to a customer - {AddOrganizationsToCustomerRequest} Add organizations to a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPostAsync(string accept, string scopeId, string customerId, AddOrganizationsToCustomerRequest body = default(AddOrganizationsToCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPostWithHttpInfoAsync(accept, scopeId, customerId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add organizations to a customer - {AddOrganizationsToCustomerRequest} Add organizations to a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPostWithHttpInfoAsync(string accept, string scopeId, string customerId, AddOrganizationsToCustomerRequest body = default(AddOrganizationsToCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/customers/{ScopeId}/{CustomerId}/organizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a customer to an entity - {AssociateCustomerEntityRequest} Associate a customer to an entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost(string accept, string customerId, string scopeId, string attributeName, string entityId, Object body = default(Object))
        {
            AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPostWithHttpInfo(accept, customerId, scopeId, attributeName, entityId, body);
        }

        /// <summary>
        /// Associate a customer to an entity - {AssociateCustomerEntityRequest} Associate a customer to an entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPostWithHttpInfo(string accept, string customerId, string scopeId, string attributeName, string entityId, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling CustomersApi->AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomersApi->AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/customers/{CustomerId}/customProfiles/{ScopeId}/{AttributeName}/{EntityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a customer to an entity - {AssociateCustomerEntityRequest} Associate a customer to an entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPostAsync(string accept, string customerId, string scopeId, string attributeName, string entityId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPostWithHttpInfoAsync(accept, customerId, scopeId, attributeName, entityId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Associate a customer to an entity - {AssociateCustomerEntityRequest} Associate a customer to an entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPostWithHttpInfoAsync(string accept, string customerId, string scopeId, string attributeName, string entityId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling CustomersApi->AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomersApi->AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/customers/{CustomerId}/customProfiles/{ScopeId}/{AttributeName}/{EntityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a customer - {CreateCustomerRequest} Create a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the customer belong.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        public Customer CreateCustomerRequestScopeIdPost(string accept, string scopeId, CreateCustomerRequest body = default(CreateCustomerRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = CreateCustomerRequestScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a customer - {CreateCustomerRequest} Create a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the customer belong.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> CreateCustomerRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateCustomerRequest body = default(CreateCustomerRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->CreateCustomerRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->CreateCustomerRequestScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Customer>("/customers/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomerRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a customer - {CreateCustomerRequest} Create a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the customer belong.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CreateCustomerRequestScopeIdPostAsync(string accept, string scopeId, CreateCustomerRequest body = default(CreateCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = await CreateCustomerRequestScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a customer - {CreateCustomerRequest} Create a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the customer belong.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer>> CreateCustomerRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateCustomerRequest body = default(CreateCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->CreateCustomerRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->CreateCustomerRequestScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Customer>("/customers/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomerRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the PaymentMethod associated with a customer - {DeleteCustomerPaymentMethodRequest} Remove the PaymentMethod associated with a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to be removed</param>
        /// <returns></returns>
        public void DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId)
        {
            DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDeleteWithHttpInfo(accept, scopeId, customerId, paymentProviderName, paymentMethodId);
        }

        /// <summary>
        /// Remove the PaymentMethod associated with a customer - {DeleteCustomerPaymentMethodRequest} Remove the PaymentMethod associated with a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDeleteWithHttpInfo(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CustomersApi->DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete");

            // verify the required parameter 'paymentMethodId' is set
            if (paymentMethodId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentMethodId' when calling CustomersApi->DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentMethodId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentMethods/{PaymentMethodId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the PaymentMethod associated with a customer - {DeleteCustomerPaymentMethodRequest} Remove the PaymentMethod associated with a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to be removed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDeleteAsync(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDeleteWithHttpInfoAsync(accept, scopeId, customerId, paymentProviderName, paymentMethodId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove the PaymentMethod associated with a customer - {DeleteCustomerPaymentMethodRequest} Remove the PaymentMethod associated with a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to be removed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CustomersApi->DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete");

            // verify the required parameter 'paymentMethodId' is set
            if (paymentMethodId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentMethodId' when calling CustomersApi->DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentMethodId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentMethods/{PaymentMethodId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the association between a customer an entity - {DisassociateCustomerEntityRequest} Removes the association between a customer an entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <returns></returns>
        public void DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete(string accept, string customerId, string scopeId, string attributeName, string entityId)
        {
            DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDeleteWithHttpInfo(accept, customerId, scopeId, attributeName, entityId);
        }

        /// <summary>
        /// Removes the association between a customer an entity - {DisassociateCustomerEntityRequest} Removes the association between a customer an entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDeleteWithHttpInfo(string accept, string customerId, string scopeId, string attributeName, string entityId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling CustomersApi->DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomersApi->DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/customers/{CustomerId}/customProfiles/{ScopeId}/{AttributeName}/{EntityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the association between a customer an entity - {DisassociateCustomerEntityRequest} Removes the association between a customer an entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDeleteAsync(string accept, string customerId, string scopeId, string attributeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDeleteWithHttpInfoAsync(accept, customerId, scopeId, attributeName, entityId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes the association between a customer an entity - {DisassociateCustomerEntityRequest} Removes the association between a customer an entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDeleteWithHttpInfoAsync(string accept, string customerId, string scopeId, string attributeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling CustomersApi->DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomersApi->DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/customers/{CustomerId}/customProfiles/{ScopeId}/{AttributeName}/{EntityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisassociateCustomerEntityRequestCustomerIdcustomProfilesScopeIdAttributeNameEntityIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for customers - {FindCustomersRequest} Search for customers.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CustomerQueryResult</returns>
        public CustomerQueryResult FindCustomersRequestScopeIdfindPost(string accept, string scopeId, FindCustomersRequest body = default(FindCustomersRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomerQueryResult> localVarResponse = FindCustomersRequestScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for customers - {FindCustomersRequest} Search for customers.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CustomerQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomerQueryResult> FindCustomersRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindCustomersRequest body = default(FindCustomersRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->FindCustomersRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->FindCustomersRequestScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomerQueryResult>("/customers/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCustomersRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for customers - {FindCustomersRequest} Search for customers.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerQueryResult</returns>
        public async System.Threading.Tasks.Task<CustomerQueryResult> FindCustomersRequestScopeIdfindPostAsync(string accept, string scopeId, FindCustomersRequest body = default(FindCustomersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomerQueryResult> localVarResponse = await FindCustomersRequestScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for customers - {FindCustomersRequest} Search for customers.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomerQueryResult>> FindCustomersRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindCustomersRequest body = default(FindCustomersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->FindCustomersRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->FindCustomersRequestScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomerQueryResult>("/customers/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCustomersRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the addresses of a customer - {GetCustomerAddressesRequest} Retrieve the addresses of a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <returns>List&lt;Address&gt;</returns>
        public List<Address> GetCustomerAddressesRequestScopeIdCustomerIdaddressesGet(string accept, string scopeId, string customerId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Address>> localVarResponse = GetCustomerAddressesRequestScopeIdCustomerIdaddressesGetWithHttpInfo(accept, scopeId, customerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the addresses of a customer - {GetCustomerAddressesRequest} Retrieve the addresses of a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <returns>ApiResponse of List&lt;Address&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Address>> GetCustomerAddressesRequestScopeIdCustomerIdaddressesGetWithHttpInfo(string accept, string scopeId, string customerId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerAddressesRequestScopeIdCustomerIdaddressesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerAddressesRequestScopeIdCustomerIdaddressesGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerAddressesRequestScopeIdCustomerIdaddressesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Address>>("/customers/{ScopeId}/{CustomerId}/addresses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerAddressesRequestScopeIdCustomerIdaddressesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the addresses of a customer - {GetCustomerAddressesRequest} Retrieve the addresses of a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Address&gt;</returns>
        public async System.Threading.Tasks.Task<List<Address>> GetCustomerAddressesRequestScopeIdCustomerIdaddressesGetAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Address>> localVarResponse = await GetCustomerAddressesRequestScopeIdCustomerIdaddressesGetWithHttpInfoAsync(accept, scopeId, customerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the addresses of a customer - {GetCustomerAddressesRequest} Retrieve the addresses of a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Address&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Address>>> GetCustomerAddressesRequestScopeIdCustomerIdaddressesGetWithHttpInfoAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerAddressesRequestScopeIdCustomerIdaddressesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerAddressesRequestScopeIdCustomerIdaddressesGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerAddressesRequestScopeIdCustomerIdaddressesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Address>>("/customers/{ScopeId}/{CustomerId}/addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerAddressesRequestScopeIdCustomerIdaddressesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a customer by user name - {GetCustomerByUsernameRequest} Retrieve a customer by user name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">The username associated to the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>Customer</returns>
        public Customer GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGet(string accept, string scopeId, string username, bool? includeAddresses = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGetWithHttpInfo(accept, scopeId, username, includeAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a customer by user name - {GetCustomerByUsernameRequest} Retrieve a customer by user name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">The username associated to the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGetWithHttpInfo(string accept, string scopeId, string username, bool? includeAddresses = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGet");

            // verify the required parameter 'username' is set
            if (username == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'username' when calling CustomersApi->GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Username", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Customer>("/customers/{ScopeId}/byUsername/{Username}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a customer by user name - {GetCustomerByUsernameRequest} Retrieve a customer by user name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">The username associated to the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGetAsync(string accept, string scopeId, string username, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = await GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGetWithHttpInfoAsync(accept, scopeId, username, includeAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a customer by user name - {GetCustomerByUsernameRequest} Retrieve a customer by user name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">The username associated to the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer>> GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGetWithHttpInfoAsync(string accept, string scopeId, string username, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGet");

            // verify the required parameter 'username' is set
            if (username == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'username' when calling CustomersApi->GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Username", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Customer>("/customers/{ScopeId}/byUsername/{Username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerByUsernameRequestScopeIdbyUsernameUsernameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the customer from a password reset ticket - {GetCustomerFromPasswordTicketRequest} Decrypts a password reset ticket and returns a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ticket">The ticket</param>
        /// <returns>Customer</returns>
        public Customer GetCustomerFromPasswordTicketRequestbyTicketGet(string accept, string ticket)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = GetCustomerFromPasswordTicketRequestbyTicketGetWithHttpInfo(accept, ticket);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the customer from a password reset ticket - {GetCustomerFromPasswordTicketRequest} Decrypts a password reset ticket and returns a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ticket">The ticket</param>
        /// <returns>ApiResponse of Customer</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> GetCustomerFromPasswordTicketRequestbyTicketGetWithHttpInfo(string accept, string ticket)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerFromPasswordTicketRequestbyTicketGet");

            // verify the required parameter 'ticket' is set
            if (ticket == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ticket' when calling CustomersApi->GetCustomerFromPasswordTicketRequestbyTicketGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Ticket", ticket));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Customer>("/customers/byTicket", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerFromPasswordTicketRequestbyTicketGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the customer from a password reset ticket - {GetCustomerFromPasswordTicketRequest} Decrypts a password reset ticket and returns a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ticket">The ticket</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> GetCustomerFromPasswordTicketRequestbyTicketGetAsync(string accept, string ticket, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = await GetCustomerFromPasswordTicketRequestbyTicketGetWithHttpInfoAsync(accept, ticket, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the customer from a password reset ticket - {GetCustomerFromPasswordTicketRequest} Decrypts a password reset ticket and returns a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ticket">The ticket</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer>> GetCustomerFromPasswordTicketRequestbyTicketGetWithHttpInfoAsync(string accept, string ticket, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerFromPasswordTicketRequestbyTicketGet");

            // verify the required parameter 'ticket' is set
            if (ticket == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ticket' when calling CustomersApi->GetCustomerFromPasswordTicketRequestbyTicketGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Ticket", ticket));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Customer>("/customers/byTicket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerFromPasswordTicketRequestbyTicketGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer notes - {GetCustomerNotesRequest} Get customer notes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <returns>List&lt;Note&gt;</returns>
        public List<Note> GetCustomerNotesRequestScopeIdCustomerIdnotesGet(string accept, string scopeId, string customerId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Note>> localVarResponse = GetCustomerNotesRequestScopeIdCustomerIdnotesGetWithHttpInfo(accept, scopeId, customerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer notes - {GetCustomerNotesRequest} Get customer notes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <returns>ApiResponse of List&lt;Note&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Note>> GetCustomerNotesRequestScopeIdCustomerIdnotesGetWithHttpInfo(string accept, string scopeId, string customerId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerNotesRequestScopeIdCustomerIdnotesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerNotesRequestScopeIdCustomerIdnotesGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerNotesRequestScopeIdCustomerIdnotesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Note>>("/customers/{ScopeId}/{CustomerId}/notes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerNotesRequestScopeIdCustomerIdnotesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer notes - {GetCustomerNotesRequest} Get customer notes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Note&gt;</returns>
        public async System.Threading.Tasks.Task<List<Note>> GetCustomerNotesRequestScopeIdCustomerIdnotesGetAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Note>> localVarResponse = await GetCustomerNotesRequestScopeIdCustomerIdnotesGetWithHttpInfoAsync(accept, scopeId, customerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer notes - {GetCustomerNotesRequest} Get customer notes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Note&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Note>>> GetCustomerNotesRequestScopeIdCustomerIdnotesGetWithHttpInfoAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerNotesRequestScopeIdCustomerIdnotesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerNotesRequestScopeIdCustomerIdnotesGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerNotesRequestScopeIdCustomerIdnotesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Note>>("/customers/{ScopeId}/{CustomerId}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerNotesRequestScopeIdCustomerIdnotesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the order history of a customer - {GetCustomerOrderHistoryRequest} Retrieve the order history of a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <param name="ordersCreatedAfter">Shows the orders after this date. (optional)</param>
        /// <returns>OrderQueryResult</returns>
        public OrderQueryResult GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGet(string accept, string scopeId, string customerId, DateTime? ordersCreatedAfter = default(DateTime?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderQueryResult> localVarResponse = GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGetWithHttpInfo(accept, scopeId, customerId, ordersCreatedAfter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the order history of a customer - {GetCustomerOrderHistoryRequest} Retrieve the order history of a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <param name="ordersCreatedAfter">Shows the orders after this date. (optional)</param>
        /// <returns>ApiResponse of OrderQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderQueryResult> GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGetWithHttpInfo(string accept, string scopeId, string customerId, DateTime? ordersCreatedAfter = default(DateTime?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (ordersCreatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OrdersCreatedAfter", ordersCreatedAfter));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderQueryResult>("/customers/{ScopeId}/{CustomerId}/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the order history of a customer - {GetCustomerOrderHistoryRequest} Retrieve the order history of a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <param name="ordersCreatedAfter">Shows the orders after this date. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderQueryResult</returns>
        public async System.Threading.Tasks.Task<OrderQueryResult> GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGetAsync(string accept, string scopeId, string customerId, DateTime? ordersCreatedAfter = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderQueryResult> localVarResponse = await GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGetWithHttpInfoAsync(accept, scopeId, customerId, ordersCreatedAfter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the order history of a customer - {GetCustomerOrderHistoryRequest} Retrieve the order history of a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier associated to the requested customer</param>
        /// <param name="ordersCreatedAfter">Shows the orders after this date. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OrderQueryResult>> GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGetWithHttpInfoAsync(string accept, string scopeId, string customerId, DateTime? ordersCreatedAfter = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (ordersCreatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OrdersCreatedAfter", ordersCreatedAfter));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderQueryResult>("/customers/{ScopeId}/{CustomerId}/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerOrderHistoryRequestScopeIdCustomerIdordersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer organizations for a scope - {GetCustomerOrganizationsRequest} Get customer organizations for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="includeAllAddresses">Gets or sets a value indicating whether all addresses should be returned or only the first one. If False only one organization address will be returned using either IsPreferredBilling or IsPreferredShipping as priority. If True every organization addresses for the customer will be returned (optional)</param>
        /// <returns>List&lt;Organization&gt;</returns>
        public List<Organization> GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGet(string accept, string scopeId, string customerId, bool? includeAllAddresses = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Organization>> localVarResponse = GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGetWithHttpInfo(accept, scopeId, customerId, includeAllAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer organizations for a scope - {GetCustomerOrganizationsRequest} Get customer organizations for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="includeAllAddresses">Gets or sets a value indicating whether all addresses should be returned or only the first one. If False only one organization address will be returned using either IsPreferredBilling or IsPreferredShipping as priority. If True every organization addresses for the customer will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Organization>> GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGetWithHttpInfo(string accept, string scopeId, string customerId, bool? includeAllAddresses = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (includeAllAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAllAddresses", includeAllAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Organization>>("/customers/{ScopeId}/{CustomerId}/organizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer organizations for a scope - {GetCustomerOrganizationsRequest} Get customer organizations for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="includeAllAddresses">Gets or sets a value indicating whether all addresses should be returned or only the first one. If False only one organization address will be returned using either IsPreferredBilling or IsPreferredShipping as priority. If True every organization addresses for the customer will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        public async System.Threading.Tasks.Task<List<Organization>> GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGetAsync(string accept, string scopeId, string customerId, bool? includeAllAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Organization>> localVarResponse = await GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGetWithHttpInfoAsync(accept, scopeId, customerId, includeAllAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer organizations for a scope - {GetCustomerOrganizationsRequest} Get customer organizations for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="includeAllAddresses">Gets or sets a value indicating whether all addresses should be returned or only the first one. If False only one organization address will be returned using either IsPreferredBilling or IsPreferredShipping as priority. If True every organization addresses for the customer will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Organization>>> GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGetWithHttpInfoAsync(string accept, string scopeId, string customerId, bool? includeAllAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (includeAllAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAllAddresses", includeAllAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Organization>>("/customers/{ScopeId}/{CustomerId}/organizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerOrganizationsRequestScopeIdCustomerIdorganizationsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Payment methods from a payment provider for a customer - {GetCustomerPaymentMethodsRequest} Retrieve the payment methods from a provider previously used by a specific customer. This request calls the method GetPaymentMethods(string customerId) of the payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <returns>List&lt;PaymentMethod&gt;</returns>
        public List<PaymentMethod> GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet(string accept, string scopeId, string customerId, string paymentProviderName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PaymentMethod>> localVarResponse = GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGetWithHttpInfo(accept, scopeId, customerId, paymentProviderName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Payment methods from a payment provider for a customer - {GetCustomerPaymentMethodsRequest} Retrieve the payment methods from a provider previously used by a specific customer. This request calls the method GetPaymentMethods(string customerId) of the payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <returns>ApiResponse of List&lt;PaymentMethod&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PaymentMethod>> GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGetWithHttpInfo(string accept, string scopeId, string customerId, string paymentProviderName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CustomersApi->GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PaymentMethod>>("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentMethods", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Payment methods from a payment provider for a customer - {GetCustomerPaymentMethodsRequest} Retrieve the payment methods from a provider previously used by a specific customer. This request calls the method GetPaymentMethods(string customerId) of the payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PaymentMethod&gt;</returns>
        public async System.Threading.Tasks.Task<List<PaymentMethod>> GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGetAsync(string accept, string scopeId, string customerId, string paymentProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PaymentMethod>> localVarResponse = await GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGetWithHttpInfoAsync(accept, scopeId, customerId, paymentProviderName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Payment methods from a payment provider for a customer - {GetCustomerPaymentMethodsRequest} Retrieve the payment methods from a provider previously used by a specific customer. This request calls the method GetPaymentMethods(string customerId) of the payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PaymentMethod&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PaymentMethod>>> GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string paymentProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CustomersApi->GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PaymentMethod>>("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentMethods", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerPaymentMethodsRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve customer payment profile related to a specific payment provider - {GetCustomerPaymentProfileRequest} Retrieve the customer payment profile related to a specific payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer to retrieve.</param>
        /// <param name="paymentProviderName">The name of the payment provider.</param>
        /// <returns>PaymentProfile</returns>
        public PaymentProfile GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet(string accept, string scopeId, string customerId, string paymentProviderName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProfile> localVarResponse = GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGetWithHttpInfo(accept, scopeId, customerId, paymentProviderName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve customer payment profile related to a specific payment provider - {GetCustomerPaymentProfileRequest} Retrieve the customer payment profile related to a specific payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer to retrieve.</param>
        /// <param name="paymentProviderName">The name of the payment provider.</param>
        /// <returns>ApiResponse of PaymentProfile</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProfile> GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGetWithHttpInfo(string accept, string scopeId, string customerId, string paymentProviderName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CustomersApi->GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentProfile>("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentProfile", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve customer payment profile related to a specific payment provider - {GetCustomerPaymentProfileRequest} Retrieve the customer payment profile related to a specific payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer to retrieve.</param>
        /// <param name="paymentProviderName">The name of the payment provider.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentProfile</returns>
        public async System.Threading.Tasks.Task<PaymentProfile> GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGetAsync(string accept, string scopeId, string customerId, string paymentProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProfile> localVarResponse = await GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGetWithHttpInfoAsync(accept, scopeId, customerId, paymentProviderName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve customer payment profile related to a specific payment provider - {GetCustomerPaymentProfileRequest} Retrieve the customer payment profile related to a specific payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer to retrieve.</param>
        /// <param name="paymentProviderName">The name of the payment provider.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentProfile)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProfile>> GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string paymentProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CustomersApi->GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentProfile>("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentProfile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer payment profiles for a scope - {GetCustomerPaymentProfilesRequest} Get customer payment profiles for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <returns>List&lt;PaymentProfile&gt;</returns>
        public List<PaymentProfile> GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGet(string accept, string scopeId, string customerId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PaymentProfile>> localVarResponse = GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGetWithHttpInfo(accept, scopeId, customerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer payment profiles for a scope - {GetCustomerPaymentProfilesRequest} Get customer payment profiles for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <returns>ApiResponse of List&lt;PaymentProfile&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PaymentProfile>> GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGetWithHttpInfo(string accept, string scopeId, string customerId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PaymentProfile>>("/customers/{ScopeId}/{CustomerId}/paymentProfiles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer payment profiles for a scope - {GetCustomerPaymentProfilesRequest} Get customer payment profiles for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PaymentProfile&gt;</returns>
        public async System.Threading.Tasks.Task<List<PaymentProfile>> GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGetAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PaymentProfile>> localVarResponse = await GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGetWithHttpInfoAsync(accept, scopeId, customerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer payment profiles for a scope - {GetCustomerPaymentProfilesRequest} Get customer payment profiles for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PaymentProfile&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PaymentProfile>>> GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGetWithHttpInfoAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PaymentProfile>>("/customers/{ScopeId}/{CustomerId}/paymentProfiles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerPaymentProfilesRequestScopeIdCustomerIdpaymentProfilesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a customer - {GetCustomerRequest} Retrieve a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>Customer</returns>
        public Customer GetCustomerRequestScopeIdCustomerIdGet(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = GetCustomerRequestScopeIdCustomerIdGetWithHttpInfo(accept, scopeId, customerId, includeAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a customer - {GetCustomerRequest} Retrieve a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> GetCustomerRequestScopeIdCustomerIdGetWithHttpInfo(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerRequestScopeIdCustomerIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerRequestScopeIdCustomerIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerRequestScopeIdCustomerIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Customer>("/customers/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerRequestScopeIdCustomerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a customer - {GetCustomerRequest} Retrieve a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> GetCustomerRequestScopeIdCustomerIdGetAsync(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = await GetCustomerRequestScopeIdCustomerIdGetWithHttpInfoAsync(accept, scopeId, customerId, includeAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a customer - {GetCustomerRequest} Retrieve a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the requested customer</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer>> GetCustomerRequestScopeIdCustomerIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerRequestScopeIdCustomerIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerRequestScopeIdCustomerIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerRequestScopeIdCustomerIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Customer>("/customers/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerRequestScopeIdCustomerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the customer&#39;s stores - {GetCustomerStoresRequest} Retrieve the customer&#39;s stores.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="includeAddresses">The value indicating whether the addresses should be included (optional)</param>
        /// <returns>CustomerStoresAssociations</returns>
        public CustomerStoresAssociations GetCustomerStoresRequestScopeIdCustomerIdstoresGet(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomerStoresAssociations> localVarResponse = GetCustomerStoresRequestScopeIdCustomerIdstoresGetWithHttpInfo(accept, scopeId, customerId, includeAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the customer&#39;s stores - {GetCustomerStoresRequest} Retrieve the customer&#39;s stores.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="includeAddresses">The value indicating whether the addresses should be included (optional)</param>
        /// <returns>ApiResponse of CustomerStoresAssociations</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomerStoresAssociations> GetCustomerStoresRequestScopeIdCustomerIdstoresGetWithHttpInfo(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerStoresRequestScopeIdCustomerIdstoresGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerStoresRequestScopeIdCustomerIdstoresGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerStoresRequestScopeIdCustomerIdstoresGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerStoresAssociations>("/customers/{ScopeId}/{CustomerId}/stores", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerStoresRequestScopeIdCustomerIdstoresGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the customer&#39;s stores - {GetCustomerStoresRequest} Retrieve the customer&#39;s stores.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="includeAddresses">The value indicating whether the addresses should be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerStoresAssociations</returns>
        public async System.Threading.Tasks.Task<CustomerStoresAssociations> GetCustomerStoresRequestScopeIdCustomerIdstoresGetAsync(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomerStoresAssociations> localVarResponse = await GetCustomerStoresRequestScopeIdCustomerIdstoresGetWithHttpInfoAsync(accept, scopeId, customerId, includeAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the customer&#39;s stores - {GetCustomerStoresRequest} Retrieve the customer&#39;s stores.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="includeAddresses">The value indicating whether the addresses should be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerStoresAssociations)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomerStoresAssociations>> GetCustomerStoresRequestScopeIdCustomerIdstoresGetWithHttpInfoAsync(string accept, string scopeId, string customerId, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->GetCustomerStoresRequestScopeIdCustomerIdstoresGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->GetCustomerStoresRequestScopeIdCustomerIdstoresGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomerStoresRequestScopeIdCustomerIdstoresGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerStoresAssociations>("/customers/{ScopeId}/{CustomerId}/stores", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerStoresRequestScopeIdCustomerIdstoresGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove organizations from a customer - {RemoveOrganizationsToCustomerRequest} Remove organizations from a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer</param>
        /// <param name="associatedIds">The list of unique identifier for the associated entities (optional)</param>
        /// <returns></returns>
        public void RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDelete(string accept, string scopeId, string customerId, List<string> associatedIds = default(List<string>))
        {
            RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDeleteWithHttpInfo(accept, scopeId, customerId, associatedIds);
        }

        /// <summary>
        /// Remove organizations from a customer - {RemoveOrganizationsToCustomerRequest} Remove organizations from a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer</param>
        /// <param name="associatedIds">The list of unique identifier for the associated entities (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDeleteWithHttpInfo(string accept, string scopeId, string customerId, List<string> associatedIds = default(List<string>))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (associatedIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "AssociatedIds", associatedIds));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/customers/{ScopeId}/{CustomerId}/organizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove organizations from a customer - {RemoveOrganizationsToCustomerRequest} Remove organizations from a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer</param>
        /// <param name="associatedIds">The list of unique identifier for the associated entities (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDeleteAsync(string accept, string scopeId, string customerId, List<string> associatedIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDeleteWithHttpInfoAsync(accept, scopeId, customerId, associatedIds, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove organizations from a customer - {RemoveOrganizationsToCustomerRequest} Remove organizations from a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier for the customer</param>
        /// <param name="associatedIds">The list of unique identifier for the associated entities (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, List<string> associatedIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (associatedIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "AssociatedIds", associatedIds));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/customers/{ScopeId}/{CustomerId}/organizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveOrganizationsToCustomerRequestScopeIdCustomerIdorganizationsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the default PaymentMethod for a customer profile - {SetDefaultCustomerPaymentMethodRequest} Sets the default PaymentMethod for a customer profile
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to set as default</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PaymentMethod</returns>
        public PaymentMethod SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId, SetDefaultCustomerPaymentMethodRequest body = default(SetDefaultCustomerPaymentMethodRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentMethod> localVarResponse = SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreateWithHttpInfo(accept, scopeId, customerId, paymentProviderName, paymentMethodId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the default PaymentMethod for a customer profile - {SetDefaultCustomerPaymentMethodRequest} Sets the default PaymentMethod for a customer profile
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to set as default</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PaymentMethod</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentMethod> SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreateWithHttpInfo(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId, SetDefaultCustomerPaymentMethodRequest body = default(SetDefaultCustomerPaymentMethodRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CustomersApi->SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate");

            // verify the required parameter 'paymentMethodId' is set
            if (paymentMethodId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentMethodId' when calling CustomersApi->SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentMethodId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PaymentMethod>("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentMethods/{PaymentMethodId}/default", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the default PaymentMethod for a customer profile - {SetDefaultCustomerPaymentMethodRequest} Sets the default PaymentMethod for a customer profile
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to set as default</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentMethod</returns>
        public async System.Threading.Tasks.Task<PaymentMethod> SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreateAsync(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId, SetDefaultCustomerPaymentMethodRequest body = default(SetDefaultCustomerPaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentMethod> localVarResponse = await SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreateWithHttpInfoAsync(accept, scopeId, customerId, paymentProviderName, paymentMethodId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the default PaymentMethod for a customer profile - {SetDefaultCustomerPaymentMethodRequest} Sets the default PaymentMethod for a customer profile
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the customer owning the cart.</param>
        /// <param name="paymentProviderName">the name of the payment provider to use. If null, all methods will be returned</param>
        /// <param name="paymentMethodId">the unique identifier of the payment method to set as default</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentMethod)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentMethod>> SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string paymentProviderName, string paymentMethodId, SetDefaultCustomerPaymentMethodRequest body = default(SetDefaultCustomerPaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CustomersApi->SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate");

            // verify the required parameter 'paymentMethodId' is set
            if (paymentMethodId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentMethodId' when calling CustomersApi->SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentMethodId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PaymentMethod>("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentMethods/{PaymentMethodId}/default", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetDefaultCustomerPaymentMethodRequestScopeIdCustomerIdPaymentProviderNamepaymentMethodsPaymentMethodIddefaultCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a customer payment profile related to a specific payment provider - {UpdateCustomerPaymentProfileRequest} Update a customert payment profile related to a specific payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PaymentProfile</returns>
        public PaymentProfile UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate(string accept, string scopeId, string customerId, string paymentProviderName, UpdateCustomerPaymentProfileRequest body = default(UpdateCustomerPaymentProfileRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProfile> localVarResponse = UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreateWithHttpInfo(accept, scopeId, customerId, paymentProviderName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a customer payment profile related to a specific payment provider - {UpdateCustomerPaymentProfileRequest} Update a customert payment profile related to a specific payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PaymentProfile</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProfile> UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreateWithHttpInfo(string accept, string scopeId, string customerId, string paymentProviderName, UpdateCustomerPaymentProfileRequest body = default(UpdateCustomerPaymentProfileRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CustomersApi->UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PaymentProfile>("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentProfile", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a customer payment profile related to a specific payment provider - {UpdateCustomerPaymentProfileRequest} Update a customert payment profile related to a specific payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentProfile</returns>
        public async System.Threading.Tasks.Task<PaymentProfile> UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreateAsync(string accept, string scopeId, string customerId, string paymentProviderName, UpdateCustomerPaymentProfileRequest body = default(UpdateCustomerPaymentProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProfile> localVarResponse = await UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreateWithHttpInfoAsync(accept, scopeId, customerId, paymentProviderName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a customer payment profile related to a specific payment provider - {UpdateCustomerPaymentProfileRequest} Update a customert payment profile related to a specific payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier of the payment profile.</param>
        /// <param name="paymentProviderName">The unique identifier of the provider related to the payment profile.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentProfile)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PaymentProfile>> UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string paymentProviderName, UpdateCustomerPaymentProfileRequest body = default(UpdateCustomerPaymentProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CustomersApi->UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PaymentProfile>("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentProfile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomerPaymentProfileRequestScopeIdCustomerIdPaymentProviderNamepaymentProfileCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a customer - {UpdateCustomerRequest} Updates a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        public Customer UpdateCustomerRequestScopeIdCustomerIdCreate(string accept, string scopeId, string customerId, UpdateCustomerRequest body = default(UpdateCustomerRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = UpdateCustomerRequestScopeIdCustomerIdCreateWithHttpInfo(accept, scopeId, customerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a customer - {UpdateCustomerRequest} Updates a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> UpdateCustomerRequestScopeIdCustomerIdCreateWithHttpInfo(string accept, string scopeId, string customerId, UpdateCustomerRequest body = default(UpdateCustomerRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->UpdateCustomerRequestScopeIdCustomerIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->UpdateCustomerRequestScopeIdCustomerIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->UpdateCustomerRequestScopeIdCustomerIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Customer>("/customers/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomerRequestScopeIdCustomerIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a customer - {UpdateCustomerRequest} Updates a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> UpdateCustomerRequestScopeIdCustomerIdCreateAsync(string accept, string scopeId, string customerId, UpdateCustomerRequest body = default(UpdateCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = await UpdateCustomerRequestScopeIdCustomerIdCreateWithHttpInfoAsync(accept, scopeId, customerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a customer - {UpdateCustomerRequest} Updates a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer>> UpdateCustomerRequestScopeIdCustomerIdCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, UpdateCustomerRequest body = default(UpdateCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->UpdateCustomerRequestScopeIdCustomerIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->UpdateCustomerRequestScopeIdCustomerIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->UpdateCustomerRequestScopeIdCustomerIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Customer>("/customers/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomerRequestScopeIdCustomerIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the customer&#39;s preferred store - {UpdatePreferredStoreRequest} Updates the customer&#39;s preferred store
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        public Customer UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreate(string accept, string scopeId, string customerId, UpdatePreferredStoreRequest body = default(UpdatePreferredStoreRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreateWithHttpInfo(accept, scopeId, customerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the customer&#39;s preferred store - {UpdatePreferredStoreRequest} Updates the customer&#39;s preferred store
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreateWithHttpInfo(string accept, string scopeId, string customerId, UpdatePreferredStoreRequest body = default(UpdatePreferredStoreRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Customer>("/customers/{ScopeId}/{CustomerId}/preferred/store", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the customer&#39;s preferred store - {UpdatePreferredStoreRequest} Updates the customer&#39;s preferred store
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreateAsync(string accept, string scopeId, string customerId, UpdatePreferredStoreRequest body = default(UpdatePreferredStoreRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = await UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreateWithHttpInfoAsync(accept, scopeId, customerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the customer&#39;s preferred store - {UpdatePreferredStoreRequest} Updates the customer&#39;s preferred store
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique id of the customer</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer>> UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, UpdatePreferredStoreRequest body = default(UpdatePreferredStoreRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomersApi->UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomersApi->UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Customer>("/customers/{ScopeId}/{CustomerId}/preferred/store", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePreferredStoreRequestScopeIdCustomerIdpreferredstoreCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
