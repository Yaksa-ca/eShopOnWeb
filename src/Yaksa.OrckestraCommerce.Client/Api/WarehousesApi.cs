/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWarehousesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create or update a warehouse using its number - {CreateOrUpdateWarehouseByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Warehouse</returns>
        Warehouse CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreate(string accept, string scopeId, CreateOrUpdateWarehouseByNumberRequest body = default(CreateOrUpdateWarehouseByNumberRequest));

        /// <summary>
        /// Create or update a warehouse using its number - {CreateOrUpdateWarehouseByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Warehouse</returns>
        ApiResponse<Warehouse> CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreateWithHttpInfo(string accept, string scopeId, CreateOrUpdateWarehouseByNumberRequest body = default(CreateOrUpdateWarehouseByNumberRequest));
        /// <summary>
        /// Creates a warehouse using the provided iD, if not provided, a new Id will be generated  - {CreateWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Creates a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Warehouse</returns>
        Warehouse CreateWarehouseRequestScopeIdPost(string accept, string scopeId, CreateWarehouseRequest body = default(CreateWarehouseRequest));

        /// <summary>
        /// Creates a warehouse using the provided iD, if not provided, a new Id will be generated  - {CreateWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Creates a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Warehouse</returns>
        ApiResponse<Warehouse> CreateWarehouseRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateWarehouseRequest body = default(CreateWarehouseRequest));
        /// <summary>
        /// Deletes a warehouse using its Id - {DeleteWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <returns></returns>
        void DeleteWarehouseRequestScopeIdIddeleteDelete(string accept, string scopeId, string id);

        /// <summary>
        /// Deletes a warehouse using its Id - {DeleteWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWarehouseRequestScopeIdIddeleteDeleteWithHttpInfo(string accept, string scopeId, string id);
        /// <summary>
        /// Search for warehouses based on search terms - {FindWarehousesRequest}
        /// </summary>
        /// <remarks>
        /// Search for warehouses based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindWarehousesQueryResult</returns>
        FindWarehousesQueryResult FindWarehousesRequestScopeIdfindPost(string accept, string scopeId, FindWarehousesRequest body = default(FindWarehousesRequest));

        /// <summary>
        /// Search for warehouses based on search terms - {FindWarehousesRequest}
        /// </summary>
        /// <remarks>
        /// Search for warehouses based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindWarehousesQueryResult</returns>
        ApiResponse<FindWarehousesQueryResult> FindWarehousesRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindWarehousesRequest body = default(FindWarehousesRequest));
        /// <summary>
        /// Retrieves a warehouse using its Id - {GetWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific warehouse using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The unique id of the warehouse.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the warehouse. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the warehouse. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status of the warehouse. (optional)</param>
        /// <returns>Warehouse</returns>
        Warehouse GetWarehouseRequestScopeIdIdGet(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?));

        /// <summary>
        /// Retrieves a warehouse using its Id - {GetWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific warehouse using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The unique id of the warehouse.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the warehouse. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the warehouse. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status of the warehouse. (optional)</param>
        /// <returns>ApiResponse of Warehouse</returns>
        ApiResponse<Warehouse> GetWarehouseRequestScopeIdIdGetWithHttpInfo(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?));
        /// <summary>
        /// Update a warehouse using its Id - {UpdateWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Updates a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Warehouse</returns>
        Warehouse UpdateWarehouseRequestScopeIdIdCreate(string accept, string scopeId, string id, UpdateWarehouseRequest body = default(UpdateWarehouseRequest));

        /// <summary>
        /// Update a warehouse using its Id - {UpdateWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Updates a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Warehouse</returns>
        ApiResponse<Warehouse> UpdateWarehouseRequestScopeIdIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdateWarehouseRequest body = default(UpdateWarehouseRequest));
        /// <summary>
        /// Updates the scope associations of a warehouse - {UpdateWarehouseScopeAssociationsRequest}
        /// </summary>
        /// <remarks>
        /// Updates the scope associations of a warehouse, there must be at least one scope in the list of associated scopes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreate(string accept, string scopeId, string id, UpdateWarehouseScopeAssociationsRequest body = default(UpdateWarehouseScopeAssociationsRequest));

        /// <summary>
        /// Updates the scope associations of a warehouse - {UpdateWarehouseScopeAssociationsRequest}
        /// </summary>
        /// <remarks>
        /// Updates the scope associations of a warehouse, there must be at least one scope in the list of associated scopes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreateWithHttpInfo(string accept, string scopeId, string id, UpdateWarehouseScopeAssociationsRequest body = default(UpdateWarehouseScopeAssociationsRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWarehousesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create or update a warehouse using its number - {CreateOrUpdateWarehouseByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Warehouse</returns>
        System.Threading.Tasks.Task<Warehouse> CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreateAsync(string accept, string scopeId, CreateOrUpdateWarehouseByNumberRequest body = default(CreateOrUpdateWarehouseByNumberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update a warehouse using its number - {CreateOrUpdateWarehouseByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Warehouse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Warehouse>> CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreateWithHttpInfoAsync(string accept, string scopeId, CreateOrUpdateWarehouseByNumberRequest body = default(CreateOrUpdateWarehouseByNumberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a warehouse using the provided iD, if not provided, a new Id will be generated  - {CreateWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Creates a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Warehouse</returns>
        System.Threading.Tasks.Task<Warehouse> CreateWarehouseRequestScopeIdPostAsync(string accept, string scopeId, CreateWarehouseRequest body = default(CreateWarehouseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a warehouse using the provided iD, if not provided, a new Id will be generated  - {CreateWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Creates a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Warehouse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Warehouse>> CreateWarehouseRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateWarehouseRequest body = default(CreateWarehouseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a warehouse using its Id - {DeleteWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWarehouseRequestScopeIdIddeleteDeleteAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a warehouse using its Id - {DeleteWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWarehouseRequestScopeIdIddeleteDeleteWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for warehouses based on search terms - {FindWarehousesRequest}
        /// </summary>
        /// <remarks>
        /// Search for warehouses based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindWarehousesQueryResult</returns>
        System.Threading.Tasks.Task<FindWarehousesQueryResult> FindWarehousesRequestScopeIdfindPostAsync(string accept, string scopeId, FindWarehousesRequest body = default(FindWarehousesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for warehouses based on search terms - {FindWarehousesRequest}
        /// </summary>
        /// <remarks>
        /// Search for warehouses based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindWarehousesQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindWarehousesQueryResult>> FindWarehousesRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindWarehousesRequest body = default(FindWarehousesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a warehouse using its Id - {GetWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific warehouse using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The unique id of the warehouse.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the warehouse. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the warehouse. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status of the warehouse. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Warehouse</returns>
        System.Threading.Tasks.Task<Warehouse> GetWarehouseRequestScopeIdIdGetAsync(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a warehouse using its Id - {GetWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific warehouse using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The unique id of the warehouse.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the warehouse. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the warehouse. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status of the warehouse. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Warehouse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Warehouse>> GetWarehouseRequestScopeIdIdGetWithHttpInfoAsync(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a warehouse using its Id - {UpdateWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Updates a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Warehouse</returns>
        System.Threading.Tasks.Task<Warehouse> UpdateWarehouseRequestScopeIdIdCreateAsync(string accept, string scopeId, string id, UpdateWarehouseRequest body = default(UpdateWarehouseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a warehouse using its Id - {UpdateWarehouseRequest}
        /// </summary>
        /// <remarks>
        /// Updates a warehouse
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Warehouse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Warehouse>> UpdateWarehouseRequestScopeIdIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateWarehouseRequest body = default(UpdateWarehouseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the scope associations of a warehouse - {UpdateWarehouseScopeAssociationsRequest}
        /// </summary>
        /// <remarks>
        /// Updates the scope associations of a warehouse, there must be at least one scope in the list of associated scopes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreateAsync(string accept, string scopeId, string id, UpdateWarehouseScopeAssociationsRequest body = default(UpdateWarehouseScopeAssociationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the scope associations of a warehouse - {UpdateWarehouseScopeAssociationsRequest}
        /// </summary>
        /// <remarks>
        /// Updates the scope associations of a warehouse, there must be at least one scope in the list of associated scopes.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateWarehouseScopeAssociationsRequest body = default(UpdateWarehouseScopeAssociationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWarehousesApi : IWarehousesApiSync, IWarehousesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WarehousesApi : IWarehousesApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehousesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WarehousesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehousesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WarehousesApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehousesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WarehousesApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehousesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WarehousesApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create or update a warehouse using its number - {CreateOrUpdateWarehouseByNumberRequest} Creates or updates a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Warehouse</returns>
        public Warehouse CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreate(string accept, string scopeId, CreateOrUpdateWarehouseByNumberRequest body = default(CreateOrUpdateWarehouseByNumberRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse> localVarResponse = CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreateWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a warehouse using its number - {CreateOrUpdateWarehouseByNumberRequest} Creates or updates a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Warehouse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse> CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreateWithHttpInfo(string accept, string scopeId, CreateOrUpdateWarehouseByNumberRequest body = default(CreateOrUpdateWarehouseByNumberRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Warehouse>("/warehouses/{ScopeId}/createOrUpdate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update a warehouse using its number - {CreateOrUpdateWarehouseByNumberRequest} Creates or updates a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Warehouse</returns>
        public async System.Threading.Tasks.Task<Warehouse> CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreateAsync(string accept, string scopeId, CreateOrUpdateWarehouseByNumberRequest body = default(CreateOrUpdateWarehouseByNumberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse> localVarResponse = await CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreateWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a warehouse using its number - {CreateOrUpdateWarehouseByNumberRequest} Creates or updates a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Warehouse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse>> CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreateWithHttpInfoAsync(string accept, string scopeId, CreateOrUpdateWarehouseByNumberRequest body = default(CreateOrUpdateWarehouseByNumberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Warehouse>("/warehouses/{ScopeId}/createOrUpdate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateWarehouseByNumberRequestScopeIdcreateOrUpdateCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a warehouse using the provided iD, if not provided, a new Id will be generated  - {CreateWarehouseRequest} Creates a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Warehouse</returns>
        public Warehouse CreateWarehouseRequestScopeIdPost(string accept, string scopeId, CreateWarehouseRequest body = default(CreateWarehouseRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse> localVarResponse = CreateWarehouseRequestScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a warehouse using the provided iD, if not provided, a new Id will be generated  - {CreateWarehouseRequest} Creates a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Warehouse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse> CreateWarehouseRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateWarehouseRequest body = default(CreateWarehouseRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->CreateWarehouseRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->CreateWarehouseRequestScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Warehouse>("/warehouses/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWarehouseRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a warehouse using the provided iD, if not provided, a new Id will be generated  - {CreateWarehouseRequest} Creates a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Warehouse</returns>
        public async System.Threading.Tasks.Task<Warehouse> CreateWarehouseRequestScopeIdPostAsync(string accept, string scopeId, CreateWarehouseRequest body = default(CreateWarehouseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse> localVarResponse = await CreateWarehouseRequestScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a warehouse using the provided iD, if not provided, a new Id will be generated  - {CreateWarehouseRequest} Creates a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Warehouse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse>> CreateWarehouseRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateWarehouseRequest body = default(CreateWarehouseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->CreateWarehouseRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->CreateWarehouseRequestScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Warehouse>("/warehouses/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWarehouseRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a warehouse using its Id - {DeleteWarehouseRequest} Deletes a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <returns></returns>
        public void DeleteWarehouseRequestScopeIdIddeleteDelete(string accept, string scopeId, string id)
        {
            DeleteWarehouseRequestScopeIdIddeleteDeleteWithHttpInfo(accept, scopeId, id);
        }

        /// <summary>
        /// Deletes a warehouse using its Id - {DeleteWarehouseRequest} Deletes a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteWarehouseRequestScopeIdIddeleteDeleteWithHttpInfo(string accept, string scopeId, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->DeleteWarehouseRequestScopeIdIddeleteDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->DeleteWarehouseRequestScopeIdIddeleteDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling WarehousesApi->DeleteWarehouseRequestScopeIdIddeleteDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/warehouses/{ScopeId}/{Id}/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWarehouseRequestScopeIdIddeleteDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a warehouse using its Id - {DeleteWarehouseRequest} Deletes a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWarehouseRequestScopeIdIddeleteDeleteAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWarehouseRequestScopeIdIddeleteDeleteWithHttpInfoAsync(accept, scopeId, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a warehouse using its Id - {DeleteWarehouseRequest} Deletes a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteWarehouseRequestScopeIdIddeleteDeleteWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->DeleteWarehouseRequestScopeIdIddeleteDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->DeleteWarehouseRequestScopeIdIddeleteDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling WarehousesApi->DeleteWarehouseRequestScopeIdIddeleteDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/warehouses/{ScopeId}/{Id}/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWarehouseRequestScopeIdIddeleteDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for warehouses based on search terms - {FindWarehousesRequest} Search for warehouses based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindWarehousesQueryResult</returns>
        public FindWarehousesQueryResult FindWarehousesRequestScopeIdfindPost(string accept, string scopeId, FindWarehousesRequest body = default(FindWarehousesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindWarehousesQueryResult> localVarResponse = FindWarehousesRequestScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for warehouses based on search terms - {FindWarehousesRequest} Search for warehouses based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindWarehousesQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindWarehousesQueryResult> FindWarehousesRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindWarehousesRequest body = default(FindWarehousesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->FindWarehousesRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->FindWarehousesRequestScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindWarehousesQueryResult>("/warehouses/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindWarehousesRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for warehouses based on search terms - {FindWarehousesRequest} Search for warehouses based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindWarehousesQueryResult</returns>
        public async System.Threading.Tasks.Task<FindWarehousesQueryResult> FindWarehousesRequestScopeIdfindPostAsync(string accept, string scopeId, FindWarehousesRequest body = default(FindWarehousesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindWarehousesQueryResult> localVarResponse = await FindWarehousesRequestScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for warehouses based on search terms - {FindWarehousesRequest} Search for warehouses based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindWarehousesQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindWarehousesQueryResult>> FindWarehousesRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindWarehousesRequest body = default(FindWarehousesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->FindWarehousesRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->FindWarehousesRequestScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FindWarehousesQueryResult>("/warehouses/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindWarehousesRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a warehouse using its Id - {GetWarehouseRequest} Retrieve a specific warehouse using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The unique id of the warehouse.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the warehouse. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the warehouse. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status of the warehouse. (optional)</param>
        /// <returns>Warehouse</returns>
        public Warehouse GetWarehouseRequestScopeIdIdGet(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse> localVarResponse = GetWarehouseRequestScopeIdIdGetWithHttpInfo(accept, scopeId, id, cultureName, includeAddresses, includeSchedules, includeOperatingStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a warehouse using its Id - {GetWarehouseRequest} Retrieve a specific warehouse using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The unique id of the warehouse.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the warehouse. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the warehouse. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status of the warehouse. (optional)</param>
        /// <returns>ApiResponse of Warehouse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse> GetWarehouseRequestScopeIdIdGetWithHttpInfo(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->GetWarehouseRequestScopeIdIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->GetWarehouseRequestScopeIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling WarehousesApi->GetWarehouseRequestScopeIdIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeOperatingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeOperatingStatus", includeOperatingStatus));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Warehouse>("/warehouses/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWarehouseRequestScopeIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a warehouse using its Id - {GetWarehouseRequest} Retrieve a specific warehouse using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The unique id of the warehouse.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the warehouse. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the warehouse. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status of the warehouse. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Warehouse</returns>
        public async System.Threading.Tasks.Task<Warehouse> GetWarehouseRequestScopeIdIdGetAsync(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse> localVarResponse = await GetWarehouseRequestScopeIdIdGetWithHttpInfoAsync(accept, scopeId, id, cultureName, includeAddresses, includeSchedules, includeOperatingStatus, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a warehouse using its Id - {GetWarehouseRequest} Retrieve a specific warehouse using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The unique id of the warehouse.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the warehouse. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the warehouse. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status of the warehouse. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Warehouse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse>> GetWarehouseRequestScopeIdIdGetWithHttpInfoAsync(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->GetWarehouseRequestScopeIdIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->GetWarehouseRequestScopeIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling WarehousesApi->GetWarehouseRequestScopeIdIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeOperatingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeOperatingStatus", includeOperatingStatus));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Warehouse>("/warehouses/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWarehouseRequestScopeIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a warehouse using its Id - {UpdateWarehouseRequest} Updates a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Warehouse</returns>
        public Warehouse UpdateWarehouseRequestScopeIdIdCreate(string accept, string scopeId, string id, UpdateWarehouseRequest body = default(UpdateWarehouseRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse> localVarResponse = UpdateWarehouseRequestScopeIdIdCreateWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a warehouse using its Id - {UpdateWarehouseRequest} Updates a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Warehouse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse> UpdateWarehouseRequestScopeIdIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdateWarehouseRequest body = default(UpdateWarehouseRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->UpdateWarehouseRequestScopeIdIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->UpdateWarehouseRequestScopeIdIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling WarehousesApi->UpdateWarehouseRequestScopeIdIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Warehouse>("/warehouses/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWarehouseRequestScopeIdIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a warehouse using its Id - {UpdateWarehouseRequest} Updates a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Warehouse</returns>
        public async System.Threading.Tasks.Task<Warehouse> UpdateWarehouseRequestScopeIdIdCreateAsync(string accept, string scopeId, string id, UpdateWarehouseRequest body = default(UpdateWarehouseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse> localVarResponse = await UpdateWarehouseRequestScopeIdIdCreateWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a warehouse using its Id - {UpdateWarehouseRequest} Updates a warehouse
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse to be updated.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Warehouse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Warehouse>> UpdateWarehouseRequestScopeIdIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateWarehouseRequest body = default(UpdateWarehouseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->UpdateWarehouseRequestScopeIdIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->UpdateWarehouseRequestScopeIdIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling WarehousesApi->UpdateWarehouseRequestScopeIdIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Warehouse>("/warehouses/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWarehouseRequestScopeIdIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the scope associations of a warehouse - {UpdateWarehouseScopeAssociationsRequest} Updates the scope associations of a warehouse, there must be at least one scope in the list of associated scopes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreate(string accept, string scopeId, string id, UpdateWarehouseScopeAssociationsRequest body = default(UpdateWarehouseScopeAssociationsRequest))
        {
            UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreateWithHttpInfo(accept, scopeId, id, body);
        }

        /// <summary>
        /// Updates the scope associations of a warehouse - {UpdateWarehouseScopeAssociationsRequest} Updates the scope associations of a warehouse, there must be at least one scope in the list of associated scopes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreateWithHttpInfo(string accept, string scopeId, string id, UpdateWarehouseScopeAssociationsRequest body = default(UpdateWarehouseScopeAssociationsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling WarehousesApi->UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/warehouses/{ScopeId}/{Id}/AssociatedScopes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the scope associations of a warehouse - {UpdateWarehouseScopeAssociationsRequest} Updates the scope associations of a warehouse, there must be at least one scope in the list of associated scopes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreateAsync(string accept, string scopeId, string id, UpdateWarehouseScopeAssociationsRequest body = default(UpdateWarehouseScopeAssociationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreateWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates the scope associations of a warehouse - {UpdateWarehouseScopeAssociationsRequest} Updates the scope associations of a warehouse, there must be at least one scope in the list of associated scopes.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique identifier of the Warehouse.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateWarehouseScopeAssociationsRequest body = default(UpdateWarehouseScopeAssociationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling WarehousesApi->UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling WarehousesApi->UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling WarehousesApi->UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/warehouses/{ScopeId}/{Id}/AssociatedScopes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWarehouseScopeAssociationsRequestScopeIdIdAssociatedScopesCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
