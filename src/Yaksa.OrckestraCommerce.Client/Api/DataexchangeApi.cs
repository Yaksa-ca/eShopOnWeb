/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataexchangeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Export Product Prices of a priceList - {ExportProductPriceRequest}
        /// </summary>
        /// <remarks>
        /// Export Product Prices of a priceList
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ExportProductPriceRequestproductpricesScopeIdexportPost(string accept, string scopeId, ExportProductPriceRequest body = default(ExportProductPriceRequest));

        /// <summary>
        /// Export Product Prices of a priceList - {ExportProductPriceRequest}
        /// </summary>
        /// <remarks>
        /// Export Product Prices of a priceList
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ExportProductPriceRequestproductpricesScopeIdexportPostWithHttpInfo(string accept, string scopeId, ExportProductPriceRequest body = default(ExportProductPriceRequest));
        /// <summary>
        /// Export the promo codes of the promotion - {ExportPromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Export the promo codes of the promotion. The ouput is a csv file.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPost(string accept, string promotionId, ExportPromoCodesRequest body = default(ExportPromoCodesRequest));

        /// <summary>
        /// Export the promo codes of the promotion - {ExportPromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Export the promo codes of the promotion. The ouput is a csv file.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPostWithHttpInfo(string accept, string promotionId, ExportPromoCodesRequest body = default(ExportPromoCodesRequest));
        /// <summary>
        /// Import a  file Products and Product Prices of a priceList - {ImportProductPriceRequest}
        /// </summary>
        /// <remarks>
        /// Import a file Products and Product Prices of a priceList - {ImportProductPriceRequest}
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ImportProductPriceRequestproductpricesScopeIdimportPost(string accept, string scopeId, ImportProductPriceRequest body = default(ImportProductPriceRequest));

        /// <summary>
        /// Import a  file Products and Product Prices of a priceList - {ImportProductPriceRequest}
        /// </summary>
        /// <remarks>
        /// Import a file Products and Product Prices of a priceList - {ImportProductPriceRequest}
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ImportProductPriceRequestproductpricesScopeIdimportPostWithHttpInfo(string accept, string scopeId, ImportProductPriceRequest body = default(ImportProductPriceRequest));
        /// <summary>
        /// Import the promo codes for the promotion - {ImportPromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Import the promo codes for the promotion. The promo codes to import are in csv file, one promo code per row
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPost(string accept, string promotionId, ImportPromoCodesRequest body = default(ImportPromoCodesRequest));

        /// <summary>
        /// Import the promo codes for the promotion - {ImportPromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Import the promo codes for the promotion. The promo codes to import are in csv file, one promo code per row
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPostWithHttpInfo(string accept, string promotionId, ImportPromoCodesRequest body = default(ImportPromoCodesRequest));
        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationExportRequest}
        /// </summary>
        /// <remarks>
        /// Export Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ProductInformationExportRequestproductsScopeIdexportPost(string accept, string scopeId, ProductInformationExportRequest body = default(ProductInformationExportRequest));

        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationExportRequest}
        /// </summary>
        /// <remarks>
        /// Export Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ProductInformationExportRequestproductsScopeIdexportPostWithHttpInfo(string accept, string scopeId, ProductInformationExportRequest body = default(ProductInformationExportRequest));
        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationImportRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ProductInformationImportRequestproductsScopeIdimportPost(string accept, string scopeId, ProductInformationImportRequest body = default(ProductInformationImportRequest));

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationImportRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ProductInformationImportRequestproductsScopeIdimportPostWithHttpInfo(string accept, string scopeId, ProductInformationImportRequest body = default(ProductInformationImportRequest));
        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationLegacyImportRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPost(string accept, string scopeId, ProductInformationLegacyImportRequest body = default(ProductInformationLegacyImportRequest));

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationLegacyImportRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPostWithHttpInfo(string accept, string scopeId, ProductInformationLegacyImportRequest body = default(ProductInformationLegacyImportRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataexchangeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Export Product Prices of a priceList - {ExportProductPriceRequest}
        /// </summary>
        /// <remarks>
        /// Export Product Prices of a priceList
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ExportProductPriceRequestproductpricesScopeIdexportPostAsync(string accept, string scopeId, ExportProductPriceRequest body = default(ExportProductPriceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export Product Prices of a priceList - {ExportProductPriceRequest}
        /// </summary>
        /// <remarks>
        /// Export Product Prices of a priceList
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ExportProductPriceRequestproductpricesScopeIdexportPostWithHttpInfoAsync(string accept, string scopeId, ExportProductPriceRequest body = default(ExportProductPriceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export the promo codes of the promotion - {ExportPromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Export the promo codes of the promotion. The ouput is a csv file.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPostAsync(string accept, string promotionId, ExportPromoCodesRequest body = default(ExportPromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export the promo codes of the promotion - {ExportPromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Export the promo codes of the promotion. The ouput is a csv file.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPostWithHttpInfoAsync(string accept, string promotionId, ExportPromoCodesRequest body = default(ExportPromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import a  file Products and Product Prices of a priceList - {ImportProductPriceRequest}
        /// </summary>
        /// <remarks>
        /// Import a file Products and Product Prices of a priceList - {ImportProductPriceRequest}
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ImportProductPriceRequestproductpricesScopeIdimportPostAsync(string accept, string scopeId, ImportProductPriceRequest body = default(ImportProductPriceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import a  file Products and Product Prices of a priceList - {ImportProductPriceRequest}
        /// </summary>
        /// <remarks>
        /// Import a file Products and Product Prices of a priceList - {ImportProductPriceRequest}
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ImportProductPriceRequestproductpricesScopeIdimportPostWithHttpInfoAsync(string accept, string scopeId, ImportProductPriceRequest body = default(ImportProductPriceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import the promo codes for the promotion - {ImportPromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Import the promo codes for the promotion. The promo codes to import are in csv file, one promo code per row
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPostAsync(string accept, string promotionId, ImportPromoCodesRequest body = default(ImportPromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import the promo codes for the promotion - {ImportPromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Import the promo codes for the promotion. The promo codes to import are in csv file, one promo code per row
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPostWithHttpInfoAsync(string accept, string promotionId, ImportPromoCodesRequest body = default(ImportPromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationExportRequest}
        /// </summary>
        /// <remarks>
        /// Export Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ProductInformationExportRequestproductsScopeIdexportPostAsync(string accept, string scopeId, ProductInformationExportRequest body = default(ProductInformationExportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationExportRequest}
        /// </summary>
        /// <remarks>
        /// Export Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ProductInformationExportRequestproductsScopeIdexportPostWithHttpInfoAsync(string accept, string scopeId, ProductInformationExportRequest body = default(ProductInformationExportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationImportRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ProductInformationImportRequestproductsScopeIdimportPostAsync(string accept, string scopeId, ProductInformationImportRequest body = default(ProductInformationImportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationImportRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ProductInformationImportRequestproductsScopeIdimportPostWithHttpInfoAsync(string accept, string scopeId, ProductInformationImportRequest body = default(ProductInformationImportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationLegacyImportRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPostAsync(string accept, string scopeId, ProductInformationLegacyImportRequest body = default(ProductInformationLegacyImportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationLegacyImportRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPostWithHttpInfoAsync(string accept, string scopeId, ProductInformationLegacyImportRequest body = default(ProductInformationLegacyImportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataexchangeApi : IDataexchangeApiSync, IDataexchangeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataexchangeApi : IDataexchangeApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataexchangeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataexchangeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataexchangeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataexchangeApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataexchangeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataexchangeApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataexchangeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataexchangeApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Export Product Prices of a priceList - {ExportProductPriceRequest} Export Product Prices of a priceList
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ExportProductPriceRequestproductpricesScopeIdexportPost(string accept, string scopeId, ExportProductPriceRequest body = default(ExportProductPriceRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ExportProductPriceRequestproductpricesScopeIdexportPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Product Prices of a priceList - {ExportProductPriceRequest} Export Product Prices of a priceList
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ExportProductPriceRequestproductpricesScopeIdexportPostWithHttpInfo(string accept, string scopeId, ExportProductPriceRequest body = default(ExportProductPriceRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ExportProductPriceRequestproductpricesScopeIdexportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling DataexchangeApi->ExportProductPriceRequestproductpricesScopeIdexportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/dataexchange/productprices/{ScopeId}/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProductPriceRequestproductpricesScopeIdexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Product Prices of a priceList - {ExportProductPriceRequest} Export Product Prices of a priceList
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ExportProductPriceRequestproductpricesScopeIdexportPostAsync(string accept, string scopeId, ExportProductPriceRequest body = default(ExportProductPriceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ExportProductPriceRequestproductpricesScopeIdexportPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Product Prices of a priceList - {ExportProductPriceRequest} Export Product Prices of a priceList
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ExportProductPriceRequestproductpricesScopeIdexportPostWithHttpInfoAsync(string accept, string scopeId, ExportProductPriceRequest body = default(ExportProductPriceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ExportProductPriceRequestproductpricesScopeIdexportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling DataexchangeApi->ExportProductPriceRequestproductpricesScopeIdexportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/dataexchange/productprices/{ScopeId}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProductPriceRequestproductpricesScopeIdexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export the promo codes of the promotion - {ExportPromoCodesRequest} Export the promo codes of the promotion. The ouput is a csv file.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPost(string accept, string promotionId, ExportPromoCodesRequest body = default(ExportPromoCodesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPostWithHttpInfo(accept, promotionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export the promo codes of the promotion - {ExportPromoCodesRequest} Export the promo codes of the promotion. The ouput is a csv file.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPostWithHttpInfo(string accept, string promotionId, ExportPromoCodesRequest body = default(ExportPromoCodesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling DataexchangeApi->ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/dataexchange/promotions/{PromotionId}/promoCodes/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export the promo codes of the promotion - {ExportPromoCodesRequest} Export the promo codes of the promotion. The ouput is a csv file.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPostAsync(string accept, string promotionId, ExportPromoCodesRequest body = default(ExportPromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPostWithHttpInfoAsync(accept, promotionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export the promo codes of the promotion - {ExportPromoCodesRequest} Export the promo codes of the promotion. The ouput is a csv file.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPostWithHttpInfoAsync(string accept, string promotionId, ExportPromoCodesRequest body = default(ExportPromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling DataexchangeApi->ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/dataexchange/promotions/{PromotionId}/promoCodes/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportPromoCodesRequestpromotionsPromotionIdpromoCodesexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import a  file Products and Product Prices of a priceList - {ImportProductPriceRequest} Import a file Products and Product Prices of a priceList - {ImportProductPriceRequest}
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ImportProductPriceRequestproductpricesScopeIdimportPost(string accept, string scopeId, ImportProductPriceRequest body = default(ImportProductPriceRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ImportProductPriceRequestproductpricesScopeIdimportPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import a  file Products and Product Prices of a priceList - {ImportProductPriceRequest} Import a file Products and Product Prices of a priceList - {ImportProductPriceRequest}
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ImportProductPriceRequestproductpricesScopeIdimportPostWithHttpInfo(string accept, string scopeId, ImportProductPriceRequest body = default(ImportProductPriceRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ImportProductPriceRequestproductpricesScopeIdimportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling DataexchangeApi->ImportProductPriceRequestproductpricesScopeIdimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/dataexchange/productprices/{ScopeId}/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProductPriceRequestproductpricesScopeIdimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import a  file Products and Product Prices of a priceList - {ImportProductPriceRequest} Import a file Products and Product Prices of a priceList - {ImportProductPriceRequest}
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ImportProductPriceRequestproductpricesScopeIdimportPostAsync(string accept, string scopeId, ImportProductPriceRequest body = default(ImportProductPriceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ImportProductPriceRequestproductpricesScopeIdimportPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import a  file Products and Product Prices of a priceList - {ImportProductPriceRequest} Import a file Products and Product Prices of a priceList - {ImportProductPriceRequest}
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ImportProductPriceRequestproductpricesScopeIdimportPostWithHttpInfoAsync(string accept, string scopeId, ImportProductPriceRequest body = default(ImportProductPriceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ImportProductPriceRequestproductpricesScopeIdimportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling DataexchangeApi->ImportProductPriceRequestproductpricesScopeIdimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/dataexchange/productprices/{ScopeId}/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProductPriceRequestproductpricesScopeIdimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import the promo codes for the promotion - {ImportPromoCodesRequest} Import the promo codes for the promotion. The promo codes to import are in csv file, one promo code per row
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPost(string accept, string promotionId, ImportPromoCodesRequest body = default(ImportPromoCodesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPostWithHttpInfo(accept, promotionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import the promo codes for the promotion - {ImportPromoCodesRequest} Import the promo codes for the promotion. The promo codes to import are in csv file, one promo code per row
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPostWithHttpInfo(string accept, string promotionId, ImportPromoCodesRequest body = default(ImportPromoCodesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling DataexchangeApi->ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/dataexchange/promotions/{PromotionId}/promoCodes/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import the promo codes for the promotion - {ImportPromoCodesRequest} Import the promo codes for the promotion. The promo codes to import are in csv file, one promo code per row
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPostAsync(string accept, string promotionId, ImportPromoCodesRequest body = default(ImportPromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPostWithHttpInfoAsync(accept, promotionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import the promo codes for the promotion - {ImportPromoCodesRequest} Import the promo codes for the promotion. The promo codes to import are in csv file, one promo code per row
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPostWithHttpInfoAsync(string accept, string promotionId, ImportPromoCodesRequest body = default(ImportPromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling DataexchangeApi->ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/dataexchange/promotions/{PromotionId}/promoCodes/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportPromoCodesRequestpromotionsPromotionIdpromoCodesimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationExportRequest} Export Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ProductInformationExportRequestproductsScopeIdexportPost(string accept, string scopeId, ProductInformationExportRequest body = default(ProductInformationExportRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ProductInformationExportRequestproductsScopeIdexportPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationExportRequest} Export Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ProductInformationExportRequestproductsScopeIdexportPostWithHttpInfo(string accept, string scopeId, ProductInformationExportRequest body = default(ProductInformationExportRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ProductInformationExportRequestproductsScopeIdexportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling DataexchangeApi->ProductInformationExportRequestproductsScopeIdexportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/dataexchange/products/{ScopeId}/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductInformationExportRequestproductsScopeIdexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationExportRequest} Export Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ProductInformationExportRequestproductsScopeIdexportPostAsync(string accept, string scopeId, ProductInformationExportRequest body = default(ProductInformationExportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ProductInformationExportRequestproductsScopeIdexportPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationExportRequest} Export Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ProductInformationExportRequestproductsScopeIdexportPostWithHttpInfoAsync(string accept, string scopeId, ProductInformationExportRequest body = default(ProductInformationExportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ProductInformationExportRequestproductsScopeIdexportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling DataexchangeApi->ProductInformationExportRequestproductsScopeIdexportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/dataexchange/products/{ScopeId}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductInformationExportRequestproductsScopeIdexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationImportRequest} Import Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ProductInformationImportRequestproductsScopeIdimportPost(string accept, string scopeId, ProductInformationImportRequest body = default(ProductInformationImportRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ProductInformationImportRequestproductsScopeIdimportPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationImportRequest} Import Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ProductInformationImportRequestproductsScopeIdimportPostWithHttpInfo(string accept, string scopeId, ProductInformationImportRequest body = default(ProductInformationImportRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ProductInformationImportRequestproductsScopeIdimportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling DataexchangeApi->ProductInformationImportRequestproductsScopeIdimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/dataexchange/products/{ScopeId}/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductInformationImportRequestproductsScopeIdimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationImportRequest} Import Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ProductInformationImportRequestproductsScopeIdimportPostAsync(string accept, string scopeId, ProductInformationImportRequest body = default(ProductInformationImportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ProductInformationImportRequestproductsScopeIdimportPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationImportRequest} Import Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ProductInformationImportRequestproductsScopeIdimportPostWithHttpInfoAsync(string accept, string scopeId, ProductInformationImportRequest body = default(ProductInformationImportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ProductInformationImportRequestproductsScopeIdimportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling DataexchangeApi->ProductInformationImportRequestproductsScopeIdimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/dataexchange/products/{ScopeId}/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductInformationImportRequestproductsScopeIdimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationLegacyImportRequest} Import Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPost(string accept, string scopeId, ProductInformationLegacyImportRequest body = default(ProductInformationLegacyImportRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationLegacyImportRequest} Import Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPostWithHttpInfo(string accept, string scopeId, ProductInformationLegacyImportRequest body = default(ProductInformationLegacyImportRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling DataexchangeApi->ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/dataexchange/products/{ScopeId}/legacy/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationLegacyImportRequest} Import Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPostAsync(string accept, string scopeId, ProductInformationLegacyImportRequest body = default(ProductInformationLegacyImportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ProductInformationLegacyImportRequest} Import Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPostWithHttpInfoAsync(string accept, string scopeId, ProductInformationLegacyImportRequest body = default(ProductInformationLegacyImportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling DataexchangeApi->ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling DataexchangeApi->ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/dataexchange/products/{ScopeId}/legacy/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductInformationLegacyImportRequestproductsScopeIdlegacyimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
