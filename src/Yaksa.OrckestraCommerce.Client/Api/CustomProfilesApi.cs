/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomProfilesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add an address to a custom profile&#39;s addresses - {AddAddressToCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Add an address to a custom profiles&#39;s addresses.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityId">The unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Address</returns>
        Address AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPost(string accept, string scopeId, string entityId, AddAddressToCustomProfileRequest body = default(AddAddressToCustomProfileRequest));

        /// <summary>
        /// Add an address to a custom profile&#39;s addresses - {AddAddressToCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Add an address to a custom profiles&#39;s addresses.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityId">The unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPostWithHttpInfo(string accept, string scopeId, string entityId, AddAddressToCustomProfileRequest body = default(AddAddressToCustomProfileRequest));
        /// <summary>
        /// Associate two entities together - {AssociateEntityRequest}
        /// </summary>
        /// <remarks>
        /// Associate two entities together
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the entity type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId, Object body = default(Object));

        /// <summary>
        /// Associate two entities together - {AssociateEntityRequest}
        /// </summary>
        /// <remarks>
        /// Associate two entities together
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the entity type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPostWithHttpInfo(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId, Object body = default(Object));
        /// <summary>
        /// Create a new custom profile - {CreateCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Create a new custom profile
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CustomProfile</returns>
        CustomProfile CreateCustomProfileRequestScopeIdEntityTypeNamePost(string accept, string scopeId, string entityTypeName, CreateCustomProfileRequest body = default(CreateCustomProfileRequest));

        /// <summary>
        /// Create a new custom profile - {CreateCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Create a new custom profile
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CustomProfile</returns>
        ApiResponse<CustomProfile> CreateCustomProfileRequestScopeIdEntityTypeNamePostWithHttpInfo(string accept, string scopeId, string entityTypeName, CreateCustomProfileRequest body = default(CreateCustomProfileRequest));
        /// <summary>
        /// Deletes a existing custom profile - {DeleteCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Deletes an existing custom profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="entityId">The unique identifier of the entity.</param>
        /// <returns></returns>
        void DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDelete(string accept, string scopeId, string entityTypeName, string entityId);

        /// <summary>
        /// Deletes a existing custom profile - {DeleteCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Deletes an existing custom profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="entityId">The unique identifier of the entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDeleteWithHttpInfo(string accept, string scopeId, string entityTypeName, string entityId);
        /// <summary>
        /// Removes the association between two entities - {DisassociateEntityRequest}
        /// </summary>
        /// <remarks>
        /// Removes the association between two entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the custom type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <returns></returns>
        void DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId);

        /// <summary>
        /// Removes the association between two entities - {DisassociateEntityRequest}
        /// </summary>
        /// <remarks>
        /// Removes the association between two entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the custom type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDeleteWithHttpInfo(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId);
        /// <summary>
        /// Search for custom profiles based on search terms - {FindProfileInstancesRequest}
        /// </summary>
        /// <remarks>
        /// Search for custom profiles based on search terms.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="entityTypeName"> Gets or sets the entity type name of the profile instance.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindProfileInstancesQueryResult</returns>
        FindProfileInstancesQueryResult FindProfileInstancesRequestScopeIdEntityTypeNamefindPost(string accept, string scopeId, string entityTypeName, FindProfileInstancesRequest body = default(FindProfileInstancesRequest));

        /// <summary>
        /// Search for custom profiles based on search terms - {FindProfileInstancesRequest}
        /// </summary>
        /// <remarks>
        /// Search for custom profiles based on search terms.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="entityTypeName"> Gets or sets the entity type name of the profile instance.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindProfileInstancesQueryResult</returns>
        ApiResponse<FindProfileInstancesQueryResult> FindProfileInstancesRequestScopeIdEntityTypeNamefindPostWithHttpInfo(string accept, string scopeId, string entityTypeName, FindProfileInstancesRequest body = default(FindProfileInstancesRequest));
        /// <summary>
        /// Retrieve the associated scopes - {GetAssociatedScopesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the associated scopes  for a given profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the scope.</param>
        /// <param name="entityTypeName">The EntityTypeName of the profile instance to which the scopes are linked.</param>
        /// <param name="entityId">The identifier (business key) of the instance of entity to which the scopes are associated.</param>
        /// <returns>List&lt;ScopeAssociation&gt;</returns>
        List<ScopeAssociation> GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGet(string accept, string scopeId, string entityTypeName, string entityId);

        /// <summary>
        /// Retrieve the associated scopes - {GetAssociatedScopesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the associated scopes  for a given profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the scope.</param>
        /// <param name="entityTypeName">The EntityTypeName of the profile instance to which the scopes are linked.</param>
        /// <param name="entityId">The identifier (business key) of the instance of entity to which the scopes are associated.</param>
        /// <returns>ApiResponse of List&lt;ScopeAssociation&gt;</returns>
        ApiResponse<List<ScopeAssociation>> GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGetWithHttpInfo(string accept, string scopeId, string entityTypeName, string entityId);
        /// <summary>
        /// Retrieve custom profile instance by type and name - {GetProfileInstanceByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve custom profile instance by type and name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="name">Unique identifier name for the entity.</param>
        /// <returns>CustomProfile</returns>
        CustomProfile GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGet(string accept, string scopeId, string entityTypeName, string name);

        /// <summary>
        /// Retrieve custom profile instance by type and name - {GetProfileInstanceByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve custom profile instance by type and name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="name">Unique identifier name for the entity.</param>
        /// <returns>ApiResponse of CustomProfile</returns>
        ApiResponse<CustomProfile> GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGetWithHttpInfo(string accept, string scopeId, string entityTypeName, string name);
        /// <summary>
        /// Retrieve a custom profile instance by type and id - {GetProfileInstanceRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a custom profile instance by type and id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="entityId">Unique identifier for the entity.</param>
        /// <returns>CustomProfile</returns>
        CustomProfile GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGet(string accept, string scopeId, string entityTypeName, string entityId);

        /// <summary>
        /// Retrieve a custom profile instance by type and id - {GetProfileInstanceRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a custom profile instance by type and id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="entityId">Unique identifier for the entity.</param>
        /// <returns>ApiResponse of CustomProfile</returns>
        ApiResponse<CustomProfile> GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGetWithHttpInfo(string accept, string scopeId, string entityTypeName, string entityId);
        /// <summary>
        /// Retrieve custom profile instances by type and id - {GetProfileInstancesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve custom profile instances by type and id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by these entities.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;CustomProfile&gt;</returns>
        List<CustomProfile> GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPost(string accept, string scopeId, string entityTypeName, GetProfileInstancesRequest body = default(GetProfileInstancesRequest));

        /// <summary>
        /// Retrieve custom profile instances by type and id - {GetProfileInstancesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve custom profile instances by type and id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by these entities.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomProfile&gt;</returns>
        ApiResponse<List<CustomProfile>> GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPostWithHttpInfo(string accept, string scopeId, string entityTypeName, GetProfileInstancesRequest body = default(GetProfileInstancesRequest));
        /// <summary>
        /// Remove the association between a scope and a custom profile - {RemoveScopeAssociationRequest}
        /// </summary>
        /// <remarks>
        /// Remove the association between a scope and a custom profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Id (business key) of the Scope to which the associations must be deleted.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <returns>List&lt;ScopeAssociation&gt;</returns>
        List<ScopeAssociation> RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDelete(string accept, string scopeId, string entityTypeName, string entityId);

        /// <summary>
        /// Remove the association between a scope and a custom profile - {RemoveScopeAssociationRequest}
        /// </summary>
        /// <remarks>
        /// Remove the association between a scope and a custom profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Id (business key) of the Scope to which the associations must be deleted.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <returns>ApiResponse of List&lt;ScopeAssociation&gt;</returns>
        ApiResponse<List<ScopeAssociation>> RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDeleteWithHttpInfo(string accept, string scopeId, string entityTypeName, string entityId);
        /// <summary>
        /// Updates a custom profile - {UpdateCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Updates a custom profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">The entity type name.</param>
        /// <param name="entityId">The unique identifier for the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CustomProfile</returns>
        CustomProfile UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreate(string accept, string scopeId, string entityTypeName, string entityId, UpdateCustomProfileRequest body = default(UpdateCustomProfileRequest));

        /// <summary>
        /// Updates a custom profile - {UpdateCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Updates a custom profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">The entity type name.</param>
        /// <param name="entityId">The unique identifier for the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CustomProfile</returns>
        ApiResponse<CustomProfile> UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreateWithHttpInfo(string accept, string scopeId, string entityTypeName, string entityId, UpdateCustomProfileRequest body = default(UpdateCustomProfileRequest));
        /// <summary>
        /// Adds/Updates the association between scopes and an entity - {UpdateScopeAssociationsRequest}
        /// </summary>
        /// <remarks>
        /// Adds/Updates the association between scopes and an entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the profile instance belongs.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;ScopeAssociation&gt;</returns>
        List<ScopeAssociation> UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreate(string accept, string scopeId, string entityTypeName, string entityId, UpdateScopeAssociationsRequest body = default(UpdateScopeAssociationsRequest));

        /// <summary>
        /// Adds/Updates the association between scopes and an entity - {UpdateScopeAssociationsRequest}
        /// </summary>
        /// <remarks>
        /// Adds/Updates the association between scopes and an entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the profile instance belongs.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ScopeAssociation&gt;</returns>
        ApiResponse<List<ScopeAssociation>> UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreateWithHttpInfo(string accept, string scopeId, string entityTypeName, string entityId, UpdateScopeAssociationsRequest body = default(UpdateScopeAssociationsRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomProfilesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add an address to a custom profile&#39;s addresses - {AddAddressToCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Add an address to a custom profiles&#39;s addresses.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityId">The unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        System.Threading.Tasks.Task<Address> AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPostAsync(string accept, string scopeId, string entityId, AddAddressToCustomProfileRequest body = default(AddAddressToCustomProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add an address to a custom profile&#39;s addresses - {AddAddressToCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Add an address to a custom profiles&#39;s addresses.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityId">The unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<Address>> AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPostWithHttpInfoAsync(string accept, string scopeId, string entityId, AddAddressToCustomProfileRequest body = default(AddAddressToCustomProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate two entities together - {AssociateEntityRequest}
        /// </summary>
        /// <remarks>
        /// Associate two entities together
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the entity type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPostAsync(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate two entities together - {AssociateEntityRequest}
        /// </summary>
        /// <remarks>
        /// Associate two entities together
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the entity type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPostWithHttpInfoAsync(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new custom profile - {CreateCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Create a new custom profile
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomProfile</returns>
        System.Threading.Tasks.Task<CustomProfile> CreateCustomProfileRequestScopeIdEntityTypeNamePostAsync(string accept, string scopeId, string entityTypeName, CreateCustomProfileRequest body = default(CreateCustomProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new custom profile - {CreateCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Create a new custom profile
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomProfile>> CreateCustomProfileRequestScopeIdEntityTypeNamePostWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, CreateCustomProfileRequest body = default(CreateCustomProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a existing custom profile - {DeleteCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Deletes an existing custom profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="entityId">The unique identifier of the entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDeleteAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a existing custom profile - {DeleteCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Deletes an existing custom profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="entityId">The unique identifier of the entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDeleteWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes the association between two entities - {DisassociateEntityRequest}
        /// </summary>
        /// <remarks>
        /// Removes the association between two entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the custom type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDeleteAsync(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes the association between two entities - {DisassociateEntityRequest}
        /// </summary>
        /// <remarks>
        /// Removes the association between two entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the custom type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDeleteWithHttpInfoAsync(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for custom profiles based on search terms - {FindProfileInstancesRequest}
        /// </summary>
        /// <remarks>
        /// Search for custom profiles based on search terms.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="entityTypeName"> Gets or sets the entity type name of the profile instance.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindProfileInstancesQueryResult</returns>
        System.Threading.Tasks.Task<FindProfileInstancesQueryResult> FindProfileInstancesRequestScopeIdEntityTypeNamefindPostAsync(string accept, string scopeId, string entityTypeName, FindProfileInstancesRequest body = default(FindProfileInstancesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for custom profiles based on search terms - {FindProfileInstancesRequest}
        /// </summary>
        /// <remarks>
        /// Search for custom profiles based on search terms.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="entityTypeName"> Gets or sets the entity type name of the profile instance.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindProfileInstancesQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindProfileInstancesQueryResult>> FindProfileInstancesRequestScopeIdEntityTypeNamefindPostWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, FindProfileInstancesRequest body = default(FindProfileInstancesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the associated scopes - {GetAssociatedScopesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the associated scopes  for a given profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the scope.</param>
        /// <param name="entityTypeName">The EntityTypeName of the profile instance to which the scopes are linked.</param>
        /// <param name="entityId">The identifier (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScopeAssociation&gt;</returns>
        System.Threading.Tasks.Task<List<ScopeAssociation>> GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGetAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the associated scopes - {GetAssociatedScopesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the associated scopes  for a given profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the scope.</param>
        /// <param name="entityTypeName">The EntityTypeName of the profile instance to which the scopes are linked.</param>
        /// <param name="entityId">The identifier (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScopeAssociation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ScopeAssociation>>> GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGetWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve custom profile instance by type and name - {GetProfileInstanceByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve custom profile instance by type and name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="name">Unique identifier name for the entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomProfile</returns>
        System.Threading.Tasks.Task<CustomProfile> GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGetAsync(string accept, string scopeId, string entityTypeName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve custom profile instance by type and name - {GetProfileInstanceByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve custom profile instance by type and name.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="name">Unique identifier name for the entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomProfile>> GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGetWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a custom profile instance by type and id - {GetProfileInstanceRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a custom profile instance by type and id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="entityId">Unique identifier for the entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomProfile</returns>
        System.Threading.Tasks.Task<CustomProfile> GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGetAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a custom profile instance by type and id - {GetProfileInstanceRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a custom profile instance by type and id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="entityId">Unique identifier for the entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomProfile>> GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGetWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve custom profile instances by type and id - {GetProfileInstancesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve custom profile instances by type and id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by these entities.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomProfile&gt;</returns>
        System.Threading.Tasks.Task<List<CustomProfile>> GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPostAsync(string accept, string scopeId, string entityTypeName, GetProfileInstancesRequest body = default(GetProfileInstancesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve custom profile instances by type and id - {GetProfileInstancesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve custom profile instances by type and id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by these entities.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomProfile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomProfile>>> GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPostWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, GetProfileInstancesRequest body = default(GetProfileInstancesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove the association between a scope and a custom profile - {RemoveScopeAssociationRequest}
        /// </summary>
        /// <remarks>
        /// Remove the association between a scope and a custom profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Id (business key) of the Scope to which the associations must be deleted.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScopeAssociation&gt;</returns>
        System.Threading.Tasks.Task<List<ScopeAssociation>> RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDeleteAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove the association between a scope and a custom profile - {RemoveScopeAssociationRequest}
        /// </summary>
        /// <remarks>
        /// Remove the association between a scope and a custom profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Id (business key) of the Scope to which the associations must be deleted.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScopeAssociation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ScopeAssociation>>> RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDeleteWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a custom profile - {UpdateCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Updates a custom profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">The entity type name.</param>
        /// <param name="entityId">The unique identifier for the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomProfile</returns>
        System.Threading.Tasks.Task<CustomProfile> UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreateAsync(string accept, string scopeId, string entityTypeName, string entityId, UpdateCustomProfileRequest body = default(UpdateCustomProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a custom profile - {UpdateCustomProfileRequest}
        /// </summary>
        /// <remarks>
        /// Updates a custom profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">The entity type name.</param>
        /// <param name="entityId">The unique identifier for the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomProfile>> UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreateWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string entityId, UpdateCustomProfileRequest body = default(UpdateCustomProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds/Updates the association between scopes and an entity - {UpdateScopeAssociationsRequest}
        /// </summary>
        /// <remarks>
        /// Adds/Updates the association between scopes and an entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the profile instance belongs.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScopeAssociation&gt;</returns>
        System.Threading.Tasks.Task<List<ScopeAssociation>> UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreateAsync(string accept, string scopeId, string entityTypeName, string entityId, UpdateScopeAssociationsRequest body = default(UpdateScopeAssociationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds/Updates the association between scopes and an entity - {UpdateScopeAssociationsRequest}
        /// </summary>
        /// <remarks>
        /// Adds/Updates the association between scopes and an entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the profile instance belongs.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScopeAssociation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ScopeAssociation>>> UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreateWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string entityId, UpdateScopeAssociationsRequest body = default(UpdateScopeAssociationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomProfilesApi : ICustomProfilesApiSync, ICustomProfilesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomProfilesApi : ICustomProfilesApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomProfilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomProfilesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomProfilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomProfilesApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomProfilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomProfilesApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomProfilesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomProfilesApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add an address to a custom profile&#39;s addresses - {AddAddressToCustomProfileRequest} Add an address to a custom profiles&#39;s addresses.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityId">The unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Address</returns>
        public Address AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPost(string accept, string scopeId, string entityId, AddAddressToCustomProfileRequest body = default(AddAddressToCustomProfileRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPostWithHttpInfo(accept, scopeId, entityId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an address to a custom profile&#39;s addresses - {AddAddressToCustomProfileRequest} Add an address to a custom profiles&#39;s addresses.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityId">The unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Address</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPostWithHttpInfo(string accept, string scopeId, string entityId, AddAddressToCustomProfileRequest body = default(AddAddressToCustomProfileRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPost");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Address>("/customProfiles/{ScopeId}/{EntityId}/addresses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an address to a custom profile&#39;s addresses - {AddAddressToCustomProfileRequest} Add an address to a custom profiles&#39;s addresses.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityId">The unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        public async System.Threading.Tasks.Task<Address> AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPostAsync(string accept, string scopeId, string entityId, AddAddressToCustomProfileRequest body = default(AddAddressToCustomProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = await AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPostWithHttpInfoAsync(accept, scopeId, entityId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an address to a custom profile&#39;s addresses - {AddAddressToCustomProfileRequest} Add an address to a custom profiles&#39;s addresses.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityId">The unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address>> AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPostWithHttpInfoAsync(string accept, string scopeId, string entityId, AddAddressToCustomProfileRequest body = default(AddAddressToCustomProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPost");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Address>("/customProfiles/{ScopeId}/{EntityId}/addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAddressToCustomProfileRequestScopeIdEntityIdaddressesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate two entities together - {AssociateEntityRequest} Associate two entities together
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the entity type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId, Object body = default(Object))
        {
            AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPostWithHttpInfo(accept, scopeId, parentEntityTypeName, parentId, attributeName, entityId, body);
        }

        /// <summary>
        /// Associate two entities together - {AssociateEntityRequest} Associate two entities together
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the entity type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPostWithHttpInfo(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost");

            // verify the required parameter 'parentEntityTypeName' is set
            if (parentEntityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'parentEntityTypeName' when calling CustomProfilesApi->AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost");

            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'parentId' when calling CustomProfilesApi->AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling CustomProfilesApi->AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ParentEntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentEntityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ParentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/customProfiles/{ScopeId}/{ParentEntityTypeName}/{ParentId}/{AttributeName}/{EntityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate two entities together - {AssociateEntityRequest} Associate two entities together
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the entity type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPostAsync(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPostWithHttpInfoAsync(accept, scopeId, parentEntityTypeName, parentId, attributeName, entityId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Associate two entities together - {AssociateEntityRequest} Associate two entities together
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of scope in which the parent entity belongs.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the entity type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPostWithHttpInfoAsync(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost");

            // verify the required parameter 'parentEntityTypeName' is set
            if (parentEntityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'parentEntityTypeName' when calling CustomProfilesApi->AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost");

            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'parentId' when calling CustomProfilesApi->AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling CustomProfilesApi->AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ParentEntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentEntityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ParentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/customProfiles/{ScopeId}/{ParentEntityTypeName}/{ParentId}/{AttributeName}/{EntityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new custom profile - {CreateCustomProfileRequest} Create a new custom profile
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CustomProfile</returns>
        public CustomProfile CreateCustomProfileRequestScopeIdEntityTypeNamePost(string accept, string scopeId, string entityTypeName, CreateCustomProfileRequest body = default(CreateCustomProfileRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile> localVarResponse = CreateCustomProfileRequestScopeIdEntityTypeNamePostWithHttpInfo(accept, scopeId, entityTypeName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom profile - {CreateCustomProfileRequest} Create a new custom profile
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CustomProfile</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile> CreateCustomProfileRequestScopeIdEntityTypeNamePostWithHttpInfo(string accept, string scopeId, string entityTypeName, CreateCustomProfileRequest body = default(CreateCustomProfileRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->CreateCustomProfileRequestScopeIdEntityTypeNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->CreateCustomProfileRequestScopeIdEntityTypeNamePost");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->CreateCustomProfileRequestScopeIdEntityTypeNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomProfile>("/customProfiles/{ScopeId}/{EntityTypeName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomProfileRequestScopeIdEntityTypeNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new custom profile - {CreateCustomProfileRequest} Create a new custom profile
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomProfile</returns>
        public async System.Threading.Tasks.Task<CustomProfile> CreateCustomProfileRequestScopeIdEntityTypeNamePostAsync(string accept, string scopeId, string entityTypeName, CreateCustomProfileRequest body = default(CreateCustomProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile> localVarResponse = await CreateCustomProfileRequestScopeIdEntityTypeNamePostWithHttpInfoAsync(accept, scopeId, entityTypeName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom profile - {CreateCustomProfileRequest} Create a new custom profile
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomProfile)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile>> CreateCustomProfileRequestScopeIdEntityTypeNamePostWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, CreateCustomProfileRequest body = default(CreateCustomProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->CreateCustomProfileRequestScopeIdEntityTypeNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->CreateCustomProfileRequestScopeIdEntityTypeNamePost");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->CreateCustomProfileRequestScopeIdEntityTypeNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomProfile>("/customProfiles/{ScopeId}/{EntityTypeName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomProfileRequestScopeIdEntityTypeNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a existing custom profile - {DeleteCustomProfileRequest} Deletes an existing custom profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="entityId">The unique identifier of the entity.</param>
        /// <returns></returns>
        public void DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDelete(string accept, string scopeId, string entityTypeName, string entityId)
        {
            DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDeleteWithHttpInfo(accept, scopeId, entityTypeName, entityId);
        }

        /// <summary>
        /// Deletes a existing custom profile - {DeleteCustomProfileRequest} Deletes an existing custom profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="entityId">The unique identifier of the entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDeleteWithHttpInfo(string accept, string scopeId, string entityTypeName, string entityId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDelete");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDelete");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a existing custom profile - {DeleteCustomProfileRequest} Deletes an existing custom profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="entityId">The unique identifier of the entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDeleteAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDeleteWithHttpInfoAsync(accept, scopeId, entityTypeName, entityId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a existing custom profile - {DeleteCustomProfileRequest} Deletes an existing custom profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Entity type name.</param>
        /// <param name="entityId">The unique identifier of the entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDeleteWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDelete");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDelete");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomProfileRequestScopeIdEntityTypeNameEntityIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the association between two entities - {DisassociateEntityRequest} Removes the association between two entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the custom type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <returns></returns>
        public void DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId)
        {
            DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDeleteWithHttpInfo(accept, scopeId, parentEntityTypeName, parentId, attributeName, entityId);
        }

        /// <summary>
        /// Removes the association between two entities - {DisassociateEntityRequest} Removes the association between two entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the custom type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDeleteWithHttpInfo(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete");

            // verify the required parameter 'parentEntityTypeName' is set
            if (parentEntityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'parentEntityTypeName' when calling CustomProfilesApi->DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete");

            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'parentId' when calling CustomProfilesApi->DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling CustomProfilesApi->DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ParentEntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentEntityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ParentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/customProfiles/{ScopeId}/{ParentEntityTypeName}/{ParentId}/{AttributeName}/{EntityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the association between two entities - {DisassociateEntityRequest} Removes the association between two entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the custom type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDeleteAsync(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDeleteWithHttpInfoAsync(accept, scopeId, parentEntityTypeName, parentId, attributeName, entityId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes the association between two entities - {DisassociateEntityRequest} Removes the association between two entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of scope in which the parent entity belong.</param>
        /// <param name="parentEntityTypeName">Gets the name (business key) of the custom type of the profile instance to which the entity will be associated.</param>
        /// <param name="parentId">The unique identifier for the parent entity.</param>
        /// <param name="attributeName">The name of the attribute in the parent definition under which the association is kept.</param>
        /// <param name="entityId">The unique identifier for the associated entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDeleteWithHttpInfoAsync(string accept, string scopeId, string parentEntityTypeName, string parentId, string attributeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete");

            // verify the required parameter 'parentEntityTypeName' is set
            if (parentEntityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'parentEntityTypeName' when calling CustomProfilesApi->DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete");

            // verify the required parameter 'parentId' is set
            if (parentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'parentId' when calling CustomProfilesApi->DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete");

            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'attributeName' when calling CustomProfilesApi->DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ParentEntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentEntityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ParentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttributeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(attributeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/customProfiles/{ScopeId}/{ParentEntityTypeName}/{ParentId}/{AttributeName}/{EntityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisassociateEntityRequestScopeIdParentEntityTypeNameParentIdAttributeNameEntityIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for custom profiles based on search terms - {FindProfileInstancesRequest} Search for custom profiles based on search terms.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="entityTypeName"> Gets or sets the entity type name of the profile instance.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindProfileInstancesQueryResult</returns>
        public FindProfileInstancesQueryResult FindProfileInstancesRequestScopeIdEntityTypeNamefindPost(string accept, string scopeId, string entityTypeName, FindProfileInstancesRequest body = default(FindProfileInstancesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindProfileInstancesQueryResult> localVarResponse = FindProfileInstancesRequestScopeIdEntityTypeNamefindPostWithHttpInfo(accept, scopeId, entityTypeName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for custom profiles based on search terms - {FindProfileInstancesRequest} Search for custom profiles based on search terms.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="entityTypeName"> Gets or sets the entity type name of the profile instance.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindProfileInstancesQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindProfileInstancesQueryResult> FindProfileInstancesRequestScopeIdEntityTypeNamefindPostWithHttpInfo(string accept, string scopeId, string entityTypeName, FindProfileInstancesRequest body = default(FindProfileInstancesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->FindProfileInstancesRequestScopeIdEntityTypeNamefindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->FindProfileInstancesRequestScopeIdEntityTypeNamefindPost");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->FindProfileInstancesRequestScopeIdEntityTypeNamefindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindProfileInstancesQueryResult>("/customProfiles/{ScopeId}/{EntityTypeName}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindProfileInstancesRequestScopeIdEntityTypeNamefindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for custom profiles based on search terms - {FindProfileInstancesRequest} Search for custom profiles based on search terms.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="entityTypeName"> Gets or sets the entity type name of the profile instance.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindProfileInstancesQueryResult</returns>
        public async System.Threading.Tasks.Task<FindProfileInstancesQueryResult> FindProfileInstancesRequestScopeIdEntityTypeNamefindPostAsync(string accept, string scopeId, string entityTypeName, FindProfileInstancesRequest body = default(FindProfileInstancesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindProfileInstancesQueryResult> localVarResponse = await FindProfileInstancesRequestScopeIdEntityTypeNamefindPostWithHttpInfoAsync(accept, scopeId, entityTypeName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for custom profiles based on search terms - {FindProfileInstancesRequest} Search for custom profiles based on search terms.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="entityTypeName"> Gets or sets the entity type name of the profile instance.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindProfileInstancesQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindProfileInstancesQueryResult>> FindProfileInstancesRequestScopeIdEntityTypeNamefindPostWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, FindProfileInstancesRequest body = default(FindProfileInstancesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->FindProfileInstancesRequestScopeIdEntityTypeNamefindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->FindProfileInstancesRequestScopeIdEntityTypeNamefindPost");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->FindProfileInstancesRequestScopeIdEntityTypeNamefindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FindProfileInstancesQueryResult>("/customProfiles/{ScopeId}/{EntityTypeName}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindProfileInstancesRequestScopeIdEntityTypeNamefindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the associated scopes - {GetAssociatedScopesRequest} Retrieve the associated scopes  for a given profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the scope.</param>
        /// <param name="entityTypeName">The EntityTypeName of the profile instance to which the scopes are linked.</param>
        /// <param name="entityId">The identifier (business key) of the instance of entity to which the scopes are associated.</param>
        /// <returns>List&lt;ScopeAssociation&gt;</returns>
        public List<ScopeAssociation> GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGet(string accept, string scopeId, string entityTypeName, string entityId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScopeAssociation>> localVarResponse = GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGetWithHttpInfo(accept, scopeId, entityTypeName, entityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the associated scopes - {GetAssociatedScopesRequest} Retrieve the associated scopes  for a given profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the scope.</param>
        /// <param name="entityTypeName">The EntityTypeName of the profile instance to which the scopes are linked.</param>
        /// <param name="entityId">The identifier (business key) of the instance of entity to which the scopes are associated.</param>
        /// <returns>ApiResponse of List&lt;ScopeAssociation&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScopeAssociation>> GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGetWithHttpInfo(string accept, string scopeId, string entityTypeName, string entityId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGet");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGet");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ScopeAssociation>>("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}/scopes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the associated scopes - {GetAssociatedScopesRequest} Retrieve the associated scopes  for a given profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the scope.</param>
        /// <param name="entityTypeName">The EntityTypeName of the profile instance to which the scopes are linked.</param>
        /// <param name="entityId">The identifier (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScopeAssociation&gt;</returns>
        public async System.Threading.Tasks.Task<List<ScopeAssociation>> GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGetAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScopeAssociation>> localVarResponse = await GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGetWithHttpInfoAsync(accept, scopeId, entityTypeName, entityId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the associated scopes - {GetAssociatedScopesRequest} Retrieve the associated scopes  for a given profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The identifier of the scope.</param>
        /// <param name="entityTypeName">The EntityTypeName of the profile instance to which the scopes are linked.</param>
        /// <param name="entityId">The identifier (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScopeAssociation&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScopeAssociation>>> GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGetWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGet");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGet");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ScopeAssociation>>("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}/scopes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssociatedScopesRequestScopeIdEntityTypeNameEntityIdscopesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve custom profile instance by type and name - {GetProfileInstanceByNameRequest} Retrieve custom profile instance by type and name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="name">Unique identifier name for the entity.</param>
        /// <returns>CustomProfile</returns>
        public CustomProfile GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGet(string accept, string scopeId, string entityTypeName, string name)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile> localVarResponse = GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGetWithHttpInfo(accept, scopeId, entityTypeName, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve custom profile instance by type and name - {GetProfileInstanceByNameRequest} Retrieve custom profile instance by type and name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="name">Unique identifier name for the entity.</param>
        /// <returns>ApiResponse of CustomProfile</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile> GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGetWithHttpInfo(string accept, string scopeId, string entityTypeName, string name)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGet");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling CustomProfilesApi->GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomProfile>("/customProfiles/{ScopeId}/{EntityTypeName}/byName/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve custom profile instance by type and name - {GetProfileInstanceByNameRequest} Retrieve custom profile instance by type and name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="name">Unique identifier name for the entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomProfile</returns>
        public async System.Threading.Tasks.Task<CustomProfile> GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGetAsync(string accept, string scopeId, string entityTypeName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile> localVarResponse = await GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGetWithHttpInfoAsync(accept, scopeId, entityTypeName, name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve custom profile instance by type and name - {GetProfileInstanceByNameRequest} Retrieve custom profile instance by type and name.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="name">Unique identifier name for the entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomProfile)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile>> GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGetWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGet");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling CustomProfilesApi->GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomProfile>("/customProfiles/{ScopeId}/{EntityTypeName}/byName/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileInstanceByNameRequestScopeIdEntityTypeNamebyNameNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a custom profile instance by type and id - {GetProfileInstanceRequest} Retrieve a custom profile instance by type and id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="entityId">Unique identifier for the entity.</param>
        /// <returns>CustomProfile</returns>
        public CustomProfile GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGet(string accept, string scopeId, string entityTypeName, string entityId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile> localVarResponse = GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGetWithHttpInfo(accept, scopeId, entityTypeName, entityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a custom profile instance by type and id - {GetProfileInstanceRequest} Retrieve a custom profile instance by type and id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="entityId">Unique identifier for the entity.</param>
        /// <returns>ApiResponse of CustomProfile</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile> GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGetWithHttpInfo(string accept, string scopeId, string entityTypeName, string entityId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGet");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGet");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomProfile>("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a custom profile instance by type and id - {GetProfileInstanceRequest} Retrieve a custom profile instance by type and id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="entityId">Unique identifier for the entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomProfile</returns>
        public async System.Threading.Tasks.Task<CustomProfile> GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGetAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile> localVarResponse = await GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGetWithHttpInfoAsync(accept, scopeId, entityTypeName, entityId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a custom profile instance by type and id - {GetProfileInstanceRequest} Retrieve a custom profile instance by type and id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by this entity.</param>
        /// <param name="entityId">Unique identifier for the entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomProfile)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile>> GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGetWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGet");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGet");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomProfile>("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileInstanceRequestScopeIdEntityTypeNameEntityIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve custom profile instances by type and id - {GetProfileInstancesRequest} Retrieve custom profile instances by type and id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by these entities.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;CustomProfile&gt;</returns>
        public List<CustomProfile> GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPost(string accept, string scopeId, string entityTypeName, GetProfileInstancesRequest body = default(GetProfileInstancesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<CustomProfile>> localVarResponse = GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPostWithHttpInfo(accept, scopeId, entityTypeName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve custom profile instances by type and id - {GetProfileInstancesRequest} Retrieve custom profile instances by type and id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by these entities.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomProfile&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<CustomProfile>> GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPostWithHttpInfo(string accept, string scopeId, string entityTypeName, GetProfileInstancesRequest body = default(GetProfileInstancesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPost");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CustomProfile>>("/customProfiles/{ScopeId}/{EntityTypeName}/byIds/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve custom profile instances by type and id - {GetProfileInstancesRequest} Retrieve custom profile instances by type and id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by these entities.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomProfile&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomProfile>> GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPostAsync(string accept, string scopeId, string entityTypeName, GetProfileInstancesRequest body = default(GetProfileInstancesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<CustomProfile>> localVarResponse = await GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPostWithHttpInfoAsync(accept, scopeId, entityTypeName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve custom profile instances by type and id - {GetProfileInstancesRequest} Retrieve custom profile instances by type and id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">Name of the custom type of the profile instance represented by these entities.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomProfile&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<CustomProfile>>> GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPostWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, GetProfileInstancesRequest body = default(GetProfileInstancesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPost");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CustomProfile>>("/customProfiles/{ScopeId}/{EntityTypeName}/byIds/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileInstancesRequestScopeIdEntityTypeNamebyIdsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the association between a scope and a custom profile - {RemoveScopeAssociationRequest} Remove the association between a scope and a custom profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Id (business key) of the Scope to which the associations must be deleted.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <returns>List&lt;ScopeAssociation&gt;</returns>
        public List<ScopeAssociation> RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDelete(string accept, string scopeId, string entityTypeName, string entityId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScopeAssociation>> localVarResponse = RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDeleteWithHttpInfo(accept, scopeId, entityTypeName, entityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove the association between a scope and a custom profile - {RemoveScopeAssociationRequest} Remove the association between a scope and a custom profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Id (business key) of the Scope to which the associations must be deleted.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <returns>ApiResponse of List&lt;ScopeAssociation&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScopeAssociation>> RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDeleteWithHttpInfo(string accept, string scopeId, string entityTypeName, string entityId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDelete");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDelete");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<ScopeAssociation>>("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}/scopes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the association between a scope and a custom profile - {RemoveScopeAssociationRequest} Remove the association between a scope and a custom profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Id (business key) of the Scope to which the associations must be deleted.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScopeAssociation&gt;</returns>
        public async System.Threading.Tasks.Task<List<ScopeAssociation>> RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDeleteAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScopeAssociation>> localVarResponse = await RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDeleteWithHttpInfoAsync(accept, scopeId, entityTypeName, entityId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove the association between a scope and a custom profile - {RemoveScopeAssociationRequest} Remove the association between a scope and a custom profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The Id (business key) of the Scope to which the associations must be deleted.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScopeAssociation&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScopeAssociation>>> RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDeleteWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDelete");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDelete");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<ScopeAssociation>>("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}/scopes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveScopeAssociationRequestScopeIdEntityTypeNameEntityIdscopesDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a custom profile - {UpdateCustomProfileRequest} Updates a custom profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">The entity type name.</param>
        /// <param name="entityId">The unique identifier for the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CustomProfile</returns>
        public CustomProfile UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreate(string accept, string scopeId, string entityTypeName, string entityId, UpdateCustomProfileRequest body = default(UpdateCustomProfileRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile> localVarResponse = UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreateWithHttpInfo(accept, scopeId, entityTypeName, entityId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a custom profile - {UpdateCustomProfileRequest} Updates a custom profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">The entity type name.</param>
        /// <param name="entityId">The unique identifier for the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CustomProfile</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile> UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreateWithHttpInfo(string accept, string scopeId, string entityTypeName, string entityId, UpdateCustomProfileRequest body = default(UpdateCustomProfileRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreate");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreate");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<CustomProfile>("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a custom profile - {UpdateCustomProfileRequest} Updates a custom profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">The entity type name.</param>
        /// <param name="entityId">The unique identifier for the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomProfile</returns>
        public async System.Threading.Tasks.Task<CustomProfile> UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreateAsync(string accept, string scopeId, string entityTypeName, string entityId, UpdateCustomProfileRequest body = default(UpdateCustomProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile> localVarResponse = await UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreateWithHttpInfoAsync(accept, scopeId, entityTypeName, entityId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a custom profile - {UpdateCustomProfileRequest} Updates a custom profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityTypeName">The entity type name.</param>
        /// <param name="entityId">The unique identifier for the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomProfile)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomProfile>> UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreateWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string entityId, UpdateCustomProfileRequest body = default(UpdateCustomProfileRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreate");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreate");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<CustomProfile>("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomProfileRequestScopeIdEntityTypeNameEntityIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds/Updates the association between scopes and an entity - {UpdateScopeAssociationsRequest} Adds/Updates the association between scopes and an entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the profile instance belongs.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;ScopeAssociation&gt;</returns>
        public List<ScopeAssociation> UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreate(string accept, string scopeId, string entityTypeName, string entityId, UpdateScopeAssociationsRequest body = default(UpdateScopeAssociationsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScopeAssociation>> localVarResponse = UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreateWithHttpInfo(accept, scopeId, entityTypeName, entityId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds/Updates the association between scopes and an entity - {UpdateScopeAssociationsRequest} Adds/Updates the association between scopes and an entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the profile instance belongs.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ScopeAssociation&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScopeAssociation>> UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreateWithHttpInfo(string accept, string scopeId, string entityTypeName, string entityId, UpdateScopeAssociationsRequest body = default(UpdateScopeAssociationsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreate");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreate");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<List<ScopeAssociation>>("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}/scopes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds/Updates the association between scopes and an entity - {UpdateScopeAssociationsRequest} Adds/Updates the association between scopes and an entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the profile instance belongs.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScopeAssociation&gt;</returns>
        public async System.Threading.Tasks.Task<List<ScopeAssociation>> UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreateAsync(string accept, string scopeId, string entityTypeName, string entityId, UpdateScopeAssociationsRequest body = default(UpdateScopeAssociationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScopeAssociation>> localVarResponse = await UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreateWithHttpInfoAsync(accept, scopeId, entityTypeName, entityId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds/Updates the association between scopes and an entity - {UpdateScopeAssociationsRequest} Adds/Updates the association between scopes and an entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the profile instance belongs.</param>
        /// <param name="entityTypeName">The name (business key) of the entity type of the instance to which the scopes are linked.</param>
        /// <param name="entityId">The Id (business key) of the instance of entity to which the scopes are associated.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScopeAssociation&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScopeAssociation>>> UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreateWithHttpInfoAsync(string accept, string scopeId, string entityTypeName, string entityId, UpdateScopeAssociationsRequest body = default(UpdateScopeAssociationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CustomProfilesApi->UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CustomProfilesApi->UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreate");

            // verify the required parameter 'entityTypeName' is set
            if (entityTypeName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityTypeName' when calling CustomProfilesApi->UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreate");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling CustomProfilesApi->UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityTypeName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityTypeName)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<List<ScopeAssociation>>("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}/scopes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateScopeAssociationsRequestScopeIdEntityTypeNameEntityIdscopesCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
