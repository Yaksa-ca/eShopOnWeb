/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICdmvApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a new payment method for a customer - {AddMonerisPaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Adds a new payment method for a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AddMonerisPaymentMethodResponse</returns>
        AddMonerisPaymentMethodResponse AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPost(string accept, string scopeId, string customerId, AddMonerisPaymentMethodRequest body = default(AddMonerisPaymentMethodRequest));

        /// <summary>
        /// Adds a new payment method for a customer - {AddMonerisPaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Adds a new payment method for a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddMonerisPaymentMethodResponse</returns>
        ApiResponse<AddMonerisPaymentMethodResponse> AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPostWithHttpInfo(string accept, string scopeId, string customerId, AddMonerisPaymentMethodRequest body = default(AddMonerisPaymentMethodRequest));
        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AddOrUpdateProductAuthorizationsResponse</returns>
        AddOrUpdateProductAuthorizationsResponse AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePost(string accept, string scopeId, AddOrUpdateProductAuthorizationsByUsernameRequest body = default(AddOrUpdateProductAuthorizationsByUsernameRequest));

        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddOrUpdateProductAuthorizationsResponse</returns>
        ApiResponse<AddOrUpdateProductAuthorizationsResponse> AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePostWithHttpInfo(string accept, string scopeId, AddOrUpdateProductAuthorizationsByUsernameRequest body = default(AddOrUpdateProductAuthorizationsByUsernameRequest));
        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AddOrUpdateProductAuthorizationsResponse</returns>
        AddOrUpdateProductAuthorizationsResponse AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPost(string accept, string scopeId, string customerId, AddOrUpdateProductAuthorizationsRequest body = default(AddOrUpdateProductAuthorizationsRequest));

        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddOrUpdateProductAuthorizationsResponse</returns>
        ApiResponse<AddOrUpdateProductAuthorizationsResponse> AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPostWithHttpInfo(string accept, string scopeId, string customerId, AddOrUpdateProductAuthorizationsRequest body = default(AddOrUpdateProductAuthorizationsRequest));
        /// <summary>
        /// Creates a customer - {CDMVCreateCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Creates a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        Customer CDMVCreateCustomerRequestcustomerScopeIdPost(string accept, string scopeId, CDMVCreateCustomerRequest body = default(CDMVCreateCustomerRequest));

        /// <summary>
        /// Creates a customer - {CDMVCreateCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Creates a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CDMVCreateCustomerRequestcustomerScopeIdPostWithHttpInfo(string accept, string scopeId, CDMVCreateCustomerRequest body = default(CDMVCreateCustomerRequest));
        /// <summary>
        /// Sends an email to a customer to continue its account creation for a clinic - {CDMVSelfServiceAccountCreationRequest}
        /// </summary>
        /// <remarks>
        /// Sends an email to a customer to continue its account creation for a clinic
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SelfServiceAccountCreatedEvent</returns>
        SelfServiceAccountCreatedEvent CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPost(string accept, string scopeId, CDMVSelfServiceAccountCreationRequest body = default(CDMVSelfServiceAccountCreationRequest));

        /// <summary>
        /// Sends an email to a customer to continue its account creation for a clinic - {CDMVSelfServiceAccountCreationRequest}
        /// </summary>
        /// <remarks>
        /// Sends an email to a customer to continue its account creation for a clinic
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SelfServiceAccountCreatedEvent</returns>
        ApiResponse<SelfServiceAccountCreatedEvent> CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPostWithHttpInfo(string accept, string scopeId, CDMVSelfServiceAccountCreationRequest body = default(CDMVSelfServiceAccountCreationRequest));
        /// <summary>
        /// Validate an encrypted Token and return info - {CDMVSelfServiceAccountCreationValidationRequest}
        /// </summary>
        /// <remarks>
        /// Validate an encrypted Token and return info
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CDMVSelfServiceAccountValidationResponse</returns>
        CDMVSelfServiceAccountValidationResponse CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePost(string accept, CDMVSelfServiceAccountCreationValidationRequest body = default(CDMVSelfServiceAccountCreationValidationRequest));

        /// <summary>
        /// Validate an encrypted Token and return info - {CDMVSelfServiceAccountCreationValidationRequest}
        /// </summary>
        /// <remarks>
        /// Validate an encrypted Token and return info
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CDMVSelfServiceAccountValidationResponse</returns>
        ApiResponse<CDMVSelfServiceAccountValidationResponse> CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePostWithHttpInfo(string accept, CDMVSelfServiceAccountCreationValidationRequest body = default(CDMVSelfServiceAccountCreationValidationRequest));
        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code - {ClinicProductInformationImportRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicCode">The code of the clinic this import is for</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPost(string accept, string clinicCode, ClinicProductInformationImportRequest body = default(ClinicProductInformationImportRequest));

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code - {ClinicProductInformationImportRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicCode">The code of the clinic this import is for</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPostWithHttpInfo(string accept, string clinicCode, ClinicProductInformationImportRequest body = default(ClinicProductInformationImportRequest));
        /// <summary>
        /// Confirm that shipments have been shipped, either fully or partially - {ConfirmShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Confirm that shipments have been shipped, either fully or partially. Split shipments are not allowed - so any line items that are not included in this request or any partial quantities will be considered as unshipped and will be cancelled. If no line items are provided, then the entire shipment is cancelled
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ConfirmShipmentResponse</returns>
        ConfirmShipmentResponse ConfirmShipmentRequestordersconfirmshipmentPost(string accept, ConfirmShipmentRequest body = default(ConfirmShipmentRequest));

        /// <summary>
        /// Confirm that shipments have been shipped, either fully or partially - {ConfirmShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Confirm that shipments have been shipped, either fully or partially. Split shipments are not allowed - so any line items that are not included in this request or any partial quantities will be considered as unshipped and will be cancelled. If no line items are provided, then the entire shipment is cancelled
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ConfirmShipmentResponse</returns>
        ApiResponse<ConfirmShipmentResponse> ConfirmShipmentRequestordersconfirmshipmentPostWithHttpInfo(string accept, ConfirmShipmentRequest body = default(ConfirmShipmentRequest));
        /// <summary>
        /// Dectivate a product in the provided dependant scope - {DeactivateProductRequest}
        /// </summary>
        /// <remarks>
        /// Deactivate a product in the provided dependant scope. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Product</returns>
        Product DeactivateProductRequestproductsScopeIdProductIddeactivateCreate(string accept, string scopeId, string productId, Object body = default(Object));

        /// <summary>
        /// Dectivate a product in the provided dependant scope - {DeactivateProductRequest}
        /// </summary>
        /// <remarks>
        /// Deactivate a product in the provided dependant scope. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> DeactivateProductRequestproductsScopeIdProductIddeactivateCreateWithHttpInfo(string accept, string scopeId, string productId, Object body = default(Object));
        /// <summary>
        /// Deletes a payment method from the customer wallet - {DeletePaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a payment method from the customer wallet
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentMethodId">Payment method Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <returns>DeletePaymentMethodResponse</returns>
        DeletePaymentMethodResponse DeletePaymentMethodRequestcustomerScopeIdwalletDelete(string accept, string scopeId, string customerId = default(string), string paymentMethodId = default(string), string paymentProviderName = default(string));

        /// <summary>
        /// Deletes a payment method from the customer wallet - {DeletePaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a payment method from the customer wallet
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentMethodId">Payment method Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <returns>ApiResponse of DeletePaymentMethodResponse</returns>
        ApiResponse<DeletePaymentMethodResponse> DeletePaymentMethodRequestcustomerScopeIdwalletDeleteWithHttpInfo(string accept, string scopeId, string customerId = default(string), string paymentMethodId = default(string), string paymentProviderName = default(string));
        /// <summary>
        /// Delete an existing product authorization based on its Id - {DeleteProductAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Delete an existing product authorization based on its Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to delete (currently, this is the custom profile id of the product authorization)</param>
        /// <returns>DeleteProductAuthorizationResponse</returns>
        DeleteProductAuthorizationResponse DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDelete(string accept, string scopeId, string id);

        /// <summary>
        /// Delete an existing product authorization based on its Id - {DeleteProductAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Delete an existing product authorization based on its Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to delete (currently, this is the custom profile id of the product authorization)</param>
        /// <returns>ApiResponse of DeleteProductAuthorizationResponse</returns>
        ApiResponse<DeleteProductAuthorizationResponse> DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDeleteWithHttpInfo(string accept, string scopeId, string id);
        /// <summary>
        /// Receives solr index documents to allow for custom index fields - {DocumentsRequest}
        /// </summary>
        /// <remarks>
        /// Receives solr index documents to allow for custom index fields
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="authenticationToken">The secret authentication token</param>
        /// <param name="body"> (optional)</param>
        /// <returns>HttpResult</returns>
        HttpResult DocumentsRequestsolrAuthenticationTokenPost(string accept, string authenticationToken, DocumentsRequest body = default(DocumentsRequest));

        /// <summary>
        /// Receives solr index documents to allow for custom index fields - {DocumentsRequest}
        /// </summary>
        /// <remarks>
        /// Receives solr index documents to allow for custom index fields
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="authenticationToken">The secret authentication token</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of HttpResult</returns>
        ApiResponse<HttpResult> DocumentsRequestsolrAuthenticationTokenPostWithHttpInfo(string accept, string authenticationToken, DocumentsRequest body = default(DocumentsRequest));
        /// <summary>
        /// Retrieves all product authorizations by status for a given scope - {FindProductAuthorizationsByStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all product authorizations by status for a given scope. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindProductAuthorizationsByStatusResponse</returns>
        FindProductAuthorizationsByStatusResponse FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPost(string accept, string scopeId, FindProductAuthorizationsByStatusRequest body = default(FindProductAuthorizationsByStatusRequest));

        /// <summary>
        /// Retrieves all product authorizations by status for a given scope - {FindProductAuthorizationsByStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all product authorizations by status for a given scope. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindProductAuthorizationsByStatusResponse</returns>
        ApiResponse<FindProductAuthorizationsByStatusResponse> FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPostWithHttpInfo(string accept, string scopeId, FindProductAuthorizationsByStatusRequest body = default(FindProductAuthorizationsByStatusRequest));
        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest}
        /// </summary>
        /// <remarks>
        /// This request is identical to the out of the box feature from OCC but will fetch the store display name as part of it&#39;s default behavior to work around an OCC missing limitation.Its signature is the same to minimize re-work should the OCC platform implement it in the future. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindStoresQueryResult</returns>
        FindStoresQueryResult FindStoresRequeststoresScopeIdfindPost(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest));

        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest}
        /// </summary>
        /// <remarks>
        /// This request is identical to the out of the box feature from OCC but will fetch the store display name as part of it&#39;s default behavior to work around an OCC missing limitation.Its signature is the same to minimize re-work should the OCC platform implement it in the future. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindStoresQueryResult</returns>
        ApiResponse<FindStoresQueryResult> FindStoresRequeststoresScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest));
        /// <summary>
        /// Get the B2C site profile of a customer. - {GetB2CSiteProfileRequest}
        /// </summary>
        /// <remarks>
        /// Get the B2C site profile of a customer. For new customers, a profile always exists, if a customer doesn&#39;t have a profile, it is assumed it has been invited by a clinic admin. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <returns>GetB2CSiteProfileResponse</returns>
        GetB2CSiteProfileResponse GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGet(string accept, string scopeId, string customerId);

        /// <summary>
        /// Get the B2C site profile of a customer. - {GetB2CSiteProfileRequest}
        /// </summary>
        /// <remarks>
        /// Get the B2C site profile of a customer. For new customers, a profile always exists, if a customer doesn&#39;t have a profile, it is assumed it has been invited by a clinic admin. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <returns>ApiResponse of GetB2CSiteProfileResponse</returns>
        ApiResponse<GetB2CSiteProfileResponse> GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGetWithHttpInfo(string accept, string scopeId, string customerId);
        /// <summary>
        /// Returns information about the clinic a customer is associated to,using the customer&#39;s username to identify him. - {GetClinicInfoForCustomerByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Returns information about the clinic a customer is associated to 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="username">The customer&#39;s username. (optional)</param>
        /// <returns>GetClinicInfoForCustomerResponse</returns>
        GetClinicInfoForCustomerResponse GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGet(string accept, string username = default(string));

        /// <summary>
        /// Returns information about the clinic a customer is associated to,using the customer&#39;s username to identify him. - {GetClinicInfoForCustomerByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Returns information about the clinic a customer is associated to 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="username">The customer&#39;s username. (optional)</param>
        /// <returns>ApiResponse of GetClinicInfoForCustomerResponse</returns>
        ApiResponse<GetClinicInfoForCustomerResponse> GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGetWithHttpInfo(string accept, string username = default(string));
        /// <summary>
        /// Returns information about the clinic a customer is associated to. - {GetClinicInfoForCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Returns information about the clinic a customer is associated to
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <returns>GetClinicInfoForCustomerResponse</returns>
        GetClinicInfoForCustomerResponse GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGet(string accept, string customerId);

        /// <summary>
        /// Returns information about the clinic a customer is associated to. - {GetClinicInfoForCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Returns information about the clinic a customer is associated to
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <returns>ApiResponse of GetClinicInfoForCustomerResponse</returns>
        ApiResponse<GetClinicInfoForCustomerResponse> GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGetWithHttpInfo(string accept, string customerId);
        /// <summary>
        /// Retrieves a clinic&#39;s information using its id - {GetClinicInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a clinic&#39;s information using its id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicId">The clinic identifier</param>
        /// <returns>ClinicInfo</returns>
        ClinicInfo GetClinicInfoRequestclinicClinicIdGet(string accept, string clinicId);

        /// <summary>
        /// Retrieves a clinic&#39;s information using its id - {GetClinicInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a clinic&#39;s information using its id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicId">The clinic identifier</param>
        /// <returns>ApiResponse of ClinicInfo</returns>
        ApiResponse<ClinicInfo> GetClinicInfoRequestclinicClinicIdGetWithHttpInfo(string accept, string clinicId);
        /// <summary>
        /// Gets a customer wallet - {GetCustomerWalletRequest}
        /// </summary>
        /// <remarks>
        /// Gets a customer wallet
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <returns>GetCustomerWalletResponse</returns>
        GetCustomerWalletResponse GetCustomerWalletRequestcustomerScopeIdwalletGet(string accept, string scopeId, string customerId = default(string), string paymentProviderName = default(string));

        /// <summary>
        /// Gets a customer wallet - {GetCustomerWalletRequest}
        /// </summary>
        /// <remarks>
        /// Gets a customer wallet
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <returns>ApiResponse of GetCustomerWalletResponse</returns>
        ApiResponse<GetCustomerWalletResponse> GetCustomerWalletRequestcustomerScopeIdwalletGetWithHttpInfo(string accept, string scopeId, string customerId = default(string), string paymentProviderName = default(string));
        /// <summary>
        /// Get the list of Customer KPI. - {GetCustomersKpiRequest}
        /// </summary>
        /// <remarks>
        /// Get the list of Customer KPI.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>GetAdminKpiResponse</returns>
        GetAdminKpiResponse GetCustomersKpiRequestcustomerskpiScopeIdGet(string accept, string scopeId);

        /// <summary>
        /// Get the list of Customer KPI. - {GetCustomersKpiRequest}
        /// </summary>
        /// <remarks>
        /// Get the list of Customer KPI.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>ApiResponse of GetAdminKpiResponse</returns>
        ApiResponse<GetAdminKpiResponse> GetCustomersKpiRequestcustomerskpiScopeIdGetWithHttpInfo(string accept, string scopeId);
        /// <summary>
        /// Retrieves all feature flags that applies to a given scope applying scope inheritance. - {GetFeatureFlagsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all feature flags that applies to a given scope applying scope inheritance. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>GetFeatureFlagsResponse</returns>
        GetFeatureFlagsResponse GetFeatureFlagsRequestfeatureflagsScopeIdGet(string accept, string scopeId);

        /// <summary>
        /// Retrieves all feature flags that applies to a given scope applying scope inheritance. - {GetFeatureFlagsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all feature flags that applies to a given scope applying scope inheritance. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>ApiResponse of GetFeatureFlagsResponse</returns>
        ApiResponse<GetFeatureFlagsResponse> GetFeatureFlagsRequestfeatureflagsScopeIdGetWithHttpInfo(string accept, string scopeId);
        /// <summary>
        /// Gets the payment capture settings for Moneris - {GetMonerisCaptureSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the payment capture settings for Moneris
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentProviderName">Payment provider name</param>
        /// <returns>GetMonerisCaptureSettingsResponse</returns>
        GetMonerisCaptureSettingsResponse GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGet(string accept, string scopeId, string paymentProviderName);

        /// <summary>
        /// Gets the payment capture settings for Moneris - {GetMonerisCaptureSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the payment capture settings for Moneris
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentProviderName">Payment provider name</param>
        /// <returns>ApiResponse of GetMonerisCaptureSettingsResponse</returns>
        ApiResponse<GetMonerisCaptureSettingsResponse> GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGetWithHttpInfo(string accept, string scopeId, string paymentProviderName);
        /// <summary>
        /// Get the list of all B2C accounts waiting for approval. - {GetPendingApprovalAccountsRequest}
        /// </summary>
        /// <remarks>
        /// Get the list of all B2C accounts waiting for approval.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includePendingOrderCount">Whether to include the number of pending orders for each customer (optional)</param>
        /// <param name="resultsPerPage">The maximum number of results that can be returned at once. Defaults to 50 (optional)</param>
        /// <param name="startingPage">If the results are returned on multiple pages, this indicates which page of results to return (optional)</param>
        /// <returns>GetPendingApprovalAccountsResponse</returns>
        GetPendingApprovalAccountsResponse GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGet(string accept, string scopeId, bool? includePendingOrderCount = default(bool?), int? resultsPerPage = default(int?), int? startingPage = default(int?));

        /// <summary>
        /// Get the list of all B2C accounts waiting for approval. - {GetPendingApprovalAccountsRequest}
        /// </summary>
        /// <remarks>
        /// Get the list of all B2C accounts waiting for approval.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includePendingOrderCount">Whether to include the number of pending orders for each customer (optional)</param>
        /// <param name="resultsPerPage">The maximum number of results that can be returned at once. Defaults to 50 (optional)</param>
        /// <param name="startingPage">If the results are returned on multiple pages, this indicates which page of results to return (optional)</param>
        /// <returns>ApiResponse of GetPendingApprovalAccountsResponse</returns>
        ApiResponse<GetPendingApprovalAccountsResponse> GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGetWithHttpInfo(string accept, string scopeId, bool? includePendingOrderCount = default(bool?), int? resultsPerPage = default(int?), int? startingPage = default(int?));
        /// <summary>
        /// Retrieves all product authorizations associated to a customer, identified by its username - {GetProductAuthorizationsByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all product authorizations associated to a customer, identified by its username. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username (optional)</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <returns>GetProductAuthorizationsResponse</returns>
        GetProductAuthorizationsResponse GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGet(string accept, string scopeId, string username = default(string), bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string));

        /// <summary>
        /// Retrieves all product authorizations associated to a customer, identified by its username - {GetProductAuthorizationsByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all product authorizations associated to a customer, identified by its username. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username (optional)</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <returns>ApiResponse of GetProductAuthorizationsResponse</returns>
        ApiResponse<GetProductAuthorizationsResponse> GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGetWithHttpInfo(string accept, string scopeId, string username = default(string), bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string));
        /// <summary>
        /// Retrieves all product authorizations associated to a customer - {GetProductAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all product authorizations associated to a customer. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <param name="phoneNumber">The customer&#39;s phone number (optional)</param>
        /// <returns>GetProductAuthorizationsResponse</returns>
        GetProductAuthorizationsResponse GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGet(string accept, string scopeId, string customerId, bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string), string phoneNumber = default(string));

        /// <summary>
        /// Retrieves all product authorizations associated to a customer - {GetProductAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all product authorizations associated to a customer. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <param name="phoneNumber">The customer&#39;s phone number (optional)</param>
        /// <returns>ApiResponse of GetProductAuthorizationsResponse</returns>
        ApiResponse<GetProductAuthorizationsResponse> GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGetWithHttpInfo(string accept, string scopeId, string customerId, bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string), string phoneNumber = default(string));
        /// <summary>
        /// Return CSV report for inactive products of each scope - {InactiveProductsReportRequest}
        /// </summary>
        /// <remarks>
        /// Return CSV report for inactive products. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in</param>
        /// <returns>Product</returns>
        Product InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGet(string accept, string scopeId, string cultureName);

        /// <summary>
        /// Return CSV report for inactive products of each scope - {InactiveProductsReportRequest}
        /// </summary>
        /// <remarks>
        /// Return CSV report for inactive products. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGetWithHttpInfo(string accept, string scopeId, string cultureName);
        /// <summary>
        /// Sends an email invitation to a new customer to create an account for a clinic - {InviteNewCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Sends an email invitation to a new customer to create an account for a clinic
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void InviteNewCustomerRequestcustomerScopeIdinvitePost(string accept, string scopeId, InviteNewCustomerRequest body = default(InviteNewCustomerRequest));

        /// <summary>
        /// Sends an email invitation to a new customer to create an account for a clinic - {InviteNewCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Sends an email invitation to a new customer to create an account for a clinic
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InviteNewCustomerRequestcustomerScopeIdinvitePostWithHttpInfo(string accept, string scopeId, InviteNewCustomerRequest body = default(InviteNewCustomerRequest));
        /// <summary>
        /// Sends an email invitation to a new customer to create an account associated with and organization - {InviteNewOrganizationalCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Sends an email invitation to a new customer to create an account associated with and organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organizations unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePost(string accept, string scopeId, string organizationId, InviteNewOrganizationalCustomerRequest body = default(InviteNewOrganizationalCustomerRequest));

        /// <summary>
        /// Sends an email invitation to a new customer to create an account associated with and organization - {InviteNewOrganizationalCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Sends an email invitation to a new customer to create an account associated with and organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organizations unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePostWithHttpInfo(string accept, string scopeId, string organizationId, InviteNewOrganizationalCustomerRequest body = default(InviteNewOrganizationalCustomerRequest));
        /// <summary>
        /// Sends to CDMV the invoice for a given order - {InvoiceOrderToCDMVRequest}
        /// </summary>
        /// <remarks>
        /// Sends to CDMV the invoice for a given order. A note is added on the order to indicate the invoice was requested.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InvoiceOrderToCDMVResponse</returns>
        InvoiceOrderToCDMVResponse InvoiceOrderToCDMVRequestordersinvoiceToCDMVPost(string accept, InvoiceOrderToCDMVRequest body = default(InvoiceOrderToCDMVRequest));

        /// <summary>
        /// Sends to CDMV the invoice for a given order - {InvoiceOrderToCDMVRequest}
        /// </summary>
        /// <remarks>
        /// Sends to CDMV the invoice for a given order. A note is added on the order to indicate the invoice was requested.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InvoiceOrderToCDMVResponse</returns>
        ApiResponse<InvoiceOrderToCDMVResponse> InvoiceOrderToCDMVRequestordersinvoiceToCDMVPostWithHttpInfo(string accept, InvoiceOrderToCDMVRequest body = default(InvoiceOrderToCDMVRequest));
        /// <summary>
        /// Removed activation overrride in the provided dependant scope - {RemoveActivationOverrideRequest}
        /// </summary>
        /// <remarks>
        /// Removed activation overrride the provided dependant scope. If the product was disabled this restores the inheritance from the sales scope activation.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <returns>Product</returns>
        Product RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDelete(string accept, string scopeId, string productId);

        /// <summary>
        /// Removed activation overrride in the provided dependant scope - {RemoveActivationOverrideRequest}
        /// </summary>
        /// <remarks>
        /// Removed activation overrride the provided dependant scope. If the product was disabled this restores the inheritance from the sales scope activation.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDeleteWithHttpInfo(string accept, string scopeId, string productId);
        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username. (optional)</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <returns>RemoveProductAuthorizationsResponse</returns>
        RemoveProductAuthorizationsResponse RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDelete(string accept, string scopeId, string username = default(string), List<string> productIds = default(List<string>));

        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username. (optional)</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <returns>ApiResponse of RemoveProductAuthorizationsResponse</returns>
        ApiResponse<RemoveProductAuthorizationsResponse> RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDeleteWithHttpInfo(string accept, string scopeId, string username = default(string), List<string> productIds = default(List<string>));
        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <returns>RemoveProductAuthorizationsResponse</returns>
        RemoveProductAuthorizationsResponse RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDelete(string accept, string scopeId, string customerId, List<string> productIds = default(List<string>));

        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <returns>ApiResponse of RemoveProductAuthorizationsResponse</returns>
        ApiResponse<RemoveProductAuthorizationsResponse> RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDeleteWithHttpInfo(string accept, string scopeId, string customerId, List<string> productIds = default(List<string>));
        /// <summary>
        /// Update a B2C site profile to complete the customer account approval. - {UpdatePendingApprovalAccountRequest}
        /// </summary>
        /// <remarks>
        /// The ID is the guid of the B2C site profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The ID of the B2C site profile to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdatePendingApprovalAccountResponse</returns>
        UpdatePendingApprovalAccountResponse UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreate(string accept, string scopeId, string id, UpdatePendingApprovalAccountRequest body = default(UpdatePendingApprovalAccountRequest));

        /// <summary>
        /// Update a B2C site profile to complete the customer account approval. - {UpdatePendingApprovalAccountRequest}
        /// </summary>
        /// <remarks>
        /// The ID is the guid of the B2C site profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The ID of the B2C site profile to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdatePendingApprovalAccountResponse</returns>
        ApiResponse<UpdatePendingApprovalAccountResponse> UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdatePendingApprovalAccountRequest body = default(UpdatePendingApprovalAccountRequest));
        /// <summary>
        /// Update an existing product authorization based on its Id - {UpdateProductAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing product authorization based on its Id, and returns its updated values. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to update (currently, this is the custom profile id of the product authorization)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductAuthorization</returns>
        ProductAuthorization UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreate(string accept, string scopeId, string id, UpdateProductAuthorizationRequest body = default(UpdateProductAuthorizationRequest));

        /// <summary>
        /// Update an existing product authorization based on its Id - {UpdateProductAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing product authorization based on its Id, and returns its updated values. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to update (currently, this is the custom profile id of the product authorization)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductAuthorization</returns>
        ApiResponse<ProductAuthorization> UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdateProductAuthorizationRequest body = default(UpdateProductAuthorizationRequest));
        /// <summary>
        /// Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest - {UpdateShipmentTrackingRequest}
        /// </summary>
        /// <remarks>
        /// Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest. This information is update at the Masnifest stage in CDMV Order Express AFTER an initial confirmation via the api /cdmv/orders/confirmshipment.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdateShipmentTrackingResponse</returns>
        UpdateShipmentTrackingResponse UpdateShipmentTrackingRequestordersupdateShipmentTrackingPost(string accept, UpdateShipmentTrackingRequest body = default(UpdateShipmentTrackingRequest));

        /// <summary>
        /// Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest - {UpdateShipmentTrackingRequest}
        /// </summary>
        /// <remarks>
        /// Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest. This information is update at the Masnifest stage in CDMV Order Express AFTER an initial confirmation via the api /cdmv/orders/confirmshipment.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdateShipmentTrackingResponse</returns>
        ApiResponse<UpdateShipmentTrackingResponse> UpdateShipmentTrackingRequestordersupdateShipmentTrackingPostWithHttpInfo(string accept, UpdateShipmentTrackingRequest body = default(UpdateShipmentTrackingRequest));
        /// <summary>
        /// Updates a credit card in the customer wallet - {UpdateWalletCreditCardRequest}
        /// </summary>
        /// <remarks>
        /// Updates a credit card in the customer wallet, dates in the past are accepted for non-prod environments
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdateWalletCreditCardResponse</returns>
        UpdateWalletCreditCardResponse UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreate(string accept, string scopeId, string paymentMethodId, UpdateWalletCreditCardRequest body = default(UpdateWalletCreditCardRequest));

        /// <summary>
        /// Updates a credit card in the customer wallet - {UpdateWalletCreditCardRequest}
        /// </summary>
        /// <remarks>
        /// Updates a credit card in the customer wallet, dates in the past are accepted for non-prod environments
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdateWalletCreditCardResponse</returns>
        ApiResponse<UpdateWalletCreditCardResponse> UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreateWithHttpInfo(string accept, string scopeId, string paymentMethodId, UpdateWalletCreditCardRequest body = default(UpdateWalletCreditCardRequest));
        /// <summary>
        /// Updates the default credit card in the customer wallet - {UpdateWalletDefaultCreditCardRequest}
        /// </summary>
        /// <remarks>
        /// Updates the default credit card in the customer wallet
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdateWalletDefaultCreditCardResponse</returns>
        UpdateWalletDefaultCreditCardResponse UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreate(string accept, string scopeId, string paymentMethodId, UpdateWalletDefaultCreditCardRequest body = default(UpdateWalletDefaultCreditCardRequest));

        /// <summary>
        /// Updates the default credit card in the customer wallet - {UpdateWalletDefaultCreditCardRequest}
        /// </summary>
        /// <remarks>
        /// Updates the default credit card in the customer wallet
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdateWalletDefaultCreditCardResponse</returns>
        ApiResponse<UpdateWalletDefaultCreditCardResponse> UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreateWithHttpInfo(string accept, string scopeId, string paymentMethodId, UpdateWalletDefaultCreditCardRequest body = default(UpdateWalletDefaultCreditCardRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICdmvApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds a new payment method for a customer - {AddMonerisPaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Adds a new payment method for a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddMonerisPaymentMethodResponse</returns>
        System.Threading.Tasks.Task<AddMonerisPaymentMethodResponse> AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPostAsync(string accept, string scopeId, string customerId, AddMonerisPaymentMethodRequest body = default(AddMonerisPaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a new payment method for a customer - {AddMonerisPaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Adds a new payment method for a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddMonerisPaymentMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddMonerisPaymentMethodResponse>> AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPostWithHttpInfoAsync(string accept, string scopeId, string customerId, AddMonerisPaymentMethodRequest body = default(AddMonerisPaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddOrUpdateProductAuthorizationsResponse</returns>
        System.Threading.Tasks.Task<AddOrUpdateProductAuthorizationsResponse> AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePostAsync(string accept, string scopeId, AddOrUpdateProductAuthorizationsByUsernameRequest body = default(AddOrUpdateProductAuthorizationsByUsernameRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddOrUpdateProductAuthorizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddOrUpdateProductAuthorizationsResponse>> AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePostWithHttpInfoAsync(string accept, string scopeId, AddOrUpdateProductAuthorizationsByUsernameRequest body = default(AddOrUpdateProductAuthorizationsByUsernameRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddOrUpdateProductAuthorizationsResponse</returns>
        System.Threading.Tasks.Task<AddOrUpdateProductAuthorizationsResponse> AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPostAsync(string accept, string scopeId, string customerId, AddOrUpdateProductAuthorizationsRequest body = default(AddOrUpdateProductAuthorizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddOrUpdateProductAuthorizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddOrUpdateProductAuthorizationsResponse>> AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPostWithHttpInfoAsync(string accept, string scopeId, string customerId, AddOrUpdateProductAuthorizationsRequest body = default(AddOrUpdateProductAuthorizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a customer - {CDMVCreateCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Creates a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CDMVCreateCustomerRequestcustomerScopeIdPostAsync(string accept, string scopeId, CDMVCreateCustomerRequest body = default(CDMVCreateCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a customer - {CDMVCreateCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Creates a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CDMVCreateCustomerRequestcustomerScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CDMVCreateCustomerRequest body = default(CDMVCreateCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sends an email to a customer to continue its account creation for a clinic - {CDMVSelfServiceAccountCreationRequest}
        /// </summary>
        /// <remarks>
        /// Sends an email to a customer to continue its account creation for a clinic
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SelfServiceAccountCreatedEvent</returns>
        System.Threading.Tasks.Task<SelfServiceAccountCreatedEvent> CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPostAsync(string accept, string scopeId, CDMVSelfServiceAccountCreationRequest body = default(CDMVSelfServiceAccountCreationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sends an email to a customer to continue its account creation for a clinic - {CDMVSelfServiceAccountCreationRequest}
        /// </summary>
        /// <remarks>
        /// Sends an email to a customer to continue its account creation for a clinic
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SelfServiceAccountCreatedEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelfServiceAccountCreatedEvent>> CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPostWithHttpInfoAsync(string accept, string scopeId, CDMVSelfServiceAccountCreationRequest body = default(CDMVSelfServiceAccountCreationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate an encrypted Token and return info - {CDMVSelfServiceAccountCreationValidationRequest}
        /// </summary>
        /// <remarks>
        /// Validate an encrypted Token and return info
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CDMVSelfServiceAccountValidationResponse</returns>
        System.Threading.Tasks.Task<CDMVSelfServiceAccountValidationResponse> CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePostAsync(string accept, CDMVSelfServiceAccountCreationValidationRequest body = default(CDMVSelfServiceAccountCreationValidationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate an encrypted Token and return info - {CDMVSelfServiceAccountCreationValidationRequest}
        /// </summary>
        /// <remarks>
        /// Validate an encrypted Token and return info
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CDMVSelfServiceAccountValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CDMVSelfServiceAccountValidationResponse>> CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePostWithHttpInfoAsync(string accept, CDMVSelfServiceAccountCreationValidationRequest body = default(CDMVSelfServiceAccountCreationValidationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code - {ClinicProductInformationImportRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicCode">The code of the clinic this import is for</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPostAsync(string accept, string clinicCode, ClinicProductInformationImportRequest body = default(ClinicProductInformationImportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code - {ClinicProductInformationImportRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicCode">The code of the clinic this import is for</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPostWithHttpInfoAsync(string accept, string clinicCode, ClinicProductInformationImportRequest body = default(ClinicProductInformationImportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Confirm that shipments have been shipped, either fully or partially - {ConfirmShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Confirm that shipments have been shipped, either fully or partially. Split shipments are not allowed - so any line items that are not included in this request or any partial quantities will be considered as unshipped and will be cancelled. If no line items are provided, then the entire shipment is cancelled
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfirmShipmentResponse</returns>
        System.Threading.Tasks.Task<ConfirmShipmentResponse> ConfirmShipmentRequestordersconfirmshipmentPostAsync(string accept, ConfirmShipmentRequest body = default(ConfirmShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Confirm that shipments have been shipped, either fully or partially - {ConfirmShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Confirm that shipments have been shipped, either fully or partially. Split shipments are not allowed - so any line items that are not included in this request or any partial quantities will be considered as unshipped and will be cancelled. If no line items are provided, then the entire shipment is cancelled
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfirmShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmShipmentResponse>> ConfirmShipmentRequestordersconfirmshipmentPostWithHttpInfoAsync(string accept, ConfirmShipmentRequest body = default(ConfirmShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Dectivate a product in the provided dependant scope - {DeactivateProductRequest}
        /// </summary>
        /// <remarks>
        /// Deactivate a product in the provided dependant scope. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> DeactivateProductRequestproductsScopeIdProductIddeactivateCreateAsync(string accept, string scopeId, string productId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dectivate a product in the provided dependant scope - {DeactivateProductRequest}
        /// </summary>
        /// <remarks>
        /// Deactivate a product in the provided dependant scope. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> DeactivateProductRequestproductsScopeIdProductIddeactivateCreateWithHttpInfoAsync(string accept, string scopeId, string productId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a payment method from the customer wallet - {DeletePaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a payment method from the customer wallet
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentMethodId">Payment method Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletePaymentMethodResponse</returns>
        System.Threading.Tasks.Task<DeletePaymentMethodResponse> DeletePaymentMethodRequestcustomerScopeIdwalletDeleteAsync(string accept, string scopeId, string customerId = default(string), string paymentMethodId = default(string), string paymentProviderName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a payment method from the customer wallet - {DeletePaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a payment method from the customer wallet
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentMethodId">Payment method Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletePaymentMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletePaymentMethodResponse>> DeletePaymentMethodRequestcustomerScopeIdwalletDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId = default(string), string paymentMethodId = default(string), string paymentProviderName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing product authorization based on its Id - {DeleteProductAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Delete an existing product authorization based on its Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to delete (currently, this is the custom profile id of the product authorization)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteProductAuthorizationResponse</returns>
        System.Threading.Tasks.Task<DeleteProductAuthorizationResponse> DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDeleteAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing product authorization based on its Id - {DeleteProductAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Delete an existing product authorization based on its Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to delete (currently, this is the custom profile id of the product authorization)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteProductAuthorizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteProductAuthorizationResponse>> DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDeleteWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Receives solr index documents to allow for custom index fields - {DocumentsRequest}
        /// </summary>
        /// <remarks>
        /// Receives solr index documents to allow for custom index fields
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="authenticationToken">The secret authentication token</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HttpResult</returns>
        System.Threading.Tasks.Task<HttpResult> DocumentsRequestsolrAuthenticationTokenPostAsync(string accept, string authenticationToken, DocumentsRequest body = default(DocumentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Receives solr index documents to allow for custom index fields - {DocumentsRequest}
        /// </summary>
        /// <remarks>
        /// Receives solr index documents to allow for custom index fields
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="authenticationToken">The secret authentication token</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HttpResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<HttpResult>> DocumentsRequestsolrAuthenticationTokenPostWithHttpInfoAsync(string accept, string authenticationToken, DocumentsRequest body = default(DocumentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all product authorizations by status for a given scope - {FindProductAuthorizationsByStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all product authorizations by status for a given scope. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindProductAuthorizationsByStatusResponse</returns>
        System.Threading.Tasks.Task<FindProductAuthorizationsByStatusResponse> FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPostAsync(string accept, string scopeId, FindProductAuthorizationsByStatusRequest body = default(FindProductAuthorizationsByStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all product authorizations by status for a given scope - {FindProductAuthorizationsByStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all product authorizations by status for a given scope. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindProductAuthorizationsByStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindProductAuthorizationsByStatusResponse>> FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPostWithHttpInfoAsync(string accept, string scopeId, FindProductAuthorizationsByStatusRequest body = default(FindProductAuthorizationsByStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest}
        /// </summary>
        /// <remarks>
        /// This request is identical to the out of the box feature from OCC but will fetch the store display name as part of it&#39;s default behavior to work around an OCC missing limitation.Its signature is the same to minimize re-work should the OCC platform implement it in the future. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindStoresQueryResult</returns>
        System.Threading.Tasks.Task<FindStoresQueryResult> FindStoresRequeststoresScopeIdfindPostAsync(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest}
        /// </summary>
        /// <remarks>
        /// This request is identical to the out of the box feature from OCC but will fetch the store display name as part of it&#39;s default behavior to work around an OCC missing limitation.Its signature is the same to minimize re-work should the OCC platform implement it in the future. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindStoresQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindStoresQueryResult>> FindStoresRequeststoresScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the B2C site profile of a customer. - {GetB2CSiteProfileRequest}
        /// </summary>
        /// <remarks>
        /// Get the B2C site profile of a customer. For new customers, a profile always exists, if a customer doesn&#39;t have a profile, it is assumed it has been invited by a clinic admin. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetB2CSiteProfileResponse</returns>
        System.Threading.Tasks.Task<GetB2CSiteProfileResponse> GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGetAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the B2C site profile of a customer. - {GetB2CSiteProfileRequest}
        /// </summary>
        /// <remarks>
        /// Get the B2C site profile of a customer. For new customers, a profile always exists, if a customer doesn&#39;t have a profile, it is assumed it has been invited by a clinic admin. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetB2CSiteProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetB2CSiteProfileResponse>> GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns information about the clinic a customer is associated to,using the customer&#39;s username to identify him. - {GetClinicInfoForCustomerByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Returns information about the clinic a customer is associated to 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="username">The customer&#39;s username. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetClinicInfoForCustomerResponse</returns>
        System.Threading.Tasks.Task<GetClinicInfoForCustomerResponse> GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGetAsync(string accept, string username = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns information about the clinic a customer is associated to,using the customer&#39;s username to identify him. - {GetClinicInfoForCustomerByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Returns information about the clinic a customer is associated to 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="username">The customer&#39;s username. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetClinicInfoForCustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetClinicInfoForCustomerResponse>> GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGetWithHttpInfoAsync(string accept, string username = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns information about the clinic a customer is associated to. - {GetClinicInfoForCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Returns information about the clinic a customer is associated to
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetClinicInfoForCustomerResponse</returns>
        System.Threading.Tasks.Task<GetClinicInfoForCustomerResponse> GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGetAsync(string accept, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns information about the clinic a customer is associated to. - {GetClinicInfoForCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Returns information about the clinic a customer is associated to
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetClinicInfoForCustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetClinicInfoForCustomerResponse>> GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGetWithHttpInfoAsync(string accept, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a clinic&#39;s information using its id - {GetClinicInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a clinic&#39;s information using its id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicId">The clinic identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClinicInfo</returns>
        System.Threading.Tasks.Task<ClinicInfo> GetClinicInfoRequestclinicClinicIdGetAsync(string accept, string clinicId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a clinic&#39;s information using its id - {GetClinicInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a clinic&#39;s information using its id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicId">The clinic identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClinicInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClinicInfo>> GetClinicInfoRequestclinicClinicIdGetWithHttpInfoAsync(string accept, string clinicId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a customer wallet - {GetCustomerWalletRequest}
        /// </summary>
        /// <remarks>
        /// Gets a customer wallet
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomerWalletResponse</returns>
        System.Threading.Tasks.Task<GetCustomerWalletResponse> GetCustomerWalletRequestcustomerScopeIdwalletGetAsync(string accept, string scopeId, string customerId = default(string), string paymentProviderName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a customer wallet - {GetCustomerWalletRequest}
        /// </summary>
        /// <remarks>
        /// Gets a customer wallet
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomerWalletResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomerWalletResponse>> GetCustomerWalletRequestcustomerScopeIdwalletGetWithHttpInfoAsync(string accept, string scopeId, string customerId = default(string), string paymentProviderName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of Customer KPI. - {GetCustomersKpiRequest}
        /// </summary>
        /// <remarks>
        /// Get the list of Customer KPI.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAdminKpiResponse</returns>
        System.Threading.Tasks.Task<GetAdminKpiResponse> GetCustomersKpiRequestcustomerskpiScopeIdGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of Customer KPI. - {GetCustomersKpiRequest}
        /// </summary>
        /// <remarks>
        /// Get the list of Customer KPI.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAdminKpiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAdminKpiResponse>> GetCustomersKpiRequestcustomerskpiScopeIdGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all feature flags that applies to a given scope applying scope inheritance. - {GetFeatureFlagsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all feature flags that applies to a given scope applying scope inheritance. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFeatureFlagsResponse</returns>
        System.Threading.Tasks.Task<GetFeatureFlagsResponse> GetFeatureFlagsRequestfeatureflagsScopeIdGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all feature flags that applies to a given scope applying scope inheritance. - {GetFeatureFlagsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all feature flags that applies to a given scope applying scope inheritance. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFeatureFlagsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFeatureFlagsResponse>> GetFeatureFlagsRequestfeatureflagsScopeIdGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the payment capture settings for Moneris - {GetMonerisCaptureSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the payment capture settings for Moneris
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentProviderName">Payment provider name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMonerisCaptureSettingsResponse</returns>
        System.Threading.Tasks.Task<GetMonerisCaptureSettingsResponse> GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGetAsync(string accept, string scopeId, string paymentProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the payment capture settings for Moneris - {GetMonerisCaptureSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the payment capture settings for Moneris
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentProviderName">Payment provider name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMonerisCaptureSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMonerisCaptureSettingsResponse>> GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGetWithHttpInfoAsync(string accept, string scopeId, string paymentProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of all B2C accounts waiting for approval. - {GetPendingApprovalAccountsRequest}
        /// </summary>
        /// <remarks>
        /// Get the list of all B2C accounts waiting for approval.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includePendingOrderCount">Whether to include the number of pending orders for each customer (optional)</param>
        /// <param name="resultsPerPage">The maximum number of results that can be returned at once. Defaults to 50 (optional)</param>
        /// <param name="startingPage">If the results are returned on multiple pages, this indicates which page of results to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPendingApprovalAccountsResponse</returns>
        System.Threading.Tasks.Task<GetPendingApprovalAccountsResponse> GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGetAsync(string accept, string scopeId, bool? includePendingOrderCount = default(bool?), int? resultsPerPage = default(int?), int? startingPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of all B2C accounts waiting for approval. - {GetPendingApprovalAccountsRequest}
        /// </summary>
        /// <remarks>
        /// Get the list of all B2C accounts waiting for approval.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includePendingOrderCount">Whether to include the number of pending orders for each customer (optional)</param>
        /// <param name="resultsPerPage">The maximum number of results that can be returned at once. Defaults to 50 (optional)</param>
        /// <param name="startingPage">If the results are returned on multiple pages, this indicates which page of results to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPendingApprovalAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPendingApprovalAccountsResponse>> GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGetWithHttpInfoAsync(string accept, string scopeId, bool? includePendingOrderCount = default(bool?), int? resultsPerPage = default(int?), int? startingPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all product authorizations associated to a customer, identified by its username - {GetProductAuthorizationsByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all product authorizations associated to a customer, identified by its username. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username (optional)</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductAuthorizationsResponse</returns>
        System.Threading.Tasks.Task<GetProductAuthorizationsResponse> GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGetAsync(string accept, string scopeId, string username = default(string), bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all product authorizations associated to a customer, identified by its username - {GetProductAuthorizationsByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all product authorizations associated to a customer, identified by its username. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username (optional)</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductAuthorizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductAuthorizationsResponse>> GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGetWithHttpInfoAsync(string accept, string scopeId, string username = default(string), bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all product authorizations associated to a customer - {GetProductAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all product authorizations associated to a customer. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <param name="phoneNumber">The customer&#39;s phone number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductAuthorizationsResponse</returns>
        System.Threading.Tasks.Task<GetProductAuthorizationsResponse> GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGetAsync(string accept, string scopeId, string customerId, bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string), string phoneNumber = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all product authorizations associated to a customer - {GetProductAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves all product authorizations associated to a customer. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <param name="phoneNumber">The customer&#39;s phone number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductAuthorizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductAuthorizationsResponse>> GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string), string phoneNumber = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return CSV report for inactive products of each scope - {InactiveProductsReportRequest}
        /// </summary>
        /// <remarks>
        /// Return CSV report for inactive products. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGetAsync(string accept, string scopeId, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return CSV report for inactive products of each scope - {InactiveProductsReportRequest}
        /// </summary>
        /// <remarks>
        /// Return CSV report for inactive products. 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGetWithHttpInfoAsync(string accept, string scopeId, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sends an email invitation to a new customer to create an account for a clinic - {InviteNewCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Sends an email invitation to a new customer to create an account for a clinic
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InviteNewCustomerRequestcustomerScopeIdinvitePostAsync(string accept, string scopeId, InviteNewCustomerRequest body = default(InviteNewCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sends an email invitation to a new customer to create an account for a clinic - {InviteNewCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Sends an email invitation to a new customer to create an account for a clinic
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InviteNewCustomerRequestcustomerScopeIdinvitePostWithHttpInfoAsync(string accept, string scopeId, InviteNewCustomerRequest body = default(InviteNewCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sends an email invitation to a new customer to create an account associated with and organization - {InviteNewOrganizationalCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Sends an email invitation to a new customer to create an account associated with and organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organizations unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePostAsync(string accept, string scopeId, string organizationId, InviteNewOrganizationalCustomerRequest body = default(InviteNewOrganizationalCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sends an email invitation to a new customer to create an account associated with and organization - {InviteNewOrganizationalCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Sends an email invitation to a new customer to create an account associated with and organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organizations unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePostWithHttpInfoAsync(string accept, string scopeId, string organizationId, InviteNewOrganizationalCustomerRequest body = default(InviteNewOrganizationalCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sends to CDMV the invoice for a given order - {InvoiceOrderToCDMVRequest}
        /// </summary>
        /// <remarks>
        /// Sends to CDMV the invoice for a given order. A note is added on the order to indicate the invoice was requested.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceOrderToCDMVResponse</returns>
        System.Threading.Tasks.Task<InvoiceOrderToCDMVResponse> InvoiceOrderToCDMVRequestordersinvoiceToCDMVPostAsync(string accept, InvoiceOrderToCDMVRequest body = default(InvoiceOrderToCDMVRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sends to CDMV the invoice for a given order - {InvoiceOrderToCDMVRequest}
        /// </summary>
        /// <remarks>
        /// Sends to CDMV the invoice for a given order. A note is added on the order to indicate the invoice was requested.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceOrderToCDMVResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceOrderToCDMVResponse>> InvoiceOrderToCDMVRequestordersinvoiceToCDMVPostWithHttpInfoAsync(string accept, InvoiceOrderToCDMVRequest body = default(InvoiceOrderToCDMVRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removed activation overrride in the provided dependant scope - {RemoveActivationOverrideRequest}
        /// </summary>
        /// <remarks>
        /// Removed activation overrride the provided dependant scope. If the product was disabled this restores the inheritance from the sales scope activation.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDeleteAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removed activation overrride in the provided dependant scope - {RemoveActivationOverrideRequest}
        /// </summary>
        /// <remarks>
        /// Removed activation overrride the provided dependant scope. If the product was disabled this restores the inheritance from the sales scope activation.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDeleteWithHttpInfoAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username. (optional)</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveProductAuthorizationsResponse</returns>
        System.Threading.Tasks.Task<RemoveProductAuthorizationsResponse> RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDeleteAsync(string accept, string scopeId, string username = default(string), List<string> productIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsByUsernameRequest}
        /// </summary>
        /// <remarks>
        /// Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username. (optional)</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveProductAuthorizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveProductAuthorizationsResponse>> RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDeleteWithHttpInfoAsync(string accept, string scopeId, string username = default(string), List<string> productIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveProductAuthorizationsResponse</returns>
        System.Threading.Tasks.Task<RemoveProductAuthorizationsResponse> RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDeleteAsync(string accept, string scopeId, string customerId, List<string> productIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveProductAuthorizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveProductAuthorizationsResponse>> RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, List<string> productIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a B2C site profile to complete the customer account approval. - {UpdatePendingApprovalAccountRequest}
        /// </summary>
        /// <remarks>
        /// The ID is the guid of the B2C site profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The ID of the B2C site profile to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePendingApprovalAccountResponse</returns>
        System.Threading.Tasks.Task<UpdatePendingApprovalAccountResponse> UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreateAsync(string accept, string scopeId, string id, UpdatePendingApprovalAccountRequest body = default(UpdatePendingApprovalAccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a B2C site profile to complete the customer account approval. - {UpdatePendingApprovalAccountRequest}
        /// </summary>
        /// <remarks>
        /// The ID is the guid of the B2C site profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The ID of the B2C site profile to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePendingApprovalAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePendingApprovalAccountResponse>> UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdatePendingApprovalAccountRequest body = default(UpdatePendingApprovalAccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing product authorization based on its Id - {UpdateProductAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing product authorization based on its Id, and returns its updated values. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to update (currently, this is the custom profile id of the product authorization)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductAuthorization</returns>
        System.Threading.Tasks.Task<ProductAuthorization> UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreateAsync(string accept, string scopeId, string id, UpdateProductAuthorizationRequest body = default(UpdateProductAuthorizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing product authorization based on its Id - {UpdateProductAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing product authorization based on its Id, and returns its updated values. All DateTimes are in UTC.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to update (currently, this is the custom profile id of the product authorization)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductAuthorization)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductAuthorization>> UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateProductAuthorizationRequest body = default(UpdateProductAuthorizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest - {UpdateShipmentTrackingRequest}
        /// </summary>
        /// <remarks>
        /// Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest. This information is update at the Masnifest stage in CDMV Order Express AFTER an initial confirmation via the api /cdmv/orders/confirmshipment.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateShipmentTrackingResponse</returns>
        System.Threading.Tasks.Task<UpdateShipmentTrackingResponse> UpdateShipmentTrackingRequestordersupdateShipmentTrackingPostAsync(string accept, UpdateShipmentTrackingRequest body = default(UpdateShipmentTrackingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest - {UpdateShipmentTrackingRequest}
        /// </summary>
        /// <remarks>
        /// Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest. This information is update at the Masnifest stage in CDMV Order Express AFTER an initial confirmation via the api /cdmv/orders/confirmshipment.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateShipmentTrackingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateShipmentTrackingResponse>> UpdateShipmentTrackingRequestordersupdateShipmentTrackingPostWithHttpInfoAsync(string accept, UpdateShipmentTrackingRequest body = default(UpdateShipmentTrackingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a credit card in the customer wallet - {UpdateWalletCreditCardRequest}
        /// </summary>
        /// <remarks>
        /// Updates a credit card in the customer wallet, dates in the past are accepted for non-prod environments
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateWalletCreditCardResponse</returns>
        System.Threading.Tasks.Task<UpdateWalletCreditCardResponse> UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreateAsync(string accept, string scopeId, string paymentMethodId, UpdateWalletCreditCardRequest body = default(UpdateWalletCreditCardRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a credit card in the customer wallet - {UpdateWalletCreditCardRequest}
        /// </summary>
        /// <remarks>
        /// Updates a credit card in the customer wallet, dates in the past are accepted for non-prod environments
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateWalletCreditCardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateWalletCreditCardResponse>> UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreateWithHttpInfoAsync(string accept, string scopeId, string paymentMethodId, UpdateWalletCreditCardRequest body = default(UpdateWalletCreditCardRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the default credit card in the customer wallet - {UpdateWalletDefaultCreditCardRequest}
        /// </summary>
        /// <remarks>
        /// Updates the default credit card in the customer wallet
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateWalletDefaultCreditCardResponse</returns>
        System.Threading.Tasks.Task<UpdateWalletDefaultCreditCardResponse> UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreateAsync(string accept, string scopeId, string paymentMethodId, UpdateWalletDefaultCreditCardRequest body = default(UpdateWalletDefaultCreditCardRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the default credit card in the customer wallet - {UpdateWalletDefaultCreditCardRequest}
        /// </summary>
        /// <remarks>
        /// Updates the default credit card in the customer wallet
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateWalletDefaultCreditCardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateWalletDefaultCreditCardResponse>> UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreateWithHttpInfoAsync(string accept, string scopeId, string paymentMethodId, UpdateWalletDefaultCreditCardRequest body = default(UpdateWalletDefaultCreditCardRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICdmvApi : ICdmvApiSync, ICdmvApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CdmvApi : ICdmvApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CdmvApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CdmvApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CdmvApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CdmvApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CdmvApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CdmvApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CdmvApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CdmvApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds a new payment method for a customer - {AddMonerisPaymentMethodRequest} Adds a new payment method for a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AddMonerisPaymentMethodResponse</returns>
        public AddMonerisPaymentMethodResponse AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPost(string accept, string scopeId, string customerId, AddMonerisPaymentMethodRequest body = default(AddMonerisPaymentMethodRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AddMonerisPaymentMethodResponse> localVarResponse = AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPostWithHttpInfo(accept, scopeId, customerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new payment method for a customer - {AddMonerisPaymentMethodRequest} Adds a new payment method for a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddMonerisPaymentMethodResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AddMonerisPaymentMethodResponse> AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPostWithHttpInfo(string accept, string scopeId, string customerId, AddMonerisPaymentMethodRequest body = default(AddMonerisPaymentMethodRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CdmvApi->AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AddMonerisPaymentMethodResponse>("/cdmv/monerisCanadaVaultProfile/{ScopeId}/{CustomerId}/addpaymentmethod", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a new payment method for a customer - {AddMonerisPaymentMethodRequest} Adds a new payment method for a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddMonerisPaymentMethodResponse</returns>
        public async System.Threading.Tasks.Task<AddMonerisPaymentMethodResponse> AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPostAsync(string accept, string scopeId, string customerId, AddMonerisPaymentMethodRequest body = default(AddMonerisPaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AddMonerisPaymentMethodResponse> localVarResponse = await AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPostWithHttpInfoAsync(accept, scopeId, customerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new payment method for a customer - {AddMonerisPaymentMethodRequest} Adds a new payment method for a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddMonerisPaymentMethodResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AddMonerisPaymentMethodResponse>> AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPostWithHttpInfoAsync(string accept, string scopeId, string customerId, AddMonerisPaymentMethodRequest body = default(AddMonerisPaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CdmvApi->AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AddMonerisPaymentMethodResponse>("/cdmv/monerisCanadaVaultProfile/{ScopeId}/{CustomerId}/addpaymentmethod", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMonerisPaymentMethodRequestmonerisCanadaVaultProfileScopeIdCustomerIdaddpaymentmethodPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsByUsernameRequest} Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AddOrUpdateProductAuthorizationsResponse</returns>
        public AddOrUpdateProductAuthorizationsResponse AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePost(string accept, string scopeId, AddOrUpdateProductAuthorizationsByUsernameRequest body = default(AddOrUpdateProductAuthorizationsByUsernameRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AddOrUpdateProductAuthorizationsResponse> localVarResponse = AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsByUsernameRequest} Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddOrUpdateProductAuthorizationsResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AddOrUpdateProductAuthorizationsResponse> AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePostWithHttpInfo(string accept, string scopeId, AddOrUpdateProductAuthorizationsByUsernameRequest body = default(AddOrUpdateProductAuthorizationsByUsernameRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AddOrUpdateProductAuthorizationsResponse>("/cdmv/productauthorizations/{ScopeId}/byUsername", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsByUsernameRequest} Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddOrUpdateProductAuthorizationsResponse</returns>
        public async System.Threading.Tasks.Task<AddOrUpdateProductAuthorizationsResponse> AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePostAsync(string accept, string scopeId, AddOrUpdateProductAuthorizationsByUsernameRequest body = default(AddOrUpdateProductAuthorizationsByUsernameRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AddOrUpdateProductAuthorizationsResponse> localVarResponse = await AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsByUsernameRequest} Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddOrUpdateProductAuthorizationsResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AddOrUpdateProductAuthorizationsResponse>> AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePostWithHttpInfoAsync(string accept, string scopeId, AddOrUpdateProductAuthorizationsByUsernameRequest body = default(AddOrUpdateProductAuthorizationsByUsernameRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AddOrUpdateProductAuthorizationsResponse>("/cdmv/productauthorizations/{ScopeId}/byUsername", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsRequest} Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AddOrUpdateProductAuthorizationsResponse</returns>
        public AddOrUpdateProductAuthorizationsResponse AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPost(string accept, string scopeId, string customerId, AddOrUpdateProductAuthorizationsRequest body = default(AddOrUpdateProductAuthorizationsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AddOrUpdateProductAuthorizationsResponse> localVarResponse = AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPostWithHttpInfo(accept, scopeId, customerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsRequest} Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddOrUpdateProductAuthorizationsResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AddOrUpdateProductAuthorizationsResponse> AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPostWithHttpInfo(string accept, string scopeId, string customerId, AddOrUpdateProductAuthorizationsRequest body = default(AddOrUpdateProductAuthorizationsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CdmvApi->AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AddOrUpdateProductAuthorizationsResponse>("/cdmv/productauthorizations/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsRequest} Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddOrUpdateProductAuthorizationsResponse</returns>
        public async System.Threading.Tasks.Task<AddOrUpdateProductAuthorizationsResponse> AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPostAsync(string accept, string scopeId, string customerId, AddOrUpdateProductAuthorizationsRequest body = default(AddOrUpdateProductAuthorizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AddOrUpdateProductAuthorizationsResponse> localVarResponse = await AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPostWithHttpInfoAsync(accept, scopeId, customerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new product authorizations or update if it already exists. - {AddOrUpdateProductAuthorizationsRequest} Add new or update product authorizations. For new authorizations, if no date is specified, then a default date will be given based on the default expiry configuration. If an authorization already exists, update its expiry date (if there is an expiry date in the request). If an add/update operation fails, no error will surface. The response contains only the what was added or successfully updated. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddOrUpdateProductAuthorizationsResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AddOrUpdateProductAuthorizationsResponse>> AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPostWithHttpInfoAsync(string accept, string scopeId, string customerId, AddOrUpdateProductAuthorizationsRequest body = default(AddOrUpdateProductAuthorizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CdmvApi->AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AddOrUpdateProductAuthorizationsResponse>("/cdmv/productauthorizations/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a customer - {CDMVCreateCustomerRequest} Creates a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        public Customer CDMVCreateCustomerRequestcustomerScopeIdPost(string accept, string scopeId, CDMVCreateCustomerRequest body = default(CDMVCreateCustomerRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = CDMVCreateCustomerRequestcustomerScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a customer - {CDMVCreateCustomerRequest} Creates a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> CDMVCreateCustomerRequestcustomerScopeIdPostWithHttpInfo(string accept, string scopeId, CDMVCreateCustomerRequest body = default(CDMVCreateCustomerRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->CDMVCreateCustomerRequestcustomerScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->CDMVCreateCustomerRequestcustomerScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Customer>("/cdmv/customer/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CDMVCreateCustomerRequestcustomerScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a customer - {CDMVCreateCustomerRequest} Creates a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CDMVCreateCustomerRequestcustomerScopeIdPostAsync(string accept, string scopeId, CDMVCreateCustomerRequest body = default(CDMVCreateCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = await CDMVCreateCustomerRequestcustomerScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a customer - {CDMVCreateCustomerRequest} Creates a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer>> CDMVCreateCustomerRequestcustomerScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CDMVCreateCustomerRequest body = default(CDMVCreateCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->CDMVCreateCustomerRequestcustomerScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->CDMVCreateCustomerRequestcustomerScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Customer>("/cdmv/customer/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CDMVCreateCustomerRequestcustomerScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends an email to a customer to continue its account creation for a clinic - {CDMVSelfServiceAccountCreationRequest} Sends an email to a customer to continue its account creation for a clinic
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SelfServiceAccountCreatedEvent</returns>
        public SelfServiceAccountCreatedEvent CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPost(string accept, string scopeId, CDMVSelfServiceAccountCreationRequest body = default(CDMVSelfServiceAccountCreationRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SelfServiceAccountCreatedEvent> localVarResponse = CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sends an email to a customer to continue its account creation for a clinic - {CDMVSelfServiceAccountCreationRequest} Sends an email to a customer to continue its account creation for a clinic
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SelfServiceAccountCreatedEvent</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SelfServiceAccountCreatedEvent> CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPostWithHttpInfo(string accept, string scopeId, CDMVSelfServiceAccountCreationRequest body = default(CDMVSelfServiceAccountCreationRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SelfServiceAccountCreatedEvent>("/cdmv/customer/{ScopeId}/self-service-account-creation-request", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends an email to a customer to continue its account creation for a clinic - {CDMVSelfServiceAccountCreationRequest} Sends an email to a customer to continue its account creation for a clinic
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SelfServiceAccountCreatedEvent</returns>
        public async System.Threading.Tasks.Task<SelfServiceAccountCreatedEvent> CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPostAsync(string accept, string scopeId, CDMVSelfServiceAccountCreationRequest body = default(CDMVSelfServiceAccountCreationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SelfServiceAccountCreatedEvent> localVarResponse = await CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sends an email to a customer to continue its account creation for a clinic - {CDMVSelfServiceAccountCreationRequest} Sends an email to a customer to continue its account creation for a clinic
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SelfServiceAccountCreatedEvent)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SelfServiceAccountCreatedEvent>> CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPostWithHttpInfoAsync(string accept, string scopeId, CDMVSelfServiceAccountCreationRequest body = default(CDMVSelfServiceAccountCreationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SelfServiceAccountCreatedEvent>("/cdmv/customer/{ScopeId}/self-service-account-creation-request", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CDMVSelfServiceAccountCreationRequestcustomerScopeIdselfServiceAccountCreationRequestPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate an encrypted Token and return info - {CDMVSelfServiceAccountCreationValidationRequest} Validate an encrypted Token and return info
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CDMVSelfServiceAccountValidationResponse</returns>
        public CDMVSelfServiceAccountValidationResponse CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePost(string accept, CDMVSelfServiceAccountCreationValidationRequest body = default(CDMVSelfServiceAccountCreationValidationRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CDMVSelfServiceAccountValidationResponse> localVarResponse = CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate an encrypted Token and return info - {CDMVSelfServiceAccountCreationValidationRequest} Validate an encrypted Token and return info
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CDMVSelfServiceAccountValidationResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CDMVSelfServiceAccountValidationResponse> CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePostWithHttpInfo(string accept, CDMVSelfServiceAccountCreationValidationRequest body = default(CDMVSelfServiceAccountCreationValidationRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CDMVSelfServiceAccountValidationResponse>("/cdmv/customer/self-service-account-creation-request/Validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate an encrypted Token and return info - {CDMVSelfServiceAccountCreationValidationRequest} Validate an encrypted Token and return info
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CDMVSelfServiceAccountValidationResponse</returns>
        public async System.Threading.Tasks.Task<CDMVSelfServiceAccountValidationResponse> CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePostAsync(string accept, CDMVSelfServiceAccountCreationValidationRequest body = default(CDMVSelfServiceAccountCreationValidationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CDMVSelfServiceAccountValidationResponse> localVarResponse = await CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate an encrypted Token and return info - {CDMVSelfServiceAccountCreationValidationRequest} Validate an encrypted Token and return info
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CDMVSelfServiceAccountValidationResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CDMVSelfServiceAccountValidationResponse>> CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePostWithHttpInfoAsync(string accept, CDMVSelfServiceAccountCreationValidationRequest body = default(CDMVSelfServiceAccountCreationValidationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CDMVSelfServiceAccountValidationResponse>("/cdmv/customer/self-service-account-creation-request/Validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CDMVSelfServiceAccountCreationValidationRequestcustomerselfServiceAccountCreationRequestValidatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code - {ClinicProductInformationImportRequest} Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicCode">The code of the clinic this import is for</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPost(string accept, string clinicCode, ClinicProductInformationImportRequest body = default(ClinicProductInformationImportRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPostWithHttpInfo(accept, clinicCode, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code - {ClinicProductInformationImportRequest} Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicCode">The code of the clinic this import is for</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPostWithHttpInfo(string accept, string clinicCode, ClinicProductInformationImportRequest body = default(ClinicProductInformationImportRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPost");

            // verify the required parameter 'clinicCode' is set
            if (clinicCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'clinicCode' when calling CdmvApi->ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ClinicCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(clinicCode)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/cdmv/dataexchange/products/{ClinicCode}/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code - {ClinicProductInformationImportRequest} Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicCode">The code of the clinic this import is for</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPostAsync(string accept, string clinicCode, ClinicProductInformationImportRequest body = default(ClinicProductInformationImportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPostWithHttpInfoAsync(accept, clinicCode, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code - {ClinicProductInformationImportRequest} Import Metadatas, Products, Prices, Categories and RelationShips using a clinic code
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicCode">The code of the clinic this import is for</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPostWithHttpInfoAsync(string accept, string clinicCode, ClinicProductInformationImportRequest body = default(ClinicProductInformationImportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPost");

            // verify the required parameter 'clinicCode' is set
            if (clinicCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'clinicCode' when calling CdmvApi->ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ClinicCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(clinicCode)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/cdmv/dataexchange/products/{ClinicCode}/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClinicProductInformationImportRequestdataexchangeproductsClinicCodeimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Confirm that shipments have been shipped, either fully or partially - {ConfirmShipmentRequest} Confirm that shipments have been shipped, either fully or partially. Split shipments are not allowed - so any line items that are not included in this request or any partial quantities will be considered as unshipped and will be cancelled. If no line items are provided, then the entire shipment is cancelled
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ConfirmShipmentResponse</returns>
        public ConfirmShipmentResponse ConfirmShipmentRequestordersconfirmshipmentPost(string accept, ConfirmShipmentRequest body = default(ConfirmShipmentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ConfirmShipmentResponse> localVarResponse = ConfirmShipmentRequestordersconfirmshipmentPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm that shipments have been shipped, either fully or partially - {ConfirmShipmentRequest} Confirm that shipments have been shipped, either fully or partially. Split shipments are not allowed - so any line items that are not included in this request or any partial quantities will be considered as unshipped and will be cancelled. If no line items are provided, then the entire shipment is cancelled
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ConfirmShipmentResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ConfirmShipmentResponse> ConfirmShipmentRequestordersconfirmshipmentPostWithHttpInfo(string accept, ConfirmShipmentRequest body = default(ConfirmShipmentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->ConfirmShipmentRequestordersconfirmshipmentPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfirmShipmentResponse>("/cdmv/orders/confirmshipment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmShipmentRequestordersconfirmshipmentPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Confirm that shipments have been shipped, either fully or partially - {ConfirmShipmentRequest} Confirm that shipments have been shipped, either fully or partially. Split shipments are not allowed - so any line items that are not included in this request or any partial quantities will be considered as unshipped and will be cancelled. If no line items are provided, then the entire shipment is cancelled
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfirmShipmentResponse</returns>
        public async System.Threading.Tasks.Task<ConfirmShipmentResponse> ConfirmShipmentRequestordersconfirmshipmentPostAsync(string accept, ConfirmShipmentRequest body = default(ConfirmShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ConfirmShipmentResponse> localVarResponse = await ConfirmShipmentRequestordersconfirmshipmentPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm that shipments have been shipped, either fully or partially - {ConfirmShipmentRequest} Confirm that shipments have been shipped, either fully or partially. Split shipments are not allowed - so any line items that are not included in this request or any partial quantities will be considered as unshipped and will be cancelled. If no line items are provided, then the entire shipment is cancelled
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfirmShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ConfirmShipmentResponse>> ConfirmShipmentRequestordersconfirmshipmentPostWithHttpInfoAsync(string accept, ConfirmShipmentRequest body = default(ConfirmShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->ConfirmShipmentRequestordersconfirmshipmentPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfirmShipmentResponse>("/cdmv/orders/confirmshipment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmShipmentRequestordersconfirmshipmentPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dectivate a product in the provided dependant scope - {DeactivateProductRequest} Deactivate a product in the provided dependant scope. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Product</returns>
        public Product DeactivateProductRequestproductsScopeIdProductIddeactivateCreate(string accept, string scopeId, string productId, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = DeactivateProductRequestproductsScopeIdProductIddeactivateCreateWithHttpInfo(accept, scopeId, productId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dectivate a product in the provided dependant scope - {DeactivateProductRequest} Deactivate a product in the provided dependant scope. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> DeactivateProductRequestproductsScopeIdProductIddeactivateCreateWithHttpInfo(string accept, string scopeId, string productId, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->DeactivateProductRequestproductsScopeIdProductIddeactivateCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->DeactivateProductRequestproductsScopeIdProductIddeactivateCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling CdmvApi->DeactivateProductRequestproductsScopeIdProductIddeactivateCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Product>("/cdmv/products/{ScopeId}/{ProductId}/deactivate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateProductRequestproductsScopeIdProductIddeactivateCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dectivate a product in the provided dependant scope - {DeactivateProductRequest} Deactivate a product in the provided dependant scope. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> DeactivateProductRequestproductsScopeIdProductIddeactivateCreateAsync(string accept, string scopeId, string productId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = await DeactivateProductRequestproductsScopeIdProductIddeactivateCreateWithHttpInfoAsync(accept, scopeId, productId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dectivate a product in the provided dependant scope - {DeactivateProductRequest} Deactivate a product in the provided dependant scope. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product>> DeactivateProductRequestproductsScopeIdProductIddeactivateCreateWithHttpInfoAsync(string accept, string scopeId, string productId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->DeactivateProductRequestproductsScopeIdProductIddeactivateCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->DeactivateProductRequestproductsScopeIdProductIddeactivateCreate");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling CdmvApi->DeactivateProductRequestproductsScopeIdProductIddeactivateCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Product>("/cdmv/products/{ScopeId}/{ProductId}/deactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateProductRequestproductsScopeIdProductIddeactivateCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a payment method from the customer wallet - {DeletePaymentMethodRequest} Deletes a payment method from the customer wallet
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentMethodId">Payment method Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <returns>DeletePaymentMethodResponse</returns>
        public DeletePaymentMethodResponse DeletePaymentMethodRequestcustomerScopeIdwalletDelete(string accept, string scopeId, string customerId = default(string), string paymentMethodId = default(string), string paymentProviderName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeletePaymentMethodResponse> localVarResponse = DeletePaymentMethodRequestcustomerScopeIdwalletDeleteWithHttpInfo(accept, scopeId, customerId, paymentMethodId, paymentProviderName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a payment method from the customer wallet - {DeletePaymentMethodRequest} Deletes a payment method from the customer wallet
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentMethodId">Payment method Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <returns>ApiResponse of DeletePaymentMethodResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeletePaymentMethodResponse> DeletePaymentMethodRequestcustomerScopeIdwalletDeleteWithHttpInfo(string accept, string scopeId, string customerId = default(string), string paymentMethodId = default(string), string paymentProviderName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->DeletePaymentMethodRequestcustomerScopeIdwalletDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->DeletePaymentMethodRequestcustomerScopeIdwalletDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CustomerId", customerId));
            }
            if (paymentMethodId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PaymentMethodId", paymentMethodId));
            }
            if (paymentProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PaymentProviderName", paymentProviderName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeletePaymentMethodResponse>("/cdmv/customer/{ScopeId}/wallet", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePaymentMethodRequestcustomerScopeIdwalletDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a payment method from the customer wallet - {DeletePaymentMethodRequest} Deletes a payment method from the customer wallet
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentMethodId">Payment method Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletePaymentMethodResponse</returns>
        public async System.Threading.Tasks.Task<DeletePaymentMethodResponse> DeletePaymentMethodRequestcustomerScopeIdwalletDeleteAsync(string accept, string scopeId, string customerId = default(string), string paymentMethodId = default(string), string paymentProviderName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeletePaymentMethodResponse> localVarResponse = await DeletePaymentMethodRequestcustomerScopeIdwalletDeleteWithHttpInfoAsync(accept, scopeId, customerId, paymentMethodId, paymentProviderName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a payment method from the customer wallet - {DeletePaymentMethodRequest} Deletes a payment method from the customer wallet
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentMethodId">Payment method Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletePaymentMethodResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeletePaymentMethodResponse>> DeletePaymentMethodRequestcustomerScopeIdwalletDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId = default(string), string paymentMethodId = default(string), string paymentProviderName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->DeletePaymentMethodRequestcustomerScopeIdwalletDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->DeletePaymentMethodRequestcustomerScopeIdwalletDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CustomerId", customerId));
            }
            if (paymentMethodId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PaymentMethodId", paymentMethodId));
            }
            if (paymentProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PaymentProviderName", paymentProviderName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletePaymentMethodResponse>("/cdmv/customer/{ScopeId}/wallet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePaymentMethodRequestcustomerScopeIdwalletDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing product authorization based on its Id - {DeleteProductAuthorizationRequest} Delete an existing product authorization based on its Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to delete (currently, this is the custom profile id of the product authorization)</param>
        /// <returns>DeleteProductAuthorizationResponse</returns>
        public DeleteProductAuthorizationResponse DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDelete(string accept, string scopeId, string id)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeleteProductAuthorizationResponse> localVarResponse = DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDeleteWithHttpInfo(accept, scopeId, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing product authorization based on its Id - {DeleteProductAuthorizationRequest} Delete an existing product authorization based on its Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to delete (currently, this is the custom profile id of the product authorization)</param>
        /// <returns>ApiResponse of DeleteProductAuthorizationResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeleteProductAuthorizationResponse> DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDeleteWithHttpInfo(string accept, string scopeId, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CdmvApi->DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteProductAuthorizationResponse>("/cdmv/productauthorization/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing product authorization based on its Id - {DeleteProductAuthorizationRequest} Delete an existing product authorization based on its Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to delete (currently, this is the custom profile id of the product authorization)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteProductAuthorizationResponse</returns>
        public async System.Threading.Tasks.Task<DeleteProductAuthorizationResponse> DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDeleteAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeleteProductAuthorizationResponse> localVarResponse = await DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDeleteWithHttpInfoAsync(accept, scopeId, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing product authorization based on its Id - {DeleteProductAuthorizationRequest} Delete an existing product authorization based on its Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to delete (currently, this is the custom profile id of the product authorization)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteProductAuthorizationResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeleteProductAuthorizationResponse>> DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDeleteWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CdmvApi->DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteProductAuthorizationResponse>("/cdmv/productauthorization/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductAuthorizationRequestproductauthorizationScopeIdIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Receives solr index documents to allow for custom index fields - {DocumentsRequest} Receives solr index documents to allow for custom index fields
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="authenticationToken">The secret authentication token</param>
        /// <param name="body"> (optional)</param>
        /// <returns>HttpResult</returns>
        public HttpResult DocumentsRequestsolrAuthenticationTokenPost(string accept, string authenticationToken, DocumentsRequest body = default(DocumentsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<HttpResult> localVarResponse = DocumentsRequestsolrAuthenticationTokenPostWithHttpInfo(accept, authenticationToken, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Receives solr index documents to allow for custom index fields - {DocumentsRequest} Receives solr index documents to allow for custom index fields
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="authenticationToken">The secret authentication token</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of HttpResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<HttpResult> DocumentsRequestsolrAuthenticationTokenPostWithHttpInfo(string accept, string authenticationToken, DocumentsRequest body = default(DocumentsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->DocumentsRequestsolrAuthenticationTokenPost");

            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'authenticationToken' when calling CdmvApi->DocumentsRequestsolrAuthenticationTokenPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AuthenticationToken", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(authenticationToken)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HttpResult>("/cdmv/solr/{AuthenticationToken}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentsRequestsolrAuthenticationTokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Receives solr index documents to allow for custom index fields - {DocumentsRequest} Receives solr index documents to allow for custom index fields
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="authenticationToken">The secret authentication token</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HttpResult</returns>
        public async System.Threading.Tasks.Task<HttpResult> DocumentsRequestsolrAuthenticationTokenPostAsync(string accept, string authenticationToken, DocumentsRequest body = default(DocumentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<HttpResult> localVarResponse = await DocumentsRequestsolrAuthenticationTokenPostWithHttpInfoAsync(accept, authenticationToken, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Receives solr index documents to allow for custom index fields - {DocumentsRequest} Receives solr index documents to allow for custom index fields
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="authenticationToken">The secret authentication token</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HttpResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<HttpResult>> DocumentsRequestsolrAuthenticationTokenPostWithHttpInfoAsync(string accept, string authenticationToken, DocumentsRequest body = default(DocumentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->DocumentsRequestsolrAuthenticationTokenPost");

            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'authenticationToken' when calling CdmvApi->DocumentsRequestsolrAuthenticationTokenPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AuthenticationToken", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(authenticationToken)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<HttpResult>("/cdmv/solr/{AuthenticationToken}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentsRequestsolrAuthenticationTokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all product authorizations by status for a given scope - {FindProductAuthorizationsByStatusRequest} Retrieves all product authorizations by status for a given scope. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindProductAuthorizationsByStatusResponse</returns>
        public FindProductAuthorizationsByStatusResponse FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPost(string accept, string scopeId, FindProductAuthorizationsByStatusRequest body = default(FindProductAuthorizationsByStatusRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindProductAuthorizationsByStatusResponse> localVarResponse = FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all product authorizations by status for a given scope - {FindProductAuthorizationsByStatusRequest} Retrieves all product authorizations by status for a given scope. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindProductAuthorizationsByStatusResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindProductAuthorizationsByStatusResponse> FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPostWithHttpInfo(string accept, string scopeId, FindProductAuthorizationsByStatusRequest body = default(FindProductAuthorizationsByStatusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindProductAuthorizationsByStatusResponse>("/cdmv/productauthorizations/{ScopeId}/find/byStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all product authorizations by status for a given scope - {FindProductAuthorizationsByStatusRequest} Retrieves all product authorizations by status for a given scope. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindProductAuthorizationsByStatusResponse</returns>
        public async System.Threading.Tasks.Task<FindProductAuthorizationsByStatusResponse> FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPostAsync(string accept, string scopeId, FindProductAuthorizationsByStatusRequest body = default(FindProductAuthorizationsByStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindProductAuthorizationsByStatusResponse> localVarResponse = await FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all product authorizations by status for a given scope - {FindProductAuthorizationsByStatusRequest} Retrieves all product authorizations by status for a given scope. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindProductAuthorizationsByStatusResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindProductAuthorizationsByStatusResponse>> FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPostWithHttpInfoAsync(string accept, string scopeId, FindProductAuthorizationsByStatusRequest body = default(FindProductAuthorizationsByStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FindProductAuthorizationsByStatusResponse>("/cdmv/productauthorizations/{ScopeId}/find/byStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindProductAuthorizationsByStatusRequestproductauthorizationsScopeIdfindbyStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest} This request is identical to the out of the box feature from OCC but will fetch the store display name as part of it&#39;s default behavior to work around an OCC missing limitation.Its signature is the same to minimize re-work should the OCC platform implement it in the future. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindStoresQueryResult</returns>
        public FindStoresQueryResult FindStoresRequeststoresScopeIdfindPost(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindStoresQueryResult> localVarResponse = FindStoresRequeststoresScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest} This request is identical to the out of the box feature from OCC but will fetch the store display name as part of it&#39;s default behavior to work around an OCC missing limitation.Its signature is the same to minimize re-work should the OCC platform implement it in the future. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindStoresQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindStoresQueryResult> FindStoresRequeststoresScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->FindStoresRequeststoresScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->FindStoresRequeststoresScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindStoresQueryResult>("/cdmv/stores/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindStoresRequeststoresScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest} This request is identical to the out of the box feature from OCC but will fetch the store display name as part of it&#39;s default behavior to work around an OCC missing limitation.Its signature is the same to minimize re-work should the OCC platform implement it in the future. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindStoresQueryResult</returns>
        public async System.Threading.Tasks.Task<FindStoresQueryResult> FindStoresRequeststoresScopeIdfindPostAsync(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindStoresQueryResult> localVarResponse = await FindStoresRequeststoresScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest} This request is identical to the out of the box feature from OCC but will fetch the store display name as part of it&#39;s default behavior to work around an OCC missing limitation.Its signature is the same to minimize re-work should the OCC platform implement it in the future. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindStoresQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindStoresQueryResult>> FindStoresRequeststoresScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->FindStoresRequeststoresScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->FindStoresRequeststoresScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FindStoresQueryResult>("/cdmv/stores/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindStoresRequeststoresScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the B2C site profile of a customer. - {GetB2CSiteProfileRequest} Get the B2C site profile of a customer. For new customers, a profile always exists, if a customer doesn&#39;t have a profile, it is assumed it has been invited by a clinic admin. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <returns>GetB2CSiteProfileResponse</returns>
        public GetB2CSiteProfileResponse GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGet(string accept, string scopeId, string customerId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetB2CSiteProfileResponse> localVarResponse = GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGetWithHttpInfo(accept, scopeId, customerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the B2C site profile of a customer. - {GetB2CSiteProfileRequest} Get the B2C site profile of a customer. For new customers, a profile always exists, if a customer doesn&#39;t have a profile, it is assumed it has been invited by a clinic admin. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <returns>ApiResponse of GetB2CSiteProfileResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetB2CSiteProfileResponse> GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGetWithHttpInfo(string accept, string scopeId, string customerId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CdmvApi->GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetB2CSiteProfileResponse>("/cdmv/b2csiteprofile/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the B2C site profile of a customer. - {GetB2CSiteProfileRequest} Get the B2C site profile of a customer. For new customers, a profile always exists, if a customer doesn&#39;t have a profile, it is assumed it has been invited by a clinic admin. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetB2CSiteProfileResponse</returns>
        public async System.Threading.Tasks.Task<GetB2CSiteProfileResponse> GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGetAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetB2CSiteProfileResponse> localVarResponse = await GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGetWithHttpInfoAsync(accept, scopeId, customerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the B2C site profile of a customer. - {GetB2CSiteProfileRequest} Get the B2C site profile of a customer. For new customers, a profile always exists, if a customer doesn&#39;t have a profile, it is assumed it has been invited by a clinic admin. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetB2CSiteProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetB2CSiteProfileResponse>> GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CdmvApi->GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetB2CSiteProfileResponse>("/cdmv/b2csiteprofile/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetB2CSiteProfileRequestb2csiteprofileScopeIdCustomerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information about the clinic a customer is associated to,using the customer&#39;s username to identify him. - {GetClinicInfoForCustomerByUsernameRequest} Returns information about the clinic a customer is associated to 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="username">The customer&#39;s username. (optional)</param>
        /// <returns>GetClinicInfoForCustomerResponse</returns>
        public GetClinicInfoForCustomerResponse GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGet(string accept, string username = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetClinicInfoForCustomerResponse> localVarResponse = GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGetWithHttpInfo(accept, username);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about the clinic a customer is associated to,using the customer&#39;s username to identify him. - {GetClinicInfoForCustomerByUsernameRequest} Returns information about the clinic a customer is associated to 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="username">The customer&#39;s username. (optional)</param>
        /// <returns>ApiResponse of GetClinicInfoForCustomerResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetClinicInfoForCustomerResponse> GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGetWithHttpInfo(string accept, string username = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Username", username));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetClinicInfoForCustomerResponse>("/cdmv/customer/byUsername/clinic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information about the clinic a customer is associated to,using the customer&#39;s username to identify him. - {GetClinicInfoForCustomerByUsernameRequest} Returns information about the clinic a customer is associated to 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="username">The customer&#39;s username. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetClinicInfoForCustomerResponse</returns>
        public async System.Threading.Tasks.Task<GetClinicInfoForCustomerResponse> GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGetAsync(string accept, string username = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetClinicInfoForCustomerResponse> localVarResponse = await GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGetWithHttpInfoAsync(accept, username, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about the clinic a customer is associated to,using the customer&#39;s username to identify him. - {GetClinicInfoForCustomerByUsernameRequest} Returns information about the clinic a customer is associated to 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="username">The customer&#39;s username. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetClinicInfoForCustomerResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetClinicInfoForCustomerResponse>> GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGetWithHttpInfoAsync(string accept, string username = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Username", username));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetClinicInfoForCustomerResponse>("/cdmv/customer/byUsername/clinic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClinicInfoForCustomerByUsernameRequestcustomerbyUsernameclinicGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information about the clinic a customer is associated to. - {GetClinicInfoForCustomerRequest} Returns information about the clinic a customer is associated to
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <returns>GetClinicInfoForCustomerResponse</returns>
        public GetClinicInfoForCustomerResponse GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGet(string accept, string customerId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetClinicInfoForCustomerResponse> localVarResponse = GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGetWithHttpInfo(accept, customerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about the clinic a customer is associated to. - {GetClinicInfoForCustomerRequest} Returns information about the clinic a customer is associated to
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <returns>ApiResponse of GetClinicInfoForCustomerResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetClinicInfoForCustomerResponse> GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGetWithHttpInfo(string accept, string customerId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CdmvApi->GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetClinicInfoForCustomerResponse>("/cdmv/customer/{CustomerId}/clinic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information about the clinic a customer is associated to. - {GetClinicInfoForCustomerRequest} Returns information about the clinic a customer is associated to
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetClinicInfoForCustomerResponse</returns>
        public async System.Threading.Tasks.Task<GetClinicInfoForCustomerResponse> GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGetAsync(string accept, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetClinicInfoForCustomerResponse> localVarResponse = await GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGetWithHttpInfoAsync(accept, customerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about the clinic a customer is associated to. - {GetClinicInfoForCustomerRequest} Returns information about the clinic a customer is associated to
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetClinicInfoForCustomerResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetClinicInfoForCustomerResponse>> GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGetWithHttpInfoAsync(string accept, string customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CdmvApi->GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetClinicInfoForCustomerResponse>("/cdmv/customer/{CustomerId}/clinic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClinicInfoForCustomerRequestcustomerCustomerIdclinicGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a clinic&#39;s information using its id - {GetClinicInfoRequest} Retrieves a clinic&#39;s information using its id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicId">The clinic identifier</param>
        /// <returns>ClinicInfo</returns>
        public ClinicInfo GetClinicInfoRequestclinicClinicIdGet(string accept, string clinicId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ClinicInfo> localVarResponse = GetClinicInfoRequestclinicClinicIdGetWithHttpInfo(accept, clinicId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a clinic&#39;s information using its id - {GetClinicInfoRequest} Retrieves a clinic&#39;s information using its id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicId">The clinic identifier</param>
        /// <returns>ApiResponse of ClinicInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ClinicInfo> GetClinicInfoRequestclinicClinicIdGetWithHttpInfo(string accept, string clinicId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetClinicInfoRequestclinicClinicIdGet");

            // verify the required parameter 'clinicId' is set
            if (clinicId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'clinicId' when calling CdmvApi->GetClinicInfoRequestclinicClinicIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ClinicId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(clinicId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ClinicInfo>("/cdmv/clinic/{ClinicId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClinicInfoRequestclinicClinicIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a clinic&#39;s information using its id - {GetClinicInfoRequest} Retrieves a clinic&#39;s information using its id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicId">The clinic identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClinicInfo</returns>
        public async System.Threading.Tasks.Task<ClinicInfo> GetClinicInfoRequestclinicClinicIdGetAsync(string accept, string clinicId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ClinicInfo> localVarResponse = await GetClinicInfoRequestclinicClinicIdGetWithHttpInfoAsync(accept, clinicId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a clinic&#39;s information using its id - {GetClinicInfoRequest} Retrieves a clinic&#39;s information using its id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="clinicId">The clinic identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClinicInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ClinicInfo>> GetClinicInfoRequestclinicClinicIdGetWithHttpInfoAsync(string accept, string clinicId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetClinicInfoRequestclinicClinicIdGet");

            // verify the required parameter 'clinicId' is set
            if (clinicId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'clinicId' when calling CdmvApi->GetClinicInfoRequestclinicClinicIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ClinicId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(clinicId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ClinicInfo>("/cdmv/clinic/{ClinicId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClinicInfoRequestclinicClinicIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a customer wallet - {GetCustomerWalletRequest} Gets a customer wallet
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <returns>GetCustomerWalletResponse</returns>
        public GetCustomerWalletResponse GetCustomerWalletRequestcustomerScopeIdwalletGet(string accept, string scopeId, string customerId = default(string), string paymentProviderName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCustomerWalletResponse> localVarResponse = GetCustomerWalletRequestcustomerScopeIdwalletGetWithHttpInfo(accept, scopeId, customerId, paymentProviderName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a customer wallet - {GetCustomerWalletRequest} Gets a customer wallet
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <returns>ApiResponse of GetCustomerWalletResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCustomerWalletResponse> GetCustomerWalletRequestcustomerScopeIdwalletGetWithHttpInfo(string accept, string scopeId, string customerId = default(string), string paymentProviderName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetCustomerWalletRequestcustomerScopeIdwalletGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetCustomerWalletRequestcustomerScopeIdwalletGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CustomerId", customerId));
            }
            if (paymentProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PaymentProviderName", paymentProviderName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCustomerWalletResponse>("/cdmv/customer/{ScopeId}/wallet", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerWalletRequestcustomerScopeIdwalletGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a customer wallet - {GetCustomerWalletRequest} Gets a customer wallet
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomerWalletResponse</returns>
        public async System.Threading.Tasks.Task<GetCustomerWalletResponse> GetCustomerWalletRequestcustomerScopeIdwalletGetAsync(string accept, string scopeId, string customerId = default(string), string paymentProviderName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCustomerWalletResponse> localVarResponse = await GetCustomerWalletRequestcustomerScopeIdwalletGetWithHttpInfoAsync(accept, scopeId, customerId, paymentProviderName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a customer wallet - {GetCustomerWalletRequest} Gets a customer wallet
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">Customer Id (optional)</param>
        /// <param name="paymentProviderName">Payment provider name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomerWalletResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCustomerWalletResponse>> GetCustomerWalletRequestcustomerScopeIdwalletGetWithHttpInfoAsync(string accept, string scopeId, string customerId = default(string), string paymentProviderName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetCustomerWalletRequestcustomerScopeIdwalletGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetCustomerWalletRequestcustomerScopeIdwalletGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CustomerId", customerId));
            }
            if (paymentProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PaymentProviderName", paymentProviderName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCustomerWalletResponse>("/cdmv/customer/{ScopeId}/wallet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerWalletRequestcustomerScopeIdwalletGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of Customer KPI. - {GetCustomersKpiRequest} Get the list of Customer KPI.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>GetAdminKpiResponse</returns>
        public GetAdminKpiResponse GetCustomersKpiRequestcustomerskpiScopeIdGet(string accept, string scopeId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetAdminKpiResponse> localVarResponse = GetCustomersKpiRequestcustomerskpiScopeIdGetWithHttpInfo(accept, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of Customer KPI. - {GetCustomersKpiRequest} Get the list of Customer KPI.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>ApiResponse of GetAdminKpiResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetAdminKpiResponse> GetCustomersKpiRequestcustomerskpiScopeIdGetWithHttpInfo(string accept, string scopeId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetCustomersKpiRequestcustomerskpiScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetCustomersKpiRequestcustomerskpiScopeIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAdminKpiResponse>("/cdmv/customerskpi/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomersKpiRequestcustomerskpiScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of Customer KPI. - {GetCustomersKpiRequest} Get the list of Customer KPI.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAdminKpiResponse</returns>
        public async System.Threading.Tasks.Task<GetAdminKpiResponse> GetCustomersKpiRequestcustomerskpiScopeIdGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetAdminKpiResponse> localVarResponse = await GetCustomersKpiRequestcustomerskpiScopeIdGetWithHttpInfoAsync(accept, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of Customer KPI. - {GetCustomersKpiRequest} Get the list of Customer KPI.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAdminKpiResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetAdminKpiResponse>> GetCustomersKpiRequestcustomerskpiScopeIdGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetCustomersKpiRequestcustomerskpiScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetCustomersKpiRequestcustomerskpiScopeIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAdminKpiResponse>("/cdmv/customerskpi/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomersKpiRequestcustomerskpiScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all feature flags that applies to a given scope applying scope inheritance. - {GetFeatureFlagsRequest} Retrieves all feature flags that applies to a given scope applying scope inheritance. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>GetFeatureFlagsResponse</returns>
        public GetFeatureFlagsResponse GetFeatureFlagsRequestfeatureflagsScopeIdGet(string accept, string scopeId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFeatureFlagsResponse> localVarResponse = GetFeatureFlagsRequestfeatureflagsScopeIdGetWithHttpInfo(accept, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all feature flags that applies to a given scope applying scope inheritance. - {GetFeatureFlagsRequest} Retrieves all feature flags that applies to a given scope applying scope inheritance. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>ApiResponse of GetFeatureFlagsResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFeatureFlagsResponse> GetFeatureFlagsRequestfeatureflagsScopeIdGetWithHttpInfo(string accept, string scopeId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetFeatureFlagsRequestfeatureflagsScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetFeatureFlagsRequestfeatureflagsScopeIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetFeatureFlagsResponse>("/cdmv/featureflags/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeatureFlagsRequestfeatureflagsScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all feature flags that applies to a given scope applying scope inheritance. - {GetFeatureFlagsRequest} Retrieves all feature flags that applies to a given scope applying scope inheritance. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFeatureFlagsResponse</returns>
        public async System.Threading.Tasks.Task<GetFeatureFlagsResponse> GetFeatureFlagsRequestfeatureflagsScopeIdGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFeatureFlagsResponse> localVarResponse = await GetFeatureFlagsRequestfeatureflagsScopeIdGetWithHttpInfoAsync(accept, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all feature flags that applies to a given scope applying scope inheritance. - {GetFeatureFlagsRequest} Retrieves all feature flags that applies to a given scope applying scope inheritance. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFeatureFlagsResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFeatureFlagsResponse>> GetFeatureFlagsRequestfeatureflagsScopeIdGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetFeatureFlagsRequestfeatureflagsScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetFeatureFlagsRequestfeatureflagsScopeIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetFeatureFlagsResponse>("/cdmv/featureflags/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeatureFlagsRequestfeatureflagsScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the payment capture settings for Moneris - {GetMonerisCaptureSettingsRequest} Gets the payment capture settings for Moneris
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentProviderName">Payment provider name</param>
        /// <returns>GetMonerisCaptureSettingsResponse</returns>
        public GetMonerisCaptureSettingsResponse GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGet(string accept, string scopeId, string paymentProviderName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetMonerisCaptureSettingsResponse> localVarResponse = GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGetWithHttpInfo(accept, scopeId, paymentProviderName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the payment capture settings for Moneris - {GetMonerisCaptureSettingsRequest} Gets the payment capture settings for Moneris
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentProviderName">Payment provider name</param>
        /// <returns>ApiResponse of GetMonerisCaptureSettingsResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetMonerisCaptureSettingsResponse> GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGetWithHttpInfo(string accept, string scopeId, string paymentProviderName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGet");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CdmvApi->GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMonerisCaptureSettingsResponse>("/cdmv/payment/{ScopeId}/moneris/{PaymentProviderName}/captureSettings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the payment capture settings for Moneris - {GetMonerisCaptureSettingsRequest} Gets the payment capture settings for Moneris
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentProviderName">Payment provider name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMonerisCaptureSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetMonerisCaptureSettingsResponse> GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGetAsync(string accept, string scopeId, string paymentProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetMonerisCaptureSettingsResponse> localVarResponse = await GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGetWithHttpInfoAsync(accept, scopeId, paymentProviderName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the payment capture settings for Moneris - {GetMonerisCaptureSettingsRequest} Gets the payment capture settings for Moneris
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentProviderName">Payment provider name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMonerisCaptureSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetMonerisCaptureSettingsResponse>> GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGetWithHttpInfoAsync(string accept, string scopeId, string paymentProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGet");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CdmvApi->GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMonerisCaptureSettingsResponse>("/cdmv/payment/{ScopeId}/moneris/{PaymentProviderName}/captureSettings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMonerisCaptureSettingsRequestpaymentScopeIdmonerisPaymentProviderNamecaptureSettingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of all B2C accounts waiting for approval. - {GetPendingApprovalAccountsRequest} Get the list of all B2C accounts waiting for approval.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includePendingOrderCount">Whether to include the number of pending orders for each customer (optional)</param>
        /// <param name="resultsPerPage">The maximum number of results that can be returned at once. Defaults to 50 (optional)</param>
        /// <param name="startingPage">If the results are returned on multiple pages, this indicates which page of results to return (optional)</param>
        /// <returns>GetPendingApprovalAccountsResponse</returns>
        public GetPendingApprovalAccountsResponse GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGet(string accept, string scopeId, bool? includePendingOrderCount = default(bool?), int? resultsPerPage = default(int?), int? startingPage = default(int?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetPendingApprovalAccountsResponse> localVarResponse = GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGetWithHttpInfo(accept, scopeId, includePendingOrderCount, resultsPerPage, startingPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all B2C accounts waiting for approval. - {GetPendingApprovalAccountsRequest} Get the list of all B2C accounts waiting for approval.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includePendingOrderCount">Whether to include the number of pending orders for each customer (optional)</param>
        /// <param name="resultsPerPage">The maximum number of results that can be returned at once. Defaults to 50 (optional)</param>
        /// <param name="startingPage">If the results are returned on multiple pages, this indicates which page of results to return (optional)</param>
        /// <returns>ApiResponse of GetPendingApprovalAccountsResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetPendingApprovalAccountsResponse> GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGetWithHttpInfo(string accept, string scopeId, bool? includePendingOrderCount = default(bool?), int? resultsPerPage = default(int?), int? startingPage = default(int?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includePendingOrderCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePendingOrderCount", includePendingOrderCount));
            }
            if (resultsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ResultsPerPage", resultsPerPage));
            }
            if (startingPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingPage", startingPage));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPendingApprovalAccountsResponse>("/cdmv/b2csiteprofile/{ScopeId}/pendingaccounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of all B2C accounts waiting for approval. - {GetPendingApprovalAccountsRequest} Get the list of all B2C accounts waiting for approval.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includePendingOrderCount">Whether to include the number of pending orders for each customer (optional)</param>
        /// <param name="resultsPerPage">The maximum number of results that can be returned at once. Defaults to 50 (optional)</param>
        /// <param name="startingPage">If the results are returned on multiple pages, this indicates which page of results to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPendingApprovalAccountsResponse</returns>
        public async System.Threading.Tasks.Task<GetPendingApprovalAccountsResponse> GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGetAsync(string accept, string scopeId, bool? includePendingOrderCount = default(bool?), int? resultsPerPage = default(int?), int? startingPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetPendingApprovalAccountsResponse> localVarResponse = await GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGetWithHttpInfoAsync(accept, scopeId, includePendingOrderCount, resultsPerPage, startingPage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all B2C accounts waiting for approval. - {GetPendingApprovalAccountsRequest} Get the list of all B2C accounts waiting for approval.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includePendingOrderCount">Whether to include the number of pending orders for each customer (optional)</param>
        /// <param name="resultsPerPage">The maximum number of results that can be returned at once. Defaults to 50 (optional)</param>
        /// <param name="startingPage">If the results are returned on multiple pages, this indicates which page of results to return (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPendingApprovalAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetPendingApprovalAccountsResponse>> GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGetWithHttpInfoAsync(string accept, string scopeId, bool? includePendingOrderCount = default(bool?), int? resultsPerPage = default(int?), int? startingPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includePendingOrderCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePendingOrderCount", includePendingOrderCount));
            }
            if (resultsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ResultsPerPage", resultsPerPage));
            }
            if (startingPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingPage", startingPage));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPendingApprovalAccountsResponse>("/cdmv/b2csiteprofile/{ScopeId}/pendingaccounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPendingApprovalAccountsRequestb2csiteprofileScopeIdpendingaccountsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all product authorizations associated to a customer, identified by its username - {GetProductAuthorizationsByUsernameRequest} Retrieves all product authorizations associated to a customer, identified by its username. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username (optional)</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <returns>GetProductAuthorizationsResponse</returns>
        public GetProductAuthorizationsResponse GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGet(string accept, string scopeId, string username = default(string), bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductAuthorizationsResponse> localVarResponse = GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGetWithHttpInfo(accept, scopeId, username, includeProductDetails, includeVariants, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all product authorizations associated to a customer, identified by its username - {GetProductAuthorizationsByUsernameRequest} Retrieves all product authorizations associated to a customer, identified by its username. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username (optional)</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <returns>ApiResponse of GetProductAuthorizationsResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductAuthorizationsResponse> GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGetWithHttpInfo(string accept, string scopeId, string username = default(string), bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Username", username));
            }
            if (includeProductDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeProductDetails", includeProductDetails));
            }
            if (includeVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeVariants", includeVariants));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProductAuthorizationsResponse>("/cdmv/productauthorizations/{ScopeId}/byUsername", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all product authorizations associated to a customer, identified by its username - {GetProductAuthorizationsByUsernameRequest} Retrieves all product authorizations associated to a customer, identified by its username. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username (optional)</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductAuthorizationsResponse</returns>
        public async System.Threading.Tasks.Task<GetProductAuthorizationsResponse> GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGetAsync(string accept, string scopeId, string username = default(string), bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductAuthorizationsResponse> localVarResponse = await GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGetWithHttpInfoAsync(accept, scopeId, username, includeProductDetails, includeVariants, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all product authorizations associated to a customer, identified by its username - {GetProductAuthorizationsByUsernameRequest} Retrieves all product authorizations associated to a customer, identified by its username. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username (optional)</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductAuthorizationsResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductAuthorizationsResponse>> GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGetWithHttpInfoAsync(string accept, string scopeId, string username = default(string), bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Username", username));
            }
            if (includeProductDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeProductDetails", includeProductDetails));
            }
            if (includeVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeVariants", includeVariants));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProductAuthorizationsResponse>("/cdmv/productauthorizations/{ScopeId}/byUsername", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all product authorizations associated to a customer - {GetProductAuthorizationsRequest} Retrieves all product authorizations associated to a customer. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <param name="phoneNumber">The customer&#39;s phone number (optional)</param>
        /// <returns>GetProductAuthorizationsResponse</returns>
        public GetProductAuthorizationsResponse GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGet(string accept, string scopeId, string customerId, bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string), string phoneNumber = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductAuthorizationsResponse> localVarResponse = GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGetWithHttpInfo(accept, scopeId, customerId, includeProductDetails, includeVariants, cultureName, phoneNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all product authorizations associated to a customer - {GetProductAuthorizationsRequest} Retrieves all product authorizations associated to a customer. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <param name="phoneNumber">The customer&#39;s phone number (optional)</param>
        /// <returns>ApiResponse of GetProductAuthorizationsResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductAuthorizationsResponse> GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGetWithHttpInfo(string accept, string scopeId, string customerId, bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string), string phoneNumber = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CdmvApi->GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (includeProductDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeProductDetails", includeProductDetails));
            }
            if (includeVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeVariants", includeVariants));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (phoneNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PhoneNumber", phoneNumber));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProductAuthorizationsResponse>("/cdmv/productauthorizations/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all product authorizations associated to a customer - {GetProductAuthorizationsRequest} Retrieves all product authorizations associated to a customer. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <param name="phoneNumber">The customer&#39;s phone number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductAuthorizationsResponse</returns>
        public async System.Threading.Tasks.Task<GetProductAuthorizationsResponse> GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGetAsync(string accept, string scopeId, string customerId, bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string), string phoneNumber = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductAuthorizationsResponse> localVarResponse = await GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGetWithHttpInfoAsync(accept, scopeId, customerId, includeProductDetails, includeVariants, cultureName, phoneNumber, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all product authorizations associated to a customer - {GetProductAuthorizationsRequest} Retrieves all product authorizations associated to a customer. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="includeProductDetails">Whether to include the details of the products (optional)</param>
        /// <param name="includeVariants">Whether to include the variants of the authorized products. IncludeProductDetails must be set to true for this to be considered (optional)</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in (optional)</param>
        /// <param name="phoneNumber">The customer&#39;s phone number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductAuthorizationsResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetProductAuthorizationsResponse>> GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, bool? includeProductDetails = default(bool?), bool? includeVariants = default(bool?), string cultureName = default(string), string phoneNumber = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CdmvApi->GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (includeProductDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeProductDetails", includeProductDetails));
            }
            if (includeVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeVariants", includeVariants));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (phoneNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "PhoneNumber", phoneNumber));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProductAuthorizationsResponse>("/cdmv/productauthorizations/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return CSV report for inactive products of each scope - {InactiveProductsReportRequest} Return CSV report for inactive products. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in</param>
        /// <returns>Product</returns>
        public Product InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGet(string accept, string scopeId, string cultureName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGetWithHttpInfo(accept, scopeId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return CSV report for inactive products of each scope - {InactiveProductsReportRequest} Return CSV report for inactive products. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in</param>
        /// <returns>ApiResponse of Product</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGetWithHttpInfo(string accept, string scopeId, string cultureName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CdmvApi->InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Product>("/cdmv/reports/products/{ScopeId}/{CultureName}/deactivated", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return CSV report for inactive products of each scope - {InactiveProductsReportRequest} Return CSV report for inactive products. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGetAsync(string accept, string scopeId, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = await InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGetWithHttpInfoAsync(accept, scopeId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return CSV report for inactive products of each scope - {InactiveProductsReportRequest} Return CSV report for inactive products. 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name which dictates in which language localized values are returned in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product>> InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGetWithHttpInfoAsync(string accept, string scopeId, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CdmvApi->InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Product>("/cdmv/reports/products/{ScopeId}/{CultureName}/deactivated", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InactiveProductsReportRequestreportsproductsScopeIdCultureNamedeactivatedGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends an email invitation to a new customer to create an account for a clinic - {InviteNewCustomerRequest} Sends an email invitation to a new customer to create an account for a clinic
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void InviteNewCustomerRequestcustomerScopeIdinvitePost(string accept, string scopeId, InviteNewCustomerRequest body = default(InviteNewCustomerRequest))
        {
            InviteNewCustomerRequestcustomerScopeIdinvitePostWithHttpInfo(accept, scopeId, body);
        }

        /// <summary>
        /// Sends an email invitation to a new customer to create an account for a clinic - {InviteNewCustomerRequest} Sends an email invitation to a new customer to create an account for a clinic
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> InviteNewCustomerRequestcustomerScopeIdinvitePostWithHttpInfo(string accept, string scopeId, InviteNewCustomerRequest body = default(InviteNewCustomerRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->InviteNewCustomerRequestcustomerScopeIdinvitePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->InviteNewCustomerRequestcustomerScopeIdinvitePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cdmv/customer/{ScopeId}/invite", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteNewCustomerRequestcustomerScopeIdinvitePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends an email invitation to a new customer to create an account for a clinic - {InviteNewCustomerRequest} Sends an email invitation to a new customer to create an account for a clinic
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InviteNewCustomerRequestcustomerScopeIdinvitePostAsync(string accept, string scopeId, InviteNewCustomerRequest body = default(InviteNewCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await InviteNewCustomerRequestcustomerScopeIdinvitePostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Sends an email invitation to a new customer to create an account for a clinic - {InviteNewCustomerRequest} Sends an email invitation to a new customer to create an account for a clinic
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> InviteNewCustomerRequestcustomerScopeIdinvitePostWithHttpInfoAsync(string accept, string scopeId, InviteNewCustomerRequest body = default(InviteNewCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->InviteNewCustomerRequestcustomerScopeIdinvitePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->InviteNewCustomerRequestcustomerScopeIdinvitePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cdmv/customer/{ScopeId}/invite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteNewCustomerRequestcustomerScopeIdinvitePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends an email invitation to a new customer to create an account associated with and organization - {InviteNewOrganizationalCustomerRequest} Sends an email invitation to a new customer to create an account associated with and organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organizations unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePost(string accept, string scopeId, string organizationId, InviteNewOrganizationalCustomerRequest body = default(InviteNewOrganizationalCustomerRequest))
        {
            InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePostWithHttpInfo(accept, scopeId, organizationId, body);
        }

        /// <summary>
        /// Sends an email invitation to a new customer to create an account associated with and organization - {InviteNewOrganizationalCustomerRequest} Sends an email invitation to a new customer to create an account associated with and organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organizations unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePostWithHttpInfo(string accept, string scopeId, string organizationId, InviteNewOrganizationalCustomerRequest body = default(InviteNewOrganizationalCustomerRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePost");

            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'organizationId' when calling CdmvApi->InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrganizationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cdmv/customer/{ScopeId}/{OrganizationId}/invite", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends an email invitation to a new customer to create an account associated with and organization - {InviteNewOrganizationalCustomerRequest} Sends an email invitation to a new customer to create an account associated with and organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organizations unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePostAsync(string accept, string scopeId, string organizationId, InviteNewOrganizationalCustomerRequest body = default(InviteNewOrganizationalCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePostWithHttpInfoAsync(accept, scopeId, organizationId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Sends an email invitation to a new customer to create an account associated with and organization - {InviteNewOrganizationalCustomerRequest} Sends an email invitation to a new customer to create an account associated with and organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organizations unique identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePostWithHttpInfoAsync(string accept, string scopeId, string organizationId, InviteNewOrganizationalCustomerRequest body = default(InviteNewOrganizationalCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePost");

            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'organizationId' when calling CdmvApi->InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrganizationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cdmv/customer/{ScopeId}/{OrganizationId}/invite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteNewOrganizationalCustomerRequestcustomerScopeIdOrganizationIdinvitePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends to CDMV the invoice for a given order - {InvoiceOrderToCDMVRequest} Sends to CDMV the invoice for a given order. A note is added on the order to indicate the invoice was requested.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InvoiceOrderToCDMVResponse</returns>
        public InvoiceOrderToCDMVResponse InvoiceOrderToCDMVRequestordersinvoiceToCDMVPost(string accept, InvoiceOrderToCDMVRequest body = default(InvoiceOrderToCDMVRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InvoiceOrderToCDMVResponse> localVarResponse = InvoiceOrderToCDMVRequestordersinvoiceToCDMVPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sends to CDMV the invoice for a given order - {InvoiceOrderToCDMVRequest} Sends to CDMV the invoice for a given order. A note is added on the order to indicate the invoice was requested.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InvoiceOrderToCDMVResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InvoiceOrderToCDMVResponse> InvoiceOrderToCDMVRequestordersinvoiceToCDMVPostWithHttpInfo(string accept, InvoiceOrderToCDMVRequest body = default(InvoiceOrderToCDMVRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->InvoiceOrderToCDMVRequestordersinvoiceToCDMVPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InvoiceOrderToCDMVResponse>("/cdmv/orders/invoiceToCDMV", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceOrderToCDMVRequestordersinvoiceToCDMVPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends to CDMV the invoice for a given order - {InvoiceOrderToCDMVRequest} Sends to CDMV the invoice for a given order. A note is added on the order to indicate the invoice was requested.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceOrderToCDMVResponse</returns>
        public async System.Threading.Tasks.Task<InvoiceOrderToCDMVResponse> InvoiceOrderToCDMVRequestordersinvoiceToCDMVPostAsync(string accept, InvoiceOrderToCDMVRequest body = default(InvoiceOrderToCDMVRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InvoiceOrderToCDMVResponse> localVarResponse = await InvoiceOrderToCDMVRequestordersinvoiceToCDMVPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sends to CDMV the invoice for a given order - {InvoiceOrderToCDMVRequest} Sends to CDMV the invoice for a given order. A note is added on the order to indicate the invoice was requested.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceOrderToCDMVResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InvoiceOrderToCDMVResponse>> InvoiceOrderToCDMVRequestordersinvoiceToCDMVPostWithHttpInfoAsync(string accept, InvoiceOrderToCDMVRequest body = default(InvoiceOrderToCDMVRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->InvoiceOrderToCDMVRequestordersinvoiceToCDMVPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InvoiceOrderToCDMVResponse>("/cdmv/orders/invoiceToCDMV", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceOrderToCDMVRequestordersinvoiceToCDMVPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removed activation overrride in the provided dependant scope - {RemoveActivationOverrideRequest} Removed activation overrride the provided dependant scope. If the product was disabled this restores the inheritance from the sales scope activation.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <returns>Product</returns>
        public Product RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDelete(string accept, string scopeId, string productId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDeleteWithHttpInfo(accept, scopeId, productId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removed activation overrride in the provided dependant scope - {RemoveActivationOverrideRequest} Removed activation overrride the provided dependant scope. If the product was disabled this restores the inheritance from the sales scope activation.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <returns>ApiResponse of Product</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDeleteWithHttpInfo(string accept, string scopeId, string productId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDelete");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling CdmvApi->RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Product>("/cdmv/products/{ScopeId}/{ProductId}/removeActivationOverride", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removed activation overrride in the provided dependant scope - {RemoveActivationOverrideRequest} Removed activation overrride the provided dependant scope. If the product was disabled this restores the inheritance from the sales scope activation.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDeleteAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product> localVarResponse = await RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDeleteWithHttpInfoAsync(accept, scopeId, productId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removed activation overrride in the provided dependant scope - {RemoveActivationOverrideRequest} Removed activation overrride the provided dependant scope. If the product was disabled this restores the inheritance from the sales scope activation.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="productId">The unique product Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Product>> RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDeleteWithHttpInfoAsync(string accept, string scopeId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDelete");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling CdmvApi->RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Product>("/cdmv/products/{ScopeId}/{ProductId}/removeActivationOverride", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveActivationOverrideRequestproductsScopeIdProductIdremoveActivationOverrideDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsByUsernameRequest} Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username. (optional)</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <returns>RemoveProductAuthorizationsResponse</returns>
        public RemoveProductAuthorizationsResponse RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDelete(string accept, string scopeId, string username = default(string), List<string> productIds = default(List<string>))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RemoveProductAuthorizationsResponse> localVarResponse = RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDeleteWithHttpInfo(accept, scopeId, username, productIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsByUsernameRequest} Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username. (optional)</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <returns>ApiResponse of RemoveProductAuthorizationsResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RemoveProductAuthorizationsResponse> RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDeleteWithHttpInfo(string accept, string scopeId, string username = default(string), List<string> productIds = default(List<string>))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Username", username));
            }
            if (productIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "ProductIds", productIds));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveProductAuthorizationsResponse>("/cdmv/productauthorizations/{ScopeId}/byUsername", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsByUsernameRequest} Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username. (optional)</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveProductAuthorizationsResponse</returns>
        public async System.Threading.Tasks.Task<RemoveProductAuthorizationsResponse> RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDeleteAsync(string accept, string scopeId, string username = default(string), List<string> productIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RemoveProductAuthorizationsResponse> localVarResponse = await RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDeleteWithHttpInfoAsync(accept, scopeId, username, productIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsByUsernameRequest} Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="username">Customer&#39;s username. (optional)</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveProductAuthorizationsResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RemoveProductAuthorizationsResponse>> RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDeleteWithHttpInfoAsync(string accept, string scopeId, string username = default(string), List<string> productIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Username", username));
            }
            if (productIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "ProductIds", productIds));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveProductAuthorizationsResponse>("/cdmv/productauthorizations/{ScopeId}/byUsername", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProductAuthorizationsByUsernameRequestproductauthorizationsScopeIdbyUsernameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsRequest} Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <returns>RemoveProductAuthorizationsResponse</returns>
        public RemoveProductAuthorizationsResponse RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDelete(string accept, string scopeId, string customerId, List<string> productIds = default(List<string>))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RemoveProductAuthorizationsResponse> localVarResponse = RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDeleteWithHttpInfo(accept, scopeId, customerId, productIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsRequest} Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <returns>ApiResponse of RemoveProductAuthorizationsResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RemoveProductAuthorizationsResponse> RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDeleteWithHttpInfo(string accept, string scopeId, string customerId, List<string> productIds = default(List<string>))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CdmvApi->RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (productIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "ProductIds", productIds));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveProductAuthorizationsResponse>("/cdmv/productauthorizations/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsRequest} Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveProductAuthorizationsResponse</returns>
        public async System.Threading.Tasks.Task<RemoveProductAuthorizationsResponse> RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDeleteAsync(string accept, string scopeId, string customerId, List<string> productIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RemoveProductAuthorizationsResponse> localVarResponse = await RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDeleteWithHttpInfoAsync(accept, scopeId, customerId, productIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove product authorizations - {RemoveProductAuthorizationsRequest} Remove product authorizations. If a delete operation fails, it will do so silently.The response contains only the product ids that were removed successfully. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The customer&#39;s unique identifier</param>
        /// <param name="productIds">List of product ids matching product authorizations to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveProductAuthorizationsResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<RemoveProductAuthorizationsResponse>> RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, List<string> productIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CdmvApi->RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (productIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "ProductIds", productIds));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveProductAuthorizationsResponse>("/cdmv/productauthorizations/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProductAuthorizationsRequestproductauthorizationsScopeIdCustomerIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a B2C site profile to complete the customer account approval. - {UpdatePendingApprovalAccountRequest} The ID is the guid of the B2C site profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The ID of the B2C site profile to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdatePendingApprovalAccountResponse</returns>
        public UpdatePendingApprovalAccountResponse UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreate(string accept, string scopeId, string id, UpdatePendingApprovalAccountRequest body = default(UpdatePendingApprovalAccountRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdatePendingApprovalAccountResponse> localVarResponse = UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreateWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a B2C site profile to complete the customer account approval. - {UpdatePendingApprovalAccountRequest} The ID is the guid of the B2C site profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The ID of the B2C site profile to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdatePendingApprovalAccountResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdatePendingApprovalAccountResponse> UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdatePendingApprovalAccountRequest body = default(UpdatePendingApprovalAccountRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CdmvApi->UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdatePendingApprovalAccountResponse>("/cdmv/b2csiteprofile/{ScopeId}/pendingaccounts/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a B2C site profile to complete the customer account approval. - {UpdatePendingApprovalAccountRequest} The ID is the guid of the B2C site profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The ID of the B2C site profile to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePendingApprovalAccountResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePendingApprovalAccountResponse> UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreateAsync(string accept, string scopeId, string id, UpdatePendingApprovalAccountRequest body = default(UpdatePendingApprovalAccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdatePendingApprovalAccountResponse> localVarResponse = await UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreateWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a B2C site profile to complete the customer account approval. - {UpdatePendingApprovalAccountRequest} The ID is the guid of the B2C site profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The ID of the B2C site profile to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePendingApprovalAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdatePendingApprovalAccountResponse>> UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdatePendingApprovalAccountRequest body = default(UpdatePendingApprovalAccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CdmvApi->UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdatePendingApprovalAccountResponse>("/cdmv/b2csiteprofile/{ScopeId}/pendingaccounts/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePendingApprovalAccountRequestb2csiteprofileScopeIdpendingaccountsIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing product authorization based on its Id - {UpdateProductAuthorizationRequest} Update an existing product authorization based on its Id, and returns its updated values. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to update (currently, this is the custom profile id of the product authorization)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductAuthorization</returns>
        public ProductAuthorization UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreate(string accept, string scopeId, string id, UpdateProductAuthorizationRequest body = default(UpdateProductAuthorizationRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductAuthorization> localVarResponse = UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreateWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing product authorization based on its Id - {UpdateProductAuthorizationRequest} Update an existing product authorization based on its Id, and returns its updated values. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to update (currently, this is the custom profile id of the product authorization)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductAuthorization</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductAuthorization> UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdateProductAuthorizationRequest body = default(UpdateProductAuthorizationRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CdmvApi->UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductAuthorization>("/cdmv/productauthorization/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing product authorization based on its Id - {UpdateProductAuthorizationRequest} Update an existing product authorization based on its Id, and returns its updated values. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to update (currently, this is the custom profile id of the product authorization)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductAuthorization</returns>
        public async System.Threading.Tasks.Task<ProductAuthorization> UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreateAsync(string accept, string scopeId, string id, UpdateProductAuthorizationRequest body = default(UpdateProductAuthorizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductAuthorization> localVarResponse = await UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreateWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing product authorization based on its Id - {UpdateProductAuthorizationRequest} Update an existing product authorization based on its Id, and returns its updated values. All DateTimes are in UTC.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the product authorization to update (currently, this is the custom profile id of the product authorization)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductAuthorization)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductAuthorization>> UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateProductAuthorizationRequest body = default(UpdateProductAuthorizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CdmvApi->UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductAuthorization>("/cdmv/productauthorization/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductAuthorizationRequestproductauthorizationScopeIdIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest - {UpdateShipmentTrackingRequest} Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest. This information is update at the Masnifest stage in CDMV Order Express AFTER an initial confirmation via the api /cdmv/orders/confirmshipment.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdateShipmentTrackingResponse</returns>
        public UpdateShipmentTrackingResponse UpdateShipmentTrackingRequestordersupdateShipmentTrackingPost(string accept, UpdateShipmentTrackingRequest body = default(UpdateShipmentTrackingRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateShipmentTrackingResponse> localVarResponse = UpdateShipmentTrackingRequestordersupdateShipmentTrackingPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest - {UpdateShipmentTrackingRequest} Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest. This information is update at the Masnifest stage in CDMV Order Express AFTER an initial confirmation via the api /cdmv/orders/confirmshipment.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdateShipmentTrackingResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateShipmentTrackingResponse> UpdateShipmentTrackingRequestordersupdateShipmentTrackingPostWithHttpInfo(string accept, UpdateShipmentTrackingRequest body = default(UpdateShipmentTrackingRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->UpdateShipmentTrackingRequestordersupdateShipmentTrackingPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateShipmentTrackingResponse>("/cdmv/orders/updateShipmentTracking", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShipmentTrackingRequestordersupdateShipmentTrackingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest - {UpdateShipmentTrackingRequest} Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest. This information is update at the Masnifest stage in CDMV Order Express AFTER an initial confirmation via the api /cdmv/orders/confirmshipment.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateShipmentTrackingResponse</returns>
        public async System.Threading.Tasks.Task<UpdateShipmentTrackingResponse> UpdateShipmentTrackingRequestordersupdateShipmentTrackingPostAsync(string accept, UpdateShipmentTrackingRequest body = default(UpdateShipmentTrackingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateShipmentTrackingResponse> localVarResponse = await UpdateShipmentTrackingRequestordersupdateShipmentTrackingPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest - {UpdateShipmentTrackingRequest} Confirm shipments tracking information about an order when it is shipped or about to ship after CDMV shipment manifest. This information is update at the Masnifest stage in CDMV Order Express AFTER an initial confirmation via the api /cdmv/orders/confirmshipment.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateShipmentTrackingResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateShipmentTrackingResponse>> UpdateShipmentTrackingRequestordersupdateShipmentTrackingPostWithHttpInfoAsync(string accept, UpdateShipmentTrackingRequest body = default(UpdateShipmentTrackingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->UpdateShipmentTrackingRequestordersupdateShipmentTrackingPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateShipmentTrackingResponse>("/cdmv/orders/updateShipmentTracking", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShipmentTrackingRequestordersupdateShipmentTrackingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a credit card in the customer wallet - {UpdateWalletCreditCardRequest} Updates a credit card in the customer wallet, dates in the past are accepted for non-prod environments
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdateWalletCreditCardResponse</returns>
        public UpdateWalletCreditCardResponse UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreate(string accept, string scopeId, string paymentMethodId, UpdateWalletCreditCardRequest body = default(UpdateWalletCreditCardRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateWalletCreditCardResponse> localVarResponse = UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreateWithHttpInfo(accept, scopeId, paymentMethodId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a credit card in the customer wallet - {UpdateWalletCreditCardRequest} Updates a credit card in the customer wallet, dates in the past are accepted for non-prod environments
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdateWalletCreditCardResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateWalletCreditCardResponse> UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreateWithHttpInfo(string accept, string scopeId, string paymentMethodId, UpdateWalletCreditCardRequest body = default(UpdateWalletCreditCardRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreate");

            // verify the required parameter 'paymentMethodId' is set
            if (paymentMethodId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentMethodId' when calling CdmvApi->UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentMethodId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateWalletCreditCardResponse>("/cdmv/customer/{ScopeId}/wallet/{PaymentMethodId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a credit card in the customer wallet - {UpdateWalletCreditCardRequest} Updates a credit card in the customer wallet, dates in the past are accepted for non-prod environments
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateWalletCreditCardResponse</returns>
        public async System.Threading.Tasks.Task<UpdateWalletCreditCardResponse> UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreateAsync(string accept, string scopeId, string paymentMethodId, UpdateWalletCreditCardRequest body = default(UpdateWalletCreditCardRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateWalletCreditCardResponse> localVarResponse = await UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreateWithHttpInfoAsync(accept, scopeId, paymentMethodId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a credit card in the customer wallet - {UpdateWalletCreditCardRequest} Updates a credit card in the customer wallet, dates in the past are accepted for non-prod environments
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateWalletCreditCardResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateWalletCreditCardResponse>> UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreateWithHttpInfoAsync(string accept, string scopeId, string paymentMethodId, UpdateWalletCreditCardRequest body = default(UpdateWalletCreditCardRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreate");

            // verify the required parameter 'paymentMethodId' is set
            if (paymentMethodId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentMethodId' when calling CdmvApi->UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentMethodId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateWalletCreditCardResponse>("/cdmv/customer/{ScopeId}/wallet/{PaymentMethodId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWalletCreditCardRequestcustomerScopeIdwalletPaymentMethodIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the default credit card in the customer wallet - {UpdateWalletDefaultCreditCardRequest} Updates the default credit card in the customer wallet
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdateWalletDefaultCreditCardResponse</returns>
        public UpdateWalletDefaultCreditCardResponse UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreate(string accept, string scopeId, string paymentMethodId, UpdateWalletDefaultCreditCardRequest body = default(UpdateWalletDefaultCreditCardRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateWalletDefaultCreditCardResponse> localVarResponse = UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreateWithHttpInfo(accept, scopeId, paymentMethodId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the default credit card in the customer wallet - {UpdateWalletDefaultCreditCardRequest} Updates the default credit card in the customer wallet
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdateWalletDefaultCreditCardResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateWalletDefaultCreditCardResponse> UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreateWithHttpInfo(string accept, string scopeId, string paymentMethodId, UpdateWalletDefaultCreditCardRequest body = default(UpdateWalletDefaultCreditCardRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreate");

            // verify the required parameter 'paymentMethodId' is set
            if (paymentMethodId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentMethodId' when calling CdmvApi->UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentMethodId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateWalletDefaultCreditCardResponse>("/cdmv/customer/{ScopeId}/wallet/default/{PaymentMethodId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the default credit card in the customer wallet - {UpdateWalletDefaultCreditCardRequest} Updates the default credit card in the customer wallet
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateWalletDefaultCreditCardResponse</returns>
        public async System.Threading.Tasks.Task<UpdateWalletDefaultCreditCardResponse> UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreateAsync(string accept, string scopeId, string paymentMethodId, UpdateWalletDefaultCreditCardRequest body = default(UpdateWalletDefaultCreditCardRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateWalletDefaultCreditCardResponse> localVarResponse = await UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreateWithHttpInfoAsync(accept, scopeId, paymentMethodId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the default credit card in the customer wallet - {UpdateWalletDefaultCreditCardRequest} Updates the default credit card in the customer wallet
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="paymentMethodId">Payment method Id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateWalletDefaultCreditCardResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UpdateWalletDefaultCreditCardResponse>> UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreateWithHttpInfoAsync(string accept, string scopeId, string paymentMethodId, UpdateWalletDefaultCreditCardRequest body = default(UpdateWalletDefaultCreditCardRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CdmvApi->UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CdmvApi->UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreate");

            // verify the required parameter 'paymentMethodId' is set
            if (paymentMethodId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentMethodId' when calling CdmvApi->UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentMethodId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentMethodId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateWalletDefaultCreditCardResponse>("/cdmv/customer/{ScopeId}/wallet/default/{PaymentMethodId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWalletDefaultCreditCardRequestcustomerScopeIdwalletdefaultPaymentMethodIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
