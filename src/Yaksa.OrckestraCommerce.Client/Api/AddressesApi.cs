/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve an address using its Id - {GetAddressRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an address using its Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns>Address</returns>
        Address GetAddressRequestAddressIdGet(string accept, string addressId);

        /// <summary>
        /// Retrieve an address using its Id - {GetAddressRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an address using its Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> GetAddressRequestAddressIdGetWithHttpInfo(string accept, string addressId);
        /// <summary>
        /// Retrieve a list of addresses by Ids - {GetAddressesByIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of addresses by Ids.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ids">The list of system-wide unique identifier for the Addresses to retrieve.</param>
        /// <returns>List&lt;Address&gt;</returns>
        List<Address> GetAddressesByIdsRequestbyIdsIdsGet(string accept, List<string> ids);

        /// <summary>
        /// Retrieve a list of addresses by Ids - {GetAddressesByIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of addresses by Ids.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ids">The list of system-wide unique identifier for the Addresses to retrieve.</param>
        /// <returns>ApiResponse of List&lt;Address&gt;</returns>
        ApiResponse<List<Address>> GetAddressesByIdsRequestbyIdsIdsGetWithHttpInfo(string accept, List<string> ids);
        /// <summary>
        /// Retrieve an address of a customer using its Id - {GetCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an address of a customer using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns>Address</returns>
        Address GetCustomerAddressRequestcustomerCustomerIdAddressIdGet(string accept, string customerId, string addressId);

        /// <summary>
        /// Retrieve an address of a customer using its Id - {GetCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an address of a customer using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> GetCustomerAddressRequestcustomerCustomerIdAddressIdGetWithHttpInfo(string accept, string customerId, string addressId);
        /// <summary>
        /// Remove an address - {RemoveAddressRequest}
        /// </summary>
        /// <remarks>
        /// Remove an address.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns></returns>
        void RemoveAddressRequestAddressIdDelete(string accept, string addressId);

        /// <summary>
        /// Remove an address - {RemoveAddressRequest}
        /// </summary>
        /// <remarks>
        /// Remove an address.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAddressRequestAddressIdDeleteWithHttpInfo(string accept, string addressId);
        /// <summary>
        /// Remove an address of a customer - {RemoveCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Remove an address of a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns></returns>
        void RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDelete(string accept, string customerId, string addressId);

        /// <summary>
        /// Remove an address of a customer - {RemoveCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Remove an address of a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDeleteWithHttpInfo(string accept, string customerId, string addressId);
        /// <summary>
        /// Updates an address - {UpdateAddressRequest}
        /// </summary>
        /// <remarks>
        /// Updates an address
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Address</returns>
        Address UpdateAddressRequestAddressIdCreate(string accept, string addressId, UpdateAddressRequest body = default(UpdateAddressRequest));

        /// <summary>
        /// Updates an address - {UpdateAddressRequest}
        /// </summary>
        /// <remarks>
        /// Updates an address
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> UpdateAddressRequestAddressIdCreateWithHttpInfo(string accept, string addressId, UpdateAddressRequest body = default(UpdateAddressRequest));
        /// <summary>
        /// Updates a customer address - {UpdateCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Updates a customer address
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Address</returns>
        Address UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreate(string accept, string customerId, string addressId, UpdateCustomerAddressRequest body = default(UpdateCustomerAddressRequest));

        /// <summary>
        /// Updates a customer address - {UpdateCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Updates a customer address
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreateWithHttpInfo(string accept, string customerId, string addressId, UpdateCustomerAddressRequest body = default(UpdateCustomerAddressRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve an address using its Id - {GetAddressRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an address using its Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        System.Threading.Tasks.Task<Address> GetAddressRequestAddressIdGetAsync(string accept, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an address using its Id - {GetAddressRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an address using its Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<Address>> GetAddressRequestAddressIdGetWithHttpInfoAsync(string accept, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of addresses by Ids - {GetAddressesByIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of addresses by Ids.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ids">The list of system-wide unique identifier for the Addresses to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Address&gt;</returns>
        System.Threading.Tasks.Task<List<Address>> GetAddressesByIdsRequestbyIdsIdsGetAsync(string accept, List<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of addresses by Ids - {GetAddressesByIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of addresses by Ids.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ids">The list of system-wide unique identifier for the Addresses to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Address&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Address>>> GetAddressesByIdsRequestbyIdsIdsGetWithHttpInfoAsync(string accept, List<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an address of a customer using its Id - {GetCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an address of a customer using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        System.Threading.Tasks.Task<Address> GetCustomerAddressRequestcustomerCustomerIdAddressIdGetAsync(string accept, string customerId, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an address of a customer using its Id - {GetCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an address of a customer using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<Address>> GetCustomerAddressRequestcustomerCustomerIdAddressIdGetWithHttpInfoAsync(string accept, string customerId, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an address - {RemoveAddressRequest}
        /// </summary>
        /// <remarks>
        /// Remove an address.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAddressRequestAddressIdDeleteAsync(string accept, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an address - {RemoveAddressRequest}
        /// </summary>
        /// <remarks>
        /// Remove an address.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAddressRequestAddressIdDeleteWithHttpInfoAsync(string accept, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an address of a customer - {RemoveCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Remove an address of a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDeleteAsync(string accept, string customerId, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an address of a customer - {RemoveCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Remove an address of a customer.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDeleteWithHttpInfoAsync(string accept, string customerId, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates an address - {UpdateAddressRequest}
        /// </summary>
        /// <remarks>
        /// Updates an address
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        System.Threading.Tasks.Task<Address> UpdateAddressRequestAddressIdCreateAsync(string accept, string addressId, UpdateAddressRequest body = default(UpdateAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates an address - {UpdateAddressRequest}
        /// </summary>
        /// <remarks>
        /// Updates an address
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<Address>> UpdateAddressRequestAddressIdCreateWithHttpInfoAsync(string accept, string addressId, UpdateAddressRequest body = default(UpdateAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a customer address - {UpdateCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Updates a customer address
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        System.Threading.Tasks.Task<Address> UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreateAsync(string accept, string customerId, string addressId, UpdateCustomerAddressRequest body = default(UpdateCustomerAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a customer address - {UpdateCustomerAddressRequest}
        /// </summary>
        /// <remarks>
        /// Updates a customer address
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<Address>> UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreateWithHttpInfoAsync(string accept, string customerId, string addressId, UpdateCustomerAddressRequest body = default(UpdateCustomerAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressesApi : IAddressesApiSync, IAddressesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressesApi : IAddressesApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressesApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressesApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AddressesApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve an address using its Id - {GetAddressRequest} Retrieve an address using its Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns>Address</returns>
        public Address GetAddressRequestAddressIdGet(string accept, string addressId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = GetAddressRequestAddressIdGetWithHttpInfo(accept, addressId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an address using its Id - {GetAddressRequest} Retrieve an address using its Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns>ApiResponse of Address</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> GetAddressRequestAddressIdGetWithHttpInfo(string accept, string addressId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->GetAddressRequestAddressIdGet");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling AddressesApi->GetAddressRequestAddressIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Address>("/addresses/{AddressId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAddressRequestAddressIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an address using its Id - {GetAddressRequest} Retrieve an address using its Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        public async System.Threading.Tasks.Task<Address> GetAddressRequestAddressIdGetAsync(string accept, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = await GetAddressRequestAddressIdGetWithHttpInfoAsync(accept, addressId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an address using its Id - {GetAddressRequest} Retrieve an address using its Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address>> GetAddressRequestAddressIdGetWithHttpInfoAsync(string accept, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->GetAddressRequestAddressIdGet");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling AddressesApi->GetAddressRequestAddressIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Address>("/addresses/{AddressId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAddressRequestAddressIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of addresses by Ids - {GetAddressesByIdsRequest} Retrieve a list of addresses by Ids.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ids">The list of system-wide unique identifier for the Addresses to retrieve.</param>
        /// <returns>List&lt;Address&gt;</returns>
        public List<Address> GetAddressesByIdsRequestbyIdsIdsGet(string accept, List<string> ids)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Address>> localVarResponse = GetAddressesByIdsRequestbyIdsIdsGetWithHttpInfo(accept, ids);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of addresses by Ids - {GetAddressesByIdsRequest} Retrieve a list of addresses by Ids.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ids">The list of system-wide unique identifier for the Addresses to retrieve.</param>
        /// <returns>ApiResponse of List&lt;Address&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Address>> GetAddressesByIdsRequestbyIdsIdsGetWithHttpInfo(string accept, List<string> ids)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->GetAddressesByIdsRequestbyIdsIdsGet");

            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ids' when calling AddressesApi->GetAddressesByIdsRequestbyIdsIdsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Ids", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ids)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Address>>("/addresses/byIds/{Ids}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAddressesByIdsRequestbyIdsIdsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of addresses by Ids - {GetAddressesByIdsRequest} Retrieve a list of addresses by Ids.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ids">The list of system-wide unique identifier for the Addresses to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Address&gt;</returns>
        public async System.Threading.Tasks.Task<List<Address>> GetAddressesByIdsRequestbyIdsIdsGetAsync(string accept, List<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Address>> localVarResponse = await GetAddressesByIdsRequestbyIdsIdsGetWithHttpInfoAsync(accept, ids, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of addresses by Ids - {GetAddressesByIdsRequest} Retrieve a list of addresses by Ids.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ids">The list of system-wide unique identifier for the Addresses to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Address&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Address>>> GetAddressesByIdsRequestbyIdsIdsGetWithHttpInfoAsync(string accept, List<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->GetAddressesByIdsRequestbyIdsIdsGet");

            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ids' when calling AddressesApi->GetAddressesByIdsRequestbyIdsIdsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Ids", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ids)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Address>>("/addresses/byIds/{Ids}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAddressesByIdsRequestbyIdsIdsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an address of a customer using its Id - {GetCustomerAddressRequest} Retrieve an address of a customer using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns>Address</returns>
        public Address GetCustomerAddressRequestcustomerCustomerIdAddressIdGet(string accept, string customerId, string addressId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = GetCustomerAddressRequestcustomerCustomerIdAddressIdGetWithHttpInfo(accept, customerId, addressId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an address of a customer using its Id - {GetCustomerAddressRequest} Retrieve an address of a customer using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns>ApiResponse of Address</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> GetCustomerAddressRequestcustomerCustomerIdAddressIdGetWithHttpInfo(string accept, string customerId, string addressId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->GetCustomerAddressRequestcustomerCustomerIdAddressIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling AddressesApi->GetCustomerAddressRequestcustomerCustomerIdAddressIdGet");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling AddressesApi->GetCustomerAddressRequestcustomerCustomerIdAddressIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Address>("/addresses/customer/{CustomerId}/{AddressId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerAddressRequestcustomerCustomerIdAddressIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an address of a customer using its Id - {GetCustomerAddressRequest} Retrieve an address of a customer using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        public async System.Threading.Tasks.Task<Address> GetCustomerAddressRequestcustomerCustomerIdAddressIdGetAsync(string accept, string customerId, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = await GetCustomerAddressRequestcustomerCustomerIdAddressIdGetWithHttpInfoAsync(accept, customerId, addressId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an address of a customer using its Id - {GetCustomerAddressRequest} Retrieve an address of a customer using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address>> GetCustomerAddressRequestcustomerCustomerIdAddressIdGetWithHttpInfoAsync(string accept, string customerId, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->GetCustomerAddressRequestcustomerCustomerIdAddressIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling AddressesApi->GetCustomerAddressRequestcustomerCustomerIdAddressIdGet");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling AddressesApi->GetCustomerAddressRequestcustomerCustomerIdAddressIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Address>("/addresses/customer/{CustomerId}/{AddressId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerAddressRequestcustomerCustomerIdAddressIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an address - {RemoveAddressRequest} Remove an address.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns></returns>
        public void RemoveAddressRequestAddressIdDelete(string accept, string addressId)
        {
            RemoveAddressRequestAddressIdDeleteWithHttpInfo(accept, addressId);
        }

        /// <summary>
        /// Remove an address - {RemoveAddressRequest} Remove an address.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> RemoveAddressRequestAddressIdDeleteWithHttpInfo(string accept, string addressId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->RemoveAddressRequestAddressIdDelete");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling AddressesApi->RemoveAddressRequestAddressIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/addresses/{AddressId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAddressRequestAddressIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an address - {RemoveAddressRequest} Remove an address.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAddressRequestAddressIdDeleteAsync(string accept, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveAddressRequestAddressIdDeleteWithHttpInfoAsync(accept, addressId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an address - {RemoveAddressRequest} Remove an address.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> RemoveAddressRequestAddressIdDeleteWithHttpInfoAsync(string accept, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->RemoveAddressRequestAddressIdDelete");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling AddressesApi->RemoveAddressRequestAddressIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/addresses/{AddressId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAddressRequestAddressIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an address of a customer - {RemoveCustomerAddressRequest} Remove an address of a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns></returns>
        public void RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDelete(string accept, string customerId, string addressId)
        {
            RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDeleteWithHttpInfo(accept, customerId, addressId);
        }

        /// <summary>
        /// Remove an address of a customer - {RemoveCustomerAddressRequest} Remove an address of a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDeleteWithHttpInfo(string accept, string customerId, string addressId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling AddressesApi->RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDelete");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling AddressesApi->RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/addresses/customer/{CustomerId}/{AddressId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an address of a customer - {RemoveCustomerAddressRequest} Remove an address of a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDeleteAsync(string accept, string customerId, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDeleteWithHttpInfoAsync(accept, customerId, addressId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an address of a customer - {RemoveCustomerAddressRequest} Remove an address of a customer.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">The unique identifier of the address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDeleteWithHttpInfoAsync(string accept, string customerId, string addressId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling AddressesApi->RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDelete");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling AddressesApi->RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/addresses/customer/{CustomerId}/{AddressId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveCustomerAddressRequestcustomerCustomerIdAddressIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an address - {UpdateAddressRequest} Updates an address
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Address</returns>
        public Address UpdateAddressRequestAddressIdCreate(string accept, string addressId, UpdateAddressRequest body = default(UpdateAddressRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = UpdateAddressRequestAddressIdCreateWithHttpInfo(accept, addressId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an address - {UpdateAddressRequest} Updates an address
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Address</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> UpdateAddressRequestAddressIdCreateWithHttpInfo(string accept, string addressId, UpdateAddressRequest body = default(UpdateAddressRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->UpdateAddressRequestAddressIdCreate");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling AddressesApi->UpdateAddressRequestAddressIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Address>("/addresses/{AddressId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAddressRequestAddressIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an address - {UpdateAddressRequest} Updates an address
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        public async System.Threading.Tasks.Task<Address> UpdateAddressRequestAddressIdCreateAsync(string accept, string addressId, UpdateAddressRequest body = default(UpdateAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = await UpdateAddressRequestAddressIdCreateWithHttpInfoAsync(accept, addressId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an address - {UpdateAddressRequest} Updates an address
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address>> UpdateAddressRequestAddressIdCreateWithHttpInfoAsync(string accept, string addressId, UpdateAddressRequest body = default(UpdateAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->UpdateAddressRequestAddressIdCreate");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling AddressesApi->UpdateAddressRequestAddressIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Address>("/addresses/{AddressId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAddressRequestAddressIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a customer address - {UpdateCustomerAddressRequest} Updates a customer address
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Address</returns>
        public Address UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreate(string accept, string customerId, string addressId, UpdateCustomerAddressRequest body = default(UpdateCustomerAddressRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreateWithHttpInfo(accept, customerId, addressId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a customer address - {UpdateCustomerAddressRequest} Updates a customer address
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Address</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreateWithHttpInfo(string accept, string customerId, string addressId, UpdateCustomerAddressRequest body = default(UpdateCustomerAddressRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling AddressesApi->UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreate");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling AddressesApi->UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Address>("/addresses/customer/{CustomerId}/{AddressId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a customer address - {UpdateCustomerAddressRequest} Updates a customer address
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        public async System.Threading.Tasks.Task<Address> UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreateAsync(string accept, string customerId, string addressId, UpdateCustomerAddressRequest body = default(UpdateCustomerAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address> localVarResponse = await UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreateWithHttpInfoAsync(accept, customerId, addressId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a customer address - {UpdateCustomerAddressRequest} Updates a customer address
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="customerId">The customer identifier.</param>
        /// <param name="addressId">Unique identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Address>> UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreateWithHttpInfoAsync(string accept, string customerId, string addressId, UpdateCustomerAddressRequest body = default(UpdateCustomerAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AddressesApi->UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling AddressesApi->UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreate");

            // verify the required parameter 'addressId' is set
            if (addressId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'addressId' when calling AddressesApi->UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AddressId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(addressId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Address>("/addresses/customer/{CustomerId}/{AddressId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomerAddressRequestcustomerCustomerIdAddressIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
