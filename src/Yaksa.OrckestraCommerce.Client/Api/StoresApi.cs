/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStoresApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create or update a store using its number - {CreateOrUpdateStoreByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates a store
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">a business centric number to identify the store that could be used to link the store to external data.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Store</returns>
        Store CreateOrUpdateStoreByNumberRequestScopeIdNumberPost(string accept, string scopeId, string number, CreateOrUpdateStoreByNumberRequest body = default(CreateOrUpdateStoreByNumberRequest));

        /// <summary>
        /// Create or update a store using its number - {CreateOrUpdateStoreByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates a store
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">a business centric number to identify the store that could be used to link the store to external data.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Store</returns>
        ApiResponse<Store> CreateOrUpdateStoreByNumberRequestScopeIdNumberPostWithHttpInfo(string accept, string scopeId, string number, CreateOrUpdateStoreByNumberRequest body = default(CreateOrUpdateStoreByNumberRequest));
        /// <summary>
        /// Deletes a store using its Id - {DeleteStoreRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a specific store using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <returns></returns>
        void DeleteStoreRequestScopeIdIdDelete(string accept, string scopeId, string id);

        /// <summary>
        /// Deletes a store using its Id - {DeleteStoreRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a specific store using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStoreRequestScopeIdIdDeleteWithHttpInfo(string accept, string scopeId, string id);
        /// <summary>
        /// Find the nearest stores based on search terms - {FindNearestStoresRequest}
        /// </summary>
        /// <remarks>
        /// Search for the nearest Stores based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="searchTerms">The search terms.</param>
        /// <param name="startingIndex">The starting index used to find the stores (optional)</param>
        /// <param name="maximumItemsCount">The maximum number of stores (optional)</param>
        /// <param name="fulfillmentMethodType">The fulfillment method type used to filter the stores. (optional)</param>
        /// <returns>FindNearestStoresResult</returns>
        FindNearestStoresResult FindNearestStoresRequestScopeIdnearSearchTermsGet(string accept, string scopeId, string searchTerms, int? startingIndex = default(int?), int? maximumItemsCount = default(int?), string fulfillmentMethodType = default(string));

        /// <summary>
        /// Find the nearest stores based on search terms - {FindNearestStoresRequest}
        /// </summary>
        /// <remarks>
        /// Search for the nearest Stores based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="searchTerms">The search terms.</param>
        /// <param name="startingIndex">The starting index used to find the stores (optional)</param>
        /// <param name="maximumItemsCount">The maximum number of stores (optional)</param>
        /// <param name="fulfillmentMethodType">The fulfillment method type used to filter the stores. (optional)</param>
        /// <returns>ApiResponse of FindNearestStoresResult</returns>
        ApiResponse<FindNearestStoresResult> FindNearestStoresRequestScopeIdnearSearchTermsGetWithHttpInfo(string accept, string scopeId, string searchTerms, int? startingIndex = default(int?), int? maximumItemsCount = default(int?), string fulfillmentMethodType = default(string));
        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest}
        /// </summary>
        /// <remarks>
        /// Search for Stores based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindStoresQueryResult</returns>
        FindStoresQueryResult FindStoresRequestScopeIdfindPost(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest));

        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest}
        /// </summary>
        /// <remarks>
        /// Search for Stores based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindStoresQueryResult</returns>
        ApiResponse<FindStoresQueryResult> FindStoresRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest));
        /// <summary>
        /// Retrieve a store using its name - {GetStoreByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store using its name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">the name of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <returns>Store</returns>
        Store GetStoreByNameRequestScopeIdbyNameNameGet(string accept, string scopeId, string name, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?));

        /// <summary>
        /// Retrieve a store using its name - {GetStoreByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store using its name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">the name of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <returns>ApiResponse of Store</returns>
        ApiResponse<Store> GetStoreByNameRequestScopeIdbyNameNameGetWithHttpInfo(string accept, string scopeId, string name, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?));
        /// <summary>
        /// Retrieve a store using its number - {GetStoreByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store using its number
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">the number of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <returns>Store</returns>
        Store GetStoreByNumberRequestScopeIdbyNumberNumberGet(string accept, string scopeId, string number, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?));

        /// <summary>
        /// Retrieve a store using its number - {GetStoreByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store using its number
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">the number of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <returns>ApiResponse of Store</returns>
        ApiResponse<Store> GetStoreByNumberRequestScopeIdbyNumberNumberGetWithHttpInfo(string accept, string scopeId, string number, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?));
        /// <summary>
        /// Retrieves a store using its Id - {GetStoreRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <returns>Store</returns>
        Store GetStoreRequestScopeIdIdGet(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?));

        /// <summary>
        /// Retrieves a store using its Id - {GetStoreRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <returns>ApiResponse of Store</returns>
        ApiResponse<Store> GetStoreRequestScopeIdIdGetWithHttpInfo(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStoresApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create or update a store using its number - {CreateOrUpdateStoreByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates a store
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">a business centric number to identify the store that could be used to link the store to external data.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Store</returns>
        System.Threading.Tasks.Task<Store> CreateOrUpdateStoreByNumberRequestScopeIdNumberPostAsync(string accept, string scopeId, string number, CreateOrUpdateStoreByNumberRequest body = default(CreateOrUpdateStoreByNumberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update a store using its number - {CreateOrUpdateStoreByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates a store
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">a business centric number to identify the store that could be used to link the store to external data.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        System.Threading.Tasks.Task<ApiResponse<Store>> CreateOrUpdateStoreByNumberRequestScopeIdNumberPostWithHttpInfoAsync(string accept, string scopeId, string number, CreateOrUpdateStoreByNumberRequest body = default(CreateOrUpdateStoreByNumberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a store using its Id - {DeleteStoreRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a specific store using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStoreRequestScopeIdIdDeleteAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a store using its Id - {DeleteStoreRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a specific store using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStoreRequestScopeIdIdDeleteWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find the nearest stores based on search terms - {FindNearestStoresRequest}
        /// </summary>
        /// <remarks>
        /// Search for the nearest Stores based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="searchTerms">The search terms.</param>
        /// <param name="startingIndex">The starting index used to find the stores (optional)</param>
        /// <param name="maximumItemsCount">The maximum number of stores (optional)</param>
        /// <param name="fulfillmentMethodType">The fulfillment method type used to filter the stores. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindNearestStoresResult</returns>
        System.Threading.Tasks.Task<FindNearestStoresResult> FindNearestStoresRequestScopeIdnearSearchTermsGetAsync(string accept, string scopeId, string searchTerms, int? startingIndex = default(int?), int? maximumItemsCount = default(int?), string fulfillmentMethodType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find the nearest stores based on search terms - {FindNearestStoresRequest}
        /// </summary>
        /// <remarks>
        /// Search for the nearest Stores based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="searchTerms">The search terms.</param>
        /// <param name="startingIndex">The starting index used to find the stores (optional)</param>
        /// <param name="maximumItemsCount">The maximum number of stores (optional)</param>
        /// <param name="fulfillmentMethodType">The fulfillment method type used to filter the stores. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindNearestStoresResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindNearestStoresResult>> FindNearestStoresRequestScopeIdnearSearchTermsGetWithHttpInfoAsync(string accept, string scopeId, string searchTerms, int? startingIndex = default(int?), int? maximumItemsCount = default(int?), string fulfillmentMethodType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest}
        /// </summary>
        /// <remarks>
        /// Search for Stores based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindStoresQueryResult</returns>
        System.Threading.Tasks.Task<FindStoresQueryResult> FindStoresRequestScopeIdfindPostAsync(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest}
        /// </summary>
        /// <remarks>
        /// Search for Stores based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindStoresQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindStoresQueryResult>> FindStoresRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a store using its name - {GetStoreByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store using its name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">the name of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Store</returns>
        System.Threading.Tasks.Task<Store> GetStoreByNameRequestScopeIdbyNameNameGetAsync(string accept, string scopeId, string name, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a store using its name - {GetStoreByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store using its name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">the name of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        System.Threading.Tasks.Task<ApiResponse<Store>> GetStoreByNameRequestScopeIdbyNameNameGetWithHttpInfoAsync(string accept, string scopeId, string name, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a store using its number - {GetStoreByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store using its number
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">the number of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Store</returns>
        System.Threading.Tasks.Task<Store> GetStoreByNumberRequestScopeIdbyNumberNumberGetAsync(string accept, string scopeId, string number, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a store using its number - {GetStoreByNumberRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store using its number
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">the number of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        System.Threading.Tasks.Task<ApiResponse<Store>> GetStoreByNumberRequestScopeIdbyNumberNumberGetWithHttpInfoAsync(string accept, string scopeId, string number, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a store using its Id - {GetStoreRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Store</returns>
        System.Threading.Tasks.Task<Store> GetStoreRequestScopeIdIdGetAsync(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a store using its Id - {GetStoreRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store using its Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        System.Threading.Tasks.Task<ApiResponse<Store>> GetStoreRequestScopeIdIdGetWithHttpInfoAsync(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStoresApi : IStoresApiSync, IStoresApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StoresApi : IStoresApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StoresApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StoresApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StoresApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StoresApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StoresApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StoresApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StoresApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StoresApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create or update a store using its number - {CreateOrUpdateStoreByNumberRequest} Creates or updates a store
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">a business centric number to identify the store that could be used to link the store to external data.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Store</returns>
        public Store CreateOrUpdateStoreByNumberRequestScopeIdNumberPost(string accept, string scopeId, string number, CreateOrUpdateStoreByNumberRequest body = default(CreateOrUpdateStoreByNumberRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store> localVarResponse = CreateOrUpdateStoreByNumberRequestScopeIdNumberPostWithHttpInfo(accept, scopeId, number, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a store using its number - {CreateOrUpdateStoreByNumberRequest} Creates or updates a store
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">a business centric number to identify the store that could be used to link the store to external data.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Store</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store> CreateOrUpdateStoreByNumberRequestScopeIdNumberPostWithHttpInfo(string accept, string scopeId, string number, CreateOrUpdateStoreByNumberRequest body = default(CreateOrUpdateStoreByNumberRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->CreateOrUpdateStoreByNumberRequestScopeIdNumberPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->CreateOrUpdateStoreByNumberRequestScopeIdNumberPost");

            // verify the required parameter 'number' is set
            if (number == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'number' when calling StoresApi->CreateOrUpdateStoreByNumberRequestScopeIdNumberPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Number", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(number)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Store>("/stores/{ScopeId}/{Number}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateStoreByNumberRequestScopeIdNumberPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update a store using its number - {CreateOrUpdateStoreByNumberRequest} Creates or updates a store
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">a business centric number to identify the store that could be used to link the store to external data.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Store</returns>
        public async System.Threading.Tasks.Task<Store> CreateOrUpdateStoreByNumberRequestScopeIdNumberPostAsync(string accept, string scopeId, string number, CreateOrUpdateStoreByNumberRequest body = default(CreateOrUpdateStoreByNumberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store> localVarResponse = await CreateOrUpdateStoreByNumberRequestScopeIdNumberPostWithHttpInfoAsync(accept, scopeId, number, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a store using its number - {CreateOrUpdateStoreByNumberRequest} Creates or updates a store
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">a business centric number to identify the store that could be used to link the store to external data.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store>> CreateOrUpdateStoreByNumberRequestScopeIdNumberPostWithHttpInfoAsync(string accept, string scopeId, string number, CreateOrUpdateStoreByNumberRequest body = default(CreateOrUpdateStoreByNumberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->CreateOrUpdateStoreByNumberRequestScopeIdNumberPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->CreateOrUpdateStoreByNumberRequestScopeIdNumberPost");

            // verify the required parameter 'number' is set
            if (number == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'number' when calling StoresApi->CreateOrUpdateStoreByNumberRequestScopeIdNumberPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Number", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(number)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Store>("/stores/{ScopeId}/{Number}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateStoreByNumberRequestScopeIdNumberPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a store using its Id - {DeleteStoreRequest} Deletes a specific store using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <returns></returns>
        public void DeleteStoreRequestScopeIdIdDelete(string accept, string scopeId, string id)
        {
            DeleteStoreRequestScopeIdIdDeleteWithHttpInfo(accept, scopeId, id);
        }

        /// <summary>
        /// Deletes a store using its Id - {DeleteStoreRequest} Deletes a specific store using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteStoreRequestScopeIdIdDeleteWithHttpInfo(string accept, string scopeId, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->DeleteStoreRequestScopeIdIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->DeleteStoreRequestScopeIdIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling StoresApi->DeleteStoreRequestScopeIdIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/stores/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStoreRequestScopeIdIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a store using its Id - {DeleteStoreRequest} Deletes a specific store using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStoreRequestScopeIdIdDeleteAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteStoreRequestScopeIdIdDeleteWithHttpInfoAsync(accept, scopeId, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a store using its Id - {DeleteStoreRequest} Deletes a specific store using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteStoreRequestScopeIdIdDeleteWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->DeleteStoreRequestScopeIdIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->DeleteStoreRequestScopeIdIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling StoresApi->DeleteStoreRequestScopeIdIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/stores/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStoreRequestScopeIdIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find the nearest stores based on search terms - {FindNearestStoresRequest} Search for the nearest Stores based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="searchTerms">The search terms.</param>
        /// <param name="startingIndex">The starting index used to find the stores (optional)</param>
        /// <param name="maximumItemsCount">The maximum number of stores (optional)</param>
        /// <param name="fulfillmentMethodType">The fulfillment method type used to filter the stores. (optional)</param>
        /// <returns>FindNearestStoresResult</returns>
        public FindNearestStoresResult FindNearestStoresRequestScopeIdnearSearchTermsGet(string accept, string scopeId, string searchTerms, int? startingIndex = default(int?), int? maximumItemsCount = default(int?), string fulfillmentMethodType = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindNearestStoresResult> localVarResponse = FindNearestStoresRequestScopeIdnearSearchTermsGetWithHttpInfo(accept, scopeId, searchTerms, startingIndex, maximumItemsCount, fulfillmentMethodType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find the nearest stores based on search terms - {FindNearestStoresRequest} Search for the nearest Stores based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="searchTerms">The search terms.</param>
        /// <param name="startingIndex">The starting index used to find the stores (optional)</param>
        /// <param name="maximumItemsCount">The maximum number of stores (optional)</param>
        /// <param name="fulfillmentMethodType">The fulfillment method type used to filter the stores. (optional)</param>
        /// <returns>ApiResponse of FindNearestStoresResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindNearestStoresResult> FindNearestStoresRequestScopeIdnearSearchTermsGetWithHttpInfo(string accept, string scopeId, string searchTerms, int? startingIndex = default(int?), int? maximumItemsCount = default(int?), string fulfillmentMethodType = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->FindNearestStoresRequestScopeIdnearSearchTermsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->FindNearestStoresRequestScopeIdnearSearchTermsGet");

            // verify the required parameter 'searchTerms' is set
            if (searchTerms == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'searchTerms' when calling StoresApi->FindNearestStoresRequestScopeIdnearSearchTermsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SearchTerms", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(searchTerms)); // path parameter
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItemsCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItemsCount", maximumItemsCount));
            }
            if (fulfillmentMethodType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "FulfillmentMethodType", fulfillmentMethodType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FindNearestStoresResult>("/stores/{ScopeId}/near/{SearchTerms}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindNearestStoresRequestScopeIdnearSearchTermsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find the nearest stores based on search terms - {FindNearestStoresRequest} Search for the nearest Stores based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="searchTerms">The search terms.</param>
        /// <param name="startingIndex">The starting index used to find the stores (optional)</param>
        /// <param name="maximumItemsCount">The maximum number of stores (optional)</param>
        /// <param name="fulfillmentMethodType">The fulfillment method type used to filter the stores. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindNearestStoresResult</returns>
        public async System.Threading.Tasks.Task<FindNearestStoresResult> FindNearestStoresRequestScopeIdnearSearchTermsGetAsync(string accept, string scopeId, string searchTerms, int? startingIndex = default(int?), int? maximumItemsCount = default(int?), string fulfillmentMethodType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindNearestStoresResult> localVarResponse = await FindNearestStoresRequestScopeIdnearSearchTermsGetWithHttpInfoAsync(accept, scopeId, searchTerms, startingIndex, maximumItemsCount, fulfillmentMethodType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find the nearest stores based on search terms - {FindNearestStoresRequest} Search for the nearest Stores based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="searchTerms">The search terms.</param>
        /// <param name="startingIndex">The starting index used to find the stores (optional)</param>
        /// <param name="maximumItemsCount">The maximum number of stores (optional)</param>
        /// <param name="fulfillmentMethodType">The fulfillment method type used to filter the stores. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindNearestStoresResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindNearestStoresResult>> FindNearestStoresRequestScopeIdnearSearchTermsGetWithHttpInfoAsync(string accept, string scopeId, string searchTerms, int? startingIndex = default(int?), int? maximumItemsCount = default(int?), string fulfillmentMethodType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->FindNearestStoresRequestScopeIdnearSearchTermsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->FindNearestStoresRequestScopeIdnearSearchTermsGet");

            // verify the required parameter 'searchTerms' is set
            if (searchTerms == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'searchTerms' when calling StoresApi->FindNearestStoresRequestScopeIdnearSearchTermsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SearchTerms", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(searchTerms)); // path parameter
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItemsCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItemsCount", maximumItemsCount));
            }
            if (fulfillmentMethodType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "FulfillmentMethodType", fulfillmentMethodType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FindNearestStoresResult>("/stores/{ScopeId}/near/{SearchTerms}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindNearestStoresRequestScopeIdnearSearchTermsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest} Search for Stores based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindStoresQueryResult</returns>
        public FindStoresQueryResult FindStoresRequestScopeIdfindPost(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindStoresQueryResult> localVarResponse = FindStoresRequestScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest} Search for Stores based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindStoresQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindStoresQueryResult> FindStoresRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->FindStoresRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->FindStoresRequestScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindStoresQueryResult>("/stores/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindStoresRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest} Search for Stores based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindStoresQueryResult</returns>
        public async System.Threading.Tasks.Task<FindStoresQueryResult> FindStoresRequestScopeIdfindPostAsync(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindStoresQueryResult> localVarResponse = await FindStoresRequestScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for Stores based on search terms - {FindStoresRequest} Search for Stores based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindStoresQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindStoresQueryResult>> FindStoresRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindStoresRequest body = default(FindStoresRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->FindStoresRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->FindStoresRequestScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FindStoresQueryResult>("/stores/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindStoresRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a store using its name - {GetStoreByNameRequest} Retrieve a specific store using its name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">the name of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <returns>Store</returns>
        public Store GetStoreByNameRequestScopeIdbyNameNameGet(string accept, string scopeId, string name, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store> localVarResponse = GetStoreByNameRequestScopeIdbyNameNameGetWithHttpInfo(accept, scopeId, name, cultureName, includeAddresses, includeSchedules, includeOperatingStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a store using its name - {GetStoreByNameRequest} Retrieve a specific store using its name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">the name of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <returns>ApiResponse of Store</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store> GetStoreByNameRequestScopeIdbyNameNameGetWithHttpInfo(string accept, string scopeId, string name, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->GetStoreByNameRequestScopeIdbyNameNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->GetStoreByNameRequestScopeIdbyNameNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling StoresApi->GetStoreByNameRequestScopeIdbyNameNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeOperatingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeOperatingStatus", includeOperatingStatus));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Store>("/stores/{ScopeId}/byName/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStoreByNameRequestScopeIdbyNameNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a store using its name - {GetStoreByNameRequest} Retrieve a specific store using its name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">the name of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Store</returns>
        public async System.Threading.Tasks.Task<Store> GetStoreByNameRequestScopeIdbyNameNameGetAsync(string accept, string scopeId, string name, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store> localVarResponse = await GetStoreByNameRequestScopeIdbyNameNameGetWithHttpInfoAsync(accept, scopeId, name, cultureName, includeAddresses, includeSchedules, includeOperatingStatus, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a store using its name - {GetStoreByNameRequest} Retrieve a specific store using its name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">the name of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store>> GetStoreByNameRequestScopeIdbyNameNameGetWithHttpInfoAsync(string accept, string scopeId, string name, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->GetStoreByNameRequestScopeIdbyNameNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->GetStoreByNameRequestScopeIdbyNameNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling StoresApi->GetStoreByNameRequestScopeIdbyNameNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeOperatingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeOperatingStatus", includeOperatingStatus));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Store>("/stores/{ScopeId}/byName/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStoreByNameRequestScopeIdbyNameNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a store using its number - {GetStoreByNumberRequest} Retrieve a specific store using its number
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">the number of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <returns>Store</returns>
        public Store GetStoreByNumberRequestScopeIdbyNumberNumberGet(string accept, string scopeId, string number, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store> localVarResponse = GetStoreByNumberRequestScopeIdbyNumberNumberGetWithHttpInfo(accept, scopeId, number, cultureName, includeAddresses, includeSchedules, includeOperatingStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a store using its number - {GetStoreByNumberRequest} Retrieve a specific store using its number
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">the number of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <returns>ApiResponse of Store</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store> GetStoreByNumberRequestScopeIdbyNumberNumberGetWithHttpInfo(string accept, string scopeId, string number, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->GetStoreByNumberRequestScopeIdbyNumberNumberGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->GetStoreByNumberRequestScopeIdbyNumberNumberGet");

            // verify the required parameter 'number' is set
            if (number == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'number' when calling StoresApi->GetStoreByNumberRequestScopeIdbyNumberNumberGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Number", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(number)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeOperatingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeOperatingStatus", includeOperatingStatus));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Store>("/stores/{ScopeId}/byNumber/{Number}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStoreByNumberRequestScopeIdbyNumberNumberGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a store using its number - {GetStoreByNumberRequest} Retrieve a specific store using its number
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">the number of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Store</returns>
        public async System.Threading.Tasks.Task<Store> GetStoreByNumberRequestScopeIdbyNumberNumberGetAsync(string accept, string scopeId, string number, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store> localVarResponse = await GetStoreByNumberRequestScopeIdbyNumberNumberGetWithHttpInfoAsync(accept, scopeId, number, cultureName, includeAddresses, includeSchedules, includeOperatingStatus, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a store using its number - {GetStoreByNumberRequest} Retrieve a specific store using its number
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="number">the number of the store.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store>> GetStoreByNumberRequestScopeIdbyNumberNumberGetWithHttpInfoAsync(string accept, string scopeId, string number, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->GetStoreByNumberRequestScopeIdbyNumberNumberGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->GetStoreByNumberRequestScopeIdbyNumberNumberGet");

            // verify the required parameter 'number' is set
            if (number == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'number' when calling StoresApi->GetStoreByNumberRequestScopeIdbyNumberNumberGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Number", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(number)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeOperatingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeOperatingStatus", includeOperatingStatus));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Store>("/stores/{ScopeId}/byNumber/{Number}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStoreByNumberRequestScopeIdbyNumberNumberGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a store using its Id - {GetStoreRequest} Retrieve a specific store using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <returns>Store</returns>
        public Store GetStoreRequestScopeIdIdGet(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store> localVarResponse = GetStoreRequestScopeIdIdGetWithHttpInfo(accept, scopeId, id, cultureName, includeAddresses, includeSchedules, includeOperatingStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a store using its Id - {GetStoreRequest} Retrieve a specific store using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <returns>ApiResponse of Store</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store> GetStoreRequestScopeIdIdGetWithHttpInfo(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->GetStoreRequestScopeIdIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->GetStoreRequestScopeIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling StoresApi->GetStoreRequestScopeIdIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeOperatingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeOperatingStatus", includeOperatingStatus));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Store>("/stores/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStoreRequestScopeIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a store using its Id - {GetStoreRequest} Retrieve a specific store using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Store</returns>
        public async System.Threading.Tasks.Task<Store> GetStoreRequestScopeIdIdGetAsync(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store> localVarResponse = await GetStoreRequestScopeIdIdGetWithHttpInfoAsync(accept, scopeId, id, cultureName, includeAddresses, includeSchedules, includeOperatingStatus, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a store using its Id - {GetStoreRequest} Retrieve a specific store using its Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">the unique id of the Store</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store. (optional)</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store. (optional)</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Store)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Store>> GetStoreRequestScopeIdIdGetWithHttpInfoAsync(string accept, string scopeId, string id, string cultureName = default(string), bool? includeAddresses = default(bool?), bool? includeSchedules = default(bool?), bool? includeOperatingStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling StoresApi->GetStoreRequestScopeIdIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling StoresApi->GetStoreRequestScopeIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling StoresApi->GetStoreRequestScopeIdIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeOperatingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeOperatingStatus", includeOperatingStatus));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Store>("/stores/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStoreRequestScopeIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
