/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPickingMissionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assigns a picker to the specified picking mission - {AssignPickerToPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Assigns a picker to the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        PickingMission AssignPickerToPickingMissionRequestScopeIdIdassignPickerPost(string accept, string scopeId, string id, AssignPickerToPickingMissionRequest body = default(AssignPickerToPickingMissionRequest));

        /// <summary>
        /// Assigns a picker to the specified picking mission - {AssignPickerToPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Assigns a picker to the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        ApiResponse<PickingMission> AssignPickerToPickingMissionRequestScopeIdIdassignPickerPostWithHttpInfo(string accept, string scopeId, string id, AssignPickerToPickingMissionRequest body = default(AssignPickerToPickingMissionRequest));
        /// <summary>
        /// Cancels the assembly of a picking mission which is currently in progress - {CancelPickingMissionAssemblyRequest}
        /// </summary>
        /// <remarks>
        /// Cancels the assembly of a picking mission which is currently in progress.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        PickingMission CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPost(string accept, string scopeId, string id, Object body = default(Object));

        /// <summary>
        /// Cancels the assembly of a picking mission which is currently in progress - {CancelPickingMissionAssemblyRequest}
        /// </summary>
        /// <remarks>
        /// Cancels the assembly of a picking mission which is currently in progress.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        ApiResponse<PickingMission> CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object));
        /// <summary>
        /// Cancels the specified picking mission - {CancelPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Cancels the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        PickingMission CancelPickingMissionRequestScopeIdIdcancelPost(string accept, string scopeId, string id, Object body = default(Object));

        /// <summary>
        /// Cancels the specified picking mission - {CancelPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Cancels the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        ApiResponse<PickingMission> CancelPickingMissionRequestScopeIdIdcancelPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object));
        /// <summary>
        /// Completes the specified picking mission with the list of picked quantity items - {CompletePickingMissionAssemblyRequest}
        /// </summary>
        /// <remarks>
        /// Completes the specified picking mission with the list of picked quantity items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        PickingMission CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPost(string accept, string scopeId, string id, CompletePickingMissionAssemblyRequest body = default(CompletePickingMissionAssemblyRequest));

        /// <summary>
        /// Completes the specified picking mission with the list of picked quantity items - {CompletePickingMissionAssemblyRequest}
        /// </summary>
        /// <remarks>
        /// Completes the specified picking mission with the list of picked quantity items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        ApiResponse<PickingMission> CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPostWithHttpInfo(string accept, string scopeId, string id, CompletePickingMissionAssemblyRequest body = default(CompletePickingMissionAssemblyRequest));
        /// <summary>
        /// Creates a new picking mission for a fulfillment location and a list of mission items - {CreatePickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new picking mission for a fulfillment location and a list of mission items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        PickingMission CreatePickingMissionRequestScopeIdPost(string accept, string scopeId, CreatePickingMissionRequest body = default(CreatePickingMissionRequest));

        /// <summary>
        /// Creates a new picking mission for a fulfillment location and a list of mission items - {CreatePickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new picking mission for a fulfillment location and a list of mission items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        ApiResponse<PickingMission> CreatePickingMissionRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreatePickingMissionRequest body = default(CreatePickingMissionRequest));
        /// <summary>
        /// Gets the list of picking missions for a fulfillment location and optionally filtered by status - {GetFulfillmentLocationPickingMissionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the list of picking missions for a fulfillment location and optionally filtered by status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier.</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <returns>PickingMissionResult</returns>
        PickingMissionResult GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGet(string accept, string scopeId, string fulfillmentLocationId, string status = default(string));

        /// <summary>
        /// Gets the list of picking missions for a fulfillment location and optionally filtered by status - {GetFulfillmentLocationPickingMissionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the list of picking missions for a fulfillment location and optionally filtered by status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier.</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <returns>ApiResponse of PickingMissionResult</returns>
        ApiResponse<PickingMissionResult> GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string status = default(string));
        /// <summary>
        /// Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status - {GetOrderPickingMissionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="orderId">the order identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <returns>PickingMissionResult</returns>
        PickingMissionResult GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGet(string accept, string scopeId, string orderId, string fulfillmentLocationId = default(string), string status = default(string));

        /// <summary>
        /// Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status - {GetOrderPickingMissionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="orderId">the order identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <returns>ApiResponse of PickingMissionResult</returns>
        ApiResponse<PickingMissionResult> GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGetWithHttpInfo(string accept, string scopeId, string orderId, string fulfillmentLocationId = default(string), string status = default(string));
        /// <summary>
        /// Gets a picking mission by its identifier - {GetPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Gets a picking mission by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <returns>PickingMission</returns>
        PickingMission GetPickingMissionRequestScopeIdIdGet(string accept, string scopeId, string id);

        /// <summary>
        /// Gets a picking mission by its identifier - {GetPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Gets a picking mission by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <returns>ApiResponse of PickingMission</returns>
        ApiResponse<PickingMission> GetPickingMissionRequestScopeIdIdGetWithHttpInfo(string accept, string scopeId, string id);
        /// <summary>
        /// Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status - {GetShipmentPickingMissionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="shipmentId">the shipment identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <returns>PickingMissionResult</returns>
        PickingMissionResult GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGet(string accept, string scopeId, string shipmentId, string fulfillmentLocationId = default(string), string status = default(string));

        /// <summary>
        /// Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status - {GetShipmentPickingMissionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="shipmentId">the shipment identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <returns>ApiResponse of PickingMissionResult</returns>
        ApiResponse<PickingMissionResult> GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGetWithHttpInfo(string accept, string scopeId, string shipmentId, string fulfillmentLocationId = default(string), string status = default(string));
        /// <summary>
        /// Saves the assembly progress made on the specified picking mission with the list of picked quantity items - {SavePickingMissionAssemblyProgressRequest}
        /// </summary>
        /// <remarks>
        /// Saves the assembly progress made on the specified picking mission with the list of picked quantity items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        PickingMission SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreate(string accept, string scopeId, string id, SavePickingMissionAssemblyProgressRequest body = default(SavePickingMissionAssemblyProgressRequest));

        /// <summary>
        /// Saves the assembly progress made on the specified picking mission with the list of picked quantity items - {SavePickingMissionAssemblyProgressRequest}
        /// </summary>
        /// <remarks>
        /// Saves the assembly progress made on the specified picking mission with the list of picked quantity items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        ApiResponse<PickingMission> SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreateWithHttpInfo(string accept, string scopeId, string id, SavePickingMissionAssemblyProgressRequest body = default(SavePickingMissionAssemblyProgressRequest));
        /// <summary>
        /// Starts the assembly of the specified picking mission - {StartPickingMissionAssemblyRequest}
        /// </summary>
        /// <remarks>
        /// Starts the assembly of the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        PickingMission StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPost(string accept, string scopeId, string id, Object body = default(Object));

        /// <summary>
        /// Starts the assembly of the specified picking mission - {StartPickingMissionAssemblyRequest}
        /// </summary>
        /// <remarks>
        /// Starts the assembly of the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        ApiResponse<PickingMission> StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object));
        /// <summary>
        /// Unassigns the picker from the specified picking mission - {UnassignPickerFromPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Unassigns the picker from the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        PickingMission UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPost(string accept, string scopeId, string id, Object body = default(Object));

        /// <summary>
        /// Unassigns the picker from the specified picking mission - {UnassignPickerFromPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Unassigns the picker from the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        ApiResponse<PickingMission> UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object));
        /// <summary>
        /// Updates mission items of the specified picking mission - {UpdatePickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Updates mission items of the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        PickingMission UpdatePickingMissionRequestScopeIdIdCreate(string accept, string scopeId, string id, UpdatePickingMissionRequest body = default(UpdatePickingMissionRequest));

        /// <summary>
        /// Updates mission items of the specified picking mission - {UpdatePickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Updates mission items of the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        ApiResponse<PickingMission> UpdatePickingMissionRequestScopeIdIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdatePickingMissionRequest body = default(UpdatePickingMissionRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPickingMissionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Assigns a picker to the specified picking mission - {AssignPickerToPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Assigns a picker to the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        System.Threading.Tasks.Task<PickingMission> AssignPickerToPickingMissionRequestScopeIdIdassignPickerPostAsync(string accept, string scopeId, string id, AssignPickerToPickingMissionRequest body = default(AssignPickerToPickingMissionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assigns a picker to the specified picking mission - {AssignPickerToPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Assigns a picker to the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMission>> AssignPickerToPickingMissionRequestScopeIdIdassignPickerPostWithHttpInfoAsync(string accept, string scopeId, string id, AssignPickerToPickingMissionRequest body = default(AssignPickerToPickingMissionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancels the assembly of a picking mission which is currently in progress - {CancelPickingMissionAssemblyRequest}
        /// </summary>
        /// <remarks>
        /// Cancels the assembly of a picking mission which is currently in progress.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        System.Threading.Tasks.Task<PickingMission> CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancels the assembly of a picking mission which is currently in progress - {CancelPickingMissionAssemblyRequest}
        /// </summary>
        /// <remarks>
        /// Cancels the assembly of a picking mission which is currently in progress.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMission>> CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancels the specified picking mission - {CancelPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Cancels the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        System.Threading.Tasks.Task<PickingMission> CancelPickingMissionRequestScopeIdIdcancelPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancels the specified picking mission - {CancelPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Cancels the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMission>> CancelPickingMissionRequestScopeIdIdcancelPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Completes the specified picking mission with the list of picked quantity items - {CompletePickingMissionAssemblyRequest}
        /// </summary>
        /// <remarks>
        /// Completes the specified picking mission with the list of picked quantity items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        System.Threading.Tasks.Task<PickingMission> CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPostAsync(string accept, string scopeId, string id, CompletePickingMissionAssemblyRequest body = default(CompletePickingMissionAssemblyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Completes the specified picking mission with the list of picked quantity items - {CompletePickingMissionAssemblyRequest}
        /// </summary>
        /// <remarks>
        /// Completes the specified picking mission with the list of picked quantity items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMission>> CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPostWithHttpInfoAsync(string accept, string scopeId, string id, CompletePickingMissionAssemblyRequest body = default(CompletePickingMissionAssemblyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new picking mission for a fulfillment location and a list of mission items - {CreatePickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new picking mission for a fulfillment location and a list of mission items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        System.Threading.Tasks.Task<PickingMission> CreatePickingMissionRequestScopeIdPostAsync(string accept, string scopeId, CreatePickingMissionRequest body = default(CreatePickingMissionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new picking mission for a fulfillment location and a list of mission items - {CreatePickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new picking mission for a fulfillment location and a list of mission items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMission>> CreatePickingMissionRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreatePickingMissionRequest body = default(CreatePickingMissionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the list of picking missions for a fulfillment location and optionally filtered by status - {GetFulfillmentLocationPickingMissionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the list of picking missions for a fulfillment location and optionally filtered by status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier.</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMissionResult</returns>
        System.Threading.Tasks.Task<PickingMissionResult> GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the list of picking missions for a fulfillment location and optionally filtered by status - {GetFulfillmentLocationPickingMissionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the list of picking missions for a fulfillment location and optionally filtered by status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier.</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMissionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMissionResult>> GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status - {GetOrderPickingMissionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="orderId">the order identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMissionResult</returns>
        System.Threading.Tasks.Task<PickingMissionResult> GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGetAsync(string accept, string scopeId, string orderId, string fulfillmentLocationId = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status - {GetOrderPickingMissionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="orderId">the order identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMissionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMissionResult>> GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGetWithHttpInfoAsync(string accept, string scopeId, string orderId, string fulfillmentLocationId = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a picking mission by its identifier - {GetPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Gets a picking mission by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        System.Threading.Tasks.Task<PickingMission> GetPickingMissionRequestScopeIdIdGetAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a picking mission by its identifier - {GetPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Gets a picking mission by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMission>> GetPickingMissionRequestScopeIdIdGetWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status - {GetShipmentPickingMissionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="shipmentId">the shipment identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMissionResult</returns>
        System.Threading.Tasks.Task<PickingMissionResult> GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGetAsync(string accept, string scopeId, string shipmentId, string fulfillmentLocationId = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status - {GetShipmentPickingMissionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="shipmentId">the shipment identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMissionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMissionResult>> GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGetWithHttpInfoAsync(string accept, string scopeId, string shipmentId, string fulfillmentLocationId = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Saves the assembly progress made on the specified picking mission with the list of picked quantity items - {SavePickingMissionAssemblyProgressRequest}
        /// </summary>
        /// <remarks>
        /// Saves the assembly progress made on the specified picking mission with the list of picked quantity items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        System.Threading.Tasks.Task<PickingMission> SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreateAsync(string accept, string scopeId, string id, SavePickingMissionAssemblyProgressRequest body = default(SavePickingMissionAssemblyProgressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Saves the assembly progress made on the specified picking mission with the list of picked quantity items - {SavePickingMissionAssemblyProgressRequest}
        /// </summary>
        /// <remarks>
        /// Saves the assembly progress made on the specified picking mission with the list of picked quantity items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMission>> SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreateWithHttpInfoAsync(string accept, string scopeId, string id, SavePickingMissionAssemblyProgressRequest body = default(SavePickingMissionAssemblyProgressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Starts the assembly of the specified picking mission - {StartPickingMissionAssemblyRequest}
        /// </summary>
        /// <remarks>
        /// Starts the assembly of the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        System.Threading.Tasks.Task<PickingMission> StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Starts the assembly of the specified picking mission - {StartPickingMissionAssemblyRequest}
        /// </summary>
        /// <remarks>
        /// Starts the assembly of the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMission>> StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unassigns the picker from the specified picking mission - {UnassignPickerFromPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Unassigns the picker from the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        System.Threading.Tasks.Task<PickingMission> UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unassigns the picker from the specified picking mission - {UnassignPickerFromPickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Unassigns the picker from the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMission>> UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates mission items of the specified picking mission - {UpdatePickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Updates mission items of the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        System.Threading.Tasks.Task<PickingMission> UpdatePickingMissionRequestScopeIdIdCreateAsync(string accept, string scopeId, string id, UpdatePickingMissionRequest body = default(UpdatePickingMissionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates mission items of the specified picking mission - {UpdatePickingMissionRequest}
        /// </summary>
        /// <remarks>
        /// Updates mission items of the specified picking mission.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        System.Threading.Tasks.Task<ApiResponse<PickingMission>> UpdatePickingMissionRequestScopeIdIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdatePickingMissionRequest body = default(UpdatePickingMissionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPickingMissionsApi : IPickingMissionsApiSync, IPickingMissionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PickingMissionsApi : IPickingMissionsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PickingMissionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PickingMissionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PickingMissionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PickingMissionsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PickingMissionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PickingMissionsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PickingMissionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PickingMissionsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Assigns a picker to the specified picking mission - {AssignPickerToPickingMissionRequest} Assigns a picker to the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        public PickingMission AssignPickerToPickingMissionRequestScopeIdIdassignPickerPost(string accept, string scopeId, string id, AssignPickerToPickingMissionRequest body = default(AssignPickerToPickingMissionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = AssignPickerToPickingMissionRequestScopeIdIdassignPickerPostWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assigns a picker to the specified picking mission - {AssignPickerToPickingMissionRequest} Assigns a picker to the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> AssignPickerToPickingMissionRequestScopeIdIdassignPickerPostWithHttpInfo(string accept, string scopeId, string id, AssignPickerToPickingMissionRequest body = default(AssignPickerToPickingMissionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->AssignPickerToPickingMissionRequestScopeIdIdassignPickerPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->AssignPickerToPickingMissionRequestScopeIdIdassignPickerPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->AssignPickerToPickingMissionRequestScopeIdIdassignPickerPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PickingMission>("/pickingMissions/{ScopeId}/{Id}/assignPicker", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignPickerToPickingMissionRequestScopeIdIdassignPickerPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assigns a picker to the specified picking mission - {AssignPickerToPickingMissionRequest} Assigns a picker to the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        public async System.Threading.Tasks.Task<PickingMission> AssignPickerToPickingMissionRequestScopeIdIdassignPickerPostAsync(string accept, string scopeId, string id, AssignPickerToPickingMissionRequest body = default(AssignPickerToPickingMissionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = await AssignPickerToPickingMissionRequestScopeIdIdassignPickerPostWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assigns a picker to the specified picking mission - {AssignPickerToPickingMissionRequest} Assigns a picker to the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission>> AssignPickerToPickingMissionRequestScopeIdIdassignPickerPostWithHttpInfoAsync(string accept, string scopeId, string id, AssignPickerToPickingMissionRequest body = default(AssignPickerToPickingMissionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->AssignPickerToPickingMissionRequestScopeIdIdassignPickerPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->AssignPickerToPickingMissionRequestScopeIdIdassignPickerPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->AssignPickerToPickingMissionRequestScopeIdIdassignPickerPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PickingMission>("/pickingMissions/{ScopeId}/{Id}/assignPicker", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignPickerToPickingMissionRequestScopeIdIdassignPickerPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancels the assembly of a picking mission which is currently in progress - {CancelPickingMissionAssemblyRequest} Cancels the assembly of a picking mission which is currently in progress.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        public PickingMission CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPost(string accept, string scopeId, string id, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPostWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels the assembly of a picking mission which is currently in progress - {CancelPickingMissionAssemblyRequest} Cancels the assembly of a picking mission which is currently in progress.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PickingMission>("/pickingMissions/{ScopeId}/{Id}/cancelAssembly", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancels the assembly of a picking mission which is currently in progress - {CancelPickingMissionAssemblyRequest} Cancels the assembly of a picking mission which is currently in progress.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        public async System.Threading.Tasks.Task<PickingMission> CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = await CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPostWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels the assembly of a picking mission which is currently in progress - {CancelPickingMissionAssemblyRequest} Cancels the assembly of a picking mission which is currently in progress.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission>> CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PickingMission>("/pickingMissions/{ScopeId}/{Id}/cancelAssembly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelPickingMissionAssemblyRequestScopeIdIdcancelAssemblyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancels the specified picking mission - {CancelPickingMissionRequest} Cancels the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        public PickingMission CancelPickingMissionRequestScopeIdIdcancelPost(string accept, string scopeId, string id, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = CancelPickingMissionRequestScopeIdIdcancelPostWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels the specified picking mission - {CancelPickingMissionRequest} Cancels the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> CancelPickingMissionRequestScopeIdIdcancelPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->CancelPickingMissionRequestScopeIdIdcancelPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->CancelPickingMissionRequestScopeIdIdcancelPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->CancelPickingMissionRequestScopeIdIdcancelPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PickingMission>("/pickingMissions/{ScopeId}/{Id}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelPickingMissionRequestScopeIdIdcancelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancels the specified picking mission - {CancelPickingMissionRequest} Cancels the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        public async System.Threading.Tasks.Task<PickingMission> CancelPickingMissionRequestScopeIdIdcancelPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = await CancelPickingMissionRequestScopeIdIdcancelPostWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels the specified picking mission - {CancelPickingMissionRequest} Cancels the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission>> CancelPickingMissionRequestScopeIdIdcancelPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->CancelPickingMissionRequestScopeIdIdcancelPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->CancelPickingMissionRequestScopeIdIdcancelPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->CancelPickingMissionRequestScopeIdIdcancelPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PickingMission>("/pickingMissions/{ScopeId}/{Id}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelPickingMissionRequestScopeIdIdcancelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Completes the specified picking mission with the list of picked quantity items - {CompletePickingMissionAssemblyRequest} Completes the specified picking mission with the list of picked quantity items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        public PickingMission CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPost(string accept, string scopeId, string id, CompletePickingMissionAssemblyRequest body = default(CompletePickingMissionAssemblyRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPostWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Completes the specified picking mission with the list of picked quantity items - {CompletePickingMissionAssemblyRequest} Completes the specified picking mission with the list of picked quantity items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPostWithHttpInfo(string accept, string scopeId, string id, CompletePickingMissionAssemblyRequest body = default(CompletePickingMissionAssemblyRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PickingMission>("/pickingMissions/{ScopeId}/{Id}/completeAssembly", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Completes the specified picking mission with the list of picked quantity items - {CompletePickingMissionAssemblyRequest} Completes the specified picking mission with the list of picked quantity items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        public async System.Threading.Tasks.Task<PickingMission> CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPostAsync(string accept, string scopeId, string id, CompletePickingMissionAssemblyRequest body = default(CompletePickingMissionAssemblyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = await CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPostWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Completes the specified picking mission with the list of picked quantity items - {CompletePickingMissionAssemblyRequest} Completes the specified picking mission with the list of picked quantity items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission>> CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPostWithHttpInfoAsync(string accept, string scopeId, string id, CompletePickingMissionAssemblyRequest body = default(CompletePickingMissionAssemblyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PickingMission>("/pickingMissions/{ScopeId}/{Id}/completeAssembly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompletePickingMissionAssemblyRequestScopeIdIdcompleteAssemblyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new picking mission for a fulfillment location and a list of mission items - {CreatePickingMissionRequest} Creates a new picking mission for a fulfillment location and a list of mission items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        public PickingMission CreatePickingMissionRequestScopeIdPost(string accept, string scopeId, CreatePickingMissionRequest body = default(CreatePickingMissionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = CreatePickingMissionRequestScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new picking mission for a fulfillment location and a list of mission items - {CreatePickingMissionRequest} Creates a new picking mission for a fulfillment location and a list of mission items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> CreatePickingMissionRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreatePickingMissionRequest body = default(CreatePickingMissionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->CreatePickingMissionRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->CreatePickingMissionRequestScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PickingMission>("/pickingMissions/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePickingMissionRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new picking mission for a fulfillment location and a list of mission items - {CreatePickingMissionRequest} Creates a new picking mission for a fulfillment location and a list of mission items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        public async System.Threading.Tasks.Task<PickingMission> CreatePickingMissionRequestScopeIdPostAsync(string accept, string scopeId, CreatePickingMissionRequest body = default(CreatePickingMissionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = await CreatePickingMissionRequestScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new picking mission for a fulfillment location and a list of mission items - {CreatePickingMissionRequest} Creates a new picking mission for a fulfillment location and a list of mission items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission>> CreatePickingMissionRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreatePickingMissionRequest body = default(CreatePickingMissionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->CreatePickingMissionRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->CreatePickingMissionRequestScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PickingMission>("/pickingMissions/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePickingMissionRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the list of picking missions for a fulfillment location and optionally filtered by status - {GetFulfillmentLocationPickingMissionsRequest} Gets the list of picking missions for a fulfillment location and optionally filtered by status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier.</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <returns>PickingMissionResult</returns>
        public PickingMissionResult GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGet(string accept, string scopeId, string fulfillmentLocationId, string status = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMissionResult> localVarResponse = GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGetWithHttpInfo(accept, scopeId, fulfillmentLocationId, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of picking missions for a fulfillment location and optionally filtered by status - {GetFulfillmentLocationPickingMissionsRequest} Gets the list of picking missions for a fulfillment location and optionally filtered by status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier.</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <returns>ApiResponse of PickingMissionResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMissionResult> GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string status = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling PickingMissionsApi->GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PickingMissionResult>("/pickingMissions/{ScopeId}/byLocation/{FulfillmentLocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the list of picking missions for a fulfillment location and optionally filtered by status - {GetFulfillmentLocationPickingMissionsRequest} Gets the list of picking missions for a fulfillment location and optionally filtered by status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier.</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMissionResult</returns>
        public async System.Threading.Tasks.Task<PickingMissionResult> GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMissionResult> localVarResponse = await GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGetWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, status, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of picking missions for a fulfillment location and optionally filtered by status - {GetFulfillmentLocationPickingMissionsRequest} Gets the list of picking missions for a fulfillment location and optionally filtered by status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier.</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMissionResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMissionResult>> GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling PickingMissionsApi->GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PickingMissionResult>("/pickingMissions/{ScopeId}/byLocation/{FulfillmentLocationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationPickingMissionsRequestScopeIdbyLocationFulfillmentLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status - {GetOrderPickingMissionsRequest} Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="orderId">the order identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <returns>PickingMissionResult</returns>
        public PickingMissionResult GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGet(string accept, string scopeId, string orderId, string fulfillmentLocationId = default(string), string status = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMissionResult> localVarResponse = GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGetWithHttpInfo(accept, scopeId, orderId, fulfillmentLocationId, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status - {GetOrderPickingMissionsRequest} Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="orderId">the order identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <returns>ApiResponse of PickingMissionResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMissionResult> GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGetWithHttpInfo(string accept, string scopeId, string orderId, string fulfillmentLocationId = default(string), string status = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling PickingMissionsApi->GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            if (fulfillmentLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "FulfillmentLocationId", fulfillmentLocationId));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PickingMissionResult>("/pickingMissions/{ScopeId}/byOrder/{OrderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status - {GetOrderPickingMissionsRequest} Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="orderId">the order identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMissionResult</returns>
        public async System.Threading.Tasks.Task<PickingMissionResult> GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGetAsync(string accept, string scopeId, string orderId, string fulfillmentLocationId = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMissionResult> localVarResponse = await GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGetWithHttpInfoAsync(accept, scopeId, orderId, fulfillmentLocationId, status, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status - {GetOrderPickingMissionsRequest} Gets the list of picking missions for an order and optionally filtered by fulfillment location and/or status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="orderId">the order identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMissionResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMissionResult>> GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGetWithHttpInfoAsync(string accept, string scopeId, string orderId, string fulfillmentLocationId = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling PickingMissionsApi->GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            if (fulfillmentLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "FulfillmentLocationId", fulfillmentLocationId));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PickingMissionResult>("/pickingMissions/{ScopeId}/byOrder/{OrderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderPickingMissionsRequestScopeIdbyOrderOrderIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a picking mission by its identifier - {GetPickingMissionRequest} Gets a picking mission by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <returns>PickingMission</returns>
        public PickingMission GetPickingMissionRequestScopeIdIdGet(string accept, string scopeId, string id)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = GetPickingMissionRequestScopeIdIdGetWithHttpInfo(accept, scopeId, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a picking mission by its identifier - {GetPickingMissionRequest} Gets a picking mission by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <returns>ApiResponse of PickingMission</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> GetPickingMissionRequestScopeIdIdGetWithHttpInfo(string accept, string scopeId, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->GetPickingMissionRequestScopeIdIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->GetPickingMissionRequestScopeIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->GetPickingMissionRequestScopeIdIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PickingMission>("/pickingMissions/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPickingMissionRequestScopeIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a picking mission by its identifier - {GetPickingMissionRequest} Gets a picking mission by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        public async System.Threading.Tasks.Task<PickingMission> GetPickingMissionRequestScopeIdIdGetAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = await GetPickingMissionRequestScopeIdIdGetWithHttpInfoAsync(accept, scopeId, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a picking mission by its identifier - {GetPickingMissionRequest} Gets a picking mission by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission>> GetPickingMissionRequestScopeIdIdGetWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->GetPickingMissionRequestScopeIdIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->GetPickingMissionRequestScopeIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->GetPickingMissionRequestScopeIdIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PickingMission>("/pickingMissions/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPickingMissionRequestScopeIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status - {GetShipmentPickingMissionsRequest} Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="shipmentId">the shipment identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <returns>PickingMissionResult</returns>
        public PickingMissionResult GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGet(string accept, string scopeId, string shipmentId, string fulfillmentLocationId = default(string), string status = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMissionResult> localVarResponse = GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGetWithHttpInfo(accept, scopeId, shipmentId, fulfillmentLocationId, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status - {GetShipmentPickingMissionsRequest} Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="shipmentId">the shipment identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <returns>ApiResponse of PickingMissionResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMissionResult> GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGetWithHttpInfo(string accept, string scopeId, string shipmentId, string fulfillmentLocationId = default(string), string status = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGet");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling PickingMissionsApi->GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (fulfillmentLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "FulfillmentLocationId", fulfillmentLocationId));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PickingMissionResult>("/pickingMissions/{ScopeId}/byShipment/{ShipmentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status - {GetShipmentPickingMissionsRequest} Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="shipmentId">the shipment identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMissionResult</returns>
        public async System.Threading.Tasks.Task<PickingMissionResult> GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGetAsync(string accept, string scopeId, string shipmentId, string fulfillmentLocationId = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMissionResult> localVarResponse = await GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGetWithHttpInfoAsync(accept, scopeId, shipmentId, fulfillmentLocationId, status, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status - {GetShipmentPickingMissionsRequest} Gets the list of picking missions for a shipment and optionally filtered by fulfillment location and/or status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="shipmentId">the shipment identifier.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier. (optional)</param>
        /// <param name="status">the picking mission status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMissionResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMissionResult>> GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGetWithHttpInfoAsync(string accept, string scopeId, string shipmentId, string fulfillmentLocationId = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGet");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling PickingMissionsApi->GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (fulfillmentLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "FulfillmentLocationId", fulfillmentLocationId));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PickingMissionResult>("/pickingMissions/{ScopeId}/byShipment/{ShipmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentPickingMissionsRequestScopeIdbyShipmentShipmentIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Saves the assembly progress made on the specified picking mission with the list of picked quantity items - {SavePickingMissionAssemblyProgressRequest} Saves the assembly progress made on the specified picking mission with the list of picked quantity items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        public PickingMission SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreate(string accept, string scopeId, string id, SavePickingMissionAssemblyProgressRequest body = default(SavePickingMissionAssemblyProgressRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreateWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Saves the assembly progress made on the specified picking mission with the list of picked quantity items - {SavePickingMissionAssemblyProgressRequest} Saves the assembly progress made on the specified picking mission with the list of picked quantity items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreateWithHttpInfo(string accept, string scopeId, string id, SavePickingMissionAssemblyProgressRequest body = default(SavePickingMissionAssemblyProgressRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PickingMission>("/pickingMissions/{ScopeId}/{Id}/saveAssemblyProgress", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Saves the assembly progress made on the specified picking mission with the list of picked quantity items - {SavePickingMissionAssemblyProgressRequest} Saves the assembly progress made on the specified picking mission with the list of picked quantity items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        public async System.Threading.Tasks.Task<PickingMission> SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreateAsync(string accept, string scopeId, string id, SavePickingMissionAssemblyProgressRequest body = default(SavePickingMissionAssemblyProgressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = await SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreateWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Saves the assembly progress made on the specified picking mission with the list of picked quantity items - {SavePickingMissionAssemblyProgressRequest} Saves the assembly progress made on the specified picking mission with the list of picked quantity items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission>> SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreateWithHttpInfoAsync(string accept, string scopeId, string id, SavePickingMissionAssemblyProgressRequest body = default(SavePickingMissionAssemblyProgressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PickingMission>("/pickingMissions/{ScopeId}/{Id}/saveAssemblyProgress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SavePickingMissionAssemblyProgressRequestScopeIdIdsaveAssemblyProgressCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts the assembly of the specified picking mission - {StartPickingMissionAssemblyRequest} Starts the assembly of the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        public PickingMission StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPost(string accept, string scopeId, string id, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPostWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts the assembly of the specified picking mission - {StartPickingMissionAssemblyRequest} Starts the assembly of the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PickingMission>("/pickingMissions/{ScopeId}/{Id}/startAssembly", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts the assembly of the specified picking mission - {StartPickingMissionAssemblyRequest} Starts the assembly of the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        public async System.Threading.Tasks.Task<PickingMission> StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = await StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPostWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts the assembly of the specified picking mission - {StartPickingMissionAssemblyRequest} Starts the assembly of the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission>> StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PickingMission>("/pickingMissions/{ScopeId}/{Id}/startAssembly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartPickingMissionAssemblyRequestScopeIdIdstartAssemblyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassigns the picker from the specified picking mission - {UnassignPickerFromPickingMissionRequest} Unassigns the picker from the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        public PickingMission UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPost(string accept, string scopeId, string id, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPostWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unassigns the picker from the specified picking mission - {UnassignPickerFromPickingMissionRequest} Unassigns the picker from the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PickingMission>("/pickingMissions/{ScopeId}/{Id}/unassignPicker", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassigns the picker from the specified picking mission - {UnassignPickerFromPickingMissionRequest} Unassigns the picker from the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        public async System.Threading.Tasks.Task<PickingMission> UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = await UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPostWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unassigns the picker from the specified picking mission - {UnassignPickerFromPickingMissionRequest} Unassigns the picker from the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope identifier.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission>> UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PickingMission>("/pickingMissions/{ScopeId}/{Id}/unassignPicker", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnassignPickerFromPickingMissionRequestScopeIdIdunassignPickerPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates mission items of the specified picking mission - {UpdatePickingMissionRequest} Updates mission items of the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PickingMission</returns>
        public PickingMission UpdatePickingMissionRequestScopeIdIdCreate(string accept, string scopeId, string id, UpdatePickingMissionRequest body = default(UpdatePickingMissionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = UpdatePickingMissionRequestScopeIdIdCreateWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates mission items of the specified picking mission - {UpdatePickingMissionRequest} Updates mission items of the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PickingMission</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> UpdatePickingMissionRequestScopeIdIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdatePickingMissionRequest body = default(UpdatePickingMissionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->UpdatePickingMissionRequestScopeIdIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->UpdatePickingMissionRequestScopeIdIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->UpdatePickingMissionRequestScopeIdIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PickingMission>("/pickingMissions/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePickingMissionRequestScopeIdIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates mission items of the specified picking mission - {UpdatePickingMissionRequest} Updates mission items of the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PickingMission</returns>
        public async System.Threading.Tasks.Task<PickingMission> UpdatePickingMissionRequestScopeIdIdCreateAsync(string accept, string scopeId, string id, UpdatePickingMissionRequest body = default(UpdatePickingMissionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission> localVarResponse = await UpdatePickingMissionRequestScopeIdIdCreateWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates mission items of the specified picking mission - {UpdatePickingMissionRequest} Updates mission items of the specified picking mission.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">the scope id.</param>
        /// <param name="id">the picking mission identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PickingMission)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PickingMission>> UpdatePickingMissionRequestScopeIdIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdatePickingMissionRequest body = default(UpdatePickingMissionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PickingMissionsApi->UpdatePickingMissionRequestScopeIdIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PickingMissionsApi->UpdatePickingMissionRequestScopeIdIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling PickingMissionsApi->UpdatePickingMissionRequestScopeIdIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PickingMission>("/pickingMissions/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePickingMissionRequestScopeIdIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
