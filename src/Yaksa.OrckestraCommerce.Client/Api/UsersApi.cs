/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate the user. - {ActivateUserRequest}
        /// </summary>
        /// <remarks>
        /// Activate the user using its username.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>User</returns>
        User ActivateUserRequestUserNameactivatePost(string accept, string userName, Object body = default(Object));

        /// <summary>
        /// Activate the user. - {ActivateUserRequest}
        /// </summary>
        /// <remarks>
        /// Activate the user using its username.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> ActivateUserRequestUserNameactivatePostWithHttpInfo(string accept, string userName, Object body = default(Object));
        /// <summary>
        /// Activate a batch of users using theirs usernames - {ActivateUsersRequest}
        /// </summary>
        /// <remarks>
        /// Activate a batch of users using theirs usernames
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ActivateUsersRequestactivateCreate(string accept, ActivateUsersRequest body = default(ActivateUsersRequest));

        /// <summary>
        /// Activate a batch of users using theirs usernames - {ActivateUsersRequest}
        /// </summary>
        /// <remarks>
        /// Activate a batch of users using theirs usernames
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateUsersRequestactivateCreateWithHttpInfo(string accept, ActivateUsersRequest body = default(ActivateUsersRequest));
        /// <summary>
        /// Create a new user - {CreateUserRequest}
        /// </summary>
        /// <remarks>
        /// Create a new user
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>User</returns>
        User CreateUserRequestUserNamePost(string accept, string userName, CreateUserRequest body = default(CreateUserRequest));

        /// <summary>
        /// Create a new user - {CreateUserRequest}
        /// </summary>
        /// <remarks>
        /// Create a new user
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> CreateUserRequestUserNamePostWithHttpInfo(string accept, string userName, CreateUserRequest body = default(CreateUserRequest));
        /// <summary>
        /// Deactivate the user using its username - {DeactivateUserRequest}
        /// </summary>
        /// <remarks>
        /// Deactivate the user using its username
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>User</returns>
        User DeactivateUserRequestUserNamedeactivatePost(string accept, string userName, Object body = default(Object));

        /// <summary>
        /// Deactivate the user using its username - {DeactivateUserRequest}
        /// </summary>
        /// <remarks>
        /// Deactivate the user using its username
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> DeactivateUserRequestUserNamedeactivatePostWithHttpInfo(string accept, string userName, Object body = default(Object));
        /// <summary>
        /// Deactivate a batch of users using theirs usernames - {DeactivateUsersRequest}
        /// </summary>
        /// <remarks>
        /// Deactivate a batch of users using theirs usernames
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void DeactivateUsersRequestdesactivateCreate(string accept, DeactivateUsersRequest body = default(DeactivateUsersRequest));

        /// <summary>
        /// Deactivate a batch of users using theirs usernames - {DeactivateUsersRequest}
        /// </summary>
        /// <remarks>
        /// Deactivate a batch of users using theirs usernames
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivateUsersRequestdesactivateCreateWithHttpInfo(string accept, DeactivateUsersRequest body = default(DeactivateUsersRequest));
        /// <summary>
        /// Delete the user. - {DeleteUserRequest}
        /// </summary>
        /// <remarks>
        /// Delete the user using its username.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <returns></returns>
        void DeleteUserRequestUserNameDelete(string accept, string userName);

        /// <summary>
        /// Delete the user. - {DeleteUserRequest}
        /// </summary>
        /// <remarks>
        /// Delete the user using its username.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserRequestUserNameDeleteWithHttpInfo(string accept, string userName);
        /// <summary>
        /// Find the users by name. Search in userPrincipalName, displayName and givenName - {FindUsersByNameRequest}
        /// </summary>
        /// <remarks>
        /// Find the users by name. Search in userPrincipalName, displayName and givenName
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindUsersByNameResult</returns>
        FindUsersByNameResult FindUsersByNameRequestfindPost(string accept, FindUsersByNameRequest body = default(FindUsersByNameRequest));

        /// <summary>
        /// Find the users by name. Search in userPrincipalName, displayName and givenName - {FindUsersByNameRequest}
        /// </summary>
        /// <remarks>
        /// Find the users by name. Search in userPrincipalName, displayName and givenName
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindUsersByNameResult</returns>
        ApiResponse<FindUsersByNameResult> FindUsersByNameRequestfindPostWithHttpInfo(string accept, FindUsersByNameRequest body = default(FindUsersByNameRequest));
        /// <summary>
        /// Force the change of a user&#39;s password. - {ForceChangeUserPasswordRequest}
        /// </summary>
        /// <remarks>
        /// Force the change of a user&#39;s password.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ForceChangeUserPasswordRequestUserNameforceChangePasswordPost(string accept, string userName, ForceChangeUserPasswordRequest body = default(ForceChangeUserPasswordRequest));

        /// <summary>
        /// Force the change of a user&#39;s password. - {ForceChangeUserPasswordRequest}
        /// </summary>
        /// <remarks>
        /// Force the change of a user&#39;s password.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ForceChangeUserPasswordRequestUserNameforceChangePasswordPostWithHttpInfo(string accept, string userName, ForceChangeUserPasswordRequest body = default(ForceChangeUserPasswordRequest));
        /// <summary>
        /// Retrieve the available domains of the tenant. - {GetAvailableDomainsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the available domains of the tenant.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetAvailableDomainsRequestdomainsGet(string accept);

        /// <summary>
        /// Retrieve the available domains of the tenant. - {GetAvailableDomainsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the available domains of the tenant.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetAvailableDomainsRequestdomainsGetWithHttpInfo(string accept);
        /// <summary>
        /// Retrieve the user&#39;s group(s). - {GetUserGroupsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the user&#39;s group(s).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <returns>List&lt;Group&gt;</returns>
        List<Group> GetUserGroupsRequestUserNamegroupsGet(string accept, string userName);

        /// <summary>
        /// Retrieve the user&#39;s group(s). - {GetUserGroupsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the user&#39;s group(s).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        ApiResponse<List<Group>> GetUserGroupsRequestUserNamegroupsGetWithHttpInfo(string accept, string userName);
        /// <summary>
        /// Retrieve the user by its username - {GetUserRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the user by its username
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of user.</param>
        /// <returns>User</returns>
        User GetUserRequestUserNameGet(string accept, string userName);

        /// <summary>
        /// Retrieve the user by its username - {GetUserRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the user by its username
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of user.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserRequestUserNameGetWithHttpInfo(string accept, string userName);
        /// <summary>
        /// Reset the user password. - {ResetUserPasswordRequest}
        /// </summary>
        /// <remarks>
        /// Reset the user password.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResetUserPasswordResult</returns>
        ResetUserPasswordResult ResetUserPasswordRequestUserNameresetUserPasswordCreate(string accept, string userName, Object body = default(Object));

        /// <summary>
        /// Reset the user password. - {ResetUserPasswordRequest}
        /// </summary>
        /// <remarks>
        /// Reset the user password.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResetUserPasswordResult</returns>
        ApiResponse<ResetUserPasswordResult> ResetUserPasswordRequestUserNameresetUserPasswordCreateWithHttpInfo(string accept, string userName, Object body = default(Object));
        /// <summary>
        /// Save the user. - {SaveUserRequest}
        /// </summary>
        /// <remarks>
        /// Save the user.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>User</returns>
        User SaveUserRequestUserNameCreate(string accept, string userName, SaveUserRequest body = default(SaveUserRequest));

        /// <summary>
        /// Save the user. - {SaveUserRequest}
        /// </summary>
        /// <remarks>
        /// Save the user.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> SaveUserRequestUserNameCreateWithHttpInfo(string accept, string userName, SaveUserRequest body = default(SaveUserRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Activate the user. - {ActivateUserRequest}
        /// </summary>
        /// <remarks>
        /// Activate the user using its username.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> ActivateUserRequestUserNameactivatePostAsync(string accept, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activate the user. - {ActivateUserRequest}
        /// </summary>
        /// <remarks>
        /// Activate the user using its username.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> ActivateUserRequestUserNameactivatePostWithHttpInfoAsync(string accept, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Activate a batch of users using theirs usernames - {ActivateUsersRequest}
        /// </summary>
        /// <remarks>
        /// Activate a batch of users using theirs usernames
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateUsersRequestactivateCreateAsync(string accept, ActivateUsersRequest body = default(ActivateUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activate a batch of users using theirs usernames - {ActivateUsersRequest}
        /// </summary>
        /// <remarks>
        /// Activate a batch of users using theirs usernames
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateUsersRequestactivateCreateWithHttpInfoAsync(string accept, ActivateUsersRequest body = default(ActivateUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new user - {CreateUserRequest}
        /// </summary>
        /// <remarks>
        /// Create a new user
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> CreateUserRequestUserNamePostAsync(string accept, string userName, CreateUserRequest body = default(CreateUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new user - {CreateUserRequest}
        /// </summary>
        /// <remarks>
        /// Create a new user
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> CreateUserRequestUserNamePostWithHttpInfoAsync(string accept, string userName, CreateUserRequest body = default(CreateUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate the user using its username - {DeactivateUserRequest}
        /// </summary>
        /// <remarks>
        /// Deactivate the user using its username
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> DeactivateUserRequestUserNamedeactivatePostAsync(string accept, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deactivate the user using its username - {DeactivateUserRequest}
        /// </summary>
        /// <remarks>
        /// Deactivate the user using its username
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> DeactivateUserRequestUserNamedeactivatePostWithHttpInfoAsync(string accept, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate a batch of users using theirs usernames - {DeactivateUsersRequest}
        /// </summary>
        /// <remarks>
        /// Deactivate a batch of users using theirs usernames
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivateUsersRequestdesactivateCreateAsync(string accept, DeactivateUsersRequest body = default(DeactivateUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deactivate a batch of users using theirs usernames - {DeactivateUsersRequest}
        /// </summary>
        /// <remarks>
        /// Deactivate a batch of users using theirs usernames
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateUsersRequestdesactivateCreateWithHttpInfoAsync(string accept, DeactivateUsersRequest body = default(DeactivateUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the user. - {DeleteUserRequest}
        /// </summary>
        /// <remarks>
        /// Delete the user using its username.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserRequestUserNameDeleteAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the user. - {DeleteUserRequest}
        /// </summary>
        /// <remarks>
        /// Delete the user using its username.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserRequestUserNameDeleteWithHttpInfoAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find the users by name. Search in userPrincipalName, displayName and givenName - {FindUsersByNameRequest}
        /// </summary>
        /// <remarks>
        /// Find the users by name. Search in userPrincipalName, displayName and givenName
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindUsersByNameResult</returns>
        System.Threading.Tasks.Task<FindUsersByNameResult> FindUsersByNameRequestfindPostAsync(string accept, FindUsersByNameRequest body = default(FindUsersByNameRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find the users by name. Search in userPrincipalName, displayName and givenName - {FindUsersByNameRequest}
        /// </summary>
        /// <remarks>
        /// Find the users by name. Search in userPrincipalName, displayName and givenName
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindUsersByNameResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindUsersByNameResult>> FindUsersByNameRequestfindPostWithHttpInfoAsync(string accept, FindUsersByNameRequest body = default(FindUsersByNameRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Force the change of a user&#39;s password. - {ForceChangeUserPasswordRequest}
        /// </summary>
        /// <remarks>
        /// Force the change of a user&#39;s password.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ForceChangeUserPasswordRequestUserNameforceChangePasswordPostAsync(string accept, string userName, ForceChangeUserPasswordRequest body = default(ForceChangeUserPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Force the change of a user&#39;s password. - {ForceChangeUserPasswordRequest}
        /// </summary>
        /// <remarks>
        /// Force the change of a user&#39;s password.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ForceChangeUserPasswordRequestUserNameforceChangePasswordPostWithHttpInfoAsync(string accept, string userName, ForceChangeUserPasswordRequest body = default(ForceChangeUserPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the available domains of the tenant. - {GetAvailableDomainsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the available domains of the tenant.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetAvailableDomainsRequestdomainsGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the available domains of the tenant. - {GetAvailableDomainsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the available domains of the tenant.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetAvailableDomainsRequestdomainsGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the user&#39;s group(s). - {GetUserGroupsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the user&#39;s group(s).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        System.Threading.Tasks.Task<List<Group>> GetUserGroupsRequestUserNamegroupsGetAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the user&#39;s group(s). - {GetUserGroupsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the user&#39;s group(s).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Group>>> GetUserGroupsRequestUserNamegroupsGetWithHttpInfoAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the user by its username - {GetUserRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the user by its username
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserRequestUserNameGetAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the user by its username - {GetUserRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the user by its username
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserRequestUserNameGetWithHttpInfoAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reset the user password. - {ResetUserPasswordRequest}
        /// </summary>
        /// <remarks>
        /// Reset the user password.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResetUserPasswordResult</returns>
        System.Threading.Tasks.Task<ResetUserPasswordResult> ResetUserPasswordRequestUserNameresetUserPasswordCreateAsync(string accept, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reset the user password. - {ResetUserPasswordRequest}
        /// </summary>
        /// <remarks>
        /// Reset the user password.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResetUserPasswordResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResetUserPasswordResult>> ResetUserPasswordRequestUserNameresetUserPasswordCreateWithHttpInfoAsync(string accept, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save the user. - {SaveUserRequest}
        /// </summary>
        /// <remarks>
        /// Save the user.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> SaveUserRequestUserNameCreateAsync(string accept, string userName, SaveUserRequest body = default(SaveUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save the user. - {SaveUserRequest}
        /// </summary>
        /// <remarks>
        /// Save the user.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> SaveUserRequestUserNameCreateWithHttpInfoAsync(string accept, string userName, SaveUserRequest body = default(SaveUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Activate the user. - {ActivateUserRequest} Activate the user using its username.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>User</returns>
        public User ActivateUserRequestUserNameactivatePost(string accept, string userName, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> localVarResponse = ActivateUserRequestUserNameactivatePostWithHttpInfo(accept, userName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate the user. - {ActivateUserRequest} Activate the user using its username.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> ActivateUserRequestUserNameactivatePostWithHttpInfo(string accept, string userName, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->ActivateUserRequestUserNameactivatePost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->ActivateUserRequestUserNameactivatePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<User>("/users/{UserName}/activate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateUserRequestUserNameactivatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate the user. - {ActivateUserRequest} Activate the user using its username.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> ActivateUserRequestUserNameactivatePostAsync(string accept, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> localVarResponse = await ActivateUserRequestUserNameactivatePostWithHttpInfoAsync(accept, userName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate the user. - {ActivateUserRequest} Activate the user using its username.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User>> ActivateUserRequestUserNameactivatePostWithHttpInfoAsync(string accept, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->ActivateUserRequestUserNameactivatePost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->ActivateUserRequestUserNameactivatePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/users/{UserName}/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateUserRequestUserNameactivatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate a batch of users using theirs usernames - {ActivateUsersRequest} Activate a batch of users using theirs usernames
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ActivateUsersRequestactivateCreate(string accept, ActivateUsersRequest body = default(ActivateUsersRequest))
        {
            ActivateUsersRequestactivateCreateWithHttpInfo(accept, body);
        }

        /// <summary>
        /// Activate a batch of users using theirs usernames - {ActivateUsersRequest} Activate a batch of users using theirs usernames
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> ActivateUsersRequestactivateCreateWithHttpInfo(string accept, ActivateUsersRequest body = default(ActivateUsersRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->ActivateUsersRequestactivateCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/activate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateUsersRequestactivateCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate a batch of users using theirs usernames - {ActivateUsersRequest} Activate a batch of users using theirs usernames
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateUsersRequestactivateCreateAsync(string accept, ActivateUsersRequest body = default(ActivateUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ActivateUsersRequestactivateCreateWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate a batch of users using theirs usernames - {ActivateUsersRequest} Activate a batch of users using theirs usernames
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> ActivateUsersRequestactivateCreateWithHttpInfoAsync(string accept, ActivateUsersRequest body = default(ActivateUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->ActivateUsersRequestactivateCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateUsersRequestactivateCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new user - {CreateUserRequest} Create a new user
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>User</returns>
        public User CreateUserRequestUserNamePost(string accept, string userName, CreateUserRequest body = default(CreateUserRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> localVarResponse = CreateUserRequestUserNamePostWithHttpInfo(accept, userName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user - {CreateUserRequest} Create a new user
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> CreateUserRequestUserNamePostWithHttpInfo(string accept, string userName, CreateUserRequest body = default(CreateUserRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUserRequestUserNamePost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->CreateUserRequestUserNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<User>("/users/{UserName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserRequestUserNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new user - {CreateUserRequest} Create a new user
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> CreateUserRequestUserNamePostAsync(string accept, string userName, CreateUserRequest body = default(CreateUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> localVarResponse = await CreateUserRequestUserNamePostWithHttpInfoAsync(accept, userName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user - {CreateUserRequest} Create a new user
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User>> CreateUserRequestUserNamePostWithHttpInfoAsync(string accept, string userName, CreateUserRequest body = default(CreateUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->CreateUserRequestUserNamePost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->CreateUserRequestUserNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/users/{UserName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserRequestUserNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate the user using its username - {DeactivateUserRequest} Deactivate the user using its username
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>User</returns>
        public User DeactivateUserRequestUserNamedeactivatePost(string accept, string userName, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> localVarResponse = DeactivateUserRequestUserNamedeactivatePostWithHttpInfo(accept, userName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deactivate the user using its username - {DeactivateUserRequest} Deactivate the user using its username
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> DeactivateUserRequestUserNamedeactivatePostWithHttpInfo(string accept, string userName, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeactivateUserRequestUserNamedeactivatePost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->DeactivateUserRequestUserNamedeactivatePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<User>("/users/{UserName}/deactivate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateUserRequestUserNamedeactivatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate the user using its username - {DeactivateUserRequest} Deactivate the user using its username
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> DeactivateUserRequestUserNamedeactivatePostAsync(string accept, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> localVarResponse = await DeactivateUserRequestUserNamedeactivatePostWithHttpInfoAsync(accept, userName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deactivate the user using its username - {DeactivateUserRequest} Deactivate the user using its username
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The name of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User>> DeactivateUserRequestUserNamedeactivatePostWithHttpInfoAsync(string accept, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeactivateUserRequestUserNamedeactivatePost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->DeactivateUserRequestUserNamedeactivatePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/users/{UserName}/deactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateUserRequestUserNamedeactivatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate a batch of users using theirs usernames - {DeactivateUsersRequest} Deactivate a batch of users using theirs usernames
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void DeactivateUsersRequestdesactivateCreate(string accept, DeactivateUsersRequest body = default(DeactivateUsersRequest))
        {
            DeactivateUsersRequestdesactivateCreateWithHttpInfo(accept, body);
        }

        /// <summary>
        /// Deactivate a batch of users using theirs usernames - {DeactivateUsersRequest} Deactivate a batch of users using theirs usernames
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeactivateUsersRequestdesactivateCreateWithHttpInfo(string accept, DeactivateUsersRequest body = default(DeactivateUsersRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeactivateUsersRequestdesactivateCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/desactivate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateUsersRequestdesactivateCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate a batch of users using theirs usernames - {DeactivateUsersRequest} Deactivate a batch of users using theirs usernames
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivateUsersRequestdesactivateCreateAsync(string accept, DeactivateUsersRequest body = default(DeactivateUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeactivateUsersRequestdesactivateCreateWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deactivate a batch of users using theirs usernames - {DeactivateUsersRequest} Deactivate a batch of users using theirs usernames
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeactivateUsersRequestdesactivateCreateWithHttpInfoAsync(string accept, DeactivateUsersRequest body = default(DeactivateUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeactivateUsersRequestdesactivateCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/desactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateUsersRequestdesactivateCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the user. - {DeleteUserRequest} Delete the user using its username.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <returns></returns>
        public void DeleteUserRequestUserNameDelete(string accept, string userName)
        {
            DeleteUserRequestUserNameDeleteWithHttpInfo(accept, userName);
        }

        /// <summary>
        /// Delete the user. - {DeleteUserRequest} Delete the user using its username.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteUserRequestUserNameDeleteWithHttpInfo(string accept, string userName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserRequestUserNameDelete");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->DeleteUserRequestUserNameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{UserName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserRequestUserNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the user. - {DeleteUserRequest} Delete the user using its username.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserRequestUserNameDeleteAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteUserRequestUserNameDeleteWithHttpInfoAsync(accept, userName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete the user. - {DeleteUserRequest} Delete the user using its username.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteUserRequestUserNameDeleteWithHttpInfoAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->DeleteUserRequestUserNameDelete");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->DeleteUserRequestUserNameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{UserName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserRequestUserNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find the users by name. Search in userPrincipalName, displayName and givenName - {FindUsersByNameRequest} Find the users by name. Search in userPrincipalName, displayName and givenName
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindUsersByNameResult</returns>
        public FindUsersByNameResult FindUsersByNameRequestfindPost(string accept, FindUsersByNameRequest body = default(FindUsersByNameRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindUsersByNameResult> localVarResponse = FindUsersByNameRequestfindPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find the users by name. Search in userPrincipalName, displayName and givenName - {FindUsersByNameRequest} Find the users by name. Search in userPrincipalName, displayName and givenName
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindUsersByNameResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindUsersByNameResult> FindUsersByNameRequestfindPostWithHttpInfo(string accept, FindUsersByNameRequest body = default(FindUsersByNameRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->FindUsersByNameRequestfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindUsersByNameResult>("/users/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindUsersByNameRequestfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find the users by name. Search in userPrincipalName, displayName and givenName - {FindUsersByNameRequest} Find the users by name. Search in userPrincipalName, displayName and givenName
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindUsersByNameResult</returns>
        public async System.Threading.Tasks.Task<FindUsersByNameResult> FindUsersByNameRequestfindPostAsync(string accept, FindUsersByNameRequest body = default(FindUsersByNameRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindUsersByNameResult> localVarResponse = await FindUsersByNameRequestfindPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find the users by name. Search in userPrincipalName, displayName and givenName - {FindUsersByNameRequest} Find the users by name. Search in userPrincipalName, displayName and givenName
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindUsersByNameResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindUsersByNameResult>> FindUsersByNameRequestfindPostWithHttpInfoAsync(string accept, FindUsersByNameRequest body = default(FindUsersByNameRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->FindUsersByNameRequestfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FindUsersByNameResult>("/users/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindUsersByNameRequestfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Force the change of a user&#39;s password. - {ForceChangeUserPasswordRequest} Force the change of a user&#39;s password.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ForceChangeUserPasswordRequestUserNameforceChangePasswordPost(string accept, string userName, ForceChangeUserPasswordRequest body = default(ForceChangeUserPasswordRequest))
        {
            ForceChangeUserPasswordRequestUserNameforceChangePasswordPostWithHttpInfo(accept, userName, body);
        }

        /// <summary>
        /// Force the change of a user&#39;s password. - {ForceChangeUserPasswordRequest} Force the change of a user&#39;s password.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> ForceChangeUserPasswordRequestUserNameforceChangePasswordPostWithHttpInfo(string accept, string userName, ForceChangeUserPasswordRequest body = default(ForceChangeUserPasswordRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->ForceChangeUserPasswordRequestUserNameforceChangePasswordPost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->ForceChangeUserPasswordRequestUserNameforceChangePasswordPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/users/{UserName}/forceChangePassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForceChangeUserPasswordRequestUserNameforceChangePasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Force the change of a user&#39;s password. - {ForceChangeUserPasswordRequest} Force the change of a user&#39;s password.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ForceChangeUserPasswordRequestUserNameforceChangePasswordPostAsync(string accept, string userName, ForceChangeUserPasswordRequest body = default(ForceChangeUserPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ForceChangeUserPasswordRequestUserNameforceChangePasswordPostWithHttpInfoAsync(accept, userName, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Force the change of a user&#39;s password. - {ForceChangeUserPasswordRequest} Force the change of a user&#39;s password.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> ForceChangeUserPasswordRequestUserNameforceChangePasswordPostWithHttpInfoAsync(string accept, string userName, ForceChangeUserPasswordRequest body = default(ForceChangeUserPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->ForceChangeUserPasswordRequestUserNameforceChangePasswordPost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->ForceChangeUserPasswordRequestUserNameforceChangePasswordPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/users/{UserName}/forceChangePassword", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForceChangeUserPasswordRequestUserNameforceChangePasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the available domains of the tenant. - {GetAvailableDomainsRequest} Retrieve the available domains of the tenant.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetAvailableDomainsRequestdomainsGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<string>> localVarResponse = GetAvailableDomainsRequestdomainsGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the available domains of the tenant. - {GetAvailableDomainsRequest} Retrieve the available domains of the tenant.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<string>> GetAvailableDomainsRequestdomainsGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetAvailableDomainsRequestdomainsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/users/domains", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableDomainsRequestdomainsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the available domains of the tenant. - {GetAvailableDomainsRequest} Retrieve the available domains of the tenant.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetAvailableDomainsRequestdomainsGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<string>> localVarResponse = await GetAvailableDomainsRequestdomainsGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the available domains of the tenant. - {GetAvailableDomainsRequest} Retrieve the available domains of the tenant.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<string>>> GetAvailableDomainsRequestdomainsGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetAvailableDomainsRequestdomainsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/users/domains", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableDomainsRequestdomainsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the user&#39;s group(s). - {GetUserGroupsRequest} Retrieve the user&#39;s group(s).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <returns>List&lt;Group&gt;</returns>
        public List<Group> GetUserGroupsRequestUserNamegroupsGet(string accept, string userName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Group>> localVarResponse = GetUserGroupsRequestUserNamegroupsGetWithHttpInfo(accept, userName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the user&#39;s group(s). - {GetUserGroupsRequest} Retrieve the user&#39;s group(s).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Group>> GetUserGroupsRequestUserNamegroupsGetWithHttpInfo(string accept, string userName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserGroupsRequestUserNamegroupsGet");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->GetUserGroupsRequestUserNamegroupsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Group>>("/users/{UserName}/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroupsRequestUserNamegroupsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the user&#39;s group(s). - {GetUserGroupsRequest} Retrieve the user&#39;s group(s).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        public async System.Threading.Tasks.Task<List<Group>> GetUserGroupsRequestUserNamegroupsGetAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Group>> localVarResponse = await GetUserGroupsRequestUserNamegroupsGetWithHttpInfoAsync(accept, userName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the user&#39;s group(s). - {GetUserGroupsRequest} Retrieve the user&#39;s group(s).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Group>>> GetUserGroupsRequestUserNamegroupsGetWithHttpInfoAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserGroupsRequestUserNamegroupsGet");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->GetUserGroupsRequestUserNamegroupsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Group>>("/users/{UserName}/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroupsRequestUserNamegroupsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the user by its username - {GetUserRequest} Retrieve the user by its username
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of user.</param>
        /// <returns>User</returns>
        public User GetUserRequestUserNameGet(string accept, string userName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> localVarResponse = GetUserRequestUserNameGetWithHttpInfo(accept, userName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the user by its username - {GetUserRequest} Retrieve the user by its username
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of user.</param>
        /// <returns>ApiResponse of User</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> GetUserRequestUserNameGetWithHttpInfo(string accept, string userName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserRequestUserNameGet");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->GetUserRequestUserNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/users/{UserName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserRequestUserNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the user by its username - {GetUserRequest} Retrieve the user by its username
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserRequestUserNameGetAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> localVarResponse = await GetUserRequestUserNameGetWithHttpInfoAsync(accept, userName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the user by its username - {GetUserRequest} Retrieve the user by its username
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User>> GetUserRequestUserNameGetWithHttpInfoAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->GetUserRequestUserNameGet");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->GetUserRequestUserNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/users/{UserName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserRequestUserNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset the user password. - {ResetUserPasswordRequest} Reset the user password.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResetUserPasswordResult</returns>
        public ResetUserPasswordResult ResetUserPasswordRequestUserNameresetUserPasswordCreate(string accept, string userName, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ResetUserPasswordResult> localVarResponse = ResetUserPasswordRequestUserNameresetUserPasswordCreateWithHttpInfo(accept, userName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the user password. - {ResetUserPasswordRequest} Reset the user password.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResetUserPasswordResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ResetUserPasswordResult> ResetUserPasswordRequestUserNameresetUserPasswordCreateWithHttpInfo(string accept, string userName, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->ResetUserPasswordRequestUserNameresetUserPasswordCreate");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->ResetUserPasswordRequestUserNameresetUserPasswordCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ResetUserPasswordResult>("/users/{UserName}/resetUserPassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetUserPasswordRequestUserNameresetUserPasswordCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset the user password. - {ResetUserPasswordRequest} Reset the user password.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResetUserPasswordResult</returns>
        public async System.Threading.Tasks.Task<ResetUserPasswordResult> ResetUserPasswordRequestUserNameresetUserPasswordCreateAsync(string accept, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ResetUserPasswordResult> localVarResponse = await ResetUserPasswordRequestUserNameresetUserPasswordCreateWithHttpInfoAsync(accept, userName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the user password. - {ResetUserPasswordRequest} Reset the user password.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResetUserPasswordResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ResetUserPasswordResult>> ResetUserPasswordRequestUserNameresetUserPasswordCreateWithHttpInfoAsync(string accept, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->ResetUserPasswordRequestUserNameresetUserPasswordCreate");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->ResetUserPasswordRequestUserNameresetUserPasswordCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ResetUserPasswordResult>("/users/{UserName}/resetUserPassword", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetUserPasswordRequestUserNameresetUserPasswordCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save the user. - {SaveUserRequest} Save the user.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>User</returns>
        public User SaveUserRequestUserNameCreate(string accept, string userName, SaveUserRequest body = default(SaveUserRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> localVarResponse = SaveUserRequestUserNameCreateWithHttpInfo(accept, userName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save the user. - {SaveUserRequest} Save the user.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> SaveUserRequestUserNameCreateWithHttpInfo(string accept, string userName, SaveUserRequest body = default(SaveUserRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->SaveUserRequestUserNameCreate");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->SaveUserRequestUserNameCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<User>("/users/{UserName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveUserRequestUserNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save the user. - {SaveUserRequest} Save the user.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> SaveUserRequestUserNameCreateAsync(string accept, string userName, SaveUserRequest body = default(SaveUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User> localVarResponse = await SaveUserRequestUserNameCreateWithHttpInfoAsync(accept, userName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save the user. - {SaveUserRequest} Save the user.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">the username of the user.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<User>> SaveUserRequestUserNameCreateWithHttpInfoAsync(string accept, string userName, SaveUserRequest body = default(SaveUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling UsersApi->SaveUserRequestUserNameCreate");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->SaveUserRequestUserNameCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<User>("/users/{UserName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveUserRequestUserNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
