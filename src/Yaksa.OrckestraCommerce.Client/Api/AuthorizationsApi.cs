/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrievet the direct authorizations - {GetDirectAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the direct authorizations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectsIds">The objects identifiers.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;MembershipAuthorization&gt;</returns>
        List<MembershipAuthorization> GetDirectAuthorizationsRequestdirectObjectsIdsPost(string accept, List<string> objectsIds, Object body = default(Object));

        /// <summary>
        /// Retrievet the direct authorizations - {GetDirectAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the direct authorizations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectsIds">The objects identifiers.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MembershipAuthorization&gt;</returns>
        ApiResponse<List<MembershipAuthorization>> GetDirectAuthorizationsRequestdirectObjectsIdsPostWithHttpInfo(string accept, List<string> objectsIds, Object body = default(Object));
        /// <summary>
        /// Retrieve the effective authorizations - {GetEffectiveAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the effective authorizations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;MembershipAuthorization&gt;</returns>
        List<MembershipAuthorization> GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPost(string accept, GetEffectiveAuthorizationsRequest body = default(GetEffectiveAuthorizationsRequest));

        /// <summary>
        /// Retrieve the effective authorizations - {GetEffectiveAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the effective authorizations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MembershipAuthorization&gt;</returns>
        ApiResponse<List<MembershipAuthorization>> GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPostWithHttpInfo(string accept, GetEffectiveAuthorizationsRequest body = default(GetEffectiveAuthorizationsRequest));
        /// <summary>
        /// Retrieve the membership settings - {GetMembershipSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the membership settings
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>MembershipSettings</returns>
        MembershipSettings GetMembershipSettingsRequestsettingsGet(string accept);

        /// <summary>
        /// Retrieve the membership settings - {GetMembershipSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the membership settings
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of MembershipSettings</returns>
        ApiResponse<MembershipSettings> GetMembershipSettingsRequestsettingsGetWithHttpInfo(string accept);
        /// <summary>
        /// Retrieve the user effective authorizations - {GetUserEffectiveAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the user effective authorizations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <returns>List&lt;MembershipAuthorization&gt;</returns>
        List<MembershipAuthorization> GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGet(string accept, string userName);

        /// <summary>
        /// Retrieve the user effective authorizations - {GetUserEffectiveAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the user effective authorizations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <returns>ApiResponse of List&lt;MembershipAuthorization&gt;</returns>
        ApiResponse<List<MembershipAuthorization>> GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGetWithHttpInfo(string accept, string userName);
        /// <summary>
        /// Grant an authorization to an object (user or group for instance). - {GrantAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Grant an authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The role identifier.</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void GrantAuthorizationRequestRoleIdObjectIdPost(string accept, int roleId, string objectId, GrantAuthorizationRequest body = default(GrantAuthorizationRequest));

        /// <summary>
        /// Grant an authorization to an object (user or group for instance). - {GrantAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Grant an authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The role identifier.</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GrantAuthorizationRequestRoleIdObjectIdPostWithHttpInfo(string accept, int roleId, string objectId, GrantAuthorizationRequest body = default(GrantAuthorizationRequest));
        /// <summary>
        /// Grant a list of authorization to an object (user or group for instance). - {GrantAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Grant a list of authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void GrantAuthorizationsRequestObjectIdPost(string accept, string objectId, GrantAuthorizationsRequest body = default(GrantAuthorizationsRequest));

        /// <summary>
        /// Grant a list of authorization to an object (user or group for instance). - {GrantAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Grant a list of authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GrantAuthorizationsRequestObjectIdPostWithHttpInfo(string accept, string objectId, GrantAuthorizationsRequest body = default(GrantAuthorizationsRequest));
        /// <summary>
        /// Revoke an authorization to an object (user or group for instance). - {RevokeAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Revoke an authorization to an object (user or group for instance).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The Role identifier.</param>
        /// <param name="objectId">The Object identifier.</param>
        /// <param name="requestedScopeId">The Scope identifier. (optional)</param>
        /// <param name="objectType">The object type. (optional)</param>
        /// <returns></returns>
        void RevokeAuthorizationRequestRoleIdObjectIdDelete(string accept, int roleId, string objectId, string requestedScopeId = default(string), string objectType = default(string));

        /// <summary>
        /// Revoke an authorization to an object (user or group for instance). - {RevokeAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Revoke an authorization to an object (user or group for instance).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The Role identifier.</param>
        /// <param name="objectId">The Object identifier.</param>
        /// <param name="requestedScopeId">The Scope identifier. (optional)</param>
        /// <param name="objectType">The object type. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeAuthorizationRequestRoleIdObjectIdDeleteWithHttpInfo(string accept, int roleId, string objectId, string requestedScopeId = default(string), string objectType = default(string));
        /// <summary>
        /// Revoke a list of authorization to an object (user or group for instance). - {RevokeAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Revoke a list of authorization to an object (user or group for instance).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="authorizationsToRevoke">The list of authorization to revoke. (optional)</param>
        /// <returns></returns>
        void RevokeAuthorizationsRequestObjectIdDelete(string accept, string objectId, List<string> authorizationsToRevoke = default(List<string>));

        /// <summary>
        /// Revoke a list of authorization to an object (user or group for instance). - {RevokeAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Revoke a list of authorization to an object (user or group for instance).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="authorizationsToRevoke">The list of authorization to revoke. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeAuthorizationsRequestObjectIdDeleteWithHttpInfo(string accept, string objectId, List<string> authorizationsToRevoke = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrievet the direct authorizations - {GetDirectAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the direct authorizations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectsIds">The objects identifiers.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MembershipAuthorization&gt;</returns>
        System.Threading.Tasks.Task<List<MembershipAuthorization>> GetDirectAuthorizationsRequestdirectObjectsIdsPostAsync(string accept, List<string> objectsIds, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrievet the direct authorizations - {GetDirectAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the direct authorizations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectsIds">The objects identifiers.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MembershipAuthorization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MembershipAuthorization>>> GetDirectAuthorizationsRequestdirectObjectsIdsPostWithHttpInfoAsync(string accept, List<string> objectsIds, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the effective authorizations - {GetEffectiveAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the effective authorizations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MembershipAuthorization&gt;</returns>
        System.Threading.Tasks.Task<List<MembershipAuthorization>> GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPostAsync(string accept, GetEffectiveAuthorizationsRequest body = default(GetEffectiveAuthorizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the effective authorizations - {GetEffectiveAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the effective authorizations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MembershipAuthorization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MembershipAuthorization>>> GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPostWithHttpInfoAsync(string accept, GetEffectiveAuthorizationsRequest body = default(GetEffectiveAuthorizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the membership settings - {GetMembershipSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the membership settings
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembershipSettings</returns>
        System.Threading.Tasks.Task<MembershipSettings> GetMembershipSettingsRequestsettingsGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the membership settings - {GetMembershipSettingsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the membership settings
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembershipSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembershipSettings>> GetMembershipSettingsRequestsettingsGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the user effective authorizations - {GetUserEffectiveAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the user effective authorizations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MembershipAuthorization&gt;</returns>
        System.Threading.Tasks.Task<List<MembershipAuthorization>> GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGetAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the user effective authorizations - {GetUserEffectiveAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the user effective authorizations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MembershipAuthorization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MembershipAuthorization>>> GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGetWithHttpInfoAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Grant an authorization to an object (user or group for instance). - {GrantAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Grant an authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The role identifier.</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GrantAuthorizationRequestRoleIdObjectIdPostAsync(string accept, int roleId, string objectId, GrantAuthorizationRequest body = default(GrantAuthorizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Grant an authorization to an object (user or group for instance). - {GrantAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Grant an authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The role identifier.</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GrantAuthorizationRequestRoleIdObjectIdPostWithHttpInfoAsync(string accept, int roleId, string objectId, GrantAuthorizationRequest body = default(GrantAuthorizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Grant a list of authorization to an object (user or group for instance). - {GrantAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Grant a list of authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GrantAuthorizationsRequestObjectIdPostAsync(string accept, string objectId, GrantAuthorizationsRequest body = default(GrantAuthorizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Grant a list of authorization to an object (user or group for instance). - {GrantAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Grant a list of authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GrantAuthorizationsRequestObjectIdPostWithHttpInfoAsync(string accept, string objectId, GrantAuthorizationsRequest body = default(GrantAuthorizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke an authorization to an object (user or group for instance). - {RevokeAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Revoke an authorization to an object (user or group for instance).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The Role identifier.</param>
        /// <param name="objectId">The Object identifier.</param>
        /// <param name="requestedScopeId">The Scope identifier. (optional)</param>
        /// <param name="objectType">The object type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeAuthorizationRequestRoleIdObjectIdDeleteAsync(string accept, int roleId, string objectId, string requestedScopeId = default(string), string objectType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke an authorization to an object (user or group for instance). - {RevokeAuthorizationRequest}
        /// </summary>
        /// <remarks>
        /// Revoke an authorization to an object (user or group for instance).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The Role identifier.</param>
        /// <param name="objectId">The Object identifier.</param>
        /// <param name="requestedScopeId">The Scope identifier. (optional)</param>
        /// <param name="objectType">The object type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeAuthorizationRequestRoleIdObjectIdDeleteWithHttpInfoAsync(string accept, int roleId, string objectId, string requestedScopeId = default(string), string objectType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke a list of authorization to an object (user or group for instance). - {RevokeAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Revoke a list of authorization to an object (user or group for instance).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="authorizationsToRevoke">The list of authorization to revoke. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeAuthorizationsRequestObjectIdDeleteAsync(string accept, string objectId, List<string> authorizationsToRevoke = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke a list of authorization to an object (user or group for instance). - {RevokeAuthorizationsRequest}
        /// </summary>
        /// <remarks>
        /// Revoke a list of authorization to an object (user or group for instance).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="authorizationsToRevoke">The list of authorization to revoke. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeAuthorizationsRequestObjectIdDeleteWithHttpInfoAsync(string accept, string objectId, List<string> authorizationsToRevoke = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationsApi : IAuthorizationsApiSync, IAuthorizationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthorizationsApi : IAuthorizationsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizationsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthorizationsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthorizationsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrievet the direct authorizations - {GetDirectAuthorizationsRequest} Retrieve the direct authorizations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectsIds">The objects identifiers.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;MembershipAuthorization&gt;</returns>
        public List<MembershipAuthorization> GetDirectAuthorizationsRequestdirectObjectsIdsPost(string accept, List<string> objectsIds, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<MembershipAuthorization>> localVarResponse = GetDirectAuthorizationsRequestdirectObjectsIdsPostWithHttpInfo(accept, objectsIds, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrievet the direct authorizations - {GetDirectAuthorizationsRequest} Retrieve the direct authorizations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectsIds">The objects identifiers.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MembershipAuthorization&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<MembershipAuthorization>> GetDirectAuthorizationsRequestdirectObjectsIdsPostWithHttpInfo(string accept, List<string> objectsIds, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->GetDirectAuthorizationsRequestdirectObjectsIdsPost");

            // verify the required parameter 'objectsIds' is set
            if (objectsIds == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'objectsIds' when calling AuthorizationsApi->GetDirectAuthorizationsRequestdirectObjectsIdsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ObjectsIds", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(objectsIds)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<MembershipAuthorization>>("/authorizations/direct/{ObjectsIds}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDirectAuthorizationsRequestdirectObjectsIdsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrievet the direct authorizations - {GetDirectAuthorizationsRequest} Retrieve the direct authorizations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectsIds">The objects identifiers.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MembershipAuthorization&gt;</returns>
        public async System.Threading.Tasks.Task<List<MembershipAuthorization>> GetDirectAuthorizationsRequestdirectObjectsIdsPostAsync(string accept, List<string> objectsIds, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<MembershipAuthorization>> localVarResponse = await GetDirectAuthorizationsRequestdirectObjectsIdsPostWithHttpInfoAsync(accept, objectsIds, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrievet the direct authorizations - {GetDirectAuthorizationsRequest} Retrieve the direct authorizations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectsIds">The objects identifiers.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MembershipAuthorization&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<MembershipAuthorization>>> GetDirectAuthorizationsRequestdirectObjectsIdsPostWithHttpInfoAsync(string accept, List<string> objectsIds, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->GetDirectAuthorizationsRequestdirectObjectsIdsPost");

            // verify the required parameter 'objectsIds' is set
            if (objectsIds == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'objectsIds' when calling AuthorizationsApi->GetDirectAuthorizationsRequestdirectObjectsIdsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ObjectsIds", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(objectsIds)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<MembershipAuthorization>>("/authorizations/direct/{ObjectsIds}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDirectAuthorizationsRequestdirectObjectsIdsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the effective authorizations - {GetEffectiveAuthorizationsRequest} Retrieve the effective authorizations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;MembershipAuthorization&gt;</returns>
        public List<MembershipAuthorization> GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPost(string accept, GetEffectiveAuthorizationsRequest body = default(GetEffectiveAuthorizationsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<MembershipAuthorization>> localVarResponse = GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the effective authorizations - {GetEffectiveAuthorizationsRequest} Retrieve the effective authorizations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MembershipAuthorization&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<MembershipAuthorization>> GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPostWithHttpInfo(string accept, GetEffectiveAuthorizationsRequest body = default(GetEffectiveAuthorizationsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<MembershipAuthorization>>("/authorizations/GetEffectiveAuthorizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the effective authorizations - {GetEffectiveAuthorizationsRequest} Retrieve the effective authorizations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MembershipAuthorization&gt;</returns>
        public async System.Threading.Tasks.Task<List<MembershipAuthorization>> GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPostAsync(string accept, GetEffectiveAuthorizationsRequest body = default(GetEffectiveAuthorizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<MembershipAuthorization>> localVarResponse = await GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the effective authorizations - {GetEffectiveAuthorizationsRequest} Retrieve the effective authorizations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MembershipAuthorization&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<MembershipAuthorization>>> GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPostWithHttpInfoAsync(string accept, GetEffectiveAuthorizationsRequest body = default(GetEffectiveAuthorizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<MembershipAuthorization>>("/authorizations/GetEffectiveAuthorizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEffectiveAuthorizationsRequestGetEffectiveAuthorizationsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the membership settings - {GetMembershipSettingsRequest} Retrieve the membership settings
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>MembershipSettings</returns>
        public MembershipSettings GetMembershipSettingsRequestsettingsGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MembershipSettings> localVarResponse = GetMembershipSettingsRequestsettingsGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the membership settings - {GetMembershipSettingsRequest} Retrieve the membership settings
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of MembershipSettings</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MembershipSettings> GetMembershipSettingsRequestsettingsGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->GetMembershipSettingsRequestsettingsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<MembershipSettings>("/authorizations/settings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembershipSettingsRequestsettingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the membership settings - {GetMembershipSettingsRequest} Retrieve the membership settings
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembershipSettings</returns>
        public async System.Threading.Tasks.Task<MembershipSettings> GetMembershipSettingsRequestsettingsGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MembershipSettings> localVarResponse = await GetMembershipSettingsRequestsettingsGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the membership settings - {GetMembershipSettingsRequest} Retrieve the membership settings
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembershipSettings)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MembershipSettings>> GetMembershipSettingsRequestsettingsGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->GetMembershipSettingsRequestsettingsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MembershipSettings>("/authorizations/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembershipSettingsRequestsettingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the user effective authorizations - {GetUserEffectiveAuthorizationsRequest} Retrieve the user effective authorizations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <returns>List&lt;MembershipAuthorization&gt;</returns>
        public List<MembershipAuthorization> GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGet(string accept, string userName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<MembershipAuthorization>> localVarResponse = GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGetWithHttpInfo(accept, userName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the user effective authorizations - {GetUserEffectiveAuthorizationsRequest} Retrieve the user effective authorizations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <returns>ApiResponse of List&lt;MembershipAuthorization&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<MembershipAuthorization>> GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGetWithHttpInfo(string accept, string userName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGet");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling AuthorizationsApi->GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MembershipAuthorization>>("/authorizations/{UserName}/GetEffectiveAuthorizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the user effective authorizations - {GetUserEffectiveAuthorizationsRequest} Retrieve the user effective authorizations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MembershipAuthorization&gt;</returns>
        public async System.Threading.Tasks.Task<List<MembershipAuthorization>> GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGetAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<MembershipAuthorization>> localVarResponse = await GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGetWithHttpInfoAsync(accept, userName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the user effective authorizations - {GetUserEffectiveAuthorizationsRequest} Retrieve the user effective authorizations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="userName">The username of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MembershipAuthorization&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<MembershipAuthorization>>> GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGetWithHttpInfoAsync(string accept, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGet");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling AuthorizationsApi->GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MembershipAuthorization>>("/authorizations/{UserName}/GetEffectiveAuthorizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserEffectiveAuthorizationsRequestUserNameGetEffectiveAuthorizationsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Grant an authorization to an object (user or group for instance). - {GrantAuthorizationRequest} Grant an authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The role identifier.</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void GrantAuthorizationRequestRoleIdObjectIdPost(string accept, int roleId, string objectId, GrantAuthorizationRequest body = default(GrantAuthorizationRequest))
        {
            GrantAuthorizationRequestRoleIdObjectIdPostWithHttpInfo(accept, roleId, objectId, body);
        }

        /// <summary>
        /// Grant an authorization to an object (user or group for instance). - {GrantAuthorizationRequest} Grant an authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The role identifier.</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> GrantAuthorizationRequestRoleIdObjectIdPostWithHttpInfo(string accept, int roleId, string objectId, GrantAuthorizationRequest body = default(GrantAuthorizationRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->GrantAuthorizationRequestRoleIdObjectIdPost");

            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'objectId' when calling AuthorizationsApi->GrantAuthorizationRequestRoleIdObjectIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("RoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ObjectId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/authorizations/{RoleId}/{ObjectId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GrantAuthorizationRequestRoleIdObjectIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Grant an authorization to an object (user or group for instance). - {GrantAuthorizationRequest} Grant an authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The role identifier.</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GrantAuthorizationRequestRoleIdObjectIdPostAsync(string accept, int roleId, string objectId, GrantAuthorizationRequest body = default(GrantAuthorizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GrantAuthorizationRequestRoleIdObjectIdPostWithHttpInfoAsync(accept, roleId, objectId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Grant an authorization to an object (user or group for instance). - {GrantAuthorizationRequest} Grant an authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The role identifier.</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> GrantAuthorizationRequestRoleIdObjectIdPostWithHttpInfoAsync(string accept, int roleId, string objectId, GrantAuthorizationRequest body = default(GrantAuthorizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->GrantAuthorizationRequestRoleIdObjectIdPost");

            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'objectId' when calling AuthorizationsApi->GrantAuthorizationRequestRoleIdObjectIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("RoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ObjectId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/authorizations/{RoleId}/{ObjectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GrantAuthorizationRequestRoleIdObjectIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Grant a list of authorization to an object (user or group for instance). - {GrantAuthorizationsRequest} Grant a list of authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void GrantAuthorizationsRequestObjectIdPost(string accept, string objectId, GrantAuthorizationsRequest body = default(GrantAuthorizationsRequest))
        {
            GrantAuthorizationsRequestObjectIdPostWithHttpInfo(accept, objectId, body);
        }

        /// <summary>
        /// Grant a list of authorization to an object (user or group for instance). - {GrantAuthorizationsRequest} Grant a list of authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> GrantAuthorizationsRequestObjectIdPostWithHttpInfo(string accept, string objectId, GrantAuthorizationsRequest body = default(GrantAuthorizationsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->GrantAuthorizationsRequestObjectIdPost");

            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'objectId' when calling AuthorizationsApi->GrantAuthorizationsRequestObjectIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ObjectId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/authorizations/{ObjectId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GrantAuthorizationsRequestObjectIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Grant a list of authorization to an object (user or group for instance). - {GrantAuthorizationsRequest} Grant a list of authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GrantAuthorizationsRequestObjectIdPostAsync(string accept, string objectId, GrantAuthorizationsRequest body = default(GrantAuthorizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GrantAuthorizationsRequestObjectIdPostWithHttpInfoAsync(accept, objectId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Grant a list of authorization to an object (user or group for instance). - {GrantAuthorizationsRequest} Grant a list of authorization to an object (user or group for instance). If the RequestedScopeId is not specified all scopes will be granted (*). ObjectType is a short description about the object you are giving a permission (User, Group etc.)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> GrantAuthorizationsRequestObjectIdPostWithHttpInfoAsync(string accept, string objectId, GrantAuthorizationsRequest body = default(GrantAuthorizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->GrantAuthorizationsRequestObjectIdPost");

            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'objectId' when calling AuthorizationsApi->GrantAuthorizationsRequestObjectIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ObjectId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/authorizations/{ObjectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GrantAuthorizationsRequestObjectIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke an authorization to an object (user or group for instance). - {RevokeAuthorizationRequest} Revoke an authorization to an object (user or group for instance).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The Role identifier.</param>
        /// <param name="objectId">The Object identifier.</param>
        /// <param name="requestedScopeId">The Scope identifier. (optional)</param>
        /// <param name="objectType">The object type. (optional)</param>
        /// <returns></returns>
        public void RevokeAuthorizationRequestRoleIdObjectIdDelete(string accept, int roleId, string objectId, string requestedScopeId = default(string), string objectType = default(string))
        {
            RevokeAuthorizationRequestRoleIdObjectIdDeleteWithHttpInfo(accept, roleId, objectId, requestedScopeId, objectType);
        }

        /// <summary>
        /// Revoke an authorization to an object (user or group for instance). - {RevokeAuthorizationRequest} Revoke an authorization to an object (user or group for instance).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The Role identifier.</param>
        /// <param name="objectId">The Object identifier.</param>
        /// <param name="requestedScopeId">The Scope identifier. (optional)</param>
        /// <param name="objectType">The object type. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> RevokeAuthorizationRequestRoleIdObjectIdDeleteWithHttpInfo(string accept, int roleId, string objectId, string requestedScopeId = default(string), string objectType = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->RevokeAuthorizationRequestRoleIdObjectIdDelete");

            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'objectId' when calling AuthorizationsApi->RevokeAuthorizationRequestRoleIdObjectIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("RoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ObjectId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (requestedScopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "RequestedScopeId", requestedScopeId));
            }
            if (objectType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ObjectType", objectType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/authorizations/{RoleId}/{ObjectId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeAuthorizationRequestRoleIdObjectIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke an authorization to an object (user or group for instance). - {RevokeAuthorizationRequest} Revoke an authorization to an object (user or group for instance).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The Role identifier.</param>
        /// <param name="objectId">The Object identifier.</param>
        /// <param name="requestedScopeId">The Scope identifier. (optional)</param>
        /// <param name="objectType">The object type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeAuthorizationRequestRoleIdObjectIdDeleteAsync(string accept, int roleId, string objectId, string requestedScopeId = default(string), string objectType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeAuthorizationRequestRoleIdObjectIdDeleteWithHttpInfoAsync(accept, roleId, objectId, requestedScopeId, objectType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke an authorization to an object (user or group for instance). - {RevokeAuthorizationRequest} Revoke an authorization to an object (user or group for instance).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">The Role identifier.</param>
        /// <param name="objectId">The Object identifier.</param>
        /// <param name="requestedScopeId">The Scope identifier. (optional)</param>
        /// <param name="objectType">The object type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> RevokeAuthorizationRequestRoleIdObjectIdDeleteWithHttpInfoAsync(string accept, int roleId, string objectId, string requestedScopeId = default(string), string objectType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->RevokeAuthorizationRequestRoleIdObjectIdDelete");

            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'objectId' when calling AuthorizationsApi->RevokeAuthorizationRequestRoleIdObjectIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("RoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ObjectId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (requestedScopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "RequestedScopeId", requestedScopeId));
            }
            if (objectType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ObjectType", objectType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/authorizations/{RoleId}/{ObjectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeAuthorizationRequestRoleIdObjectIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke a list of authorization to an object (user or group for instance). - {RevokeAuthorizationsRequest} Revoke a list of authorization to an object (user or group for instance).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="authorizationsToRevoke">The list of authorization to revoke. (optional)</param>
        /// <returns></returns>
        public void RevokeAuthorizationsRequestObjectIdDelete(string accept, string objectId, List<string> authorizationsToRevoke = default(List<string>))
        {
            RevokeAuthorizationsRequestObjectIdDeleteWithHttpInfo(accept, objectId, authorizationsToRevoke);
        }

        /// <summary>
        /// Revoke a list of authorization to an object (user or group for instance). - {RevokeAuthorizationsRequest} Revoke a list of authorization to an object (user or group for instance).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="authorizationsToRevoke">The list of authorization to revoke. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> RevokeAuthorizationsRequestObjectIdDeleteWithHttpInfo(string accept, string objectId, List<string> authorizationsToRevoke = default(List<string>))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->RevokeAuthorizationsRequestObjectIdDelete");

            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'objectId' when calling AuthorizationsApi->RevokeAuthorizationsRequestObjectIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ObjectId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (authorizationsToRevoke != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "AuthorizationsToRevoke", authorizationsToRevoke));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/authorizations/{ObjectId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeAuthorizationsRequestObjectIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke a list of authorization to an object (user or group for instance). - {RevokeAuthorizationsRequest} Revoke a list of authorization to an object (user or group for instance).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="authorizationsToRevoke">The list of authorization to revoke. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeAuthorizationsRequestObjectIdDeleteAsync(string accept, string objectId, List<string> authorizationsToRevoke = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeAuthorizationsRequestObjectIdDeleteWithHttpInfoAsync(accept, objectId, authorizationsToRevoke, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke a list of authorization to an object (user or group for instance). - {RevokeAuthorizationsRequest} Revoke a list of authorization to an object (user or group for instance).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="objectId">The object identifier.</param>
        /// <param name="authorizationsToRevoke">The list of authorization to revoke. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> RevokeAuthorizationsRequestObjectIdDeleteWithHttpInfoAsync(string accept, string objectId, List<string> authorizationsToRevoke = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthorizationsApi->RevokeAuthorizationsRequestObjectIdDelete");

            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'objectId' when calling AuthorizationsApi->RevokeAuthorizationsRequestObjectIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ObjectId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (authorizationsToRevoke != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "AuthorizationsToRevoke", authorizationsToRevoke));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/authorizations/{ObjectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeAuthorizationsRequestObjectIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
