/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFulfillmentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds one or more fulfillment locations to a fulfillment competition. - {AddFulfillmentCompetitionLocationsRequest}
        /// </summary>
        /// <remarks>
        /// Adds one or more fulfillment locations to a fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the fulfillment locations are added.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentCompetition</returns>
        FulfillmentCompetition AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPost(string accept, string scopeId, string fulfillmentCompetitionId, AddFulfillmentCompetitionLocationsRequest body = default(AddFulfillmentCompetitionLocationsRequest));

        /// <summary>
        /// Adds one or more fulfillment locations to a fulfillment competition. - {AddFulfillmentCompetitionLocationsRequest}
        /// </summary>
        /// <remarks>
        /// Adds one or more fulfillment locations to a fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the fulfillment locations are added.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentCompetition</returns>
        ApiResponse<FulfillmentCompetition> AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPostWithHttpInfo(string accept, string scopeId, string fulfillmentCompetitionId, AddFulfillmentCompetitionLocationsRequest body = default(AddFulfillmentCompetitionLocationsRequest));
        /// <summary>
        /// Changes the status of a fulfillment competition location. - {ChangeFulfillmentCompetitionLocationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Changes the status of a fulfillment competition location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition whose fulfillment competition location status is changing.</param>
        /// <param name="fulfillmentLocationId">The identifier of the fulfillment location whose status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentCompetition</returns>
        FulfillmentCompetition ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreate(string accept, string scopeId, string fulfillmentCompetitionId, string fulfillmentLocationId, ChangeFulfillmentCompetitionLocationStatusRequest body = default(ChangeFulfillmentCompetitionLocationStatusRequest));

        /// <summary>
        /// Changes the status of a fulfillment competition location. - {ChangeFulfillmentCompetitionLocationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Changes the status of a fulfillment competition location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition whose fulfillment competition location status is changing.</param>
        /// <param name="fulfillmentLocationId">The identifier of the fulfillment location whose status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentCompetition</returns>
        ApiResponse<FulfillmentCompetition> ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreateWithHttpInfo(string accept, string scopeId, string fulfillmentCompetitionId, string fulfillmentLocationId, ChangeFulfillmentCompetitionLocationStatusRequest body = default(ChangeFulfillmentCompetitionLocationStatusRequest));
        /// <summary>
        /// Change the status of a fulfillment competition. - {ChangeFulfillmentCompetitionStatusRequest}
        /// </summary>
        /// <remarks>
        /// Change the status of a fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentCompetition</returns>
        FulfillmentCompetition ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreate(string accept, string scopeId, string fulfillmentCompetitionId, ChangeFulfillmentCompetitionStatusRequest body = default(ChangeFulfillmentCompetitionStatusRequest));

        /// <summary>
        /// Change the status of a fulfillment competition. - {ChangeFulfillmentCompetitionStatusRequest}
        /// </summary>
        /// <remarks>
        /// Change the status of a fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentCompetition</returns>
        ApiResponse<FulfillmentCompetition> ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreateWithHttpInfo(string accept, string scopeId, string fulfillmentCompetitionId, ChangeFulfillmentCompetitionStatusRequest body = default(ChangeFulfillmentCompetitionStatusRequest));
        /// <summary>
        /// Confirm shipping quotes for a package with a carrier - {ConfirmFulfillmentCarrierQuotesRequest}
        /// </summary>
        /// <remarks>
        /// Confirm shipping quotes for a package with a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ConfirmFulfillmentCarrierQuotesResponse</returns>
        ConfirmFulfillmentCarrierQuotesResponse ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPost(string accept, string scopeId, string fulfillmentCarrierId, ConfirmFulfillmentCarrierQuotesRequest body = default(ConfirmFulfillmentCarrierQuotesRequest));

        /// <summary>
        /// Confirm shipping quotes for a package with a carrier - {ConfirmFulfillmentCarrierQuotesRequest}
        /// </summary>
        /// <remarks>
        /// Confirm shipping quotes for a package with a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ConfirmFulfillmentCarrierQuotesResponse</returns>
        ApiResponse<ConfirmFulfillmentCarrierQuotesResponse> ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPostWithHttpInfo(string accept, string scopeId, string fulfillmentCarrierId, ConfirmFulfillmentCarrierQuotesRequest body = default(ConfirmFulfillmentCarrierQuotesRequest));
        /// <summary>
        /// Create manifests for a list of packages with a carrier - {CreateFulfillmentCarrierManifestRequest}
        /// </summary>
        /// <remarks>
        /// Create manifests for a list of packages with a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateFulfillmentCarrierManifestResponse</returns>
        CreateFulfillmentCarrierManifestResponse CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPost(string accept, string scopeId, string fulfillmentCarrierId, CreateFulfillmentCarrierManifestRequest body = default(CreateFulfillmentCarrierManifestRequest));

        /// <summary>
        /// Create manifests for a list of packages with a carrier - {CreateFulfillmentCarrierManifestRequest}
        /// </summary>
        /// <remarks>
        /// Create manifests for a list of packages with a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateFulfillmentCarrierManifestResponse</returns>
        ApiResponse<CreateFulfillmentCarrierManifestResponse> CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPostWithHttpInfo(string accept, string scopeId, string fulfillmentCarrierId, CreateFulfillmentCarrierManifestRequest body = default(CreateFulfillmentCarrierManifestRequest));
        /// <summary>
        /// Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment - {CreateFulfillmentCompetitionRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentCompetition</returns>
        FulfillmentCompetition CreateFulfillmentCompetitionRequestcompetitionsScopeIdPost(string accept, string scopeId, CreateFulfillmentCompetitionRequest body = default(CreateFulfillmentCompetitionRequest));

        /// <summary>
        /// Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment - {CreateFulfillmentCompetitionRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentCompetition</returns>
        ApiResponse<FulfillmentCompetition> CreateFulfillmentCompetitionRequestcompetitionsScopeIdPostWithHttpInfo(string accept, string scopeId, CreateFulfillmentCompetitionRequest body = default(CreateFulfillmentCompetitionRequest));
        /// <summary>
        /// Creates a new fulfillment package with a list of line items - {CreateFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new fulfillment package with a list of line items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentPackage</returns>
        FulfillmentPackage CreateFulfillmentPackageRequestpackagesScopeIdPost(string accept, string scopeId, CreateFulfillmentPackageRequest body = default(CreateFulfillmentPackageRequest));

        /// <summary>
        /// Creates a new fulfillment package with a list of line items - {CreateFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new fulfillment package with a list of line items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackage</returns>
        ApiResponse<FulfillmentPackage> CreateFulfillmentPackageRequestpackagesScopeIdPostWithHttpInfo(string accept, string scopeId, CreateFulfillmentPackageRequest body = default(CreateFulfillmentPackageRequest));
        /// <summary>
        /// Creates a new fulfillment package type - {CreateFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new fulfillment package type.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentPackageType</returns>
        FulfillmentPackageType CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPost(string accept, string scopeId, CreateFulfillmentPackageTypeRequest body = default(CreateFulfillmentPackageTypeRequest));

        /// <summary>
        /// Creates a new fulfillment package type - {CreateFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new fulfillment package type.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackageType</returns>
        ApiResponse<FulfillmentPackageType> CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPostWithHttpInfo(string accept, string scopeId, CreateFulfillmentPackageTypeRequest body = default(CreateFulfillmentPackageTypeRequest));
        /// <summary>
        /// Create a fulfillment SLA for a specific fulfillment location - {CreateFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Create a fulfillment SLA for a specific fulfillment location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentSLA</returns>
        FulfillmentSLA CreateFulfillmentSLARequestSLAsScopeIdPost(string accept, string scopeId, CreateFulfillmentSLARequest body = default(CreateFulfillmentSLARequest));

        /// <summary>
        /// Create a fulfillment SLA for a specific fulfillment location - {CreateFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Create a fulfillment SLA for a specific fulfillment location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentSLA</returns>
        ApiResponse<FulfillmentSLA> CreateFulfillmentSLARequestSLAsScopeIdPostWithHttpInfo(string accept, string scopeId, CreateFulfillmentSLARequest body = default(CreateFulfillmentSLARequest));
        /// <summary>
        /// Creates or updates a fulfillment exception for a lineitem - {CreateOrUpdateFulfillmentExceptionRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates a fulfillment exception for a lineitem
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentException</returns>
        FulfillmentException CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId, CreateOrUpdateFulfillmentExceptionRequest body = default(CreateOrUpdateFulfillmentExceptionRequest));

        /// <summary>
        /// Creates or updates a fulfillment exception for a lineitem - {CreateOrUpdateFulfillmentExceptionRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates a fulfillment exception for a lineitem
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentException</returns>
        ApiResponse<FulfillmentException> CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreateWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId, CreateOrUpdateFulfillmentExceptionRequest body = default(CreateOrUpdateFulfillmentExceptionRequest));
        /// <summary>
        /// Deletes a fulfillment competition - {DeleteFulfillmentCompetitionRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to be removed.</param>
        /// <returns></returns>
        void DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDelete(string accept, string scopeId, string fulfillmentCompetitionId);

        /// <summary>
        /// Deletes a fulfillment competition - {DeleteFulfillmentCompetitionRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDeleteWithHttpInfo(string accept, string scopeId, string fulfillmentCompetitionId);
        /// <summary>
        /// Deletes a fulfillment exception for a lineitem - {DeleteFulfillmentExceptionRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a fulfillment exception for a lineitem
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <returns></returns>
        void DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId);

        /// <summary>
        /// Deletes a fulfillment exception for a lineitem - {DeleteFulfillmentExceptionRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a fulfillment exception for a lineitem
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDeleteWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId);
        /// <summary>
        /// Delete all fulfillment packages for a specific shipment id - {DeleteFulfillmentPackageForShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Delete all fulfillment packages for a specific shipment id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <returns></returns>
        void DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDelete(string accept, string scopeId, string shipmentId);

        /// <summary>
        /// Delete all fulfillment packages for a specific shipment id - {DeleteFulfillmentPackageForShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Delete all fulfillment packages for a specific shipment id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDeleteWithHttpInfo(string accept, string scopeId, string shipmentId);
        /// <summary>
        /// Delete a fulfillment package for a specific id - {DeleteFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Delete a fulfillment package for a specific id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package id.</param>
        /// <returns></returns>
        void DeleteFulfillmentPackageRequestpackagesScopeIdIdDelete(string accept, string scopeId, string id);

        /// <summary>
        /// Delete a fulfillment package for a specific id - {DeleteFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Delete a fulfillment package for a specific id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentPackageRequestpackagesScopeIdIdDeleteWithHttpInfo(string accept, string scopeId, string id);
        /// <summary>
        /// Delete a fulfillment package type for a specific id - {DeleteFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Delete a fulfillment package type for a specific id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type id.</param>
        /// <returns></returns>
        void DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDelete(string accept, string scopeId, string id);

        /// <summary>
        /// Delete a fulfillment package type for a specific id - {DeleteFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Delete a fulfillment package type for a specific id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDeleteWithHttpInfo(string accept, string scopeId, string id);
        /// <summary>
        /// Disable a fulfillment SLA for a specific id - {DisableFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Disable a fulfillment SLA for a specific id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentSLA</returns>
        FulfillmentSLA DisableFulfillmentSLARequestSLAsdisablePost(string accept, DisableFulfillmentSLARequest body = default(DisableFulfillmentSLARequest));

        /// <summary>
        /// Disable a fulfillment SLA for a specific id - {DisableFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Disable a fulfillment SLA for a specific id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentSLA</returns>
        ApiResponse<FulfillmentSLA> DisableFulfillmentSLARequestSLAsdisablePostWithHttpInfo(string accept, DisableFulfillmentSLARequest body = default(DisableFulfillmentSLARequest));
        /// <summary>
        /// Gets the number of fulfillment competitions - {FindFulfillmentCompetitionsCountRequest}
        /// </summary>
        /// <remarks>
        /// Gets the number of fulfillment competitions
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>QueryCountResult</returns>
        QueryCountResult FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPost(string accept, string scopeId, FindFulfillmentCompetitionsCountRequest body = default(FindFulfillmentCompetitionsCountRequest));

        /// <summary>
        /// Gets the number of fulfillment competitions - {FindFulfillmentCompetitionsCountRequest}
        /// </summary>
        /// <remarks>
        /// Gets the number of fulfillment competitions
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of QueryCountResult</returns>
        ApiResponse<QueryCountResult> FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPostWithHttpInfo(string accept, string scopeId, FindFulfillmentCompetitionsCountRequest body = default(FindFulfillmentCompetitionsCountRequest));
        /// <summary>
        /// Search for a list of fulfillment competitions - {FindFulfillmentCompetitionsRequest}
        /// </summary>
        /// <remarks>
        /// Search for a list of fulfillment competitions
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentCompetitionQueryResult</returns>
        FulfillmentCompetitionQueryResult FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPost(string accept, string scopeId, FindFulfillmentCompetitionsRequest body = default(FindFulfillmentCompetitionsRequest));

        /// <summary>
        /// Search for a list of fulfillment competitions - {FindFulfillmentCompetitionsRequest}
        /// </summary>
        /// <remarks>
        /// Search for a list of fulfillment competitions
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentCompetitionQueryResult</returns>
        ApiResponse<FulfillmentCompetitionQueryResult> FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindFulfillmentCompetitionsRequest body = default(FindFulfillmentCompetitionsRequest));
        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentManifestPackagesRequest}
        /// </summary>
        /// <remarks>
        /// Search for a list of fulfillment packages.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier. (optional)</param>
        /// <param name="shippingProviderId">The optional shipping provider identifier. (optional)</param>
        /// <param name="fulfillmentStatus">The optional fulfillment status. (optional)</param>
        /// <param name="manifestedFrom">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestedTo">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestReferenceId">The optional manifest reference id. (optional)</param>
        /// <param name="includePackagesWithManifest">A value indicating whether fulfillment packages with a manifest are returned. (optional)</param>
        /// <param name="includePackagesWithoutManifest">A value indicating whether fulfillment packages without a manifest are returned. (optional)</param>
        /// <param name="includePackageItems">A value indicating whether fulfillment package items are retrieved with each package. (optional)</param>
        /// <param name="carrierAccountIdOutbound">The carrier account id for outbound. (optional)</param>
        /// <param name="carrierAccountNameOutbound">The carrier account name for outbound. (optional)</param>
        /// <param name="carrierNameOutbound">The carrier name for outbound. (optional)</param>
        /// <param name="carrierServiceLevelOutbound">The carrier service level for outbound. (optional)</param>
        /// <param name="carrierManifestRequirement">The optional carrier manifest requirement to find. (optional)</param>
        /// <returns>FulfillmentPackageResult</returns>
        FulfillmentPackageResult FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGet(string accept, string scopeId, string fulfillmentLocationId = default(string), string shippingProviderId = default(string), string fulfillmentStatus = default(string), DateTime? manifestedFrom = default(DateTime?), DateTime? manifestedTo = default(DateTime?), string manifestReferenceId = default(string), bool? includePackagesWithManifest = default(bool?), bool? includePackagesWithoutManifest = default(bool?), bool? includePackageItems = default(bool?), string carrierAccountIdOutbound = default(string), string carrierAccountNameOutbound = default(string), string carrierNameOutbound = default(string), string carrierServiceLevelOutbound = default(string), string carrierManifestRequirement = default(string));

        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentManifestPackagesRequest}
        /// </summary>
        /// <remarks>
        /// Search for a list of fulfillment packages.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier. (optional)</param>
        /// <param name="shippingProviderId">The optional shipping provider identifier. (optional)</param>
        /// <param name="fulfillmentStatus">The optional fulfillment status. (optional)</param>
        /// <param name="manifestedFrom">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestedTo">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestReferenceId">The optional manifest reference id. (optional)</param>
        /// <param name="includePackagesWithManifest">A value indicating whether fulfillment packages with a manifest are returned. (optional)</param>
        /// <param name="includePackagesWithoutManifest">A value indicating whether fulfillment packages without a manifest are returned. (optional)</param>
        /// <param name="includePackageItems">A value indicating whether fulfillment package items are retrieved with each package. (optional)</param>
        /// <param name="carrierAccountIdOutbound">The carrier account id for outbound. (optional)</param>
        /// <param name="carrierAccountNameOutbound">The carrier account name for outbound. (optional)</param>
        /// <param name="carrierNameOutbound">The carrier name for outbound. (optional)</param>
        /// <param name="carrierServiceLevelOutbound">The carrier service level for outbound. (optional)</param>
        /// <param name="carrierManifestRequirement">The optional carrier manifest requirement to find. (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackageResult</returns>
        ApiResponse<FulfillmentPackageResult> FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId = default(string), string shippingProviderId = default(string), string fulfillmentStatus = default(string), DateTime? manifestedFrom = default(DateTime?), DateTime? manifestedTo = default(DateTime?), string manifestReferenceId = default(string), bool? includePackagesWithManifest = default(bool?), bool? includePackagesWithoutManifest = default(bool?), bool? includePackageItems = default(bool?), string carrierAccountIdOutbound = default(string), string carrierAccountNameOutbound = default(string), string carrierNameOutbound = default(string), string carrierServiceLevelOutbound = default(string), string carrierManifestRequirement = default(string));
        /// <summary>
        /// Search for fulfillment orders - {FindFulfillmentOrdersRequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment orders
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentOrderQueryResult</returns>
        FulfillmentOrderQueryResult FindFulfillmentOrdersRequestordersScopeIdfindPost(string accept, string scopeId, FindFulfillmentOrdersRequest body = default(FindFulfillmentOrdersRequest));

        /// <summary>
        /// Search for fulfillment orders - {FindFulfillmentOrdersRequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment orders
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentOrderQueryResult</returns>
        ApiResponse<FulfillmentOrderQueryResult> FindFulfillmentOrdersRequestordersScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindFulfillmentOrdersRequest body = default(FindFulfillmentOrdersRequest));
        /// <summary>
        /// Search for fulfillment package types - {FindFulfillmentPackageTypesRequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment package types for a Scope (and its parents)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope to retrieve fulfillment package types for</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentPackageTypeResult</returns>
        FulfillmentPackageTypeResult FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPost(string accept, string scopeId, FindFulfillmentPackageTypesRequest body = default(FindFulfillmentPackageTypesRequest));

        /// <summary>
        /// Search for fulfillment package types - {FindFulfillmentPackageTypesRequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment package types for a Scope (and its parents)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope to retrieve fulfillment package types for</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackageTypeResult</returns>
        ApiResponse<FulfillmentPackageTypeResult> FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindFulfillmentPackageTypesRequest body = default(FindFulfillmentPackageTypesRequest));
        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentPackagesRequest}
        /// </summary>
        /// <remarks>
        /// Search for a list of fulfillment packages.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="orderId">The order identifier. (optional)</param>
        /// <param name="shipmentIds">A list of shipment identifier. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along each fulfillment package. (optional)</param>
        /// <returns>FulfillmentPackageResult</returns>
        FulfillmentPackageResult FindFulfillmentPackagesRequestpackagesScopeIdfindGet(string accept, string scopeId, string orderId = default(string), List<string> shipmentIds = default(List<string>), string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?));

        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentPackagesRequest}
        /// </summary>
        /// <remarks>
        /// Search for a list of fulfillment packages.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="orderId">The order identifier. (optional)</param>
        /// <param name="shipmentIds">A list of shipment identifier. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along each fulfillment package. (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackageResult</returns>
        ApiResponse<FulfillmentPackageResult> FindFulfillmentPackagesRequestpackagesScopeIdfindGetWithHttpInfo(string accept, string scopeId, string orderId = default(string), List<string> shipmentIds = default(List<string>), string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?));
        /// <summary>
        /// Search for fulfillment SLA - {FindFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment SLA
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentSLAQueryResult</returns>
        FulfillmentSLAQueryResult FindFulfillmentSLARequestSLAsScopeIdfindPost(string accept, string scopeId, FindFulfillmentSLARequest body = default(FindFulfillmentSLARequest));

        /// <summary>
        /// Search for fulfillment SLA - {FindFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment SLA
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentSLAQueryResult</returns>
        ApiResponse<FulfillmentSLAQueryResult> FindFulfillmentSLARequestSLAsScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindFulfillmentSLARequest body = default(FindFulfillmentSLARequest));
        /// <summary>
        /// Get shipping documents from a carrier - {GetFulfillmentCarrierDocumentsRequest}
        /// </summary>
        /// <remarks>
        /// Get shipping documents from a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetFulfillmentCarrierDocumentsResponse</returns>
        GetFulfillmentCarrierDocumentsResponse GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPost(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierDocumentsRequest body = default(GetFulfillmentCarrierDocumentsRequest));

        /// <summary>
        /// Get shipping documents from a carrier - {GetFulfillmentCarrierDocumentsRequest}
        /// </summary>
        /// <remarks>
        /// Get shipping documents from a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetFulfillmentCarrierDocumentsResponse</returns>
        ApiResponse<GetFulfillmentCarrierDocumentsResponse> GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPostWithHttpInfo(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierDocumentsRequest body = default(GetFulfillmentCarrierDocumentsRequest));
        /// <summary>
        /// Get shipping quotes for a package from a carrier - {GetFulfillmentCarrierQuotesRequest}
        /// </summary>
        /// <remarks>
        /// Get shipping quotes for a package from a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetFulfillmentCarrierQuotesResponse</returns>
        GetFulfillmentCarrierQuotesResponse GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPost(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierQuotesRequest body = default(GetFulfillmentCarrierQuotesRequest));

        /// <summary>
        /// Get shipping quotes for a package from a carrier - {GetFulfillmentCarrierQuotesRequest}
        /// </summary>
        /// <remarks>
        /// Get shipping quotes for a package from a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetFulfillmentCarrierQuotesResponse</returns>
        ApiResponse<GetFulfillmentCarrierQuotesResponse> GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPostWithHttpInfo(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierQuotesRequest body = default(GetFulfillmentCarrierQuotesRequest));
        /// <summary>
        /// Gets a fulfillment competition by its identifier - {GetFulfillmentCompetitionRequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment competition by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The fulfillment competition identifier.</param>
        /// <returns>FulfillmentCompetition</returns>
        FulfillmentCompetition GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGet(string accept, string scopeId, string fulfillmentCompetitionId);

        /// <summary>
        /// Gets a fulfillment competition by its identifier - {GetFulfillmentCompetitionRequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment competition by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The fulfillment competition identifier.</param>
        /// <returns>ApiResponse of FulfillmentCompetition</returns>
        ApiResponse<FulfillmentCompetition> GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentCompetitionId);
        /// <summary>
        /// Gets the fulfillment exceptions for an order at a fulfillment location - {GetFulfillmentExceptionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the fulfillment exceptions for an order at a fulfillment location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The order identifier.</param>
        /// <returns>FulfillmentExceptionResult</returns>
        FulfillmentExceptionResult GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGet(string accept, string scopeId, string fulfillmentLocationId, string orderId);

        /// <summary>
        /// Gets the fulfillment exceptions for an order at a fulfillment location - {GetFulfillmentExceptionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the fulfillment exceptions for an order at a fulfillment location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The order identifier.</param>
        /// <returns>ApiResponse of FulfillmentExceptionResult</returns>
        ApiResponse<FulfillmentExceptionResult> GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string orderId);
        /// <summary>
        /// Gets a fulfillment package by its identifier - {GetFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment package by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along the fulfillment package. (optional)</param>
        /// <returns>FulfillmentPackage</returns>
        FulfillmentPackage GetFulfillmentPackageRequestpackagesScopeIdIdGet(string accept, string scopeId, string id, string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?));

        /// <summary>
        /// Gets a fulfillment package by its identifier - {GetFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment package by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along the fulfillment package. (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackage</returns>
        ApiResponse<FulfillmentPackage> GetFulfillmentPackageRequestpackagesScopeIdIdGetWithHttpInfo(string accept, string scopeId, string id, string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?));
        /// <summary>
        /// Gets a fulfillment package type by its identifier - {GetFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment package type by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="includeParentScopes">Determine if parent scopes should be considered when searching fulfillment package type. (optional)</param>
        /// <returns>FulfillmentPackageType</returns>
        FulfillmentPackageType GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGet(string accept, string scopeId, string id, bool? includeParentScopes = default(bool?));

        /// <summary>
        /// Gets a fulfillment package type by its identifier - {GetFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment package type by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="includeParentScopes">Determine if parent scopes should be considered when searching fulfillment package type. (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackageType</returns>
        ApiResponse<FulfillmentPackageType> GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGetWithHttpInfo(string accept, string scopeId, string id, bool? includeParentScopes = default(bool?));
        /// <summary>
        /// Gets a fulfillment SLA by its identifier - {GetFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment SLA by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment SLA identifier.</param>
        /// <returns>FulfillmentSLA</returns>
        FulfillmentSLA GetFulfillmentSLARequestSLAsScopeIdIdGet(string accept, string scopeId, string id);

        /// <summary>
        /// Gets a fulfillment SLA by its identifier - {GetFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment SLA by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment SLA identifier.</param>
        /// <returns>ApiResponse of FulfillmentSLA</returns>
        ApiResponse<FulfillmentSLA> GetFulfillmentSLARequestSLAsScopeIdIdGetWithHttpInfo(string accept, string scopeId, string id);
        /// <summary>
        /// Refund shipping quotes from a carrier - {RefundFulfillmentCarrierQuotesRequest}
        /// </summary>
        /// <remarks>
        /// Refund shipping quotes from a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPost(string accept, string scopeId, string fulfillmentCarrierId, RefundFulfillmentCarrierQuotesRequest body = default(RefundFulfillmentCarrierQuotesRequest));

        /// <summary>
        /// Refund shipping quotes from a carrier - {RefundFulfillmentCarrierQuotesRequest}
        /// </summary>
        /// <remarks>
        /// Refund shipping quotes from a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPostWithHttpInfo(string accept, string scopeId, string fulfillmentCarrierId, RefundFulfillmentCarrierQuotesRequest body = default(RefundFulfillmentCarrierQuotesRequest));
        /// <summary>
        /// Removes a list of fulfillment competition locations from a specific fulfillment competition - {RemoveFulfillmentCompetitionLocationsRequest}
        /// </summary>
        /// <remarks>
        /// Removes a list of fulfillment competition locations from a specific fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition from which the fulfillment competition locations are removed.</param>
        /// <param name="fulfillmentLocationIds">The list of the fulfillment location identifiers which will be removed from the fulfillment competition. (optional)</param>
        /// <returns>FulfillmentCompetition</returns>
        FulfillmentCompetition RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDelete(string accept, string scopeId, string fulfillmentCompetitionId, List<string> fulfillmentLocationIds = default(List<string>));

        /// <summary>
        /// Removes a list of fulfillment competition locations from a specific fulfillment competition - {RemoveFulfillmentCompetitionLocationsRequest}
        /// </summary>
        /// <remarks>
        /// Removes a list of fulfillment competition locations from a specific fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition from which the fulfillment competition locations are removed.</param>
        /// <param name="fulfillmentLocationIds">The list of the fulfillment location identifiers which will be removed from the fulfillment competition. (optional)</param>
        /// <returns>ApiResponse of FulfillmentCompetition</returns>
        ApiResponse<FulfillmentCompetition> RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDeleteWithHttpInfo(string accept, string scopeId, string fulfillmentCompetitionId, List<string> fulfillmentLocationIds = default(List<string>));
        /// <summary>
        /// Transfers a list of fulfillment package items from one fulfillment package to another - {TransferFulfillmentPackageItemsRequest}
        /// </summary>
        /// <remarks>
        /// Transfers a list of fulfillment package items from one fulfillment package to another.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentPackage</returns>
        FulfillmentPackage TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPost(string accept, string scopeId, TransferFulfillmentPackageItemsRequest body = default(TransferFulfillmentPackageItemsRequest));

        /// <summary>
        /// Transfers a list of fulfillment package items from one fulfillment package to another - {TransferFulfillmentPackageItemsRequest}
        /// </summary>
        /// <remarks>
        /// Transfers a list of fulfillment package items from one fulfillment package to another.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackage</returns>
        ApiResponse<FulfillmentPackage> TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPostWithHttpInfo(string accept, string scopeId, TransferFulfillmentPackageItemsRequest body = default(TransferFulfillmentPackageItemsRequest));
        /// <summary>
        /// Updates a fulfillment package - {UpdateFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Updates a fulfillment package.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentPackage</returns>
        FulfillmentPackage UpdateFulfillmentPackageRequestpackagesScopeIdIdCreate(string accept, string scopeId, string id, UpdateFulfillmentPackageRequest body = default(UpdateFulfillmentPackageRequest));

        /// <summary>
        /// Updates a fulfillment package - {UpdateFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Updates a fulfillment package.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackage</returns>
        ApiResponse<FulfillmentPackage> UpdateFulfillmentPackageRequestpackagesScopeIdIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdateFulfillmentPackageRequest body = default(UpdateFulfillmentPackageRequest));
        /// <summary>
        /// Updates a fulfillment package type - {UpdateFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Updates a fulfillment package type.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentPackageType</returns>
        FulfillmentPackageType UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreate(string accept, string scopeId, string id, UpdateFulfillmentPackageTypeRequest body = default(UpdateFulfillmentPackageTypeRequest));

        /// <summary>
        /// Updates a fulfillment package type - {UpdateFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Updates a fulfillment package type.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackageType</returns>
        ApiResponse<FulfillmentPackageType> UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdateFulfillmentPackageTypeRequest body = default(UpdateFulfillmentPackageTypeRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFulfillmentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds one or more fulfillment locations to a fulfillment competition. - {AddFulfillmentCompetitionLocationsRequest}
        /// </summary>
        /// <remarks>
        /// Adds one or more fulfillment locations to a fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the fulfillment locations are added.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetition</returns>
        System.Threading.Tasks.Task<FulfillmentCompetition> AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPostAsync(string accept, string scopeId, string fulfillmentCompetitionId, AddFulfillmentCompetitionLocationsRequest body = default(AddFulfillmentCompetitionLocationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds one or more fulfillment locations to a fulfillment competition. - {AddFulfillmentCompetitionLocationsRequest}
        /// </summary>
        /// <remarks>
        /// Adds one or more fulfillment locations to a fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the fulfillment locations are added.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetition)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentCompetition>> AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCompetitionId, AddFulfillmentCompetitionLocationsRequest body = default(AddFulfillmentCompetitionLocationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Changes the status of a fulfillment competition location. - {ChangeFulfillmentCompetitionLocationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Changes the status of a fulfillment competition location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition whose fulfillment competition location status is changing.</param>
        /// <param name="fulfillmentLocationId">The identifier of the fulfillment location whose status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetition</returns>
        System.Threading.Tasks.Task<FulfillmentCompetition> ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreateAsync(string accept, string scopeId, string fulfillmentCompetitionId, string fulfillmentLocationId, ChangeFulfillmentCompetitionLocationStatusRequest body = default(ChangeFulfillmentCompetitionLocationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Changes the status of a fulfillment competition location. - {ChangeFulfillmentCompetitionLocationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Changes the status of a fulfillment competition location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition whose fulfillment competition location status is changing.</param>
        /// <param name="fulfillmentLocationId">The identifier of the fulfillment location whose status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetition)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentCompetition>> ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCompetitionId, string fulfillmentLocationId, ChangeFulfillmentCompetitionLocationStatusRequest body = default(ChangeFulfillmentCompetitionLocationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Change the status of a fulfillment competition. - {ChangeFulfillmentCompetitionStatusRequest}
        /// </summary>
        /// <remarks>
        /// Change the status of a fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetition</returns>
        System.Threading.Tasks.Task<FulfillmentCompetition> ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreateAsync(string accept, string scopeId, string fulfillmentCompetitionId, ChangeFulfillmentCompetitionStatusRequest body = default(ChangeFulfillmentCompetitionStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Change the status of a fulfillment competition. - {ChangeFulfillmentCompetitionStatusRequest}
        /// </summary>
        /// <remarks>
        /// Change the status of a fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetition)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentCompetition>> ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCompetitionId, ChangeFulfillmentCompetitionStatusRequest body = default(ChangeFulfillmentCompetitionStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Confirm shipping quotes for a package with a carrier - {ConfirmFulfillmentCarrierQuotesRequest}
        /// </summary>
        /// <remarks>
        /// Confirm shipping quotes for a package with a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfirmFulfillmentCarrierQuotesResponse</returns>
        System.Threading.Tasks.Task<ConfirmFulfillmentCarrierQuotesResponse> ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPostAsync(string accept, string scopeId, string fulfillmentCarrierId, ConfirmFulfillmentCarrierQuotesRequest body = default(ConfirmFulfillmentCarrierQuotesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Confirm shipping quotes for a package with a carrier - {ConfirmFulfillmentCarrierQuotesRequest}
        /// </summary>
        /// <remarks>
        /// Confirm shipping quotes for a package with a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfirmFulfillmentCarrierQuotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmFulfillmentCarrierQuotesResponse>> ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCarrierId, ConfirmFulfillmentCarrierQuotesRequest body = default(ConfirmFulfillmentCarrierQuotesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create manifests for a list of packages with a carrier - {CreateFulfillmentCarrierManifestRequest}
        /// </summary>
        /// <remarks>
        /// Create manifests for a list of packages with a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFulfillmentCarrierManifestResponse</returns>
        System.Threading.Tasks.Task<CreateFulfillmentCarrierManifestResponse> CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPostAsync(string accept, string scopeId, string fulfillmentCarrierId, CreateFulfillmentCarrierManifestRequest body = default(CreateFulfillmentCarrierManifestRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create manifests for a list of packages with a carrier - {CreateFulfillmentCarrierManifestRequest}
        /// </summary>
        /// <remarks>
        /// Create manifests for a list of packages with a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFulfillmentCarrierManifestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFulfillmentCarrierManifestResponse>> CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCarrierId, CreateFulfillmentCarrierManifestRequest body = default(CreateFulfillmentCarrierManifestRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment - {CreateFulfillmentCompetitionRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetition</returns>
        System.Threading.Tasks.Task<FulfillmentCompetition> CreateFulfillmentCompetitionRequestcompetitionsScopeIdPostAsync(string accept, string scopeId, CreateFulfillmentCompetitionRequest body = default(CreateFulfillmentCompetitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment - {CreateFulfillmentCompetitionRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetition)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentCompetition>> CreateFulfillmentCompetitionRequestcompetitionsScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateFulfillmentCompetitionRequest body = default(CreateFulfillmentCompetitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new fulfillment package with a list of line items - {CreateFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new fulfillment package with a list of line items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackage</returns>
        System.Threading.Tasks.Task<FulfillmentPackage> CreateFulfillmentPackageRequestpackagesScopeIdPostAsync(string accept, string scopeId, CreateFulfillmentPackageRequest body = default(CreateFulfillmentPackageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new fulfillment package with a list of line items - {CreateFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new fulfillment package with a list of line items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackage)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentPackage>> CreateFulfillmentPackageRequestpackagesScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateFulfillmentPackageRequest body = default(CreateFulfillmentPackageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new fulfillment package type - {CreateFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new fulfillment package type.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackageType</returns>
        System.Threading.Tasks.Task<FulfillmentPackageType> CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPostAsync(string accept, string scopeId, CreateFulfillmentPackageTypeRequest body = default(CreateFulfillmentPackageTypeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new fulfillment package type - {CreateFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Creates a new fulfillment package type.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackageType)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentPackageType>> CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateFulfillmentPackageTypeRequest body = default(CreateFulfillmentPackageTypeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a fulfillment SLA for a specific fulfillment location - {CreateFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Create a fulfillment SLA for a specific fulfillment location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentSLA</returns>
        System.Threading.Tasks.Task<FulfillmentSLA> CreateFulfillmentSLARequestSLAsScopeIdPostAsync(string accept, string scopeId, CreateFulfillmentSLARequest body = default(CreateFulfillmentSLARequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a fulfillment SLA for a specific fulfillment location - {CreateFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Create a fulfillment SLA for a specific fulfillment location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentSLA)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentSLA>> CreateFulfillmentSLARequestSLAsScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateFulfillmentSLARequest body = default(CreateFulfillmentSLARequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates a fulfillment exception for a lineitem - {CreateOrUpdateFulfillmentExceptionRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates a fulfillment exception for a lineitem
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentException</returns>
        System.Threading.Tasks.Task<FulfillmentException> CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreateAsync(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId, CreateOrUpdateFulfillmentExceptionRequest body = default(CreateOrUpdateFulfillmentExceptionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates a fulfillment exception for a lineitem - {CreateOrUpdateFulfillmentExceptionRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates a fulfillment exception for a lineitem
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentException)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentException>> CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId, CreateOrUpdateFulfillmentExceptionRequest body = default(CreateOrUpdateFulfillmentExceptionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a fulfillment competition - {DeleteFulfillmentCompetitionRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDeleteAsync(string accept, string scopeId, string fulfillmentCompetitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a fulfillment competition - {DeleteFulfillmentCompetitionRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDeleteWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCompetitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a fulfillment exception for a lineitem - {DeleteFulfillmentExceptionRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a fulfillment exception for a lineitem
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDeleteAsync(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a fulfillment exception for a lineitem - {DeleteFulfillmentExceptionRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a fulfillment exception for a lineitem
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDeleteWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all fulfillment packages for a specific shipment id - {DeleteFulfillmentPackageForShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Delete all fulfillment packages for a specific shipment id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDeleteAsync(string accept, string scopeId, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all fulfillment packages for a specific shipment id - {DeleteFulfillmentPackageForShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Delete all fulfillment packages for a specific shipment id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDeleteWithHttpInfoAsync(string accept, string scopeId, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a fulfillment package for a specific id - {DeleteFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Delete a fulfillment package for a specific id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentPackageRequestpackagesScopeIdIdDeleteAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a fulfillment package for a specific id - {DeleteFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Delete a fulfillment package for a specific id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentPackageRequestpackagesScopeIdIdDeleteWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a fulfillment package type for a specific id - {DeleteFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Delete a fulfillment package type for a specific id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDeleteAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a fulfillment package type for a specific id - {DeleteFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Delete a fulfillment package type for a specific id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDeleteWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Disable a fulfillment SLA for a specific id - {DisableFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Disable a fulfillment SLA for a specific id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentSLA</returns>
        System.Threading.Tasks.Task<FulfillmentSLA> DisableFulfillmentSLARequestSLAsdisablePostAsync(string accept, DisableFulfillmentSLARequest body = default(DisableFulfillmentSLARequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Disable a fulfillment SLA for a specific id - {DisableFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Disable a fulfillment SLA for a specific id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentSLA)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentSLA>> DisableFulfillmentSLARequestSLAsdisablePostWithHttpInfoAsync(string accept, DisableFulfillmentSLARequest body = default(DisableFulfillmentSLARequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the number of fulfillment competitions - {FindFulfillmentCompetitionsCountRequest}
        /// </summary>
        /// <remarks>
        /// Gets the number of fulfillment competitions
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryCountResult</returns>
        System.Threading.Tasks.Task<QueryCountResult> FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPostAsync(string accept, string scopeId, FindFulfillmentCompetitionsCountRequest body = default(FindFulfillmentCompetitionsCountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the number of fulfillment competitions - {FindFulfillmentCompetitionsCountRequest}
        /// </summary>
        /// <remarks>
        /// Gets the number of fulfillment competitions
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryCountResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryCountResult>> FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPostWithHttpInfoAsync(string accept, string scopeId, FindFulfillmentCompetitionsCountRequest body = default(FindFulfillmentCompetitionsCountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for a list of fulfillment competitions - {FindFulfillmentCompetitionsRequest}
        /// </summary>
        /// <remarks>
        /// Search for a list of fulfillment competitions
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetitionQueryResult</returns>
        System.Threading.Tasks.Task<FulfillmentCompetitionQueryResult> FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPostAsync(string accept, string scopeId, FindFulfillmentCompetitionsRequest body = default(FindFulfillmentCompetitionsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for a list of fulfillment competitions - {FindFulfillmentCompetitionsRequest}
        /// </summary>
        /// <remarks>
        /// Search for a list of fulfillment competitions
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetitionQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentCompetitionQueryResult>> FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindFulfillmentCompetitionsRequest body = default(FindFulfillmentCompetitionsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentManifestPackagesRequest}
        /// </summary>
        /// <remarks>
        /// Search for a list of fulfillment packages.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier. (optional)</param>
        /// <param name="shippingProviderId">The optional shipping provider identifier. (optional)</param>
        /// <param name="fulfillmentStatus">The optional fulfillment status. (optional)</param>
        /// <param name="manifestedFrom">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestedTo">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestReferenceId">The optional manifest reference id. (optional)</param>
        /// <param name="includePackagesWithManifest">A value indicating whether fulfillment packages with a manifest are returned. (optional)</param>
        /// <param name="includePackagesWithoutManifest">A value indicating whether fulfillment packages without a manifest are returned. (optional)</param>
        /// <param name="includePackageItems">A value indicating whether fulfillment package items are retrieved with each package. (optional)</param>
        /// <param name="carrierAccountIdOutbound">The carrier account id for outbound. (optional)</param>
        /// <param name="carrierAccountNameOutbound">The carrier account name for outbound. (optional)</param>
        /// <param name="carrierNameOutbound">The carrier name for outbound. (optional)</param>
        /// <param name="carrierServiceLevelOutbound">The carrier service level for outbound. (optional)</param>
        /// <param name="carrierManifestRequirement">The optional carrier manifest requirement to find. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackageResult</returns>
        System.Threading.Tasks.Task<FulfillmentPackageResult> FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGetAsync(string accept, string scopeId, string fulfillmentLocationId = default(string), string shippingProviderId = default(string), string fulfillmentStatus = default(string), DateTime? manifestedFrom = default(DateTime?), DateTime? manifestedTo = default(DateTime?), string manifestReferenceId = default(string), bool? includePackagesWithManifest = default(bool?), bool? includePackagesWithoutManifest = default(bool?), bool? includePackageItems = default(bool?), string carrierAccountIdOutbound = default(string), string carrierAccountNameOutbound = default(string), string carrierNameOutbound = default(string), string carrierServiceLevelOutbound = default(string), string carrierManifestRequirement = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentManifestPackagesRequest}
        /// </summary>
        /// <remarks>
        /// Search for a list of fulfillment packages.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier. (optional)</param>
        /// <param name="shippingProviderId">The optional shipping provider identifier. (optional)</param>
        /// <param name="fulfillmentStatus">The optional fulfillment status. (optional)</param>
        /// <param name="manifestedFrom">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestedTo">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestReferenceId">The optional manifest reference id. (optional)</param>
        /// <param name="includePackagesWithManifest">A value indicating whether fulfillment packages with a manifest are returned. (optional)</param>
        /// <param name="includePackagesWithoutManifest">A value indicating whether fulfillment packages without a manifest are returned. (optional)</param>
        /// <param name="includePackageItems">A value indicating whether fulfillment package items are retrieved with each package. (optional)</param>
        /// <param name="carrierAccountIdOutbound">The carrier account id for outbound. (optional)</param>
        /// <param name="carrierAccountNameOutbound">The carrier account name for outbound. (optional)</param>
        /// <param name="carrierNameOutbound">The carrier name for outbound. (optional)</param>
        /// <param name="carrierServiceLevelOutbound">The carrier service level for outbound. (optional)</param>
        /// <param name="carrierManifestRequirement">The optional carrier manifest requirement to find. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentPackageResult>> FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId = default(string), string shippingProviderId = default(string), string fulfillmentStatus = default(string), DateTime? manifestedFrom = default(DateTime?), DateTime? manifestedTo = default(DateTime?), string manifestReferenceId = default(string), bool? includePackagesWithManifest = default(bool?), bool? includePackagesWithoutManifest = default(bool?), bool? includePackageItems = default(bool?), string carrierAccountIdOutbound = default(string), string carrierAccountNameOutbound = default(string), string carrierNameOutbound = default(string), string carrierServiceLevelOutbound = default(string), string carrierManifestRequirement = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for fulfillment orders - {FindFulfillmentOrdersRequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment orders
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentOrderQueryResult</returns>
        System.Threading.Tasks.Task<FulfillmentOrderQueryResult> FindFulfillmentOrdersRequestordersScopeIdfindPostAsync(string accept, string scopeId, FindFulfillmentOrdersRequest body = default(FindFulfillmentOrdersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for fulfillment orders - {FindFulfillmentOrdersRequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment orders
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentOrderQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentOrderQueryResult>> FindFulfillmentOrdersRequestordersScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindFulfillmentOrdersRequest body = default(FindFulfillmentOrdersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for fulfillment package types - {FindFulfillmentPackageTypesRequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment package types for a Scope (and its parents)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope to retrieve fulfillment package types for</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackageTypeResult</returns>
        System.Threading.Tasks.Task<FulfillmentPackageTypeResult> FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPostAsync(string accept, string scopeId, FindFulfillmentPackageTypesRequest body = default(FindFulfillmentPackageTypesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for fulfillment package types - {FindFulfillmentPackageTypesRequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment package types for a Scope (and its parents)
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope to retrieve fulfillment package types for</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackageTypeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentPackageTypeResult>> FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindFulfillmentPackageTypesRequest body = default(FindFulfillmentPackageTypesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentPackagesRequest}
        /// </summary>
        /// <remarks>
        /// Search for a list of fulfillment packages.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="orderId">The order identifier. (optional)</param>
        /// <param name="shipmentIds">A list of shipment identifier. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along each fulfillment package. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackageResult</returns>
        System.Threading.Tasks.Task<FulfillmentPackageResult> FindFulfillmentPackagesRequestpackagesScopeIdfindGetAsync(string accept, string scopeId, string orderId = default(string), List<string> shipmentIds = default(List<string>), string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentPackagesRequest}
        /// </summary>
        /// <remarks>
        /// Search for a list of fulfillment packages.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="orderId">The order identifier. (optional)</param>
        /// <param name="shipmentIds">A list of shipment identifier. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along each fulfillment package. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentPackageResult>> FindFulfillmentPackagesRequestpackagesScopeIdfindGetWithHttpInfoAsync(string accept, string scopeId, string orderId = default(string), List<string> shipmentIds = default(List<string>), string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for fulfillment SLA - {FindFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment SLA
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentSLAQueryResult</returns>
        System.Threading.Tasks.Task<FulfillmentSLAQueryResult> FindFulfillmentSLARequestSLAsScopeIdfindPostAsync(string accept, string scopeId, FindFulfillmentSLARequest body = default(FindFulfillmentSLARequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for fulfillment SLA - {FindFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment SLA
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentSLAQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentSLAQueryResult>> FindFulfillmentSLARequestSLAsScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindFulfillmentSLARequest body = default(FindFulfillmentSLARequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get shipping documents from a carrier - {GetFulfillmentCarrierDocumentsRequest}
        /// </summary>
        /// <remarks>
        /// Get shipping documents from a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFulfillmentCarrierDocumentsResponse</returns>
        System.Threading.Tasks.Task<GetFulfillmentCarrierDocumentsResponse> GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPostAsync(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierDocumentsRequest body = default(GetFulfillmentCarrierDocumentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get shipping documents from a carrier - {GetFulfillmentCarrierDocumentsRequest}
        /// </summary>
        /// <remarks>
        /// Get shipping documents from a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFulfillmentCarrierDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFulfillmentCarrierDocumentsResponse>> GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierDocumentsRequest body = default(GetFulfillmentCarrierDocumentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get shipping quotes for a package from a carrier - {GetFulfillmentCarrierQuotesRequest}
        /// </summary>
        /// <remarks>
        /// Get shipping quotes for a package from a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFulfillmentCarrierQuotesResponse</returns>
        System.Threading.Tasks.Task<GetFulfillmentCarrierQuotesResponse> GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPostAsync(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierQuotesRequest body = default(GetFulfillmentCarrierQuotesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get shipping quotes for a package from a carrier - {GetFulfillmentCarrierQuotesRequest}
        /// </summary>
        /// <remarks>
        /// Get shipping quotes for a package from a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFulfillmentCarrierQuotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFulfillmentCarrierQuotesResponse>> GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierQuotesRequest body = default(GetFulfillmentCarrierQuotesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a fulfillment competition by its identifier - {GetFulfillmentCompetitionRequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment competition by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The fulfillment competition identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetition</returns>
        System.Threading.Tasks.Task<FulfillmentCompetition> GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGetAsync(string accept, string scopeId, string fulfillmentCompetitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a fulfillment competition by its identifier - {GetFulfillmentCompetitionRequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment competition by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The fulfillment competition identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetition)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentCompetition>> GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCompetitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the fulfillment exceptions for an order at a fulfillment location - {GetFulfillmentExceptionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the fulfillment exceptions for an order at a fulfillment location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentExceptionResult</returns>
        System.Threading.Tasks.Task<FulfillmentExceptionResult> GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the fulfillment exceptions for an order at a fulfillment location - {GetFulfillmentExceptionsRequest}
        /// </summary>
        /// <remarks>
        /// Gets the fulfillment exceptions for an order at a fulfillment location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentExceptionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentExceptionResult>> GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a fulfillment package by its identifier - {GetFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment package by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along the fulfillment package. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackage</returns>
        System.Threading.Tasks.Task<FulfillmentPackage> GetFulfillmentPackageRequestpackagesScopeIdIdGetAsync(string accept, string scopeId, string id, string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a fulfillment package by its identifier - {GetFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment package by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along the fulfillment package. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackage)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentPackage>> GetFulfillmentPackageRequestpackagesScopeIdIdGetWithHttpInfoAsync(string accept, string scopeId, string id, string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a fulfillment package type by its identifier - {GetFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment package type by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="includeParentScopes">Determine if parent scopes should be considered when searching fulfillment package type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackageType</returns>
        System.Threading.Tasks.Task<FulfillmentPackageType> GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGetAsync(string accept, string scopeId, string id, bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a fulfillment package type by its identifier - {GetFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment package type by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="includeParentScopes">Determine if parent scopes should be considered when searching fulfillment package type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackageType)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentPackageType>> GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGetWithHttpInfoAsync(string accept, string scopeId, string id, bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a fulfillment SLA by its identifier - {GetFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment SLA by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment SLA identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentSLA</returns>
        System.Threading.Tasks.Task<FulfillmentSLA> GetFulfillmentSLARequestSLAsScopeIdIdGetAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a fulfillment SLA by its identifier - {GetFulfillmentSLARequest}
        /// </summary>
        /// <remarks>
        /// Gets a fulfillment SLA by its identifier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment SLA identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentSLA)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentSLA>> GetFulfillmentSLARequestSLAsScopeIdIdGetWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refund shipping quotes from a carrier - {RefundFulfillmentCarrierQuotesRequest}
        /// </summary>
        /// <remarks>
        /// Refund shipping quotes from a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPostAsync(string accept, string scopeId, string fulfillmentCarrierId, RefundFulfillmentCarrierQuotesRequest body = default(RefundFulfillmentCarrierQuotesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refund shipping quotes from a carrier - {RefundFulfillmentCarrierQuotesRequest}
        /// </summary>
        /// <remarks>
        /// Refund shipping quotes from a carrier.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCarrierId, RefundFulfillmentCarrierQuotesRequest body = default(RefundFulfillmentCarrierQuotesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes a list of fulfillment competition locations from a specific fulfillment competition - {RemoveFulfillmentCompetitionLocationsRequest}
        /// </summary>
        /// <remarks>
        /// Removes a list of fulfillment competition locations from a specific fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition from which the fulfillment competition locations are removed.</param>
        /// <param name="fulfillmentLocationIds">The list of the fulfillment location identifiers which will be removed from the fulfillment competition. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetition</returns>
        System.Threading.Tasks.Task<FulfillmentCompetition> RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDeleteAsync(string accept, string scopeId, string fulfillmentCompetitionId, List<string> fulfillmentLocationIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes a list of fulfillment competition locations from a specific fulfillment competition - {RemoveFulfillmentCompetitionLocationsRequest}
        /// </summary>
        /// <remarks>
        /// Removes a list of fulfillment competition locations from a specific fulfillment competition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition from which the fulfillment competition locations are removed.</param>
        /// <param name="fulfillmentLocationIds">The list of the fulfillment location identifiers which will be removed from the fulfillment competition. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetition)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentCompetition>> RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDeleteWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCompetitionId, List<string> fulfillmentLocationIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transfers a list of fulfillment package items from one fulfillment package to another - {TransferFulfillmentPackageItemsRequest}
        /// </summary>
        /// <remarks>
        /// Transfers a list of fulfillment package items from one fulfillment package to another.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackage</returns>
        System.Threading.Tasks.Task<FulfillmentPackage> TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPostAsync(string accept, string scopeId, TransferFulfillmentPackageItemsRequest body = default(TransferFulfillmentPackageItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transfers a list of fulfillment package items from one fulfillment package to another - {TransferFulfillmentPackageItemsRequest}
        /// </summary>
        /// <remarks>
        /// Transfers a list of fulfillment package items from one fulfillment package to another.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackage)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentPackage>> TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPostWithHttpInfoAsync(string accept, string scopeId, TransferFulfillmentPackageItemsRequest body = default(TransferFulfillmentPackageItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a fulfillment package - {UpdateFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Updates a fulfillment package.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackage</returns>
        System.Threading.Tasks.Task<FulfillmentPackage> UpdateFulfillmentPackageRequestpackagesScopeIdIdCreateAsync(string accept, string scopeId, string id, UpdateFulfillmentPackageRequest body = default(UpdateFulfillmentPackageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a fulfillment package - {UpdateFulfillmentPackageRequest}
        /// </summary>
        /// <remarks>
        /// Updates a fulfillment package.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackage)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentPackage>> UpdateFulfillmentPackageRequestpackagesScopeIdIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateFulfillmentPackageRequest body = default(UpdateFulfillmentPackageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a fulfillment package type - {UpdateFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Updates a fulfillment package type.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackageType</returns>
        System.Threading.Tasks.Task<FulfillmentPackageType> UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreateAsync(string accept, string scopeId, string id, UpdateFulfillmentPackageTypeRequest body = default(UpdateFulfillmentPackageTypeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a fulfillment package type - {UpdateFulfillmentPackageTypeRequest}
        /// </summary>
        /// <remarks>
        /// Updates a fulfillment package type.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackageType)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentPackageType>> UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateFulfillmentPackageTypeRequest body = default(UpdateFulfillmentPackageTypeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFulfillmentsApi : IFulfillmentsApiSync, IFulfillmentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FulfillmentsApi : IFulfillmentsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FulfillmentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FulfillmentsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FulfillmentsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FulfillmentsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds one or more fulfillment locations to a fulfillment competition. - {AddFulfillmentCompetitionLocationsRequest} Adds one or more fulfillment locations to a fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the fulfillment locations are added.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentCompetition</returns>
        public FulfillmentCompetition AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPost(string accept, string scopeId, string fulfillmentCompetitionId, AddFulfillmentCompetitionLocationsRequest body = default(AddFulfillmentCompetitionLocationsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> localVarResponse = AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPostWithHttpInfo(accept, scopeId, fulfillmentCompetitionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds one or more fulfillment locations to a fulfillment competition. - {AddFulfillmentCompetitionLocationsRequest} Adds one or more fulfillment locations to a fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the fulfillment locations are added.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentCompetition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPostWithHttpInfo(string accept, string scopeId, string fulfillmentCompetitionId, AddFulfillmentCompetitionLocationsRequest body = default(AddFulfillmentCompetitionLocationsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPost");

            // verify the required parameter 'fulfillmentCompetitionId' is set
            if (fulfillmentCompetitionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCompetitionId' when calling FulfillmentsApi->AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCompetitionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCompetitionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentCompetition>("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}/locations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds one or more fulfillment locations to a fulfillment competition. - {AddFulfillmentCompetitionLocationsRequest} Adds one or more fulfillment locations to a fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the fulfillment locations are added.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetition</returns>
        public async System.Threading.Tasks.Task<FulfillmentCompetition> AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPostAsync(string accept, string scopeId, string fulfillmentCompetitionId, AddFulfillmentCompetitionLocationsRequest body = default(AddFulfillmentCompetitionLocationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> localVarResponse = await AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPostWithHttpInfoAsync(accept, scopeId, fulfillmentCompetitionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds one or more fulfillment locations to a fulfillment competition. - {AddFulfillmentCompetitionLocationsRequest} Adds one or more fulfillment locations to a fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the fulfillment locations are added.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition>> AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCompetitionId, AddFulfillmentCompetitionLocationsRequest body = default(AddFulfillmentCompetitionLocationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPost");

            // verify the required parameter 'fulfillmentCompetitionId' is set
            if (fulfillmentCompetitionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCompetitionId' when calling FulfillmentsApi->AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCompetitionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCompetitionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentCompetition>("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}/locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Changes the status of a fulfillment competition location. - {ChangeFulfillmentCompetitionLocationStatusRequest} Changes the status of a fulfillment competition location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition whose fulfillment competition location status is changing.</param>
        /// <param name="fulfillmentLocationId">The identifier of the fulfillment location whose status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentCompetition</returns>
        public FulfillmentCompetition ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreate(string accept, string scopeId, string fulfillmentCompetitionId, string fulfillmentLocationId, ChangeFulfillmentCompetitionLocationStatusRequest body = default(ChangeFulfillmentCompetitionLocationStatusRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> localVarResponse = ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreateWithHttpInfo(accept, scopeId, fulfillmentCompetitionId, fulfillmentLocationId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Changes the status of a fulfillment competition location. - {ChangeFulfillmentCompetitionLocationStatusRequest} Changes the status of a fulfillment competition location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition whose fulfillment competition location status is changing.</param>
        /// <param name="fulfillmentLocationId">The identifier of the fulfillment location whose status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentCompetition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreateWithHttpInfo(string accept, string scopeId, string fulfillmentCompetitionId, string fulfillmentLocationId, ChangeFulfillmentCompetitionLocationStatusRequest body = default(ChangeFulfillmentCompetitionLocationStatusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreate");

            // verify the required parameter 'fulfillmentCompetitionId' is set
            if (fulfillmentCompetitionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCompetitionId' when calling FulfillmentsApi->ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreate");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentsApi->ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCompetitionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCompetitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<FulfillmentCompetition>("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}/locations/{FulfillmentLocationId}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Changes the status of a fulfillment competition location. - {ChangeFulfillmentCompetitionLocationStatusRequest} Changes the status of a fulfillment competition location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition whose fulfillment competition location status is changing.</param>
        /// <param name="fulfillmentLocationId">The identifier of the fulfillment location whose status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetition</returns>
        public async System.Threading.Tasks.Task<FulfillmentCompetition> ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreateAsync(string accept, string scopeId, string fulfillmentCompetitionId, string fulfillmentLocationId, ChangeFulfillmentCompetitionLocationStatusRequest body = default(ChangeFulfillmentCompetitionLocationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> localVarResponse = await ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreateWithHttpInfoAsync(accept, scopeId, fulfillmentCompetitionId, fulfillmentLocationId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Changes the status of a fulfillment competition location. - {ChangeFulfillmentCompetitionLocationStatusRequest} Changes the status of a fulfillment competition location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition whose fulfillment competition location status is changing.</param>
        /// <param name="fulfillmentLocationId">The identifier of the fulfillment location whose status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition>> ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCompetitionId, string fulfillmentLocationId, ChangeFulfillmentCompetitionLocationStatusRequest body = default(ChangeFulfillmentCompetitionLocationStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreate");

            // verify the required parameter 'fulfillmentCompetitionId' is set
            if (fulfillmentCompetitionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCompetitionId' when calling FulfillmentsApi->ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreate");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentsApi->ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCompetitionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCompetitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FulfillmentCompetition>("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}/locations/{FulfillmentLocationId}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeFulfillmentCompetitionLocationStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsFulfillmentLocationIdstatusCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change the status of a fulfillment competition. - {ChangeFulfillmentCompetitionStatusRequest} Change the status of a fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentCompetition</returns>
        public FulfillmentCompetition ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreate(string accept, string scopeId, string fulfillmentCompetitionId, ChangeFulfillmentCompetitionStatusRequest body = default(ChangeFulfillmentCompetitionStatusRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> localVarResponse = ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreateWithHttpInfo(accept, scopeId, fulfillmentCompetitionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change the status of a fulfillment competition. - {ChangeFulfillmentCompetitionStatusRequest} Change the status of a fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentCompetition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreateWithHttpInfo(string accept, string scopeId, string fulfillmentCompetitionId, ChangeFulfillmentCompetitionStatusRequest body = default(ChangeFulfillmentCompetitionStatusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreate");

            // verify the required parameter 'fulfillmentCompetitionId' is set
            if (fulfillmentCompetitionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCompetitionId' when calling FulfillmentsApi->ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCompetitionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCompetitionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<FulfillmentCompetition>("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change the status of a fulfillment competition. - {ChangeFulfillmentCompetitionStatusRequest} Change the status of a fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetition</returns>
        public async System.Threading.Tasks.Task<FulfillmentCompetition> ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreateAsync(string accept, string scopeId, string fulfillmentCompetitionId, ChangeFulfillmentCompetitionStatusRequest body = default(ChangeFulfillmentCompetitionStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> localVarResponse = await ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreateWithHttpInfoAsync(accept, scopeId, fulfillmentCompetitionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change the status of a fulfillment competition. - {ChangeFulfillmentCompetitionStatusRequest} Change the status of a fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to which the status is changing.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition>> ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCompetitionId, ChangeFulfillmentCompetitionStatusRequest body = default(ChangeFulfillmentCompetitionStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreate");

            // verify the required parameter 'fulfillmentCompetitionId' is set
            if (fulfillmentCompetitionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCompetitionId' when calling FulfillmentsApi->ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCompetitionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCompetitionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FulfillmentCompetition>("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeFulfillmentCompetitionStatusRequestcompetitionsScopeIdFulfillmentCompetitionIdstatusCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Confirm shipping quotes for a package with a carrier - {ConfirmFulfillmentCarrierQuotesRequest} Confirm shipping quotes for a package with a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ConfirmFulfillmentCarrierQuotesResponse</returns>
        public ConfirmFulfillmentCarrierQuotesResponse ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPost(string accept, string scopeId, string fulfillmentCarrierId, ConfirmFulfillmentCarrierQuotesRequest body = default(ConfirmFulfillmentCarrierQuotesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ConfirmFulfillmentCarrierQuotesResponse> localVarResponse = ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPostWithHttpInfo(accept, scopeId, fulfillmentCarrierId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm shipping quotes for a package with a carrier - {ConfirmFulfillmentCarrierQuotesRequest} Confirm shipping quotes for a package with a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ConfirmFulfillmentCarrierQuotesResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ConfirmFulfillmentCarrierQuotesResponse> ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPostWithHttpInfo(string accept, string scopeId, string fulfillmentCarrierId, ConfirmFulfillmentCarrierQuotesRequest body = default(ConfirmFulfillmentCarrierQuotesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPost");

            // verify the required parameter 'fulfillmentCarrierId' is set
            if (fulfillmentCarrierId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCarrierId' when calling FulfillmentsApi->ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCarrierId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCarrierId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfirmFulfillmentCarrierQuotesResponse>("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/quotes/confirm", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Confirm shipping quotes for a package with a carrier - {ConfirmFulfillmentCarrierQuotesRequest} Confirm shipping quotes for a package with a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfirmFulfillmentCarrierQuotesResponse</returns>
        public async System.Threading.Tasks.Task<ConfirmFulfillmentCarrierQuotesResponse> ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPostAsync(string accept, string scopeId, string fulfillmentCarrierId, ConfirmFulfillmentCarrierQuotesRequest body = default(ConfirmFulfillmentCarrierQuotesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ConfirmFulfillmentCarrierQuotesResponse> localVarResponse = await ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPostWithHttpInfoAsync(accept, scopeId, fulfillmentCarrierId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm shipping quotes for a package with a carrier - {ConfirmFulfillmentCarrierQuotesRequest} Confirm shipping quotes for a package with a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfirmFulfillmentCarrierQuotesResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ConfirmFulfillmentCarrierQuotesResponse>> ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCarrierId, ConfirmFulfillmentCarrierQuotesRequest body = default(ConfirmFulfillmentCarrierQuotesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPost");

            // verify the required parameter 'fulfillmentCarrierId' is set
            if (fulfillmentCarrierId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCarrierId' when calling FulfillmentsApi->ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCarrierId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCarrierId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfirmFulfillmentCarrierQuotesResponse>("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/quotes/confirm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesconfirmPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create manifests for a list of packages with a carrier - {CreateFulfillmentCarrierManifestRequest} Create manifests for a list of packages with a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateFulfillmentCarrierManifestResponse</returns>
        public CreateFulfillmentCarrierManifestResponse CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPost(string accept, string scopeId, string fulfillmentCarrierId, CreateFulfillmentCarrierManifestRequest body = default(CreateFulfillmentCarrierManifestRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateFulfillmentCarrierManifestResponse> localVarResponse = CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPostWithHttpInfo(accept, scopeId, fulfillmentCarrierId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create manifests for a list of packages with a carrier - {CreateFulfillmentCarrierManifestRequest} Create manifests for a list of packages with a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateFulfillmentCarrierManifestResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateFulfillmentCarrierManifestResponse> CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPostWithHttpInfo(string accept, string scopeId, string fulfillmentCarrierId, CreateFulfillmentCarrierManifestRequest body = default(CreateFulfillmentCarrierManifestRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPost");

            // verify the required parameter 'fulfillmentCarrierId' is set
            if (fulfillmentCarrierId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCarrierId' when calling FulfillmentsApi->CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCarrierId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCarrierId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateFulfillmentCarrierManifestResponse>("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/manifests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create manifests for a list of packages with a carrier - {CreateFulfillmentCarrierManifestRequest} Create manifests for a list of packages with a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFulfillmentCarrierManifestResponse</returns>
        public async System.Threading.Tasks.Task<CreateFulfillmentCarrierManifestResponse> CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPostAsync(string accept, string scopeId, string fulfillmentCarrierId, CreateFulfillmentCarrierManifestRequest body = default(CreateFulfillmentCarrierManifestRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateFulfillmentCarrierManifestResponse> localVarResponse = await CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPostWithHttpInfoAsync(accept, scopeId, fulfillmentCarrierId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create manifests for a list of packages with a carrier - {CreateFulfillmentCarrierManifestRequest} Create manifests for a list of packages with a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFulfillmentCarrierManifestResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateFulfillmentCarrierManifestResponse>> CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCarrierId, CreateFulfillmentCarrierManifestRequest body = default(CreateFulfillmentCarrierManifestRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPost");

            // verify the required parameter 'fulfillmentCarrierId' is set
            if (fulfillmentCarrierId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCarrierId' when calling FulfillmentsApi->CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCarrierId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCarrierId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateFulfillmentCarrierManifestResponse>("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/manifests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFulfillmentCarrierManifestRequestcarriersScopeIdFulfillmentCarrierIdmanifestsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment - {CreateFulfillmentCompetitionRequest} Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentCompetition</returns>
        public FulfillmentCompetition CreateFulfillmentCompetitionRequestcompetitionsScopeIdPost(string accept, string scopeId, CreateFulfillmentCompetitionRequest body = default(CreateFulfillmentCompetitionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> localVarResponse = CreateFulfillmentCompetitionRequestcompetitionsScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment - {CreateFulfillmentCompetitionRequest} Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentCompetition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> CreateFulfillmentCompetitionRequestcompetitionsScopeIdPostWithHttpInfo(string accept, string scopeId, CreateFulfillmentCompetitionRequest body = default(CreateFulfillmentCompetitionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->CreateFulfillmentCompetitionRequestcompetitionsScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->CreateFulfillmentCompetitionRequestcompetitionsScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentCompetition>("/fulfillments/competitions/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFulfillmentCompetitionRequestcompetitionsScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment - {CreateFulfillmentCompetitionRequest} Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetition</returns>
        public async System.Threading.Tasks.Task<FulfillmentCompetition> CreateFulfillmentCompetitionRequestcompetitionsScopeIdPostAsync(string accept, string scopeId, CreateFulfillmentCompetitionRequest body = default(CreateFulfillmentCompetitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> localVarResponse = await CreateFulfillmentCompetitionRequestcompetitionsScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment - {CreateFulfillmentCompetitionRequest} Creates a new fulfillment competition in order to provide an opportunity for fulfillment locations to compete over fulfilling a shipment.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition>> CreateFulfillmentCompetitionRequestcompetitionsScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateFulfillmentCompetitionRequest body = default(CreateFulfillmentCompetitionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->CreateFulfillmentCompetitionRequestcompetitionsScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->CreateFulfillmentCompetitionRequestcompetitionsScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentCompetition>("/fulfillments/competitions/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFulfillmentCompetitionRequestcompetitionsScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new fulfillment package with a list of line items - {CreateFulfillmentPackageRequest} Creates a new fulfillment package with a list of line items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentPackage</returns>
        public FulfillmentPackage CreateFulfillmentPackageRequestpackagesScopeIdPost(string accept, string scopeId, CreateFulfillmentPackageRequest body = default(CreateFulfillmentPackageRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage> localVarResponse = CreateFulfillmentPackageRequestpackagesScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new fulfillment package with a list of line items - {CreateFulfillmentPackageRequest} Creates a new fulfillment package with a list of line items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackage</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage> CreateFulfillmentPackageRequestpackagesScopeIdPostWithHttpInfo(string accept, string scopeId, CreateFulfillmentPackageRequest body = default(CreateFulfillmentPackageRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->CreateFulfillmentPackageRequestpackagesScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->CreateFulfillmentPackageRequestpackagesScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentPackage>("/fulfillments/packages/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFulfillmentPackageRequestpackagesScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new fulfillment package with a list of line items - {CreateFulfillmentPackageRequest} Creates a new fulfillment package with a list of line items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackage</returns>
        public async System.Threading.Tasks.Task<FulfillmentPackage> CreateFulfillmentPackageRequestpackagesScopeIdPostAsync(string accept, string scopeId, CreateFulfillmentPackageRequest body = default(CreateFulfillmentPackageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage> localVarResponse = await CreateFulfillmentPackageRequestpackagesScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new fulfillment package with a list of line items - {CreateFulfillmentPackageRequest} Creates a new fulfillment package with a list of line items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackage)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage>> CreateFulfillmentPackageRequestpackagesScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateFulfillmentPackageRequest body = default(CreateFulfillmentPackageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->CreateFulfillmentPackageRequestpackagesScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->CreateFulfillmentPackageRequestpackagesScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentPackage>("/fulfillments/packages/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFulfillmentPackageRequestpackagesScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new fulfillment package type - {CreateFulfillmentPackageTypeRequest} Creates a new fulfillment package type.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentPackageType</returns>
        public FulfillmentPackageType CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPost(string accept, string scopeId, CreateFulfillmentPackageTypeRequest body = default(CreateFulfillmentPackageTypeRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageType> localVarResponse = CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new fulfillment package type - {CreateFulfillmentPackageTypeRequest} Creates a new fulfillment package type.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackageType</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageType> CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPostWithHttpInfo(string accept, string scopeId, CreateFulfillmentPackageTypeRequest body = default(CreateFulfillmentPackageTypeRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentPackageType>("/fulfillments/packageTypes/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new fulfillment package type - {CreateFulfillmentPackageTypeRequest} Creates a new fulfillment package type.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackageType</returns>
        public async System.Threading.Tasks.Task<FulfillmentPackageType> CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPostAsync(string accept, string scopeId, CreateFulfillmentPackageTypeRequest body = default(CreateFulfillmentPackageTypeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageType> localVarResponse = await CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new fulfillment package type - {CreateFulfillmentPackageTypeRequest} Creates a new fulfillment package type.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackageType)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageType>> CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateFulfillmentPackageTypeRequest body = default(CreateFulfillmentPackageTypeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentPackageType>("/fulfillments/packageTypes/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFulfillmentPackageTypeRequestpackageTypesScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a fulfillment SLA for a specific fulfillment location - {CreateFulfillmentSLARequest} Create a fulfillment SLA for a specific fulfillment location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentSLA</returns>
        public FulfillmentSLA CreateFulfillmentSLARequestSLAsScopeIdPost(string accept, string scopeId, CreateFulfillmentSLARequest body = default(CreateFulfillmentSLARequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLA> localVarResponse = CreateFulfillmentSLARequestSLAsScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a fulfillment SLA for a specific fulfillment location - {CreateFulfillmentSLARequest} Create a fulfillment SLA for a specific fulfillment location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentSLA</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLA> CreateFulfillmentSLARequestSLAsScopeIdPostWithHttpInfo(string accept, string scopeId, CreateFulfillmentSLARequest body = default(CreateFulfillmentSLARequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->CreateFulfillmentSLARequestSLAsScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->CreateFulfillmentSLARequestSLAsScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentSLA>("/fulfillments/SLAs/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFulfillmentSLARequestSLAsScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a fulfillment SLA for a specific fulfillment location - {CreateFulfillmentSLARequest} Create a fulfillment SLA for a specific fulfillment location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentSLA</returns>
        public async System.Threading.Tasks.Task<FulfillmentSLA> CreateFulfillmentSLARequestSLAsScopeIdPostAsync(string accept, string scopeId, CreateFulfillmentSLARequest body = default(CreateFulfillmentSLARequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLA> localVarResponse = await CreateFulfillmentSLARequestSLAsScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a fulfillment SLA for a specific fulfillment location - {CreateFulfillmentSLARequest} Create a fulfillment SLA for a specific fulfillment location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentSLA)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLA>> CreateFulfillmentSLARequestSLAsScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateFulfillmentSLARequest body = default(CreateFulfillmentSLARequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->CreateFulfillmentSLARequestSLAsScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->CreateFulfillmentSLARequestSLAsScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentSLA>("/fulfillments/SLAs/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFulfillmentSLARequestSLAsScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a fulfillment exception for a lineitem - {CreateOrUpdateFulfillmentExceptionRequest} Creates or updates a fulfillment exception for a lineitem
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentException</returns>
        public FulfillmentException CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId, CreateOrUpdateFulfillmentExceptionRequest body = default(CreateOrUpdateFulfillmentExceptionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentException> localVarResponse = CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreateWithHttpInfo(accept, scopeId, fulfillmentLocationId, orderId, shipmentId, lineItemId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a fulfillment exception for a lineitem - {CreateOrUpdateFulfillmentExceptionRequest} Creates or updates a fulfillment exception for a lineitem
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentException</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentException> CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreateWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId, CreateOrUpdateFulfillmentExceptionRequest body = default(CreateOrUpdateFulfillmentExceptionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentsApi->CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling FulfillmentsApi->CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentsApi->CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate");

            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling FulfillmentsApi->CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("LineItemId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<FulfillmentException>("/fulfillments/exceptions/{ScopeId}/{FulfillmentLocationId}/{OrderId}/{ShipmentId}/{LineItemId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a fulfillment exception for a lineitem - {CreateOrUpdateFulfillmentExceptionRequest} Creates or updates a fulfillment exception for a lineitem
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentException</returns>
        public async System.Threading.Tasks.Task<FulfillmentException> CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreateAsync(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId, CreateOrUpdateFulfillmentExceptionRequest body = default(CreateOrUpdateFulfillmentExceptionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentException> localVarResponse = await CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreateWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, orderId, shipmentId, lineItemId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a fulfillment exception for a lineitem - {CreateOrUpdateFulfillmentExceptionRequest} Creates or updates a fulfillment exception for a lineitem
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentException)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentException>> CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId, CreateOrUpdateFulfillmentExceptionRequest body = default(CreateOrUpdateFulfillmentExceptionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentsApi->CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling FulfillmentsApi->CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentsApi->CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate");

            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling FulfillmentsApi->CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("LineItemId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FulfillmentException>("/fulfillments/exceptions/{ScopeId}/{FulfillmentLocationId}/{OrderId}/{ShipmentId}/{LineItemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a fulfillment competition - {DeleteFulfillmentCompetitionRequest} Deletes a fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to be removed.</param>
        /// <returns></returns>
        public void DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDelete(string accept, string scopeId, string fulfillmentCompetitionId)
        {
            DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDeleteWithHttpInfo(accept, scopeId, fulfillmentCompetitionId);
        }

        /// <summary>
        /// Deletes a fulfillment competition - {DeleteFulfillmentCompetitionRequest} Deletes a fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDeleteWithHttpInfo(string accept, string scopeId, string fulfillmentCompetitionId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDelete");

            // verify the required parameter 'fulfillmentCompetitionId' is set
            if (fulfillmentCompetitionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCompetitionId' when calling FulfillmentsApi->DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCompetitionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCompetitionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a fulfillment competition - {DeleteFulfillmentCompetitionRequest} Deletes a fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDeleteAsync(string accept, string scopeId, string fulfillmentCompetitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDeleteWithHttpInfoAsync(accept, scopeId, fulfillmentCompetitionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a fulfillment competition - {DeleteFulfillmentCompetitionRequest} Deletes a fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDeleteWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCompetitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDelete");

            // verify the required parameter 'fulfillmentCompetitionId' is set
            if (fulfillmentCompetitionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCompetitionId' when calling FulfillmentsApi->DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCompetitionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCompetitionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a fulfillment exception for a lineitem - {DeleteFulfillmentExceptionRequest} Deletes a fulfillment exception for a lineitem
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <returns></returns>
        public void DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId)
        {
            DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDeleteWithHttpInfo(accept, scopeId, fulfillmentLocationId, orderId, shipmentId, lineItemId);
        }

        /// <summary>
        /// Deletes a fulfillment exception for a lineitem - {DeleteFulfillmentExceptionRequest} Deletes a fulfillment exception for a lineitem
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDeleteWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentsApi->DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling FulfillmentsApi->DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentsApi->DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete");

            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling FulfillmentsApi->DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("LineItemId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/fulfillments/exceptions/{ScopeId}/{FulfillmentLocationId}/{OrderId}/{ShipmentId}/{LineItemId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a fulfillment exception for a lineitem - {DeleteFulfillmentExceptionRequest} Deletes a fulfillment exception for a lineitem
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDeleteAsync(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDeleteWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, orderId, shipmentId, lineItemId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a fulfillment exception for a lineitem - {DeleteFulfillmentExceptionRequest} Deletes a fulfillment exception for a lineitem
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The identifier of the order.</param>
        /// <param name="shipmentId">The identifier of the shipment.</param>
        /// <param name="lineItemId">The identifier of the line item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDeleteWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string orderId, string shipmentId, string lineItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentsApi->DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling FulfillmentsApi->DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentsApi->DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete");

            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling FulfillmentsApi->DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("LineItemId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/fulfillments/exceptions/{ScopeId}/{FulfillmentLocationId}/{OrderId}/{ShipmentId}/{LineItemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentExceptionRequestexceptionsScopeIdFulfillmentLocationIdOrderIdShipmentIdLineItemIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all fulfillment packages for a specific shipment id - {DeleteFulfillmentPackageForShipmentRequest} Delete all fulfillment packages for a specific shipment id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <returns></returns>
        public void DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDelete(string accept, string scopeId, string shipmentId)
        {
            DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDeleteWithHttpInfo(accept, scopeId, shipmentId);
        }

        /// <summary>
        /// Delete all fulfillment packages for a specific shipment id - {DeleteFulfillmentPackageForShipmentRequest} Delete all fulfillment packages for a specific shipment id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDeleteWithHttpInfo(string accept, string scopeId, string shipmentId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDelete");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentsApi->DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/fulfillments/packages/{ScopeId}/byShipment/{ShipmentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all fulfillment packages for a specific shipment id - {DeleteFulfillmentPackageForShipmentRequest} Delete all fulfillment packages for a specific shipment id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDeleteAsync(string accept, string scopeId, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDeleteWithHttpInfoAsync(accept, scopeId, shipmentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete all fulfillment packages for a specific shipment id - {DeleteFulfillmentPackageForShipmentRequest} Delete all fulfillment packages for a specific shipment id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="shipmentId">The shipment identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDeleteWithHttpInfoAsync(string accept, string scopeId, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDelete");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling FulfillmentsApi->DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/fulfillments/packages/{ScopeId}/byShipment/{ShipmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentPackageForShipmentRequestpackagesScopeIdbyShipmentShipmentIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a fulfillment package for a specific id - {DeleteFulfillmentPackageRequest} Delete a fulfillment package for a specific id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package id.</param>
        /// <returns></returns>
        public void DeleteFulfillmentPackageRequestpackagesScopeIdIdDelete(string accept, string scopeId, string id)
        {
            DeleteFulfillmentPackageRequestpackagesScopeIdIdDeleteWithHttpInfo(accept, scopeId, id);
        }

        /// <summary>
        /// Delete a fulfillment package for a specific id - {DeleteFulfillmentPackageRequest} Delete a fulfillment package for a specific id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteFulfillmentPackageRequestpackagesScopeIdIdDeleteWithHttpInfo(string accept, string scopeId, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->DeleteFulfillmentPackageRequestpackagesScopeIdIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->DeleteFulfillmentPackageRequestpackagesScopeIdIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->DeleteFulfillmentPackageRequestpackagesScopeIdIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/fulfillments/packages/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentPackageRequestpackagesScopeIdIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a fulfillment package for a specific id - {DeleteFulfillmentPackageRequest} Delete a fulfillment package for a specific id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentPackageRequestpackagesScopeIdIdDeleteAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFulfillmentPackageRequestpackagesScopeIdIdDeleteWithHttpInfoAsync(accept, scopeId, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a fulfillment package for a specific id - {DeleteFulfillmentPackageRequest} Delete a fulfillment package for a specific id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteFulfillmentPackageRequestpackagesScopeIdIdDeleteWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->DeleteFulfillmentPackageRequestpackagesScopeIdIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->DeleteFulfillmentPackageRequestpackagesScopeIdIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->DeleteFulfillmentPackageRequestpackagesScopeIdIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/fulfillments/packages/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentPackageRequestpackagesScopeIdIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a fulfillment package type for a specific id - {DeleteFulfillmentPackageTypeRequest} Delete a fulfillment package type for a specific id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type id.</param>
        /// <returns></returns>
        public void DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDelete(string accept, string scopeId, string id)
        {
            DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDeleteWithHttpInfo(accept, scopeId, id);
        }

        /// <summary>
        /// Delete a fulfillment package type for a specific id - {DeleteFulfillmentPackageTypeRequest} Delete a fulfillment package type for a specific id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDeleteWithHttpInfo(string accept, string scopeId, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/fulfillments/packageTypes/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a fulfillment package type for a specific id - {DeleteFulfillmentPackageTypeRequest} Delete a fulfillment package type for a specific id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDeleteAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDeleteWithHttpInfoAsync(accept, scopeId, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a fulfillment package type for a specific id - {DeleteFulfillmentPackageTypeRequest} Delete a fulfillment package type for a specific id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDeleteWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/fulfillments/packageTypes/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentPackageTypeRequestpackageTypesScopeIdIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable a fulfillment SLA for a specific id - {DisableFulfillmentSLARequest} Disable a fulfillment SLA for a specific id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentSLA</returns>
        public FulfillmentSLA DisableFulfillmentSLARequestSLAsdisablePost(string accept, DisableFulfillmentSLARequest body = default(DisableFulfillmentSLARequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLA> localVarResponse = DisableFulfillmentSLARequestSLAsdisablePostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a fulfillment SLA for a specific id - {DisableFulfillmentSLARequest} Disable a fulfillment SLA for a specific id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentSLA</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLA> DisableFulfillmentSLARequestSLAsdisablePostWithHttpInfo(string accept, DisableFulfillmentSLARequest body = default(DisableFulfillmentSLARequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->DisableFulfillmentSLARequestSLAsdisablePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentSLA>("/fulfillments/SLAs/disable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableFulfillmentSLARequestSLAsdisablePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable a fulfillment SLA for a specific id - {DisableFulfillmentSLARequest} Disable a fulfillment SLA for a specific id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentSLA</returns>
        public async System.Threading.Tasks.Task<FulfillmentSLA> DisableFulfillmentSLARequestSLAsdisablePostAsync(string accept, DisableFulfillmentSLARequest body = default(DisableFulfillmentSLARequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLA> localVarResponse = await DisableFulfillmentSLARequestSLAsdisablePostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a fulfillment SLA for a specific id - {DisableFulfillmentSLARequest} Disable a fulfillment SLA for a specific id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentSLA)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLA>> DisableFulfillmentSLARequestSLAsdisablePostWithHttpInfoAsync(string accept, DisableFulfillmentSLARequest body = default(DisableFulfillmentSLARequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->DisableFulfillmentSLARequestSLAsdisablePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentSLA>("/fulfillments/SLAs/disable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableFulfillmentSLARequestSLAsdisablePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the number of fulfillment competitions - {FindFulfillmentCompetitionsCountRequest} Gets the number of fulfillment competitions
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>QueryCountResult</returns>
        public QueryCountResult FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPost(string accept, string scopeId, FindFulfillmentCompetitionsCountRequest body = default(FindFulfillmentCompetitionsCountRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<QueryCountResult> localVarResponse = FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the number of fulfillment competitions - {FindFulfillmentCompetitionsCountRequest} Gets the number of fulfillment competitions
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of QueryCountResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<QueryCountResult> FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPostWithHttpInfo(string accept, string scopeId, FindFulfillmentCompetitionsCountRequest body = default(FindFulfillmentCompetitionsCountRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<QueryCountResult>("/fulfillments/competitions/{ScopeId}/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the number of fulfillment competitions - {FindFulfillmentCompetitionsCountRequest} Gets the number of fulfillment competitions
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryCountResult</returns>
        public async System.Threading.Tasks.Task<QueryCountResult> FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPostAsync(string accept, string scopeId, FindFulfillmentCompetitionsCountRequest body = default(FindFulfillmentCompetitionsCountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<QueryCountResult> localVarResponse = await FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the number of fulfillment competitions - {FindFulfillmentCompetitionsCountRequest} Gets the number of fulfillment competitions
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryCountResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<QueryCountResult>> FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPostWithHttpInfoAsync(string accept, string scopeId, FindFulfillmentCompetitionsCountRequest body = default(FindFulfillmentCompetitionsCountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<QueryCountResult>("/fulfillments/competitions/{ScopeId}/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentCompetitionsCountRequestcompetitionsScopeIdcountPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for a list of fulfillment competitions - {FindFulfillmentCompetitionsRequest} Search for a list of fulfillment competitions
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentCompetitionQueryResult</returns>
        public FulfillmentCompetitionQueryResult FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPost(string accept, string scopeId, FindFulfillmentCompetitionsRequest body = default(FindFulfillmentCompetitionsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetitionQueryResult> localVarResponse = FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for a list of fulfillment competitions - {FindFulfillmentCompetitionsRequest} Search for a list of fulfillment competitions
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentCompetitionQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetitionQueryResult> FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindFulfillmentCompetitionsRequest body = default(FindFulfillmentCompetitionsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentCompetitionQueryResult>("/fulfillments/competitions/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for a list of fulfillment competitions - {FindFulfillmentCompetitionsRequest} Search for a list of fulfillment competitions
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetitionQueryResult</returns>
        public async System.Threading.Tasks.Task<FulfillmentCompetitionQueryResult> FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPostAsync(string accept, string scopeId, FindFulfillmentCompetitionsRequest body = default(FindFulfillmentCompetitionsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetitionQueryResult> localVarResponse = await FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for a list of fulfillment competitions - {FindFulfillmentCompetitionsRequest} Search for a list of fulfillment competitions
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetitionQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetitionQueryResult>> FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindFulfillmentCompetitionsRequest body = default(FindFulfillmentCompetitionsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentCompetitionQueryResult>("/fulfillments/competitions/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentCompetitionsRequestcompetitionsScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentManifestPackagesRequest} Search for a list of fulfillment packages.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier. (optional)</param>
        /// <param name="shippingProviderId">The optional shipping provider identifier. (optional)</param>
        /// <param name="fulfillmentStatus">The optional fulfillment status. (optional)</param>
        /// <param name="manifestedFrom">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestedTo">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestReferenceId">The optional manifest reference id. (optional)</param>
        /// <param name="includePackagesWithManifest">A value indicating whether fulfillment packages with a manifest are returned. (optional)</param>
        /// <param name="includePackagesWithoutManifest">A value indicating whether fulfillment packages without a manifest are returned. (optional)</param>
        /// <param name="includePackageItems">A value indicating whether fulfillment package items are retrieved with each package. (optional)</param>
        /// <param name="carrierAccountIdOutbound">The carrier account id for outbound. (optional)</param>
        /// <param name="carrierAccountNameOutbound">The carrier account name for outbound. (optional)</param>
        /// <param name="carrierNameOutbound">The carrier name for outbound. (optional)</param>
        /// <param name="carrierServiceLevelOutbound">The carrier service level for outbound. (optional)</param>
        /// <param name="carrierManifestRequirement">The optional carrier manifest requirement to find. (optional)</param>
        /// <returns>FulfillmentPackageResult</returns>
        public FulfillmentPackageResult FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGet(string accept, string scopeId, string fulfillmentLocationId = default(string), string shippingProviderId = default(string), string fulfillmentStatus = default(string), DateTime? manifestedFrom = default(DateTime?), DateTime? manifestedTo = default(DateTime?), string manifestReferenceId = default(string), bool? includePackagesWithManifest = default(bool?), bool? includePackagesWithoutManifest = default(bool?), bool? includePackageItems = default(bool?), string carrierAccountIdOutbound = default(string), string carrierAccountNameOutbound = default(string), string carrierNameOutbound = default(string), string carrierServiceLevelOutbound = default(string), string carrierManifestRequirement = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageResult> localVarResponse = FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGetWithHttpInfo(accept, scopeId, fulfillmentLocationId, shippingProviderId, fulfillmentStatus, manifestedFrom, manifestedTo, manifestReferenceId, includePackagesWithManifest, includePackagesWithoutManifest, includePackageItems, carrierAccountIdOutbound, carrierAccountNameOutbound, carrierNameOutbound, carrierServiceLevelOutbound, carrierManifestRequirement);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentManifestPackagesRequest} Search for a list of fulfillment packages.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier. (optional)</param>
        /// <param name="shippingProviderId">The optional shipping provider identifier. (optional)</param>
        /// <param name="fulfillmentStatus">The optional fulfillment status. (optional)</param>
        /// <param name="manifestedFrom">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestedTo">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestReferenceId">The optional manifest reference id. (optional)</param>
        /// <param name="includePackagesWithManifest">A value indicating whether fulfillment packages with a manifest are returned. (optional)</param>
        /// <param name="includePackagesWithoutManifest">A value indicating whether fulfillment packages without a manifest are returned. (optional)</param>
        /// <param name="includePackageItems">A value indicating whether fulfillment package items are retrieved with each package. (optional)</param>
        /// <param name="carrierAccountIdOutbound">The carrier account id for outbound. (optional)</param>
        /// <param name="carrierAccountNameOutbound">The carrier account name for outbound. (optional)</param>
        /// <param name="carrierNameOutbound">The carrier name for outbound. (optional)</param>
        /// <param name="carrierServiceLevelOutbound">The carrier service level for outbound. (optional)</param>
        /// <param name="carrierManifestRequirement">The optional carrier manifest requirement to find. (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackageResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageResult> FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId = default(string), string shippingProviderId = default(string), string fulfillmentStatus = default(string), DateTime? manifestedFrom = default(DateTime?), DateTime? manifestedTo = default(DateTime?), string manifestReferenceId = default(string), bool? includePackagesWithManifest = default(bool?), bool? includePackagesWithoutManifest = default(bool?), bool? includePackageItems = default(bool?), string carrierAccountIdOutbound = default(string), string carrierAccountNameOutbound = default(string), string carrierNameOutbound = default(string), string carrierServiceLevelOutbound = default(string), string carrierManifestRequirement = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (fulfillmentLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "FulfillmentLocationId", fulfillmentLocationId));
            }
            if (shippingProviderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ShippingProviderId", shippingProviderId));
            }
            if (fulfillmentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "FulfillmentStatus", fulfillmentStatus));
            }
            if (manifestedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ManifestedFrom", manifestedFrom));
            }
            if (manifestedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ManifestedTo", manifestedTo));
            }
            if (manifestReferenceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ManifestReferenceId", manifestReferenceId));
            }
            if (includePackagesWithManifest != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePackagesWithManifest", includePackagesWithManifest));
            }
            if (includePackagesWithoutManifest != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePackagesWithoutManifest", includePackagesWithoutManifest));
            }
            if (includePackageItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePackageItems", includePackageItems));
            }
            if (carrierAccountIdOutbound != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CarrierAccountIdOutbound", carrierAccountIdOutbound));
            }
            if (carrierAccountNameOutbound != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CarrierAccountNameOutbound", carrierAccountNameOutbound));
            }
            if (carrierNameOutbound != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CarrierNameOutbound", carrierNameOutbound));
            }
            if (carrierServiceLevelOutbound != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CarrierServiceLevelOutbound", carrierServiceLevelOutbound));
            }
            if (carrierManifestRequirement != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CarrierManifestRequirement", carrierManifestRequirement));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentPackageResult>("/fulfillments/packages/{ScopeId}/findmanifest", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentManifestPackagesRequest} Search for a list of fulfillment packages.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier. (optional)</param>
        /// <param name="shippingProviderId">The optional shipping provider identifier. (optional)</param>
        /// <param name="fulfillmentStatus">The optional fulfillment status. (optional)</param>
        /// <param name="manifestedFrom">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestedTo">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestReferenceId">The optional manifest reference id. (optional)</param>
        /// <param name="includePackagesWithManifest">A value indicating whether fulfillment packages with a manifest are returned. (optional)</param>
        /// <param name="includePackagesWithoutManifest">A value indicating whether fulfillment packages without a manifest are returned. (optional)</param>
        /// <param name="includePackageItems">A value indicating whether fulfillment package items are retrieved with each package. (optional)</param>
        /// <param name="carrierAccountIdOutbound">The carrier account id for outbound. (optional)</param>
        /// <param name="carrierAccountNameOutbound">The carrier account name for outbound. (optional)</param>
        /// <param name="carrierNameOutbound">The carrier name for outbound. (optional)</param>
        /// <param name="carrierServiceLevelOutbound">The carrier service level for outbound. (optional)</param>
        /// <param name="carrierManifestRequirement">The optional carrier manifest requirement to find. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackageResult</returns>
        public async System.Threading.Tasks.Task<FulfillmentPackageResult> FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGetAsync(string accept, string scopeId, string fulfillmentLocationId = default(string), string shippingProviderId = default(string), string fulfillmentStatus = default(string), DateTime? manifestedFrom = default(DateTime?), DateTime? manifestedTo = default(DateTime?), string manifestReferenceId = default(string), bool? includePackagesWithManifest = default(bool?), bool? includePackagesWithoutManifest = default(bool?), bool? includePackageItems = default(bool?), string carrierAccountIdOutbound = default(string), string carrierAccountNameOutbound = default(string), string carrierNameOutbound = default(string), string carrierServiceLevelOutbound = default(string), string carrierManifestRequirement = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageResult> localVarResponse = await FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGetWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, shippingProviderId, fulfillmentStatus, manifestedFrom, manifestedTo, manifestReferenceId, includePackagesWithManifest, includePackagesWithoutManifest, includePackageItems, carrierAccountIdOutbound, carrierAccountNameOutbound, carrierNameOutbound, carrierServiceLevelOutbound, carrierManifestRequirement, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentManifestPackagesRequest} Search for a list of fulfillment packages.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier. (optional)</param>
        /// <param name="shippingProviderId">The optional shipping provider identifier. (optional)</param>
        /// <param name="fulfillmentStatus">The optional fulfillment status. (optional)</param>
        /// <param name="manifestedFrom">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestedTo">The optional manifested from date filter (utc). (optional)</param>
        /// <param name="manifestReferenceId">The optional manifest reference id. (optional)</param>
        /// <param name="includePackagesWithManifest">A value indicating whether fulfillment packages with a manifest are returned. (optional)</param>
        /// <param name="includePackagesWithoutManifest">A value indicating whether fulfillment packages without a manifest are returned. (optional)</param>
        /// <param name="includePackageItems">A value indicating whether fulfillment package items are retrieved with each package. (optional)</param>
        /// <param name="carrierAccountIdOutbound">The carrier account id for outbound. (optional)</param>
        /// <param name="carrierAccountNameOutbound">The carrier account name for outbound. (optional)</param>
        /// <param name="carrierNameOutbound">The carrier name for outbound. (optional)</param>
        /// <param name="carrierServiceLevelOutbound">The carrier service level for outbound. (optional)</param>
        /// <param name="carrierManifestRequirement">The optional carrier manifest requirement to find. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackageResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageResult>> FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId = default(string), string shippingProviderId = default(string), string fulfillmentStatus = default(string), DateTime? manifestedFrom = default(DateTime?), DateTime? manifestedTo = default(DateTime?), string manifestReferenceId = default(string), bool? includePackagesWithManifest = default(bool?), bool? includePackagesWithoutManifest = default(bool?), bool? includePackageItems = default(bool?), string carrierAccountIdOutbound = default(string), string carrierAccountNameOutbound = default(string), string carrierNameOutbound = default(string), string carrierServiceLevelOutbound = default(string), string carrierManifestRequirement = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (fulfillmentLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "FulfillmentLocationId", fulfillmentLocationId));
            }
            if (shippingProviderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ShippingProviderId", shippingProviderId));
            }
            if (fulfillmentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "FulfillmentStatus", fulfillmentStatus));
            }
            if (manifestedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ManifestedFrom", manifestedFrom));
            }
            if (manifestedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ManifestedTo", manifestedTo));
            }
            if (manifestReferenceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ManifestReferenceId", manifestReferenceId));
            }
            if (includePackagesWithManifest != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePackagesWithManifest", includePackagesWithManifest));
            }
            if (includePackagesWithoutManifest != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePackagesWithoutManifest", includePackagesWithoutManifest));
            }
            if (includePackageItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePackageItems", includePackageItems));
            }
            if (carrierAccountIdOutbound != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CarrierAccountIdOutbound", carrierAccountIdOutbound));
            }
            if (carrierAccountNameOutbound != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CarrierAccountNameOutbound", carrierAccountNameOutbound));
            }
            if (carrierNameOutbound != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CarrierNameOutbound", carrierNameOutbound));
            }
            if (carrierServiceLevelOutbound != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CarrierServiceLevelOutbound", carrierServiceLevelOutbound));
            }
            if (carrierManifestRequirement != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CarrierManifestRequirement", carrierManifestRequirement));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentPackageResult>("/fulfillments/packages/{ScopeId}/findmanifest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentManifestPackagesRequestpackagesScopeIdfindmanifestGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for fulfillment orders - {FindFulfillmentOrdersRequest} Search for fulfillment orders
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentOrderQueryResult</returns>
        public FulfillmentOrderQueryResult FindFulfillmentOrdersRequestordersScopeIdfindPost(string accept, string scopeId, FindFulfillmentOrdersRequest body = default(FindFulfillmentOrdersRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentOrderQueryResult> localVarResponse = FindFulfillmentOrdersRequestordersScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for fulfillment orders - {FindFulfillmentOrdersRequest} Search for fulfillment orders
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentOrderQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentOrderQueryResult> FindFulfillmentOrdersRequestordersScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindFulfillmentOrdersRequest body = default(FindFulfillmentOrdersRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentOrdersRequestordersScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentOrdersRequestordersScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentOrderQueryResult>("/fulfillments/orders/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentOrdersRequestordersScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for fulfillment orders - {FindFulfillmentOrdersRequest} Search for fulfillment orders
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentOrderQueryResult</returns>
        public async System.Threading.Tasks.Task<FulfillmentOrderQueryResult> FindFulfillmentOrdersRequestordersScopeIdfindPostAsync(string accept, string scopeId, FindFulfillmentOrdersRequest body = default(FindFulfillmentOrdersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentOrderQueryResult> localVarResponse = await FindFulfillmentOrdersRequestordersScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for fulfillment orders - {FindFulfillmentOrdersRequest} Search for fulfillment orders
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentOrderQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentOrderQueryResult>> FindFulfillmentOrdersRequestordersScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindFulfillmentOrdersRequest body = default(FindFulfillmentOrdersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentOrdersRequestordersScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentOrdersRequestordersScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentOrderQueryResult>("/fulfillments/orders/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentOrdersRequestordersScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for fulfillment package types - {FindFulfillmentPackageTypesRequest} Search for fulfillment package types for a Scope (and its parents)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope to retrieve fulfillment package types for</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentPackageTypeResult</returns>
        public FulfillmentPackageTypeResult FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPost(string accept, string scopeId, FindFulfillmentPackageTypesRequest body = default(FindFulfillmentPackageTypesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageTypeResult> localVarResponse = FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for fulfillment package types - {FindFulfillmentPackageTypesRequest} Search for fulfillment package types for a Scope (and its parents)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope to retrieve fulfillment package types for</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackageTypeResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageTypeResult> FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindFulfillmentPackageTypesRequest body = default(FindFulfillmentPackageTypesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentPackageTypeResult>("/fulfillments/packageTypes/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for fulfillment package types - {FindFulfillmentPackageTypesRequest} Search for fulfillment package types for a Scope (and its parents)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope to retrieve fulfillment package types for</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackageTypeResult</returns>
        public async System.Threading.Tasks.Task<FulfillmentPackageTypeResult> FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPostAsync(string accept, string scopeId, FindFulfillmentPackageTypesRequest body = default(FindFulfillmentPackageTypesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageTypeResult> localVarResponse = await FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for fulfillment package types - {FindFulfillmentPackageTypesRequest} Search for fulfillment package types for a Scope (and its parents)
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">Scope to retrieve fulfillment package types for</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackageTypeResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageTypeResult>> FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindFulfillmentPackageTypesRequest body = default(FindFulfillmentPackageTypesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentPackageTypeResult>("/fulfillments/packageTypes/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentPackageTypesRequestpackageTypesScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentPackagesRequest} Search for a list of fulfillment packages.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="orderId">The order identifier. (optional)</param>
        /// <param name="shipmentIds">A list of shipment identifier. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along each fulfillment package. (optional)</param>
        /// <returns>FulfillmentPackageResult</returns>
        public FulfillmentPackageResult FindFulfillmentPackagesRequestpackagesScopeIdfindGet(string accept, string scopeId, string orderId = default(string), List<string> shipmentIds = default(List<string>), string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageResult> localVarResponse = FindFulfillmentPackagesRequestpackagesScopeIdfindGetWithHttpInfo(accept, scopeId, orderId, shipmentIds, cultureName, includeFulfillmentPackageType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentPackagesRequest} Search for a list of fulfillment packages.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="orderId">The order identifier. (optional)</param>
        /// <param name="shipmentIds">A list of shipment identifier. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along each fulfillment package. (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackageResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageResult> FindFulfillmentPackagesRequestpackagesScopeIdfindGetWithHttpInfo(string accept, string scopeId, string orderId = default(string), List<string> shipmentIds = default(List<string>), string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentPackagesRequestpackagesScopeIdfindGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentPackagesRequestpackagesScopeIdfindGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderId", orderId));
            }
            if (shipmentIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "ShipmentIds", shipmentIds));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeFulfillmentPackageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeFulfillmentPackageType", includeFulfillmentPackageType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentPackageResult>("/fulfillments/packages/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentPackagesRequestpackagesScopeIdfindGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentPackagesRequest} Search for a list of fulfillment packages.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="orderId">The order identifier. (optional)</param>
        /// <param name="shipmentIds">A list of shipment identifier. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along each fulfillment package. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackageResult</returns>
        public async System.Threading.Tasks.Task<FulfillmentPackageResult> FindFulfillmentPackagesRequestpackagesScopeIdfindGetAsync(string accept, string scopeId, string orderId = default(string), List<string> shipmentIds = default(List<string>), string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageResult> localVarResponse = await FindFulfillmentPackagesRequestpackagesScopeIdfindGetWithHttpInfoAsync(accept, scopeId, orderId, shipmentIds, cultureName, includeFulfillmentPackageType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for a list of fulfillment packages - {FindFulfillmentPackagesRequest} Search for a list of fulfillment packages.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="orderId">The order identifier. (optional)</param>
        /// <param name="shipmentIds">A list of shipment identifier. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along each fulfillment package. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackageResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageResult>> FindFulfillmentPackagesRequestpackagesScopeIdfindGetWithHttpInfoAsync(string accept, string scopeId, string orderId = default(string), List<string> shipmentIds = default(List<string>), string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentPackagesRequestpackagesScopeIdfindGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentPackagesRequestpackagesScopeIdfindGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderId", orderId));
            }
            if (shipmentIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "ShipmentIds", shipmentIds));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeFulfillmentPackageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeFulfillmentPackageType", includeFulfillmentPackageType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentPackageResult>("/fulfillments/packages/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentPackagesRequestpackagesScopeIdfindGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for fulfillment SLA - {FindFulfillmentSLARequest} Search for fulfillment SLA
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentSLAQueryResult</returns>
        public FulfillmentSLAQueryResult FindFulfillmentSLARequestSLAsScopeIdfindPost(string accept, string scopeId, FindFulfillmentSLARequest body = default(FindFulfillmentSLARequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLAQueryResult> localVarResponse = FindFulfillmentSLARequestSLAsScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for fulfillment SLA - {FindFulfillmentSLARequest} Search for fulfillment SLA
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentSLAQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLAQueryResult> FindFulfillmentSLARequestSLAsScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindFulfillmentSLARequest body = default(FindFulfillmentSLARequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentSLARequestSLAsScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentSLARequestSLAsScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentSLAQueryResult>("/fulfillments/SLAs/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentSLARequestSLAsScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for fulfillment SLA - {FindFulfillmentSLARequest} Search for fulfillment SLA
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentSLAQueryResult</returns>
        public async System.Threading.Tasks.Task<FulfillmentSLAQueryResult> FindFulfillmentSLARequestSLAsScopeIdfindPostAsync(string accept, string scopeId, FindFulfillmentSLARequest body = default(FindFulfillmentSLARequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLAQueryResult> localVarResponse = await FindFulfillmentSLARequestSLAsScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for fulfillment SLA - {FindFulfillmentSLARequest} Search for fulfillment SLA
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentSLAQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLAQueryResult>> FindFulfillmentSLARequestSLAsScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindFulfillmentSLARequest body = default(FindFulfillmentSLARequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->FindFulfillmentSLARequestSLAsScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->FindFulfillmentSLARequestSLAsScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentSLAQueryResult>("/fulfillments/SLAs/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentSLARequestSLAsScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get shipping documents from a carrier - {GetFulfillmentCarrierDocumentsRequest} Get shipping documents from a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetFulfillmentCarrierDocumentsResponse</returns>
        public GetFulfillmentCarrierDocumentsResponse GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPost(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierDocumentsRequest body = default(GetFulfillmentCarrierDocumentsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFulfillmentCarrierDocumentsResponse> localVarResponse = GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPostWithHttpInfo(accept, scopeId, fulfillmentCarrierId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get shipping documents from a carrier - {GetFulfillmentCarrierDocumentsRequest} Get shipping documents from a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetFulfillmentCarrierDocumentsResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFulfillmentCarrierDocumentsResponse> GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPostWithHttpInfo(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierDocumentsRequest body = default(GetFulfillmentCarrierDocumentsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPost");

            // verify the required parameter 'fulfillmentCarrierId' is set
            if (fulfillmentCarrierId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCarrierId' when calling FulfillmentsApi->GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCarrierId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCarrierId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetFulfillmentCarrierDocumentsResponse>("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/quotes/documents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get shipping documents from a carrier - {GetFulfillmentCarrierDocumentsRequest} Get shipping documents from a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFulfillmentCarrierDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<GetFulfillmentCarrierDocumentsResponse> GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPostAsync(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierDocumentsRequest body = default(GetFulfillmentCarrierDocumentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFulfillmentCarrierDocumentsResponse> localVarResponse = await GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPostWithHttpInfoAsync(accept, scopeId, fulfillmentCarrierId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get shipping documents from a carrier - {GetFulfillmentCarrierDocumentsRequest} Get shipping documents from a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFulfillmentCarrierDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFulfillmentCarrierDocumentsResponse>> GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierDocumentsRequest body = default(GetFulfillmentCarrierDocumentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPost");

            // verify the required parameter 'fulfillmentCarrierId' is set
            if (fulfillmentCarrierId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCarrierId' when calling FulfillmentsApi->GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCarrierId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCarrierId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetFulfillmentCarrierDocumentsResponse>("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/quotes/documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentCarrierDocumentsRequestcarriersScopeIdFulfillmentCarrierIdquotesdocumentsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get shipping quotes for a package from a carrier - {GetFulfillmentCarrierQuotesRequest} Get shipping quotes for a package from a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetFulfillmentCarrierQuotesResponse</returns>
        public GetFulfillmentCarrierQuotesResponse GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPost(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierQuotesRequest body = default(GetFulfillmentCarrierQuotesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFulfillmentCarrierQuotesResponse> localVarResponse = GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPostWithHttpInfo(accept, scopeId, fulfillmentCarrierId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get shipping quotes for a package from a carrier - {GetFulfillmentCarrierQuotesRequest} Get shipping quotes for a package from a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetFulfillmentCarrierQuotesResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFulfillmentCarrierQuotesResponse> GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPostWithHttpInfo(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierQuotesRequest body = default(GetFulfillmentCarrierQuotesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPost");

            // verify the required parameter 'fulfillmentCarrierId' is set
            if (fulfillmentCarrierId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCarrierId' when calling FulfillmentsApi->GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCarrierId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCarrierId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetFulfillmentCarrierQuotesResponse>("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/quotes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get shipping quotes for a package from a carrier - {GetFulfillmentCarrierQuotesRequest} Get shipping quotes for a package from a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFulfillmentCarrierQuotesResponse</returns>
        public async System.Threading.Tasks.Task<GetFulfillmentCarrierQuotesResponse> GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPostAsync(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierQuotesRequest body = default(GetFulfillmentCarrierQuotesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFulfillmentCarrierQuotesResponse> localVarResponse = await GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPostWithHttpInfoAsync(accept, scopeId, fulfillmentCarrierId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get shipping quotes for a package from a carrier - {GetFulfillmentCarrierQuotesRequest} Get shipping quotes for a package from a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFulfillmentCarrierQuotesResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFulfillmentCarrierQuotesResponse>> GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCarrierId, GetFulfillmentCarrierQuotesRequest body = default(GetFulfillmentCarrierQuotesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPost");

            // verify the required parameter 'fulfillmentCarrierId' is set
            if (fulfillmentCarrierId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCarrierId' when calling FulfillmentsApi->GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCarrierId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCarrierId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetFulfillmentCarrierQuotesResponse>("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/quotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a fulfillment competition by its identifier - {GetFulfillmentCompetitionRequest} Gets a fulfillment competition by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The fulfillment competition identifier.</param>
        /// <returns>FulfillmentCompetition</returns>
        public FulfillmentCompetition GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGet(string accept, string scopeId, string fulfillmentCompetitionId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> localVarResponse = GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGetWithHttpInfo(accept, scopeId, fulfillmentCompetitionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a fulfillment competition by its identifier - {GetFulfillmentCompetitionRequest} Gets a fulfillment competition by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The fulfillment competition identifier.</param>
        /// <returns>ApiResponse of FulfillmentCompetition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentCompetitionId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGet");

            // verify the required parameter 'fulfillmentCompetitionId' is set
            if (fulfillmentCompetitionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCompetitionId' when calling FulfillmentsApi->GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCompetitionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCompetitionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentCompetition>("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a fulfillment competition by its identifier - {GetFulfillmentCompetitionRequest} Gets a fulfillment competition by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The fulfillment competition identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetition</returns>
        public async System.Threading.Tasks.Task<FulfillmentCompetition> GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGetAsync(string accept, string scopeId, string fulfillmentCompetitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> localVarResponse = await GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGetWithHttpInfoAsync(accept, scopeId, fulfillmentCompetitionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a fulfillment competition by its identifier - {GetFulfillmentCompetitionRequest} Gets a fulfillment competition by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The fulfillment competition identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition>> GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCompetitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGet");

            // verify the required parameter 'fulfillmentCompetitionId' is set
            if (fulfillmentCompetitionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCompetitionId' when calling FulfillmentsApi->GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCompetitionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCompetitionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentCompetition>("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentCompetitionRequestcompetitionsScopeIdFulfillmentCompetitionIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the fulfillment exceptions for an order at a fulfillment location - {GetFulfillmentExceptionsRequest} Gets the fulfillment exceptions for an order at a fulfillment location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The order identifier.</param>
        /// <returns>FulfillmentExceptionResult</returns>
        public FulfillmentExceptionResult GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGet(string accept, string scopeId, string fulfillmentLocationId, string orderId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentExceptionResult> localVarResponse = GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGetWithHttpInfo(accept, scopeId, fulfillmentLocationId, orderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the fulfillment exceptions for an order at a fulfillment location - {GetFulfillmentExceptionsRequest} Gets the fulfillment exceptions for an order at a fulfillment location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The order identifier.</param>
        /// <returns>ApiResponse of FulfillmentExceptionResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentExceptionResult> GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string orderId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentsApi->GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling FulfillmentsApi->GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentExceptionResult>("/fulfillments/exceptions/{ScopeId}/{FulfillmentLocationId}/{OrderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the fulfillment exceptions for an order at a fulfillment location - {GetFulfillmentExceptionsRequest} Gets the fulfillment exceptions for an order at a fulfillment location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentExceptionResult</returns>
        public async System.Threading.Tasks.Task<FulfillmentExceptionResult> GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentExceptionResult> localVarResponse = await GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGetWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, orderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the fulfillment exceptions for an order at a fulfillment location - {GetFulfillmentExceptionsRequest} Gets the fulfillment exceptions for an order at a fulfillment location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier.</param>
        /// <param name="orderId">The order identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentExceptionResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentExceptionResult>> GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentsApi->GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGet");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'orderId' when calling FulfillmentsApi->GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrderId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentExceptionResult>("/fulfillments/exceptions/{ScopeId}/{FulfillmentLocationId}/{OrderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentExceptionsRequestexceptionsScopeIdFulfillmentLocationIdOrderIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a fulfillment package by its identifier - {GetFulfillmentPackageRequest} Gets a fulfillment package by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along the fulfillment package. (optional)</param>
        /// <returns>FulfillmentPackage</returns>
        public FulfillmentPackage GetFulfillmentPackageRequestpackagesScopeIdIdGet(string accept, string scopeId, string id, string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage> localVarResponse = GetFulfillmentPackageRequestpackagesScopeIdIdGetWithHttpInfo(accept, scopeId, id, cultureName, includeFulfillmentPackageType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a fulfillment package by its identifier - {GetFulfillmentPackageRequest} Gets a fulfillment package by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along the fulfillment package. (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackage</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage> GetFulfillmentPackageRequestpackagesScopeIdIdGetWithHttpInfo(string accept, string scopeId, string id, string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentPackageRequestpackagesScopeIdIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentPackageRequestpackagesScopeIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->GetFulfillmentPackageRequestpackagesScopeIdIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeFulfillmentPackageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeFulfillmentPackageType", includeFulfillmentPackageType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentPackage>("/fulfillments/packages/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentPackageRequestpackagesScopeIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a fulfillment package by its identifier - {GetFulfillmentPackageRequest} Gets a fulfillment package by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along the fulfillment package. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackage</returns>
        public async System.Threading.Tasks.Task<FulfillmentPackage> GetFulfillmentPackageRequestpackagesScopeIdIdGetAsync(string accept, string scopeId, string id, string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage> localVarResponse = await GetFulfillmentPackageRequestpackagesScopeIdIdGetWithHttpInfoAsync(accept, scopeId, id, cultureName, includeFulfillmentPackageType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a fulfillment package by its identifier - {GetFulfillmentPackageRequest} Gets a fulfillment package by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="cultureName">The culture name in which language the data for the fulfillment package type will be returned (optional)</param>
        /// <param name="includeFulfillmentPackageType">A value indicating whether the fulfillment package type should be returns along the fulfillment package. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackage)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage>> GetFulfillmentPackageRequestpackagesScopeIdIdGetWithHttpInfoAsync(string accept, string scopeId, string id, string cultureName = default(string), bool? includeFulfillmentPackageType = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentPackageRequestpackagesScopeIdIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentPackageRequestpackagesScopeIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->GetFulfillmentPackageRequestpackagesScopeIdIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeFulfillmentPackageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeFulfillmentPackageType", includeFulfillmentPackageType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentPackage>("/fulfillments/packages/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentPackageRequestpackagesScopeIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a fulfillment package type by its identifier - {GetFulfillmentPackageTypeRequest} Gets a fulfillment package type by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="includeParentScopes">Determine if parent scopes should be considered when searching fulfillment package type. (optional)</param>
        /// <returns>FulfillmentPackageType</returns>
        public FulfillmentPackageType GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGet(string accept, string scopeId, string id, bool? includeParentScopes = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageType> localVarResponse = GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGetWithHttpInfo(accept, scopeId, id, includeParentScopes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a fulfillment package type by its identifier - {GetFulfillmentPackageTypeRequest} Gets a fulfillment package type by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="includeParentScopes">Determine if parent scopes should be considered when searching fulfillment package type. (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackageType</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageType> GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGetWithHttpInfo(string accept, string scopeId, string id, bool? includeParentScopes = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeParentScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeParentScopes", includeParentScopes));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentPackageType>("/fulfillments/packageTypes/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a fulfillment package type by its identifier - {GetFulfillmentPackageTypeRequest} Gets a fulfillment package type by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="includeParentScopes">Determine if parent scopes should be considered when searching fulfillment package type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackageType</returns>
        public async System.Threading.Tasks.Task<FulfillmentPackageType> GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGetAsync(string accept, string scopeId, string id, bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageType> localVarResponse = await GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGetWithHttpInfoAsync(accept, scopeId, id, includeParentScopes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a fulfillment package type by its identifier - {GetFulfillmentPackageTypeRequest} Gets a fulfillment package type by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="includeParentScopes">Determine if parent scopes should be considered when searching fulfillment package type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackageType)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageType>> GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGetWithHttpInfoAsync(string accept, string scopeId, string id, bool? includeParentScopes = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeParentScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeParentScopes", includeParentScopes));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentPackageType>("/fulfillments/packageTypes/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentPackageTypeRequestpackageTypesScopeIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a fulfillment SLA by its identifier - {GetFulfillmentSLARequest} Gets a fulfillment SLA by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment SLA identifier.</param>
        /// <returns>FulfillmentSLA</returns>
        public FulfillmentSLA GetFulfillmentSLARequestSLAsScopeIdIdGet(string accept, string scopeId, string id)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLA> localVarResponse = GetFulfillmentSLARequestSLAsScopeIdIdGetWithHttpInfo(accept, scopeId, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a fulfillment SLA by its identifier - {GetFulfillmentSLARequest} Gets a fulfillment SLA by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment SLA identifier.</param>
        /// <returns>ApiResponse of FulfillmentSLA</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLA> GetFulfillmentSLARequestSLAsScopeIdIdGetWithHttpInfo(string accept, string scopeId, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentSLARequestSLAsScopeIdIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentSLARequestSLAsScopeIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->GetFulfillmentSLARequestSLAsScopeIdIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentSLA>("/fulfillments/SLAs/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentSLARequestSLAsScopeIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a fulfillment SLA by its identifier - {GetFulfillmentSLARequest} Gets a fulfillment SLA by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment SLA identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentSLA</returns>
        public async System.Threading.Tasks.Task<FulfillmentSLA> GetFulfillmentSLARequestSLAsScopeIdIdGetAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLA> localVarResponse = await GetFulfillmentSLARequestSLAsScopeIdIdGetWithHttpInfoAsync(accept, scopeId, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a fulfillment SLA by its identifier - {GetFulfillmentSLARequest} Gets a fulfillment SLA by its identifier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope id.</param>
        /// <param name="id">The fulfillment SLA identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentSLA)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSLA>> GetFulfillmentSLARequestSLAsScopeIdIdGetWithHttpInfoAsync(string accept, string scopeId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->GetFulfillmentSLARequestSLAsScopeIdIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->GetFulfillmentSLARequestSLAsScopeIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->GetFulfillmentSLARequestSLAsScopeIdIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentSLA>("/fulfillments/SLAs/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentSLARequestSLAsScopeIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refund shipping quotes from a carrier - {RefundFulfillmentCarrierQuotesRequest} Refund shipping quotes from a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPost(string accept, string scopeId, string fulfillmentCarrierId, RefundFulfillmentCarrierQuotesRequest body = default(RefundFulfillmentCarrierQuotesRequest))
        {
            RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPostWithHttpInfo(accept, scopeId, fulfillmentCarrierId, body);
        }

        /// <summary>
        /// Refund shipping quotes from a carrier - {RefundFulfillmentCarrierQuotesRequest} Refund shipping quotes from a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPostWithHttpInfo(string accept, string scopeId, string fulfillmentCarrierId, RefundFulfillmentCarrierQuotesRequest body = default(RefundFulfillmentCarrierQuotesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPost");

            // verify the required parameter 'fulfillmentCarrierId' is set
            if (fulfillmentCarrierId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCarrierId' when calling FulfillmentsApi->RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCarrierId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCarrierId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/quotes/refund", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refund shipping quotes from a carrier - {RefundFulfillmentCarrierQuotesRequest} Refund shipping quotes from a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPostAsync(string accept, string scopeId, string fulfillmentCarrierId, RefundFulfillmentCarrierQuotesRequest body = default(RefundFulfillmentCarrierQuotesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPostWithHttpInfoAsync(accept, scopeId, fulfillmentCarrierId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Refund shipping quotes from a carrier - {RefundFulfillmentCarrierQuotesRequest} Refund shipping quotes from a carrier.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="fulfillmentCarrierId">The fulfillment carrier identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCarrierId, RefundFulfillmentCarrierQuotesRequest body = default(RefundFulfillmentCarrierQuotesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPost");

            // verify the required parameter 'fulfillmentCarrierId' is set
            if (fulfillmentCarrierId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCarrierId' when calling FulfillmentsApi->RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCarrierId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCarrierId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/quotes/refund", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefundFulfillmentCarrierQuotesRequestcarriersScopeIdFulfillmentCarrierIdquotesrefundPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a list of fulfillment competition locations from a specific fulfillment competition - {RemoveFulfillmentCompetitionLocationsRequest} Removes a list of fulfillment competition locations from a specific fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition from which the fulfillment competition locations are removed.</param>
        /// <param name="fulfillmentLocationIds">The list of the fulfillment location identifiers which will be removed from the fulfillment competition. (optional)</param>
        /// <returns>FulfillmentCompetition</returns>
        public FulfillmentCompetition RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDelete(string accept, string scopeId, string fulfillmentCompetitionId, List<string> fulfillmentLocationIds = default(List<string>))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> localVarResponse = RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDeleteWithHttpInfo(accept, scopeId, fulfillmentCompetitionId, fulfillmentLocationIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a list of fulfillment competition locations from a specific fulfillment competition - {RemoveFulfillmentCompetitionLocationsRequest} Removes a list of fulfillment competition locations from a specific fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition from which the fulfillment competition locations are removed.</param>
        /// <param name="fulfillmentLocationIds">The list of the fulfillment location identifiers which will be removed from the fulfillment competition. (optional)</param>
        /// <returns>ApiResponse of FulfillmentCompetition</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDeleteWithHttpInfo(string accept, string scopeId, string fulfillmentCompetitionId, List<string> fulfillmentLocationIds = default(List<string>))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDelete");

            // verify the required parameter 'fulfillmentCompetitionId' is set
            if (fulfillmentCompetitionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCompetitionId' when calling FulfillmentsApi->RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCompetitionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCompetitionId)); // path parameter
            if (fulfillmentLocationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "FulfillmentLocationIds", fulfillmentLocationIds));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<FulfillmentCompetition>("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}/locations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a list of fulfillment competition locations from a specific fulfillment competition - {RemoveFulfillmentCompetitionLocationsRequest} Removes a list of fulfillment competition locations from a specific fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition from which the fulfillment competition locations are removed.</param>
        /// <param name="fulfillmentLocationIds">The list of the fulfillment location identifiers which will be removed from the fulfillment competition. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentCompetition</returns>
        public async System.Threading.Tasks.Task<FulfillmentCompetition> RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDeleteAsync(string accept, string scopeId, string fulfillmentCompetitionId, List<string> fulfillmentLocationIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition> localVarResponse = await RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDeleteWithHttpInfoAsync(accept, scopeId, fulfillmentCompetitionId, fulfillmentLocationIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a list of fulfillment competition locations from a specific fulfillment competition - {RemoveFulfillmentCompetitionLocationsRequest} Removes a list of fulfillment competition locations from a specific fulfillment competition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentCompetitionId">The identifier of the fulfillment competition from which the fulfillment competition locations are removed.</param>
        /// <param name="fulfillmentLocationIds">The list of the fulfillment location identifiers which will be removed from the fulfillment competition. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentCompetition)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentCompetition>> RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDeleteWithHttpInfoAsync(string accept, string scopeId, string fulfillmentCompetitionId, List<string> fulfillmentLocationIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDelete");

            // verify the required parameter 'fulfillmentCompetitionId' is set
            if (fulfillmentCompetitionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentCompetitionId' when calling FulfillmentsApi->RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentCompetitionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentCompetitionId)); // path parameter
            if (fulfillmentLocationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "FulfillmentLocationIds", fulfillmentLocationIds));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<FulfillmentCompetition>("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}/locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFulfillmentCompetitionLocationsRequestcompetitionsScopeIdFulfillmentCompetitionIdlocationsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfers a list of fulfillment package items from one fulfillment package to another - {TransferFulfillmentPackageItemsRequest} Transfers a list of fulfillment package items from one fulfillment package to another.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentPackage</returns>
        public FulfillmentPackage TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPost(string accept, string scopeId, TransferFulfillmentPackageItemsRequest body = default(TransferFulfillmentPackageItemsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage> localVarResponse = TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfers a list of fulfillment package items from one fulfillment package to another - {TransferFulfillmentPackageItemsRequest} Transfers a list of fulfillment package items from one fulfillment package to another.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackage</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage> TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPostWithHttpInfo(string accept, string scopeId, TransferFulfillmentPackageItemsRequest body = default(TransferFulfillmentPackageItemsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentPackage>("/fulfillments/packages/{ScopeId}/transferFulfillmentPackageItems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfers a list of fulfillment package items from one fulfillment package to another - {TransferFulfillmentPackageItemsRequest} Transfers a list of fulfillment package items from one fulfillment package to another.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackage</returns>
        public async System.Threading.Tasks.Task<FulfillmentPackage> TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPostAsync(string accept, string scopeId, TransferFulfillmentPackageItemsRequest body = default(TransferFulfillmentPackageItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage> localVarResponse = await TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfers a list of fulfillment package items from one fulfillment package to another - {TransferFulfillmentPackageItemsRequest} Transfers a list of fulfillment package items from one fulfillment package to another.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackage)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage>> TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPostWithHttpInfoAsync(string accept, string scopeId, TransferFulfillmentPackageItemsRequest body = default(TransferFulfillmentPackageItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentPackage>("/fulfillments/packages/{ScopeId}/transferFulfillmentPackageItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferFulfillmentPackageItemsRequestpackagesScopeIdtransferFulfillmentPackageItemsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a fulfillment package - {UpdateFulfillmentPackageRequest} Updates a fulfillment package.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentPackage</returns>
        public FulfillmentPackage UpdateFulfillmentPackageRequestpackagesScopeIdIdCreate(string accept, string scopeId, string id, UpdateFulfillmentPackageRequest body = default(UpdateFulfillmentPackageRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage> localVarResponse = UpdateFulfillmentPackageRequestpackagesScopeIdIdCreateWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a fulfillment package - {UpdateFulfillmentPackageRequest} Updates a fulfillment package.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackage</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage> UpdateFulfillmentPackageRequestpackagesScopeIdIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdateFulfillmentPackageRequest body = default(UpdateFulfillmentPackageRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->UpdateFulfillmentPackageRequestpackagesScopeIdIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->UpdateFulfillmentPackageRequestpackagesScopeIdIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->UpdateFulfillmentPackageRequestpackagesScopeIdIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<FulfillmentPackage>("/fulfillments/packages/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFulfillmentPackageRequestpackagesScopeIdIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a fulfillment package - {UpdateFulfillmentPackageRequest} Updates a fulfillment package.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackage</returns>
        public async System.Threading.Tasks.Task<FulfillmentPackage> UpdateFulfillmentPackageRequestpackagesScopeIdIdCreateAsync(string accept, string scopeId, string id, UpdateFulfillmentPackageRequest body = default(UpdateFulfillmentPackageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage> localVarResponse = await UpdateFulfillmentPackageRequestpackagesScopeIdIdCreateWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a fulfillment package - {UpdateFulfillmentPackageRequest} Updates a fulfillment package.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackage)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackage>> UpdateFulfillmentPackageRequestpackagesScopeIdIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateFulfillmentPackageRequest body = default(UpdateFulfillmentPackageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->UpdateFulfillmentPackageRequestpackagesScopeIdIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->UpdateFulfillmentPackageRequestpackagesScopeIdIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->UpdateFulfillmentPackageRequestpackagesScopeIdIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FulfillmentPackage>("/fulfillments/packages/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFulfillmentPackageRequestpackagesScopeIdIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a fulfillment package type - {UpdateFulfillmentPackageTypeRequest} Updates a fulfillment package type.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentPackageType</returns>
        public FulfillmentPackageType UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreate(string accept, string scopeId, string id, UpdateFulfillmentPackageTypeRequest body = default(UpdateFulfillmentPackageTypeRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageType> localVarResponse = UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreateWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a fulfillment package type - {UpdateFulfillmentPackageTypeRequest} Updates a fulfillment package type.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentPackageType</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageType> UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdateFulfillmentPackageTypeRequest body = default(UpdateFulfillmentPackageTypeRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<FulfillmentPackageType>("/fulfillments/packageTypes/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a fulfillment package type - {UpdateFulfillmentPackageTypeRequest} Updates a fulfillment package type.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentPackageType</returns>
        public async System.Threading.Tasks.Task<FulfillmentPackageType> UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreateAsync(string accept, string scopeId, string id, UpdateFulfillmentPackageTypeRequest body = default(UpdateFulfillmentPackageTypeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageType> localVarResponse = await UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreateWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a fulfillment package type - {UpdateFulfillmentPackageTypeRequest} Updates a fulfillment package type.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope identifier.</param>
        /// <param name="id">The fulfillment package type identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentPackageType)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentPackageType>> UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateFulfillmentPackageTypeRequest body = default(UpdateFulfillmentPackageTypeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentsApi->UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentsApi->UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling FulfillmentsApi->UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<FulfillmentPackageType>("/fulfillments/packageTypes/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFulfillmentPackageTypeRequestpackageTypesScopeIdIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
