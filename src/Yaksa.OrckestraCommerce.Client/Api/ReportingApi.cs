/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve a preview image of a report in Ssrs - {CreateSsrsReportPreviewRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a preview image of a report in Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ReportPreview</returns>
        ReportPreview CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPost(string accept, string reportId, CreateSsrsReportPreviewRequest body = default(CreateSsrsReportPreviewRequest));

        /// <summary>
        /// Retrieve a preview image of a report in Ssrs - {CreateSsrsReportPreviewRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a preview image of a report in Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ReportPreview</returns>
        ApiResponse<ReportPreview> CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPostWithHttpInfo(string accept, string reportId, CreateSsrsReportPreviewRequest body = default(CreateSsrsReportPreviewRequest));
        /// <summary>
        /// Export a report from Ssrs - {ExportSsrsReportRequest}
        /// </summary>
        /// <remarks>
        /// Export a report from Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ExportSsrsReportRequestssrsreportsReportIdexportPost(string accept, string reportId, ExportSsrsReportRequest body = default(ExportSsrsReportRequest));

        /// <summary>
        /// Export a report from Ssrs - {ExportSsrsReportRequest}
        /// </summary>
        /// <remarks>
        /// Export a report from Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ExportSsrsReportRequestssrsreportsReportIdexportPostWithHttpInfo(string accept, string reportId, ExportSsrsReportRequest body = default(ExportSsrsReportRequest));
        /// <summary>
        /// Retrieve a list of supported rendering formats for an Ssrs export - {GetSsrsRenderingFormatsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of supported rendering formats for an Ssrs export
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGet(string accept, string cultureName = default(string));

        /// <summary>
        /// Retrieve a list of supported rendering formats for an Ssrs export - {GetSsrsRenderingFormatsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of supported rendering formats for an Ssrs export
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGetWithHttpInfo(string accept, string cultureName = default(string));
        /// <summary>
        /// Retrieve a list of all report parameterss in Ssrs - {GetSsrsReportParametersRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all reports in Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving report parameters.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;ReportParameter&gt;</returns>
        List<ReportParameter> GetSsrsReportParametersRequestssrsreportsReportIdparametersPost(string accept, string reportId, GetSsrsReportParametersRequest body = default(GetSsrsReportParametersRequest));

        /// <summary>
        /// Retrieve a list of all report parameterss in Ssrs - {GetSsrsReportParametersRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all reports in Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving report parameters.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ReportParameter&gt;</returns>
        ApiResponse<List<ReportParameter>> GetSsrsReportParametersRequestssrsreportsReportIdparametersPostWithHttpInfo(string accept, string reportId, GetSsrsReportParametersRequest body = default(GetSsrsReportParametersRequest));
        /// <summary>
        /// Retrieve a list of all reports in Ssrs - {GetSsrsReportsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all reports in Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>List&lt;Report&gt;</returns>
        List<Report> GetSsrsReportsRequestssrsreportsGet(string accept, string cultureName = default(string), string scopeId = default(string));

        /// <summary>
        /// Retrieve a list of all reports in Ssrs - {GetSsrsReportsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all reports in Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of List&lt;Report&gt;</returns>
        ApiResponse<List<Report>> GetSsrsReportsRequestssrsreportsGetWithHttpInfo(string accept, string cultureName = default(string), string scopeId = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve a preview image of a report in Ssrs - {CreateSsrsReportPreviewRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a preview image of a report in Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportPreview</returns>
        System.Threading.Tasks.Task<ReportPreview> CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPostAsync(string accept, string reportId, CreateSsrsReportPreviewRequest body = default(CreateSsrsReportPreviewRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a preview image of a report in Ssrs - {CreateSsrsReportPreviewRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a preview image of a report in Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportPreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportPreview>> CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPostWithHttpInfoAsync(string accept, string reportId, CreateSsrsReportPreviewRequest body = default(CreateSsrsReportPreviewRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export a report from Ssrs - {ExportSsrsReportRequest}
        /// </summary>
        /// <remarks>
        /// Export a report from Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ExportSsrsReportRequestssrsreportsReportIdexportPostAsync(string accept, string reportId, ExportSsrsReportRequest body = default(ExportSsrsReportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export a report from Ssrs - {ExportSsrsReportRequest}
        /// </summary>
        /// <remarks>
        /// Export a report from Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ExportSsrsReportRequestssrsreportsReportIdexportPostWithHttpInfoAsync(string accept, string reportId, ExportSsrsReportRequest body = default(ExportSsrsReportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of supported rendering formats for an Ssrs export - {GetSsrsRenderingFormatsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of supported rendering formats for an Ssrs export
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGetAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of supported rendering formats for an Ssrs export - {GetSsrsRenderingFormatsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of supported rendering formats for an Ssrs export
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGetWithHttpInfoAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of all report parameterss in Ssrs - {GetSsrsReportParametersRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all reports in Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving report parameters.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ReportParameter&gt;</returns>
        System.Threading.Tasks.Task<List<ReportParameter>> GetSsrsReportParametersRequestssrsreportsReportIdparametersPostAsync(string accept, string reportId, GetSsrsReportParametersRequest body = default(GetSsrsReportParametersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of all report parameterss in Ssrs - {GetSsrsReportParametersRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all reports in Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving report parameters.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ReportParameter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReportParameter>>> GetSsrsReportParametersRequestssrsreportsReportIdparametersPostWithHttpInfoAsync(string accept, string reportId, GetSsrsReportParametersRequest body = default(GetSsrsReportParametersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of all reports in Ssrs - {GetSsrsReportsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all reports in Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Report&gt;</returns>
        System.Threading.Tasks.Task<List<Report>> GetSsrsReportsRequestssrsreportsGetAsync(string accept, string cultureName = default(string), string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of all reports in Ssrs - {GetSsrsReportsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all reports in Ssrs
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Report&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Report>>> GetSsrsReportsRequestssrsreportsGetWithHttpInfoAsync(string accept, string cultureName = default(string), string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportingApi : IReportingApiSync, IReportingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportingApi : IReportingApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportingApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportingApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReportingApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve a preview image of a report in Ssrs - {CreateSsrsReportPreviewRequest} Retrieve a preview image of a report in Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ReportPreview</returns>
        public ReportPreview CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPost(string accept, string reportId, CreateSsrsReportPreviewRequest body = default(CreateSsrsReportPreviewRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ReportPreview> localVarResponse = CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPostWithHttpInfo(accept, reportId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a preview image of a report in Ssrs - {CreateSsrsReportPreviewRequest} Retrieve a preview image of a report in Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ReportPreview</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ReportPreview> CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPostWithHttpInfo(string accept, string reportId, CreateSsrsReportPreviewRequest body = default(CreateSsrsReportPreviewRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ReportingApi->CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPost");

            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'reportId' when calling ReportingApi->CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ReportId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(reportId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ReportPreview>("/reporting/ssrs/reports/{ReportId}/previews", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a preview image of a report in Ssrs - {CreateSsrsReportPreviewRequest} Retrieve a preview image of a report in Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportPreview</returns>
        public async System.Threading.Tasks.Task<ReportPreview> CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPostAsync(string accept, string reportId, CreateSsrsReportPreviewRequest body = default(CreateSsrsReportPreviewRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ReportPreview> localVarResponse = await CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPostWithHttpInfoAsync(accept, reportId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a preview image of a report in Ssrs - {CreateSsrsReportPreviewRequest} Retrieve a preview image of a report in Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportPreview)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ReportPreview>> CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPostWithHttpInfoAsync(string accept, string reportId, CreateSsrsReportPreviewRequest body = default(CreateSsrsReportPreviewRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ReportingApi->CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPost");

            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'reportId' when calling ReportingApi->CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ReportId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(reportId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ReportPreview>("/reporting/ssrs/reports/{ReportId}/previews", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSsrsReportPreviewRequestssrsreportsReportIdpreviewsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a report from Ssrs - {ExportSsrsReportRequest} Export a report from Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ExportSsrsReportRequestssrsreportsReportIdexportPost(string accept, string reportId, ExportSsrsReportRequest body = default(ExportSsrsReportRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ExportSsrsReportRequestssrsreportsReportIdexportPostWithHttpInfo(accept, reportId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a report from Ssrs - {ExportSsrsReportRequest} Export a report from Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ExportSsrsReportRequestssrsreportsReportIdexportPostWithHttpInfo(string accept, string reportId, ExportSsrsReportRequest body = default(ExportSsrsReportRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ReportingApi->ExportSsrsReportRequestssrsreportsReportIdexportPost");

            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'reportId' when calling ReportingApi->ExportSsrsReportRequestssrsreportsReportIdexportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ReportId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(reportId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/reporting/ssrs/reports/{ReportId}/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportSsrsReportRequestssrsreportsReportIdexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a report from Ssrs - {ExportSsrsReportRequest} Export a report from Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ExportSsrsReportRequestssrsreportsReportIdexportPostAsync(string accept, string reportId, ExportSsrsReportRequest body = default(ExportSsrsReportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ExportSsrsReportRequestssrsreportsReportIdexportPostWithHttpInfoAsync(accept, reportId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a report from Ssrs - {ExportSsrsReportRequest} Export a report from Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving the preview image.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ExportSsrsReportRequestssrsreportsReportIdexportPostWithHttpInfoAsync(string accept, string reportId, ExportSsrsReportRequest body = default(ExportSsrsReportRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ReportingApi->ExportSsrsReportRequestssrsreportsReportIdexportPost");

            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'reportId' when calling ReportingApi->ExportSsrsReportRequestssrsreportsReportIdexportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ReportId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(reportId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/reporting/ssrs/reports/{ReportId}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportSsrsReportRequestssrsreportsReportIdexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of supported rendering formats for an Ssrs export - {GetSsrsRenderingFormatsRequest} Retrieve a list of supported rendering formats for an Ssrs export
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGet(string accept, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<string>> localVarResponse = GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGetWithHttpInfo(accept, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of supported rendering formats for an Ssrs export - {GetSsrsRenderingFormatsRequest} Retrieve a list of supported rendering formats for an Ssrs export
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<string>> GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGetWithHttpInfo(string accept, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ReportingApi->GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/reporting/ssrs/reports/renderingformats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of supported rendering formats for an Ssrs export - {GetSsrsRenderingFormatsRequest} Retrieve a list of supported rendering formats for an Ssrs export
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGetAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<string>> localVarResponse = await GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGetWithHttpInfoAsync(accept, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of supported rendering formats for an Ssrs export - {GetSsrsRenderingFormatsRequest} Retrieve a list of supported rendering formats for an Ssrs export
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<string>>> GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGetWithHttpInfoAsync(string accept, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ReportingApi->GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/reporting/ssrs/reports/renderingformats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSsrsRenderingFormatsRequestssrsreportsrenderingformatsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all report parameterss in Ssrs - {GetSsrsReportParametersRequest} Retrieve a list of all reports in Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving report parameters.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;ReportParameter&gt;</returns>
        public List<ReportParameter> GetSsrsReportParametersRequestssrsreportsReportIdparametersPost(string accept, string reportId, GetSsrsReportParametersRequest body = default(GetSsrsReportParametersRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ReportParameter>> localVarResponse = GetSsrsReportParametersRequestssrsreportsReportIdparametersPostWithHttpInfo(accept, reportId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all report parameterss in Ssrs - {GetSsrsReportParametersRequest} Retrieve a list of all reports in Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving report parameters.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ReportParameter&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ReportParameter>> GetSsrsReportParametersRequestssrsreportsReportIdparametersPostWithHttpInfo(string accept, string reportId, GetSsrsReportParametersRequest body = default(GetSsrsReportParametersRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ReportingApi->GetSsrsReportParametersRequestssrsreportsReportIdparametersPost");

            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'reportId' when calling ReportingApi->GetSsrsReportParametersRequestssrsreportsReportIdparametersPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ReportId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(reportId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ReportParameter>>("/reporting/ssrs/reports/{ReportId}/parameters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSsrsReportParametersRequestssrsreportsReportIdparametersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all report parameterss in Ssrs - {GetSsrsReportParametersRequest} Retrieve a list of all reports in Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving report parameters.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ReportParameter&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReportParameter>> GetSsrsReportParametersRequestssrsreportsReportIdparametersPostAsync(string accept, string reportId, GetSsrsReportParametersRequest body = default(GetSsrsReportParametersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ReportParameter>> localVarResponse = await GetSsrsReportParametersRequestssrsreportsReportIdparametersPostWithHttpInfoAsync(accept, reportId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all report parameterss in Ssrs - {GetSsrsReportParametersRequest} Retrieve a list of all reports in Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="reportId">The report to be used for retrieving report parameters.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ReportParameter&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ReportParameter>>> GetSsrsReportParametersRequestssrsreportsReportIdparametersPostWithHttpInfoAsync(string accept, string reportId, GetSsrsReportParametersRequest body = default(GetSsrsReportParametersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ReportingApi->GetSsrsReportParametersRequestssrsreportsReportIdparametersPost");

            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'reportId' when calling ReportingApi->GetSsrsReportParametersRequestssrsreportsReportIdparametersPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ReportId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(reportId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ReportParameter>>("/reporting/ssrs/reports/{ReportId}/parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSsrsReportParametersRequestssrsreportsReportIdparametersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all reports in Ssrs - {GetSsrsReportsRequest} Retrieve a list of all reports in Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>List&lt;Report&gt;</returns>
        public List<Report> GetSsrsReportsRequestssrsreportsGet(string accept, string cultureName = default(string), string scopeId = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Report>> localVarResponse = GetSsrsReportsRequestssrsreportsGetWithHttpInfo(accept, cultureName, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all reports in Ssrs - {GetSsrsReportsRequest} Retrieve a list of all reports in Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of List&lt;Report&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Report>> GetSsrsReportsRequestssrsreportsGetWithHttpInfo(string accept, string cultureName = default(string), string scopeId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ReportingApi->GetSsrsReportsRequestssrsreportsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Report>>("/reporting/ssrs/reports", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSsrsReportsRequestssrsreportsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all reports in Ssrs - {GetSsrsReportsRequest} Retrieve a list of all reports in Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Report&gt;</returns>
        public async System.Threading.Tasks.Task<List<Report>> GetSsrsReportsRequestssrsreportsGetAsync(string accept, string cultureName = default(string), string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Report>> localVarResponse = await GetSsrsReportsRequestssrsreportsGetWithHttpInfoAsync(accept, cultureName, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all reports in Ssrs - {GetSsrsReportsRequest} Retrieve a list of all reports in Ssrs
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Report&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Report>>> GetSsrsReportsRequestssrsreportsGetWithHttpInfoAsync(string accept, string cultureName = default(string), string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ReportingApi->GetSsrsReportsRequestssrsreportsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Report>>("/reporting/ssrs/reports", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSsrsReportsRequestssrsreportsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
