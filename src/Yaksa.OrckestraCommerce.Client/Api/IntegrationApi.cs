/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIntegrationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Export order schema to a file that will be stored in the blob - {ExportOrderSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Export order schema to a file that will be stored in the blob
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ExportOrderSchemaRequestordersschemaexportPost(string accept, ExportOrderSchemaRequest body = default(ExportOrderSchemaRequest));

        /// <summary>
        /// Export order schema to a file that will be stored in the blob - {ExportOrderSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Export order schema to a file that will be stored in the blob
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ExportOrderSchemaRequestordersschemaexportPostWithHttpInfo(string accept, ExportOrderSchemaRequest body = default(ExportOrderSchemaRequest));
        /// <summary>
        /// Exports a set of product prices - {ExportProductPricesRequest}
        /// </summary>
        /// <remarks>
        /// Exports a set of product prices
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;ProductPriceExportInfo&gt;</returns>
        List<ProductPriceExportInfo> ExportProductPricesRequestproductsScopeIdpricesexportPost(string accept, string scopeId, ExportProductPricesRequest body = default(ExportProductPricesRequest));

        /// <summary>
        /// Exports a set of product prices - {ExportProductPricesRequest}
        /// </summary>
        /// <remarks>
        /// Exports a set of product prices
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductPriceExportInfo&gt;</returns>
        ApiResponse<List<ProductPriceExportInfo>> ExportProductPricesRequestproductsScopeIdpricesexportPostWithHttpInfo(string accept, string scopeId, ExportProductPricesRequest body = default(ExportProductPricesRequest));
        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ExportProductsRequest}
        /// </summary>
        /// <remarks>
        /// Export Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ExportProductsRequestproductsScopeIdexportPost(string accept, string scopeId, ExportProductsRequest body = default(ExportProductsRequest));

        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ExportProductsRequest}
        /// </summary>
        /// <remarks>
        /// Export Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ExportProductsRequestproductsScopeIdexportPostWithHttpInfo(string accept, string scopeId, ExportProductsRequest body = default(ExportProductsRequest));
        /// <summary>
        /// Export the profile system schema - {ExportProfileSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Export the profile system schema. Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ExportProfileSchemaRequestprofilesschemaexportPost(string accept, ExportProfileSchemaRequest body = default(ExportProfileSchemaRequest));

        /// <summary>
        /// Export the profile system schema - {ExportProfileSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Export the profile system schema. Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ExportProfileSchemaRequestprofilesschemaexportPostWithHttpInfo(string accept, ExportProfileSchemaRequest body = default(ExportProfileSchemaRequest));
        /// <summary>
        /// Export the profile system data - {ExportProfilesRequest}
        /// </summary>
        /// <remarks>
        /// Export the profile system data. Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ExportProfilesRequestprofilesexportPost(string accept, ExportProfilesRequest body = default(ExportProfilesRequest));

        /// <summary>
        /// Export the profile system data - {ExportProfilesRequest}
        /// </summary>
        /// <remarks>
        /// Export the profile system data. Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ExportProfilesRequestprofilesexportPostWithHttpInfo(string accept, ExportProfilesRequest body = default(ExportProfilesRequest));
        /// <summary>
        /// Import inventory items from a set of files - {ImportInventoryItemsRequest}
        /// </summary>
        /// <remarks>
        /// Import inventory items from a set of files
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ImportInventoryItemsRequestinventoryItemsimportPost(string accept, ImportInventoryItemsRequest body = default(ImportInventoryItemsRequest));

        /// <summary>
        /// Import inventory items from a set of files - {ImportInventoryItemsRequest}
        /// </summary>
        /// <remarks>
        /// Import inventory items from a set of files
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ImportInventoryItemsRequestinventoryItemsimportPostWithHttpInfo(string accept, ImportInventoryItemsRequest body = default(ImportInventoryItemsRequest));
        /// <summary>
        /// Import order schema from file - {ImportOrderSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Import order schema from file.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ImportOrderSchemaRequestordersschemaimportPost(string accept, ImportOrderSchemaRequest body = default(ImportOrderSchemaRequest));

        /// <summary>
        /// Import order schema from file - {ImportOrderSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Import order schema from file.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ImportOrderSchemaRequestordersschemaimportPostWithHttpInfo(string accept, ImportOrderSchemaRequest body = default(ImportOrderSchemaRequest));
        /// <summary>
        /// Import Orders and their&#39;s sub-elements :  Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons - {ImportOrdersRequest}
        /// </summary>
        /// <remarks>
        /// Import Orders and their&#39;s sub-elements : Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ImportOrdersRequestordersimportPost(string accept, ImportOrdersRequest body = default(ImportOrdersRequest));

        /// <summary>
        /// Import Orders and their&#39;s sub-elements :  Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons - {ImportOrdersRequest}
        /// </summary>
        /// <remarks>
        /// Import Orders and their&#39;s sub-elements : Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ImportOrdersRequestordersimportPostWithHttpInfo(string accept, ImportOrdersRequest body = default(ImportOrdersRequest));
        /// <summary>
        /// Requests that a products prices import be started asynchronously. - {ImportProductsPricesRequest}
        /// </summary>
        /// <remarks>
        /// Requests that a products prices import be started asynchronously for a given scope using the data available in the blob storage at the provided path.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ImportProductsPricesRequestproductsScopeIdpricesimportPost(string accept, string scopeId, ImportProductsPricesRequest body = default(ImportProductsPricesRequest));

        /// <summary>
        /// Requests that a products prices import be started asynchronously. - {ImportProductsPricesRequest}
        /// </summary>
        /// <remarks>
        /// Requests that a products prices import be started asynchronously for a given scope using the data available in the blob storage at the provided path.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ImportProductsPricesRequestproductsScopeIdpricesimportPostWithHttpInfo(string accept, string scopeId, ImportProductsPricesRequest body = default(ImportProductsPricesRequest));
        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ImportProductsRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ImportProductsRequestproductsScopeIdimportPost(string accept, string scopeId, ImportProductsRequest body = default(ImportProductsRequest));

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ImportProductsRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ImportProductsRequestproductsScopeIdimportPostWithHttpInfo(string accept, string scopeId, ImportProductsRequest body = default(ImportProductsRequest));
        /// <summary>
        /// Import the profile system schema - {ImportProfileSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Import the profile system schema. Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ImportProfileSchemaRequestprofilesschemaimportPost(string accept, ImportProfileSchemaRequest body = default(ImportProfileSchemaRequest));

        /// <summary>
        /// Import the profile system schema - {ImportProfileSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Import the profile system schema. Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ImportProfileSchemaRequestprofilesschemaimportPostWithHttpInfo(string accept, ImportProfileSchemaRequest body = default(ImportProfileSchemaRequest));
        /// <summary>
        /// Import/Sync the profile system data - {ImportProfilesRequest}
        /// </summary>
        /// <remarks>
        /// Import/Delete/Sync the profile system data.     A result file containing all success and failures will be sent to the blob.  The task will always be set as RunToCompletion by design.   To see the status please check the property ErrorsInFiles in the task result or the result zip file in the blob.    Restictions:                - Files must be in the root of the zip               - Only one import header by entity: Could not set different columns on the same profile in the same import zip               - Only one delete header by entity: Could not perform a delete on the same profile with different keys. Cannot set some with ChildrenOnly and other not.               - Importing an entity with extra will delete all related extra that have an import header               - Delete files doesn&#39;t apply on extra    Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ImportProfilesRequestprofilesimportPost(string accept, ImportProfilesRequest body = default(ImportProfilesRequest));

        /// <summary>
        /// Import/Sync the profile system data - {ImportProfilesRequest}
        /// </summary>
        /// <remarks>
        /// Import/Delete/Sync the profile system data.     A result file containing all success and failures will be sent to the blob.  The task will always be set as RunToCompletion by design.   To see the status please check the property ErrorsInFiles in the task result or the result zip file in the blob.    Restictions:                - Files must be in the root of the zip               - Only one import header by entity: Could not set different columns on the same profile in the same import zip               - Only one delete header by entity: Could not perform a delete on the same profile with different keys. Cannot set some with ChildrenOnly and other not.               - Importing an entity with extra will delete all related extra that have an import header               - Delete files doesn&#39;t apply on extra    Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ImportProfilesRequestprofilesimportPostWithHttpInfo(string accept, ImportProfilesRequest body = default(ImportProfilesRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIntegrationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Export order schema to a file that will be stored in the blob - {ExportOrderSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Export order schema to a file that will be stored in the blob
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ExportOrderSchemaRequestordersschemaexportPostAsync(string accept, ExportOrderSchemaRequest body = default(ExportOrderSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export order schema to a file that will be stored in the blob - {ExportOrderSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Export order schema to a file that will be stored in the blob
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ExportOrderSchemaRequestordersschemaexportPostWithHttpInfoAsync(string accept, ExportOrderSchemaRequest body = default(ExportOrderSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Exports a set of product prices - {ExportProductPricesRequest}
        /// </summary>
        /// <remarks>
        /// Exports a set of product prices
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProductPriceExportInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ProductPriceExportInfo>> ExportProductPricesRequestproductsScopeIdpricesexportPostAsync(string accept, string scopeId, ExportProductPricesRequest body = default(ExportProductPricesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Exports a set of product prices - {ExportProductPricesRequest}
        /// </summary>
        /// <remarks>
        /// Exports a set of product prices
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductPriceExportInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductPriceExportInfo>>> ExportProductPricesRequestproductsScopeIdpricesexportPostWithHttpInfoAsync(string accept, string scopeId, ExportProductPricesRequest body = default(ExportProductPricesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ExportProductsRequest}
        /// </summary>
        /// <remarks>
        /// Export Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ExportProductsRequestproductsScopeIdexportPostAsync(string accept, string scopeId, ExportProductsRequest body = default(ExportProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ExportProductsRequest}
        /// </summary>
        /// <remarks>
        /// Export Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ExportProductsRequestproductsScopeIdexportPostWithHttpInfoAsync(string accept, string scopeId, ExportProductsRequest body = default(ExportProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export the profile system schema - {ExportProfileSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Export the profile system schema. Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ExportProfileSchemaRequestprofilesschemaexportPostAsync(string accept, ExportProfileSchemaRequest body = default(ExportProfileSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export the profile system schema - {ExportProfileSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Export the profile system schema. Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ExportProfileSchemaRequestprofilesschemaexportPostWithHttpInfoAsync(string accept, ExportProfileSchemaRequest body = default(ExportProfileSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export the profile system data - {ExportProfilesRequest}
        /// </summary>
        /// <remarks>
        /// Export the profile system data. Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ExportProfilesRequestprofilesexportPostAsync(string accept, ExportProfilesRequest body = default(ExportProfilesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export the profile system data - {ExportProfilesRequest}
        /// </summary>
        /// <remarks>
        /// Export the profile system data. Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ExportProfilesRequestprofilesexportPostWithHttpInfoAsync(string accept, ExportProfilesRequest body = default(ExportProfilesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import inventory items from a set of files - {ImportInventoryItemsRequest}
        /// </summary>
        /// <remarks>
        /// Import inventory items from a set of files
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ImportInventoryItemsRequestinventoryItemsimportPostAsync(string accept, ImportInventoryItemsRequest body = default(ImportInventoryItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import inventory items from a set of files - {ImportInventoryItemsRequest}
        /// </summary>
        /// <remarks>
        /// Import inventory items from a set of files
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ImportInventoryItemsRequestinventoryItemsimportPostWithHttpInfoAsync(string accept, ImportInventoryItemsRequest body = default(ImportInventoryItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import order schema from file - {ImportOrderSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Import order schema from file.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ImportOrderSchemaRequestordersschemaimportPostAsync(string accept, ImportOrderSchemaRequest body = default(ImportOrderSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import order schema from file - {ImportOrderSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Import order schema from file.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ImportOrderSchemaRequestordersschemaimportPostWithHttpInfoAsync(string accept, ImportOrderSchemaRequest body = default(ImportOrderSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import Orders and their&#39;s sub-elements :  Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons - {ImportOrdersRequest}
        /// </summary>
        /// <remarks>
        /// Import Orders and their&#39;s sub-elements : Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ImportOrdersRequestordersimportPostAsync(string accept, ImportOrdersRequest body = default(ImportOrdersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import Orders and their&#39;s sub-elements :  Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons - {ImportOrdersRequest}
        /// </summary>
        /// <remarks>
        /// Import Orders and their&#39;s sub-elements : Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ImportOrdersRequestordersimportPostWithHttpInfoAsync(string accept, ImportOrdersRequest body = default(ImportOrdersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Requests that a products prices import be started asynchronously. - {ImportProductsPricesRequest}
        /// </summary>
        /// <remarks>
        /// Requests that a products prices import be started asynchronously for a given scope using the data available in the blob storage at the provided path.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ImportProductsPricesRequestproductsScopeIdpricesimportPostAsync(string accept, string scopeId, ImportProductsPricesRequest body = default(ImportProductsPricesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Requests that a products prices import be started asynchronously. - {ImportProductsPricesRequest}
        /// </summary>
        /// <remarks>
        /// Requests that a products prices import be started asynchronously for a given scope using the data available in the blob storage at the provided path.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ImportProductsPricesRequestproductsScopeIdpricesimportPostWithHttpInfoAsync(string accept, string scopeId, ImportProductsPricesRequest body = default(ImportProductsPricesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ImportProductsRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ImportProductsRequestproductsScopeIdimportPostAsync(string accept, string scopeId, ImportProductsRequest body = default(ImportProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ImportProductsRequest}
        /// </summary>
        /// <remarks>
        /// Import Metadatas, Products, Prices, Categories and RelationShips
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ImportProductsRequestproductsScopeIdimportPostWithHttpInfoAsync(string accept, string scopeId, ImportProductsRequest body = default(ImportProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import the profile system schema - {ImportProfileSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Import the profile system schema. Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ImportProfileSchemaRequestprofilesschemaimportPostAsync(string accept, ImportProfileSchemaRequest body = default(ImportProfileSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import the profile system schema - {ImportProfileSchemaRequest}
        /// </summary>
        /// <remarks>
        /// Import the profile system schema. Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ImportProfileSchemaRequestprofilesschemaimportPostWithHttpInfoAsync(string accept, ImportProfileSchemaRequest body = default(ImportProfileSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import/Sync the profile system data - {ImportProfilesRequest}
        /// </summary>
        /// <remarks>
        /// Import/Delete/Sync the profile system data.     A result file containing all success and failures will be sent to the blob.  The task will always be set as RunToCompletion by design.   To see the status please check the property ErrorsInFiles in the task result or the result zip file in the blob.    Restictions:                - Files must be in the root of the zip               - Only one import header by entity: Could not set different columns on the same profile in the same import zip               - Only one delete header by entity: Could not perform a delete on the same profile with different keys. Cannot set some with ChildrenOnly and other not.               - Importing an entity with extra will delete all related extra that have an import header               - Delete files doesn&#39;t apply on extra    Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ImportProfilesRequestprofilesimportPostAsync(string accept, ImportProfilesRequest body = default(ImportProfilesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import/Sync the profile system data - {ImportProfilesRequest}
        /// </summary>
        /// <remarks>
        /// Import/Delete/Sync the profile system data.     A result file containing all success and failures will be sent to the blob.  The task will always be set as RunToCompletion by design.   To see the status please check the property ErrorsInFiles in the task result or the result zip file in the blob.    Restictions:                - Files must be in the root of the zip               - Only one import header by entity: Could not set different columns on the same profile in the same import zip               - Only one delete header by entity: Could not perform a delete on the same profile with different keys. Cannot set some with ChildrenOnly and other not.               - Importing an entity with extra will delete all related extra that have an import header               - Delete files doesn&#39;t apply on extra    Return the task information for the started durable task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ImportProfilesRequestprofilesimportPostWithHttpInfoAsync(string accept, ImportProfilesRequest body = default(ImportProfilesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIntegrationApi : IIntegrationApiSync, IIntegrationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IntegrationApi : IIntegrationApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IntegrationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IntegrationApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IntegrationApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IntegrationApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Export order schema to a file that will be stored in the blob - {ExportOrderSchemaRequest} Export order schema to a file that will be stored in the blob
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ExportOrderSchemaRequestordersschemaexportPost(string accept, ExportOrderSchemaRequest body = default(ExportOrderSchemaRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ExportOrderSchemaRequestordersschemaexportPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export order schema to a file that will be stored in the blob - {ExportOrderSchemaRequest} Export order schema to a file that will be stored in the blob
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ExportOrderSchemaRequestordersschemaexportPostWithHttpInfo(string accept, ExportOrderSchemaRequest body = default(ExportOrderSchemaRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ExportOrderSchemaRequestordersschemaexportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/integration/orders/schema/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportOrderSchemaRequestordersschemaexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export order schema to a file that will be stored in the blob - {ExportOrderSchemaRequest} Export order schema to a file that will be stored in the blob
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ExportOrderSchemaRequestordersschemaexportPostAsync(string accept, ExportOrderSchemaRequest body = default(ExportOrderSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ExportOrderSchemaRequestordersschemaexportPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export order schema to a file that will be stored in the blob - {ExportOrderSchemaRequest} Export order schema to a file that will be stored in the blob
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ExportOrderSchemaRequestordersschemaexportPostWithHttpInfoAsync(string accept, ExportOrderSchemaRequest body = default(ExportOrderSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ExportOrderSchemaRequestordersschemaexportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/integration/orders/schema/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportOrderSchemaRequestordersschemaexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Exports a set of product prices - {ExportProductPricesRequest} Exports a set of product prices
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;ProductPriceExportInfo&gt;</returns>
        public List<ProductPriceExportInfo> ExportProductPricesRequestproductsScopeIdpricesexportPost(string accept, string scopeId, ExportProductPricesRequest body = default(ExportProductPricesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductPriceExportInfo>> localVarResponse = ExportProductPricesRequestproductsScopeIdpricesexportPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Exports a set of product prices - {ExportProductPricesRequest} Exports a set of product prices
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductPriceExportInfo&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductPriceExportInfo>> ExportProductPricesRequestproductsScopeIdpricesexportPostWithHttpInfo(string accept, string scopeId, ExportProductPricesRequest body = default(ExportProductPricesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ExportProductPricesRequestproductsScopeIdpricesexportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling IntegrationApi->ExportProductPricesRequestproductsScopeIdpricesexportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ProductPriceExportInfo>>("/integration/products/{ScopeId}/prices/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProductPricesRequestproductsScopeIdpricesexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Exports a set of product prices - {ExportProductPricesRequest} Exports a set of product prices
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProductPriceExportInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductPriceExportInfo>> ExportProductPricesRequestproductsScopeIdpricesexportPostAsync(string accept, string scopeId, ExportProductPricesRequest body = default(ExportProductPricesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductPriceExportInfo>> localVarResponse = await ExportProductPricesRequestproductsScopeIdpricesexportPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Exports a set of product prices - {ExportProductPricesRequest} Exports a set of product prices
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductPriceExportInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ProductPriceExportInfo>>> ExportProductPricesRequestproductsScopeIdpricesexportPostWithHttpInfoAsync(string accept, string scopeId, ExportProductPricesRequest body = default(ExportProductPricesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ExportProductPricesRequestproductsScopeIdpricesexportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling IntegrationApi->ExportProductPricesRequestproductsScopeIdpricesexportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ProductPriceExportInfo>>("/integration/products/{ScopeId}/prices/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProductPricesRequestproductsScopeIdpricesexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ExportProductsRequest} Export Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ExportProductsRequestproductsScopeIdexportPost(string accept, string scopeId, ExportProductsRequest body = default(ExportProductsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ExportProductsRequestproductsScopeIdexportPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ExportProductsRequest} Export Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ExportProductsRequestproductsScopeIdexportPostWithHttpInfo(string accept, string scopeId, ExportProductsRequest body = default(ExportProductsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ExportProductsRequestproductsScopeIdexportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling IntegrationApi->ExportProductsRequestproductsScopeIdexportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/integration/products/{ScopeId}/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProductsRequestproductsScopeIdexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ExportProductsRequest} Export Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ExportProductsRequestproductsScopeIdexportPostAsync(string accept, string scopeId, ExportProductsRequest body = default(ExportProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ExportProductsRequestproductsScopeIdexportPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Metadatas, Products, Prices, Categories and RelationShips - {ExportProductsRequest} Export Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ExportProductsRequestproductsScopeIdexportPostWithHttpInfoAsync(string accept, string scopeId, ExportProductsRequest body = default(ExportProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ExportProductsRequestproductsScopeIdexportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling IntegrationApi->ExportProductsRequestproductsScopeIdexportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/integration/products/{ScopeId}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProductsRequestproductsScopeIdexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export the profile system schema - {ExportProfileSchemaRequest} Export the profile system schema. Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ExportProfileSchemaRequestprofilesschemaexportPost(string accept, ExportProfileSchemaRequest body = default(ExportProfileSchemaRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ExportProfileSchemaRequestprofilesschemaexportPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export the profile system schema - {ExportProfileSchemaRequest} Export the profile system schema. Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ExportProfileSchemaRequestprofilesschemaexportPostWithHttpInfo(string accept, ExportProfileSchemaRequest body = default(ExportProfileSchemaRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ExportProfileSchemaRequestprofilesschemaexportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/integration/profiles/schema/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProfileSchemaRequestprofilesschemaexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export the profile system schema - {ExportProfileSchemaRequest} Export the profile system schema. Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ExportProfileSchemaRequestprofilesschemaexportPostAsync(string accept, ExportProfileSchemaRequest body = default(ExportProfileSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ExportProfileSchemaRequestprofilesschemaexportPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export the profile system schema - {ExportProfileSchemaRequest} Export the profile system schema. Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ExportProfileSchemaRequestprofilesschemaexportPostWithHttpInfoAsync(string accept, ExportProfileSchemaRequest body = default(ExportProfileSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ExportProfileSchemaRequestprofilesschemaexportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/integration/profiles/schema/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProfileSchemaRequestprofilesschemaexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export the profile system data - {ExportProfilesRequest} Export the profile system data. Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ExportProfilesRequestprofilesexportPost(string accept, ExportProfilesRequest body = default(ExportProfilesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ExportProfilesRequestprofilesexportPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export the profile system data - {ExportProfilesRequest} Export the profile system data. Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ExportProfilesRequestprofilesexportPostWithHttpInfo(string accept, ExportProfilesRequest body = default(ExportProfilesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ExportProfilesRequestprofilesexportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/integration/profiles/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProfilesRequestprofilesexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export the profile system data - {ExportProfilesRequest} Export the profile system data. Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ExportProfilesRequestprofilesexportPostAsync(string accept, ExportProfilesRequest body = default(ExportProfilesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ExportProfilesRequestprofilesexportPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export the profile system data - {ExportProfilesRequest} Export the profile system data. Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ExportProfilesRequestprofilesexportPostWithHttpInfoAsync(string accept, ExportProfilesRequest body = default(ExportProfilesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ExportProfilesRequestprofilesexportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/integration/profiles/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProfilesRequestprofilesexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import inventory items from a set of files - {ImportInventoryItemsRequest} Import inventory items from a set of files
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ImportInventoryItemsRequestinventoryItemsimportPost(string accept, ImportInventoryItemsRequest body = default(ImportInventoryItemsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ImportInventoryItemsRequestinventoryItemsimportPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import inventory items from a set of files - {ImportInventoryItemsRequest} Import inventory items from a set of files
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ImportInventoryItemsRequestinventoryItemsimportPostWithHttpInfo(string accept, ImportInventoryItemsRequest body = default(ImportInventoryItemsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportInventoryItemsRequestinventoryItemsimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/integration/inventoryItems/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportInventoryItemsRequestinventoryItemsimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import inventory items from a set of files - {ImportInventoryItemsRequest} Import inventory items from a set of files
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ImportInventoryItemsRequestinventoryItemsimportPostAsync(string accept, ImportInventoryItemsRequest body = default(ImportInventoryItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ImportInventoryItemsRequestinventoryItemsimportPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import inventory items from a set of files - {ImportInventoryItemsRequest} Import inventory items from a set of files
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ImportInventoryItemsRequestinventoryItemsimportPostWithHttpInfoAsync(string accept, ImportInventoryItemsRequest body = default(ImportInventoryItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportInventoryItemsRequestinventoryItemsimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/integration/inventoryItems/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportInventoryItemsRequestinventoryItemsimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import order schema from file - {ImportOrderSchemaRequest} Import order schema from file.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ImportOrderSchemaRequestordersschemaimportPost(string accept, ImportOrderSchemaRequest body = default(ImportOrderSchemaRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ImportOrderSchemaRequestordersschemaimportPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import order schema from file - {ImportOrderSchemaRequest} Import order schema from file.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ImportOrderSchemaRequestordersschemaimportPostWithHttpInfo(string accept, ImportOrderSchemaRequest body = default(ImportOrderSchemaRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportOrderSchemaRequestordersschemaimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/integration/orders/schema/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportOrderSchemaRequestordersschemaimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import order schema from file - {ImportOrderSchemaRequest} Import order schema from file.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ImportOrderSchemaRequestordersschemaimportPostAsync(string accept, ImportOrderSchemaRequest body = default(ImportOrderSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ImportOrderSchemaRequestordersschemaimportPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import order schema from file - {ImportOrderSchemaRequest} Import order schema from file.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ImportOrderSchemaRequestordersschemaimportPostWithHttpInfoAsync(string accept, ImportOrderSchemaRequest body = default(ImportOrderSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportOrderSchemaRequestordersschemaimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/integration/orders/schema/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportOrderSchemaRequestordersschemaimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Orders and their&#39;s sub-elements :  Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons - {ImportOrdersRequest} Import Orders and their&#39;s sub-elements : Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ImportOrdersRequestordersimportPost(string accept, ImportOrdersRequest body = default(ImportOrdersRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ImportOrdersRequestordersimportPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Orders and their&#39;s sub-elements :  Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons - {ImportOrdersRequest} Import Orders and their&#39;s sub-elements : Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ImportOrdersRequestordersimportPostWithHttpInfo(string accept, ImportOrdersRequest body = default(ImportOrdersRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportOrdersRequestordersimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/integration/orders/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportOrdersRequestordersimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Orders and their&#39;s sub-elements :  Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons - {ImportOrdersRequest} Import Orders and their&#39;s sub-elements : Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ImportOrdersRequestordersimportPostAsync(string accept, ImportOrdersRequest body = default(ImportOrdersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ImportOrdersRequestordersimportPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Orders and their&#39;s sub-elements :  Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons - {ImportOrdersRequest} Import Orders and their&#39;s sub-elements : Payments Shipments, LineItems, Taxes, Addresses, Order history, Notes, Additional fees, Discounts and coupons
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ImportOrdersRequestordersimportPostWithHttpInfoAsync(string accept, ImportOrdersRequest body = default(ImportOrdersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportOrdersRequestordersimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/integration/orders/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportOrdersRequestordersimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests that a products prices import be started asynchronously. - {ImportProductsPricesRequest} Requests that a products prices import be started asynchronously for a given scope using the data available in the blob storage at the provided path.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ImportProductsPricesRequestproductsScopeIdpricesimportPost(string accept, string scopeId, ImportProductsPricesRequest body = default(ImportProductsPricesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ImportProductsPricesRequestproductsScopeIdpricesimportPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests that a products prices import be started asynchronously. - {ImportProductsPricesRequest} Requests that a products prices import be started asynchronously for a given scope using the data available in the blob storage at the provided path.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ImportProductsPricesRequestproductsScopeIdpricesimportPostWithHttpInfo(string accept, string scopeId, ImportProductsPricesRequest body = default(ImportProductsPricesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportProductsPricesRequestproductsScopeIdpricesimportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling IntegrationApi->ImportProductsPricesRequestproductsScopeIdpricesimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/integration/products/{ScopeId}/prices/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProductsPricesRequestproductsScopeIdpricesimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests that a products prices import be started asynchronously. - {ImportProductsPricesRequest} Requests that a products prices import be started asynchronously for a given scope using the data available in the blob storage at the provided path.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ImportProductsPricesRequestproductsScopeIdpricesimportPostAsync(string accept, string scopeId, ImportProductsPricesRequest body = default(ImportProductsPricesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ImportProductsPricesRequestproductsScopeIdpricesimportPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests that a products prices import be started asynchronously. - {ImportProductsPricesRequest} Requests that a products prices import be started asynchronously for a given scope using the data available in the blob storage at the provided path.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ImportProductsPricesRequestproductsScopeIdpricesimportPostWithHttpInfoAsync(string accept, string scopeId, ImportProductsPricesRequest body = default(ImportProductsPricesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportProductsPricesRequestproductsScopeIdpricesimportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling IntegrationApi->ImportProductsPricesRequestproductsScopeIdpricesimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/integration/products/{ScopeId}/prices/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProductsPricesRequestproductsScopeIdpricesimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ImportProductsRequest} Import Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ImportProductsRequestproductsScopeIdimportPost(string accept, string scopeId, ImportProductsRequest body = default(ImportProductsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ImportProductsRequestproductsScopeIdimportPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ImportProductsRequest} Import Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ImportProductsRequestproductsScopeIdimportPostWithHttpInfo(string accept, string scopeId, ImportProductsRequest body = default(ImportProductsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportProductsRequestproductsScopeIdimportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling IntegrationApi->ImportProductsRequestproductsScopeIdimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/integration/products/{ScopeId}/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProductsRequestproductsScopeIdimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ImportProductsRequest} Import Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ImportProductsRequestproductsScopeIdimportPostAsync(string accept, string scopeId, ImportProductsRequest body = default(ImportProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ImportProductsRequestproductsScopeIdimportPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Metadatas, Products, Prices, Categories and RelationShips - {ImportProductsRequest} Import Metadatas, Products, Prices, Categories and RelationShips
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ImportProductsRequestproductsScopeIdimportPostWithHttpInfoAsync(string accept, string scopeId, ImportProductsRequest body = default(ImportProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportProductsRequestproductsScopeIdimportPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling IntegrationApi->ImportProductsRequestproductsScopeIdimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/integration/products/{ScopeId}/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProductsRequestproductsScopeIdimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import the profile system schema - {ImportProfileSchemaRequest} Import the profile system schema. Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ImportProfileSchemaRequestprofilesschemaimportPost(string accept, ImportProfileSchemaRequest body = default(ImportProfileSchemaRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ImportProfileSchemaRequestprofilesschemaimportPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import the profile system schema - {ImportProfileSchemaRequest} Import the profile system schema. Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ImportProfileSchemaRequestprofilesschemaimportPostWithHttpInfo(string accept, ImportProfileSchemaRequest body = default(ImportProfileSchemaRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportProfileSchemaRequestprofilesschemaimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/integration/profiles/schema/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProfileSchemaRequestprofilesschemaimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import the profile system schema - {ImportProfileSchemaRequest} Import the profile system schema. Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ImportProfileSchemaRequestprofilesschemaimportPostAsync(string accept, ImportProfileSchemaRequest body = default(ImportProfileSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ImportProfileSchemaRequestprofilesschemaimportPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import the profile system schema - {ImportProfileSchemaRequest} Import the profile system schema. Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ImportProfileSchemaRequestprofilesschemaimportPostWithHttpInfoAsync(string accept, ImportProfileSchemaRequest body = default(ImportProfileSchemaRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportProfileSchemaRequestprofilesschemaimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/integration/profiles/schema/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProfileSchemaRequestprofilesschemaimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import/Sync the profile system data - {ImportProfilesRequest} Import/Delete/Sync the profile system data.     A result file containing all success and failures will be sent to the blob.  The task will always be set as RunToCompletion by design.   To see the status please check the property ErrorsInFiles in the task result or the result zip file in the blob.    Restictions:                - Files must be in the root of the zip               - Only one import header by entity: Could not set different columns on the same profile in the same import zip               - Only one delete header by entity: Could not perform a delete on the same profile with different keys. Cannot set some with ChildrenOnly and other not.               - Importing an entity with extra will delete all related extra that have an import header               - Delete files doesn&#39;t apply on extra    Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ImportProfilesRequestprofilesimportPost(string accept, ImportProfilesRequest body = default(ImportProfilesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ImportProfilesRequestprofilesimportPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import/Sync the profile system data - {ImportProfilesRequest} Import/Delete/Sync the profile system data.     A result file containing all success and failures will be sent to the blob.  The task will always be set as RunToCompletion by design.   To see the status please check the property ErrorsInFiles in the task result or the result zip file in the blob.    Restictions:                - Files must be in the root of the zip               - Only one import header by entity: Could not set different columns on the same profile in the same import zip               - Only one delete header by entity: Could not perform a delete on the same profile with different keys. Cannot set some with ChildrenOnly and other not.               - Importing an entity with extra will delete all related extra that have an import header               - Delete files doesn&#39;t apply on extra    Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ImportProfilesRequestprofilesimportPostWithHttpInfo(string accept, ImportProfilesRequest body = default(ImportProfilesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportProfilesRequestprofilesimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/integration/profiles/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProfilesRequestprofilesimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import/Sync the profile system data - {ImportProfilesRequest} Import/Delete/Sync the profile system data.     A result file containing all success and failures will be sent to the blob.  The task will always be set as RunToCompletion by design.   To see the status please check the property ErrorsInFiles in the task result or the result zip file in the blob.    Restictions:                - Files must be in the root of the zip               - Only one import header by entity: Could not set different columns on the same profile in the same import zip               - Only one delete header by entity: Could not perform a delete on the same profile with different keys. Cannot set some with ChildrenOnly and other not.               - Importing an entity with extra will delete all related extra that have an import header               - Delete files doesn&#39;t apply on extra    Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ImportProfilesRequestprofilesimportPostAsync(string accept, ImportProfilesRequest body = default(ImportProfilesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ImportProfilesRequestprofilesimportPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import/Sync the profile system data - {ImportProfilesRequest} Import/Delete/Sync the profile system data.     A result file containing all success and failures will be sent to the blob.  The task will always be set as RunToCompletion by design.   To see the status please check the property ErrorsInFiles in the task result or the result zip file in the blob.    Restictions:                - Files must be in the root of the zip               - Only one import header by entity: Could not set different columns on the same profile in the same import zip               - Only one delete header by entity: Could not perform a delete on the same profile with different keys. Cannot set some with ChildrenOnly and other not.               - Importing an entity with extra will delete all related extra that have an import header               - Delete files doesn&#39;t apply on extra    Return the task information for the started durable task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ImportProfilesRequestprofilesimportPostWithHttpInfoAsync(string accept, ImportProfilesRequest body = default(ImportProfilesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling IntegrationApi->ImportProfilesRequestprofilesimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/integration/profiles/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProfilesRequestprofilesimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
