/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds or updates the variant search configuration for the specified product definition. - {AddOrUpdateVariantSearchConfigurationRequest}
        /// </summary>
        /// <remarks>
        /// Adds or updates the variant search configuration for the specified product definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreate(string accept, string scopeId, AddOrUpdateVariantSearchConfigurationRequest body = default(AddOrUpdateVariantSearchConfigurationRequest));

        /// <summary>
        /// Adds or updates the variant search configuration for the specified product definition. - {AddOrUpdateVariantSearchConfigurationRequest}
        /// </summary>
        /// <remarks>
        /// Adds or updates the variant search configuration for the specified product definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreateWithHttpInfo(string accept, string scopeId, AddOrUpdateVariantSearchConfigurationRequest body = default(AddOrUpdateVariantSearchConfigurationRequest));
        /// <summary>
        /// Make a generic search - {AdvancedSearchRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="indexName">The required name of the index to query: [Products, Customers, Stores, Inventories, ...]. See orckestra.overture.solr section in web.config for the complete list.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchResult</returns>
        SearchResult AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePost(string accept, string scopeId, string cultureName, string indexName, AdvancedSearchRequest body = default(AdvancedSearchRequest));

        /// <summary>
        /// Make a generic search - {AdvancedSearchRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="indexName">The required name of the index to query: [Products, Customers, Stores, Inventories, ...]. See orckestra.overture.solr section in web.config for the complete list.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        ApiResponse<SearchResult> AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePostWithHttpInfo(string accept, string scopeId, string cultureName, string indexName, AdvancedSearchRequest body = default(AdvancedSearchRequest));
        /// <summary>
        /// Returns the list of variant search configurations in the system. - {GetVariantSearchConfigurationsRequest}
        /// </summary>
        /// <remarks>
        /// Returns the list of variant search configurations in the system.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>List&lt;VariantSearchConfiguration&gt;</returns>
        List<VariantSearchConfiguration> GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGet(string accept, string scopeId);

        /// <summary>
        /// Returns the list of variant search configurations in the system. - {GetVariantSearchConfigurationsRequest}
        /// </summary>
        /// <remarks>
        /// Returns the list of variant search configurations in the system.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>ApiResponse of List&lt;VariantSearchConfiguration&gt;</returns>
        ApiResponse<List<VariantSearchConfiguration>> GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGetWithHttpInfo(string accept, string scopeId);
        /// <summary>
        /// Start the customers indexing durable task - {IndexCustomersRequest}
        /// </summary>
        /// <remarks>
        /// Start the customers indexing durable task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        List<TaskInfo> IndexCustomersRequestindexescustomersCreate(string accept, IndexCustomersRequest body = default(IndexCustomersRequest));

        /// <summary>
        /// Start the customers indexing durable task - {IndexCustomersRequest}
        /// </summary>
        /// <remarks>
        /// Start the customers indexing durable task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        ApiResponse<List<TaskInfo>> IndexCustomersRequestindexescustomersCreateWithHttpInfo(string accept, IndexCustomersRequest body = default(IndexCustomersRequest));
        /// <summary>
        /// Start the inventories indexing durable task - {IndexInventoriesRequest}
        /// </summary>
        /// <remarks>
        /// Start the inventories indexing durable task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        List<TaskInfo> IndexInventoriesRequestindexesinventoriesCreate(string accept, IndexInventoriesRequest body = default(IndexInventoriesRequest));

        /// <summary>
        /// Start the inventories indexing durable task - {IndexInventoriesRequest}
        /// </summary>
        /// <remarks>
        /// Start the inventories indexing durable task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        ApiResponse<List<TaskInfo>> IndexInventoriesRequestindexesinventoriesCreateWithHttpInfo(string accept, IndexInventoriesRequest body = default(IndexInventoriesRequest));
        /// <summary>
        /// Start the products indexing durable tasks - {IndexProductsRequest}
        /// </summary>
        /// <remarks>
        /// Start the products indexing durable tasks
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        List<TaskInfo> IndexProductsRequestindexesproductsCreate(string accept, IndexProductsRequest body = default(IndexProductsRequest));

        /// <summary>
        /// Start the products indexing durable tasks - {IndexProductsRequest}
        /// </summary>
        /// <remarks>
        /// Start the products indexing durable tasks
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        ApiResponse<List<TaskInfo>> IndexProductsRequestindexesproductsCreateWithHttpInfo(string accept, IndexProductsRequest body = default(IndexProductsRequest));
        /// <summary>
        /// Start the stores indexing durable task - {IndexStoresRequest}
        /// </summary>
        /// <remarks>
        /// Start the stores indexing durable task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        List<TaskInfo> IndexStoresRequestindexesstoresCreate(string accept, IndexStoresRequest body = default(IndexStoresRequest));

        /// <summary>
        /// Start the stores indexing durable task - {IndexStoresRequest}
        /// </summary>
        /// <remarks>
        /// Start the stores indexing durable task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        ApiResponse<List<TaskInfo>> IndexStoresRequestindexesstoresCreateWithHttpInfo(string accept, IndexStoresRequest body = default(IndexStoresRequest));
        /// <summary>
        /// Search for products available in the inventory using an optional search query - {SearchAvailableProductsByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="categoryName">The name of the category</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchAvailableProductsByCategoryResponse</returns>
        SearchAvailableProductsByCategoryResponse SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePost(string accept, string scopeId, string cultureName, string categoryName, SearchAvailableProductsByCategoryRequest body = default(SearchAvailableProductsByCategoryRequest));

        /// <summary>
        /// Search for products available in the inventory using an optional search query - {SearchAvailableProductsByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="categoryName">The name of the category</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchAvailableProductsByCategoryResponse</returns>
        ApiResponse<SearchAvailableProductsByCategoryResponse> SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePostWithHttpInfo(string accept, string scopeId, string cultureName, string categoryName, SearchAvailableProductsByCategoryRequest body = default(SearchAvailableProductsByCategoryRequest));
        /// <summary>
        /// Search for products available in the inventory - {SearchAvailableProductsRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductSearchResult</returns>
        ProductSearchResult SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPost(string accept, string scopeId, string cultureName, SearchAvailableProductsRequest body = default(SearchAvailableProductsRequest));

        /// <summary>
        /// Search for products available in the inventory - {SearchAvailableProductsRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductSearchResult</returns>
        ApiResponse<ProductSearchResult> SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPostWithHttpInfo(string accept, string scopeId, string cultureName, SearchAvailableProductsRequest body = default(SearchAvailableProductsRequest));
        /// <summary>
        /// Search using a Search Query as a template - {SearchBySearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="queryName">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchQueryResult</returns>
        SearchQueryResult SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost(string accept, string scopeId, string cultureName, string queryType, string queryName, SearchBySearchQueryRequest body = default(SearchBySearchQueryRequest));

        /// <summary>
        /// Search using a Search Query as a template - {SearchBySearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="queryName">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchQueryResult</returns>
        ApiResponse<SearchQueryResult> SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePostWithHttpInfo(string accept, string scopeId, string cultureName, string queryType, string queryName, SearchBySearchQueryRequest body = default(SearchBySearchQueryRequest));
        /// <summary>
        /// Search for customers - {SearchCustomersRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchResult</returns>
        SearchResult SearchCustomersRequestScopeIdCultureNamecustomersPost(string accept, string scopeId, string cultureName, SearchCustomersRequest body = default(SearchCustomersRequest));

        /// <summary>
        /// Search for customers - {SearchCustomersRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        ApiResponse<SearchResult> SearchCustomersRequestScopeIdCultureNamecustomersPostWithHttpInfo(string accept, string scopeId, string cultureName, SearchCustomersRequest body = default(SearchCustomersRequest));
        /// <summary>
        /// Search product by ids - {SearchProductByIdsRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchResult</returns>
        SearchResult SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPost(string accept, string scopeId, string cultureName, SearchProductByIdsRequest body = default(SearchProductByIdsRequest));

        /// <summary>
        /// Search product by ids - {SearchProductByIdsRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        ApiResponse<SearchResult> SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPostWithHttpInfo(string accept, string scopeId, string cultureName, SearchProductByIdsRequest body = default(SearchProductByIdsRequest));
        /// <summary>
        /// Search product by saved query - {SearchProductBySavedQueryRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryId">the id of the saved query to execute.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchResult</returns>
        SearchResult SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPost(string accept, string scopeId, string cultureName, string queryId, SearchProductBySavedQueryRequest body = default(SearchProductBySavedQueryRequest));

        /// <summary>
        /// Search product by saved query - {SearchProductBySavedQueryRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryId">the id of the saved query to execute.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        ApiResponse<SearchResult> SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPostWithHttpInfo(string accept, string scopeId, string cultureName, string queryId, SearchProductBySavedQueryRequest body = default(SearchProductBySavedQueryRequest));
        /// <summary>
        /// Search for product - {SearchProductRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchResult</returns>
        SearchResult SearchProductRequestScopeIdCultureNameproductsPost(string accept, string scopeId, string cultureName, SearchProductRequest body = default(SearchProductRequest));

        /// <summary>
        /// Search for product - {SearchProductRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        ApiResponse<SearchResult> SearchProductRequestScopeIdCultureNameproductsPostWithHttpInfo(string accept, string scopeId, string cultureName, SearchProductRequest body = default(SearchProductRequest));
        /// <summary>
        /// Search for similar products - {SearchSimilarProductsRequest}
        /// </summary>
        /// <remarks>
        /// Search for similar products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned</param>
        /// <param name="productId">The product id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchResult</returns>
        SearchResult SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPost(string accept, string scopeId, string cultureName, string productId, SearchSimilarProductsRequest body = default(SearchSimilarProductsRequest));

        /// <summary>
        /// Search for similar products - {SearchSimilarProductsRequest}
        /// </summary>
        /// <remarks>
        /// Search for similar products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned</param>
        /// <param name="productId">The product id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        ApiResponse<SearchResult> SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPostWithHttpInfo(string accept, string scopeId, string cultureName, string productId, SearchSimilarProductsRequest body = default(SearchSimilarProductsRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds or updates the variant search configuration for the specified product definition. - {AddOrUpdateVariantSearchConfigurationRequest}
        /// </summary>
        /// <remarks>
        /// Adds or updates the variant search configuration for the specified product definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreateAsync(string accept, string scopeId, AddOrUpdateVariantSearchConfigurationRequest body = default(AddOrUpdateVariantSearchConfigurationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds or updates the variant search configuration for the specified product definition. - {AddOrUpdateVariantSearchConfigurationRequest}
        /// </summary>
        /// <remarks>
        /// Adds or updates the variant search configuration for the specified product definition.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreateWithHttpInfoAsync(string accept, string scopeId, AddOrUpdateVariantSearchConfigurationRequest body = default(AddOrUpdateVariantSearchConfigurationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Make a generic search - {AdvancedSearchRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="indexName">The required name of the index to query: [Products, Customers, Stores, Inventories, ...]. See orckestra.overture.solr section in web.config for the complete list.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResult</returns>
        System.Threading.Tasks.Task<SearchResult> AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePostAsync(string accept, string scopeId, string cultureName, string indexName, AdvancedSearchRequest body = default(AdvancedSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Make a generic search - {AdvancedSearchRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="indexName">The required name of the index to query: [Products, Customers, Stores, Inventories, ...]. See orckestra.overture.solr section in web.config for the complete list.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResult>> AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePostWithHttpInfoAsync(string accept, string scopeId, string cultureName, string indexName, AdvancedSearchRequest body = default(AdvancedSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the list of variant search configurations in the system. - {GetVariantSearchConfigurationsRequest}
        /// </summary>
        /// <remarks>
        /// Returns the list of variant search configurations in the system.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;VariantSearchConfiguration&gt;</returns>
        System.Threading.Tasks.Task<List<VariantSearchConfiguration>> GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the list of variant search configurations in the system. - {GetVariantSearchConfigurationsRequest}
        /// </summary>
        /// <remarks>
        /// Returns the list of variant search configurations in the system.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;VariantSearchConfiguration&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VariantSearchConfiguration>>> GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start the customers indexing durable task - {IndexCustomersRequest}
        /// </summary>
        /// <remarks>
        /// Start the customers indexing durable task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TaskInfo>> IndexCustomersRequestindexescustomersCreateAsync(string accept, IndexCustomersRequest body = default(IndexCustomersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start the customers indexing durable task - {IndexCustomersRequest}
        /// </summary>
        /// <remarks>
        /// Start the customers indexing durable task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskInfo>>> IndexCustomersRequestindexescustomersCreateWithHttpInfoAsync(string accept, IndexCustomersRequest body = default(IndexCustomersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start the inventories indexing durable task - {IndexInventoriesRequest}
        /// </summary>
        /// <remarks>
        /// Start the inventories indexing durable task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TaskInfo>> IndexInventoriesRequestindexesinventoriesCreateAsync(string accept, IndexInventoriesRequest body = default(IndexInventoriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start the inventories indexing durable task - {IndexInventoriesRequest}
        /// </summary>
        /// <remarks>
        /// Start the inventories indexing durable task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskInfo>>> IndexInventoriesRequestindexesinventoriesCreateWithHttpInfoAsync(string accept, IndexInventoriesRequest body = default(IndexInventoriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start the products indexing durable tasks - {IndexProductsRequest}
        /// </summary>
        /// <remarks>
        /// Start the products indexing durable tasks
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TaskInfo>> IndexProductsRequestindexesproductsCreateAsync(string accept, IndexProductsRequest body = default(IndexProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start the products indexing durable tasks - {IndexProductsRequest}
        /// </summary>
        /// <remarks>
        /// Start the products indexing durable tasks
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskInfo>>> IndexProductsRequestindexesproductsCreateWithHttpInfoAsync(string accept, IndexProductsRequest body = default(IndexProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start the stores indexing durable task - {IndexStoresRequest}
        /// </summary>
        /// <remarks>
        /// Start the stores indexing durable task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TaskInfo>> IndexStoresRequestindexesstoresCreateAsync(string accept, IndexStoresRequest body = default(IndexStoresRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start the stores indexing durable task - {IndexStoresRequest}
        /// </summary>
        /// <remarks>
        /// Start the stores indexing durable task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskInfo>>> IndexStoresRequestindexesstoresCreateWithHttpInfoAsync(string accept, IndexStoresRequest body = default(IndexStoresRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for products available in the inventory using an optional search query - {SearchAvailableProductsByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="categoryName">The name of the category</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchAvailableProductsByCategoryResponse</returns>
        System.Threading.Tasks.Task<SearchAvailableProductsByCategoryResponse> SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePostAsync(string accept, string scopeId, string cultureName, string categoryName, SearchAvailableProductsByCategoryRequest body = default(SearchAvailableProductsByCategoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for products available in the inventory using an optional search query - {SearchAvailableProductsByCategoryRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="categoryName">The name of the category</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchAvailableProductsByCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchAvailableProductsByCategoryResponse>> SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePostWithHttpInfoAsync(string accept, string scopeId, string cultureName, string categoryName, SearchAvailableProductsByCategoryRequest body = default(SearchAvailableProductsByCategoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for products available in the inventory - {SearchAvailableProductsRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductSearchResult</returns>
        System.Threading.Tasks.Task<ProductSearchResult> SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPostAsync(string accept, string scopeId, string cultureName, SearchAvailableProductsRequest body = default(SearchAvailableProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for products available in the inventory - {SearchAvailableProductsRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSearchResult>> SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPostWithHttpInfoAsync(string accept, string scopeId, string cultureName, SearchAvailableProductsRequest body = default(SearchAvailableProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search using a Search Query as a template - {SearchBySearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="queryName">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchQueryResult</returns>
        System.Threading.Tasks.Task<SearchQueryResult> SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePostAsync(string accept, string scopeId, string cultureName, string queryType, string queryName, SearchBySearchQueryRequest body = default(SearchBySearchQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search using a Search Query as a template - {SearchBySearchQueryRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="queryName">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchQueryResult>> SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePostWithHttpInfoAsync(string accept, string scopeId, string cultureName, string queryType, string queryName, SearchBySearchQueryRequest body = default(SearchBySearchQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for customers - {SearchCustomersRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResult</returns>
        System.Threading.Tasks.Task<SearchResult> SearchCustomersRequestScopeIdCultureNamecustomersPostAsync(string accept, string scopeId, string cultureName, SearchCustomersRequest body = default(SearchCustomersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for customers - {SearchCustomersRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResult>> SearchCustomersRequestScopeIdCultureNamecustomersPostWithHttpInfoAsync(string accept, string scopeId, string cultureName, SearchCustomersRequest body = default(SearchCustomersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search product by ids - {SearchProductByIdsRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResult</returns>
        System.Threading.Tasks.Task<SearchResult> SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPostAsync(string accept, string scopeId, string cultureName, SearchProductByIdsRequest body = default(SearchProductByIdsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search product by ids - {SearchProductByIdsRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResult>> SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPostWithHttpInfoAsync(string accept, string scopeId, string cultureName, SearchProductByIdsRequest body = default(SearchProductByIdsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search product by saved query - {SearchProductBySavedQueryRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryId">the id of the saved query to execute.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResult</returns>
        System.Threading.Tasks.Task<SearchResult> SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPostAsync(string accept, string scopeId, string cultureName, string queryId, SearchProductBySavedQueryRequest body = default(SearchProductBySavedQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search product by saved query - {SearchProductBySavedQueryRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryId">the id of the saved query to execute.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResult>> SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPostWithHttpInfoAsync(string accept, string scopeId, string cultureName, string queryId, SearchProductBySavedQueryRequest body = default(SearchProductBySavedQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for product - {SearchProductRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResult</returns>
        System.Threading.Tasks.Task<SearchResult> SearchProductRequestScopeIdCultureNameproductsPostAsync(string accept, string scopeId, string cultureName, SearchProductRequest body = default(SearchProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for product - {SearchProductRequest}
        /// </summary>
        /// <remarks>
        /// Execute a generic search against the search engine provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResult>> SearchProductRequestScopeIdCultureNameproductsPostWithHttpInfoAsync(string accept, string scopeId, string cultureName, SearchProductRequest body = default(SearchProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for similar products - {SearchSimilarProductsRequest}
        /// </summary>
        /// <remarks>
        /// Search for similar products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned</param>
        /// <param name="productId">The product id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResult</returns>
        System.Threading.Tasks.Task<SearchResult> SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPostAsync(string accept, string scopeId, string cultureName, string productId, SearchSimilarProductsRequest body = default(SearchSimilarProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for similar products - {SearchSimilarProductsRequest}
        /// </summary>
        /// <remarks>
        /// Search for similar products
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned</param>
        /// <param name="productId">The product id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResult>> SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPostWithHttpInfoAsync(string accept, string scopeId, string cultureName, string productId, SearchSimilarProductsRequest body = default(SearchSimilarProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : ISearchApiSync, ISearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SearchApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds or updates the variant search configuration for the specified product definition. - {AddOrUpdateVariantSearchConfigurationRequest} Adds or updates the variant search configuration for the specified product definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreate(string accept, string scopeId, AddOrUpdateVariantSearchConfigurationRequest body = default(AddOrUpdateVariantSearchConfigurationRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreateWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds or updates the variant search configuration for the specified product definition. - {AddOrUpdateVariantSearchConfigurationRequest} Adds or updates the variant search configuration for the specified product definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreateWithHttpInfo(string accept, string scopeId, AddOrUpdateVariantSearchConfigurationRequest body = default(AddOrUpdateVariantSearchConfigurationRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/search/{ScopeId}/configurations/variant", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds or updates the variant search configuration for the specified product definition. - {AddOrUpdateVariantSearchConfigurationRequest} Adds or updates the variant search configuration for the specified product definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreateAsync(string accept, string scopeId, AddOrUpdateVariantSearchConfigurationRequest body = default(AddOrUpdateVariantSearchConfigurationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = await AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreateWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds or updates the variant search configuration for the specified product definition. - {AddOrUpdateVariantSearchConfigurationRequest} Adds or updates the variant search configuration for the specified product definition.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string>> AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreateWithHttpInfoAsync(string accept, string scopeId, AddOrUpdateVariantSearchConfigurationRequest body = default(AddOrUpdateVariantSearchConfigurationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/search/{ScopeId}/configurations/variant", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateVariantSearchConfigurationRequestScopeIdconfigurationsvariantCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make a generic search - {AdvancedSearchRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="indexName">The required name of the index to query: [Products, Customers, Stores, Inventories, ...]. See orckestra.overture.solr section in web.config for the complete list.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchResult</returns>
        public SearchResult AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePost(string accept, string scopeId, string cultureName, string indexName, AdvancedSearchRequest body = default(AdvancedSearchRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> localVarResponse = AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePostWithHttpInfo(accept, scopeId, cultureName, indexName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make a generic search - {AdvancedSearchRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="indexName">The required name of the index to query: [Products, Customers, Stores, Inventories, ...]. See orckestra.overture.solr section in web.config for the complete list.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePostWithHttpInfo(string accept, string scopeId, string cultureName, string indexName, AdvancedSearchRequest body = default(AdvancedSearchRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePost");

            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchApi->AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.PathParameters.Add("IndexName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchResult>("/search/{ScopeId}/{CultureName}/advanced/{IndexName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make a generic search - {AdvancedSearchRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="indexName">The required name of the index to query: [Products, Customers, Stores, Inventories, ...]. See orckestra.overture.solr section in web.config for the complete list.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResult</returns>
        public async System.Threading.Tasks.Task<SearchResult> AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePostAsync(string accept, string scopeId, string cultureName, string indexName, AdvancedSearchRequest body = default(AdvancedSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> localVarResponse = await AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePostWithHttpInfoAsync(accept, scopeId, cultureName, indexName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make a generic search - {AdvancedSearchRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="indexName">The required name of the index to query: [Products, Customers, Stores, Inventories, ...]. See orckestra.overture.solr section in web.config for the complete list.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult>> AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePostWithHttpInfoAsync(string accept, string scopeId, string cultureName, string indexName, AdvancedSearchRequest body = default(AdvancedSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePost");

            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchApi->AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.PathParameters.Add("IndexName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResult>("/search/{ScopeId}/{CultureName}/advanced/{IndexName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdvancedSearchRequestScopeIdCultureNameadvancedIndexNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of variant search configurations in the system. - {GetVariantSearchConfigurationsRequest} Returns the list of variant search configurations in the system.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>List&lt;VariantSearchConfiguration&gt;</returns>
        public List<VariantSearchConfiguration> GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGet(string accept, string scopeId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<VariantSearchConfiguration>> localVarResponse = GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGetWithHttpInfo(accept, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of variant search configurations in the system. - {GetVariantSearchConfigurationsRequest} Returns the list of variant search configurations in the system.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>ApiResponse of List&lt;VariantSearchConfiguration&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<VariantSearchConfiguration>> GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGetWithHttpInfo(string accept, string scopeId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<VariantSearchConfiguration>>("/search/{ScopeId}/configurations/variant", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of variant search configurations in the system. - {GetVariantSearchConfigurationsRequest} Returns the list of variant search configurations in the system.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;VariantSearchConfiguration&gt;</returns>
        public async System.Threading.Tasks.Task<List<VariantSearchConfiguration>> GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<VariantSearchConfiguration>> localVarResponse = await GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGetWithHttpInfoAsync(accept, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of variant search configurations in the system. - {GetVariantSearchConfigurationsRequest} Returns the list of variant search configurations in the system.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;VariantSearchConfiguration&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<VariantSearchConfiguration>>> GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<VariantSearchConfiguration>>("/search/{ScopeId}/configurations/variant", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariantSearchConfigurationsRequestScopeIdconfigurationsvariantGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the customers indexing durable task - {IndexCustomersRequest} Start the customers indexing durable task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        public List<TaskInfo> IndexCustomersRequestindexescustomersCreate(string accept, IndexCustomersRequest body = default(IndexCustomersRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> localVarResponse = IndexCustomersRequestindexescustomersCreateWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start the customers indexing durable task - {IndexCustomersRequest} Start the customers indexing durable task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> IndexCustomersRequestindexescustomersCreateWithHttpInfo(string accept, IndexCustomersRequest body = default(IndexCustomersRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->IndexCustomersRequestindexescustomersCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<List<TaskInfo>>("/search/indexes/customers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexCustomersRequestindexescustomersCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the customers indexing durable task - {IndexCustomersRequest} Start the customers indexing durable task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskInfo>> IndexCustomersRequestindexescustomersCreateAsync(string accept, IndexCustomersRequest body = default(IndexCustomersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> localVarResponse = await IndexCustomersRequestindexescustomersCreateWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start the customers indexing durable task - {IndexCustomersRequest} Start the customers indexing durable task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>>> IndexCustomersRequestindexescustomersCreateWithHttpInfoAsync(string accept, IndexCustomersRequest body = default(IndexCustomersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->IndexCustomersRequestindexescustomersCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<List<TaskInfo>>("/search/indexes/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexCustomersRequestindexescustomersCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the inventories indexing durable task - {IndexInventoriesRequest} Start the inventories indexing durable task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        public List<TaskInfo> IndexInventoriesRequestindexesinventoriesCreate(string accept, IndexInventoriesRequest body = default(IndexInventoriesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> localVarResponse = IndexInventoriesRequestindexesinventoriesCreateWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start the inventories indexing durable task - {IndexInventoriesRequest} Start the inventories indexing durable task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> IndexInventoriesRequestindexesinventoriesCreateWithHttpInfo(string accept, IndexInventoriesRequest body = default(IndexInventoriesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->IndexInventoriesRequestindexesinventoriesCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<List<TaskInfo>>("/search/indexes/inventories", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexInventoriesRequestindexesinventoriesCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the inventories indexing durable task - {IndexInventoriesRequest} Start the inventories indexing durable task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskInfo>> IndexInventoriesRequestindexesinventoriesCreateAsync(string accept, IndexInventoriesRequest body = default(IndexInventoriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> localVarResponse = await IndexInventoriesRequestindexesinventoriesCreateWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start the inventories indexing durable task - {IndexInventoriesRequest} Start the inventories indexing durable task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>>> IndexInventoriesRequestindexesinventoriesCreateWithHttpInfoAsync(string accept, IndexInventoriesRequest body = default(IndexInventoriesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->IndexInventoriesRequestindexesinventoriesCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<List<TaskInfo>>("/search/indexes/inventories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexInventoriesRequestindexesinventoriesCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the products indexing durable tasks - {IndexProductsRequest} Start the products indexing durable tasks
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        public List<TaskInfo> IndexProductsRequestindexesproductsCreate(string accept, IndexProductsRequest body = default(IndexProductsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> localVarResponse = IndexProductsRequestindexesproductsCreateWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start the products indexing durable tasks - {IndexProductsRequest} Start the products indexing durable tasks
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> IndexProductsRequestindexesproductsCreateWithHttpInfo(string accept, IndexProductsRequest body = default(IndexProductsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->IndexProductsRequestindexesproductsCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<List<TaskInfo>>("/search/indexes/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexProductsRequestindexesproductsCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the products indexing durable tasks - {IndexProductsRequest} Start the products indexing durable tasks
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskInfo>> IndexProductsRequestindexesproductsCreateAsync(string accept, IndexProductsRequest body = default(IndexProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> localVarResponse = await IndexProductsRequestindexesproductsCreateWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start the products indexing durable tasks - {IndexProductsRequest} Start the products indexing durable tasks
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>>> IndexProductsRequestindexesproductsCreateWithHttpInfoAsync(string accept, IndexProductsRequest body = default(IndexProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->IndexProductsRequestindexesproductsCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<List<TaskInfo>>("/search/indexes/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexProductsRequestindexesproductsCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the stores indexing durable task - {IndexStoresRequest} Start the stores indexing durable task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        public List<TaskInfo> IndexStoresRequestindexesstoresCreate(string accept, IndexStoresRequest body = default(IndexStoresRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> localVarResponse = IndexStoresRequestindexesstoresCreateWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start the stores indexing durable task - {IndexStoresRequest} Start the stores indexing durable task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> IndexStoresRequestindexesstoresCreateWithHttpInfo(string accept, IndexStoresRequest body = default(IndexStoresRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->IndexStoresRequestindexesstoresCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<List<TaskInfo>>("/search/indexes/stores", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexStoresRequestindexesstoresCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start the stores indexing durable task - {IndexStoresRequest} Start the stores indexing durable task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskInfo>> IndexStoresRequestindexesstoresCreateAsync(string accept, IndexStoresRequest body = default(IndexStoresRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> localVarResponse = await IndexStoresRequestindexesstoresCreateWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start the stores indexing durable task - {IndexStoresRequest} Start the stores indexing durable task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>>> IndexStoresRequestindexesstoresCreateWithHttpInfoAsync(string accept, IndexStoresRequest body = default(IndexStoresRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->IndexStoresRequestindexesstoresCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<List<TaskInfo>>("/search/indexes/stores", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexStoresRequestindexesstoresCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for products available in the inventory using an optional search query - {SearchAvailableProductsByCategoryRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="categoryName">The name of the category</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchAvailableProductsByCategoryResponse</returns>
        public SearchAvailableProductsByCategoryResponse SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePost(string accept, string scopeId, string cultureName, string categoryName, SearchAvailableProductsByCategoryRequest body = default(SearchAvailableProductsByCategoryRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchAvailableProductsByCategoryResponse> localVarResponse = SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePostWithHttpInfo(accept, scopeId, cultureName, categoryName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for products available in the inventory using an optional search query - {SearchAvailableProductsByCategoryRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="categoryName">The name of the category</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchAvailableProductsByCategoryResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchAvailableProductsByCategoryResponse> SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePostWithHttpInfo(string accept, string scopeId, string cultureName, string categoryName, SearchAvailableProductsByCategoryRequest body = default(SearchAvailableProductsByCategoryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePost");

            // verify the required parameter 'categoryName' is set
            if (categoryName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryName' when calling SearchApi->SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchAvailableProductsByCategoryResponse>("/search/{ScopeId}/{CultureName}/availableProducts/byCategory/{CategoryName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for products available in the inventory using an optional search query - {SearchAvailableProductsByCategoryRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="categoryName">The name of the category</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchAvailableProductsByCategoryResponse</returns>
        public async System.Threading.Tasks.Task<SearchAvailableProductsByCategoryResponse> SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePostAsync(string accept, string scopeId, string cultureName, string categoryName, SearchAvailableProductsByCategoryRequest body = default(SearchAvailableProductsByCategoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchAvailableProductsByCategoryResponse> localVarResponse = await SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePostWithHttpInfoAsync(accept, scopeId, cultureName, categoryName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for products available in the inventory using an optional search query - {SearchAvailableProductsByCategoryRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="categoryName">The name of the category</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchAvailableProductsByCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchAvailableProductsByCategoryResponse>> SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePostWithHttpInfoAsync(string accept, string scopeId, string cultureName, string categoryName, SearchAvailableProductsByCategoryRequest body = default(SearchAvailableProductsByCategoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePost");

            // verify the required parameter 'categoryName' is set
            if (categoryName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'categoryName' when calling SearchApi->SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.PathParameters.Add("CategoryName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(categoryName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchAvailableProductsByCategoryResponse>("/search/{ScopeId}/{CultureName}/availableProducts/byCategory/{CategoryName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAvailableProductsByCategoryRequestScopeIdCultureNameavailableProductsbyCategoryCategoryNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for products available in the inventory - {SearchAvailableProductsRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProductSearchResult</returns>
        public ProductSearchResult SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPost(string accept, string scopeId, string cultureName, SearchAvailableProductsRequest body = default(SearchAvailableProductsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductSearchResult> localVarResponse = SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPostWithHttpInfo(accept, scopeId, cultureName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for products available in the inventory - {SearchAvailableProductsRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProductSearchResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductSearchResult> SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPostWithHttpInfo(string accept, string scopeId, string cultureName, SearchAvailableProductsRequest body = default(SearchAvailableProductsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductSearchResult>("/search/{ScopeId}/{CultureName}/availableProducts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for products available in the inventory - {SearchAvailableProductsRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductSearchResult</returns>
        public async System.Threading.Tasks.Task<ProductSearchResult> SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPostAsync(string accept, string scopeId, string cultureName, SearchAvailableProductsRequest body = default(SearchAvailableProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductSearchResult> localVarResponse = await SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPostWithHttpInfoAsync(accept, scopeId, cultureName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for products available in the inventory - {SearchAvailableProductsRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductSearchResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProductSearchResult>> SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPostWithHttpInfoAsync(string accept, string scopeId, string cultureName, SearchAvailableProductsRequest body = default(SearchAvailableProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductSearchResult>("/search/{ScopeId}/{CultureName}/availableProducts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAvailableProductsRequestScopeIdCultureNameavailableProductsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search using a Search Query as a template - {SearchBySearchQueryRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="queryName">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchQueryResult</returns>
        public SearchQueryResult SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost(string accept, string scopeId, string cultureName, string queryType, string queryName, SearchBySearchQueryRequest body = default(SearchBySearchQueryRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQueryResult> localVarResponse = SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePostWithHttpInfo(accept, scopeId, cultureName, queryType, queryName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search using a Search Query as a template - {SearchBySearchQueryRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="queryName">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQueryResult> SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePostWithHttpInfo(string accept, string scopeId, string cultureName, string queryType, string queryName, SearchBySearchQueryRequest body = default(SearchBySearchQueryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost");

            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryType' when calling SearchApi->SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost");

            // verify the required parameter 'queryName' is set
            if (queryName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryName' when calling SearchApi->SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryType)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchQueryResult>("/search/{ScopeId}/{CultureName}/bySearchQuery/{QueryType}/{QueryName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search using a Search Query as a template - {SearchBySearchQueryRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="queryName">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchQueryResult</returns>
        public async System.Threading.Tasks.Task<SearchQueryResult> SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePostAsync(string accept, string scopeId, string cultureName, string queryType, string queryName, SearchBySearchQueryRequest body = default(SearchBySearchQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQueryResult> localVarResponse = await SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePostWithHttpInfoAsync(accept, scopeId, cultureName, queryType, queryName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search using a Search Query as a template - {SearchBySearchQueryRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryType">The type of the requested search query</param>
        /// <param name="queryName">The name of the requested search query</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchQueryResult>> SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePostWithHttpInfoAsync(string accept, string scopeId, string cultureName, string queryType, string queryName, SearchBySearchQueryRequest body = default(SearchBySearchQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost");

            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryType' when calling SearchApi->SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost");

            // verify the required parameter 'queryName' is set
            if (queryName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryName' when calling SearchApi->SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryType)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchQueryResult>("/search/{ScopeId}/{CultureName}/bySearchQuery/{QueryType}/{QueryName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchBySearchQueryRequestScopeIdCultureNamebySearchQueryQueryTypeQueryNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for customers - {SearchCustomersRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchResult</returns>
        public SearchResult SearchCustomersRequestScopeIdCultureNamecustomersPost(string accept, string scopeId, string cultureName, SearchCustomersRequest body = default(SearchCustomersRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> localVarResponse = SearchCustomersRequestScopeIdCultureNamecustomersPostWithHttpInfo(accept, scopeId, cultureName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for customers - {SearchCustomersRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> SearchCustomersRequestScopeIdCultureNamecustomersPostWithHttpInfo(string accept, string scopeId, string cultureName, SearchCustomersRequest body = default(SearchCustomersRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchCustomersRequestScopeIdCultureNamecustomersPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchCustomersRequestScopeIdCultureNamecustomersPost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchCustomersRequestScopeIdCultureNamecustomersPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchResult>("/search/{ScopeId}/{CultureName}/customers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCustomersRequestScopeIdCultureNamecustomersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for customers - {SearchCustomersRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResult</returns>
        public async System.Threading.Tasks.Task<SearchResult> SearchCustomersRequestScopeIdCultureNamecustomersPostAsync(string accept, string scopeId, string cultureName, SearchCustomersRequest body = default(SearchCustomersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> localVarResponse = await SearchCustomersRequestScopeIdCultureNamecustomersPostWithHttpInfoAsync(accept, scopeId, cultureName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for customers - {SearchCustomersRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult>> SearchCustomersRequestScopeIdCultureNamecustomersPostWithHttpInfoAsync(string accept, string scopeId, string cultureName, SearchCustomersRequest body = default(SearchCustomersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchCustomersRequestScopeIdCultureNamecustomersPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchCustomersRequestScopeIdCultureNamecustomersPost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchCustomersRequestScopeIdCultureNamecustomersPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResult>("/search/{ScopeId}/{CultureName}/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCustomersRequestScopeIdCultureNamecustomersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search product by ids - {SearchProductByIdsRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchResult</returns>
        public SearchResult SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPost(string accept, string scopeId, string cultureName, SearchProductByIdsRequest body = default(SearchProductByIdsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> localVarResponse = SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPostWithHttpInfo(accept, scopeId, cultureName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search product by ids - {SearchProductByIdsRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPostWithHttpInfo(string accept, string scopeId, string cultureName, SearchProductByIdsRequest body = default(SearchProductByIdsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchResult>("/search/{ScopeId}/{CultureName}/products/byIds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search product by ids - {SearchProductByIdsRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResult</returns>
        public async System.Threading.Tasks.Task<SearchResult> SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPostAsync(string accept, string scopeId, string cultureName, SearchProductByIdsRequest body = default(SearchProductByIdsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> localVarResponse = await SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPostWithHttpInfoAsync(accept, scopeId, cultureName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search product by ids - {SearchProductByIdsRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult>> SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPostWithHttpInfoAsync(string accept, string scopeId, string cultureName, SearchProductByIdsRequest body = default(SearchProductByIdsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResult>("/search/{ScopeId}/{CultureName}/products/byIds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchProductByIdsRequestScopeIdCultureNameproductsbyIdsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search product by saved query - {SearchProductBySavedQueryRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryId">the id of the saved query to execute.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchResult</returns>
        public SearchResult SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPost(string accept, string scopeId, string cultureName, string queryId, SearchProductBySavedQueryRequest body = default(SearchProductBySavedQueryRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> localVarResponse = SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPostWithHttpInfo(accept, scopeId, cultureName, queryId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search product by saved query - {SearchProductBySavedQueryRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryId">the id of the saved query to execute.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPostWithHttpInfo(string accept, string scopeId, string cultureName, string queryId, SearchProductBySavedQueryRequest body = default(SearchProductBySavedQueryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPost");

            // verify the required parameter 'queryId' is set
            if (queryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryId' when calling SearchApi->SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchResult>("/search/{ScopeId}/{CultureName}/products/bySavedQuery/{QueryId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search product by saved query - {SearchProductBySavedQueryRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryId">the id of the saved query to execute.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResult</returns>
        public async System.Threading.Tasks.Task<SearchResult> SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPostAsync(string accept, string scopeId, string cultureName, string queryId, SearchProductBySavedQueryRequest body = default(SearchProductBySavedQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> localVarResponse = await SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPostWithHttpInfoAsync(accept, scopeId, cultureName, queryId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search product by saved query - {SearchProductBySavedQueryRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="queryId">the id of the saved query to execute.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult>> SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPostWithHttpInfoAsync(string accept, string scopeId, string cultureName, string queryId, SearchProductBySavedQueryRequest body = default(SearchProductBySavedQueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPost");

            // verify the required parameter 'queryId' is set
            if (queryId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'queryId' when calling SearchApi->SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.PathParameters.Add("QueryId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(queryId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResult>("/search/{ScopeId}/{CultureName}/products/bySavedQuery/{QueryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchProductBySavedQueryRequestScopeIdCultureNameproductsbySavedQueryQueryIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for product - {SearchProductRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchResult</returns>
        public SearchResult SearchProductRequestScopeIdCultureNameproductsPost(string accept, string scopeId, string cultureName, SearchProductRequest body = default(SearchProductRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> localVarResponse = SearchProductRequestScopeIdCultureNameproductsPostWithHttpInfo(accept, scopeId, cultureName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for product - {SearchProductRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> SearchProductRequestScopeIdCultureNameproductsPostWithHttpInfo(string accept, string scopeId, string cultureName, SearchProductRequest body = default(SearchProductRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchProductRequestScopeIdCultureNameproductsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchProductRequestScopeIdCultureNameproductsPost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchProductRequestScopeIdCultureNameproductsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchResult>("/search/{ScopeId}/{CultureName}/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchProductRequestScopeIdCultureNameproductsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for product - {SearchProductRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResult</returns>
        public async System.Threading.Tasks.Task<SearchResult> SearchProductRequestScopeIdCultureNameproductsPostAsync(string accept, string scopeId, string cultureName, SearchProductRequest body = default(SearchProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> localVarResponse = await SearchProductRequestScopeIdCultureNameproductsPostWithHttpInfoAsync(accept, scopeId, cultureName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for product - {SearchProductRequest} Execute a generic search against the search engine provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult>> SearchProductRequestScopeIdCultureNameproductsPostWithHttpInfoAsync(string accept, string scopeId, string cultureName, SearchProductRequest body = default(SearchProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchProductRequestScopeIdCultureNameproductsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchProductRequestScopeIdCultureNameproductsPost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchProductRequestScopeIdCultureNameproductsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResult>("/search/{ScopeId}/{CultureName}/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchProductRequestScopeIdCultureNameproductsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for similar products - {SearchSimilarProductsRequest} Search for similar products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned</param>
        /// <param name="productId">The product id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SearchResult</returns>
        public SearchResult SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPost(string accept, string scopeId, string cultureName, string productId, SearchSimilarProductsRequest body = default(SearchSimilarProductsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> localVarResponse = SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPostWithHttpInfo(accept, scopeId, cultureName, productId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for similar products - {SearchSimilarProductsRequest} Search for similar products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned</param>
        /// <param name="productId">The product id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPostWithHttpInfo(string accept, string scopeId, string cultureName, string productId, SearchSimilarProductsRequest body = default(SearchSimilarProductsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPost");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling SearchApi->SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchResult>("/search/{ScopeId}/{CultureName}/products/similar/{ProductId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for similar products - {SearchSimilarProductsRequest} Search for similar products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned</param>
        /// <param name="productId">The product id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResult</returns>
        public async System.Threading.Tasks.Task<SearchResult> SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPostAsync(string accept, string scopeId, string cultureName, string productId, SearchSimilarProductsRequest body = default(SearchSimilarProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult> localVarResponse = await SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPostWithHttpInfoAsync(accept, scopeId, cultureName, productId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for similar products - {SearchSimilarProductsRequest} Search for similar products
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned</param>
        /// <param name="productId">The product id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SearchResult>> SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPostWithHttpInfoAsync(string accept, string scopeId, string cultureName, string productId, SearchSimilarProductsRequest body = default(SearchSimilarProductsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SearchApi->SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling SearchApi->SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPost");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling SearchApi->SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPost");

            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling SearchApi->SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CultureName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cultureName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ProductId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResult>("/search/{ScopeId}/{CultureName}/products/similar/{ProductId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSimilarProductsRequestScopeIdCultureNameproductssimilarProductIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
