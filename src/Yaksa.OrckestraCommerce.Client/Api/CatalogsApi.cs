/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve all catalog children for a catalog - {GetCatalogChildrenIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all catalog children for a catalog
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The Id of the parent Catalog.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <returns>List&lt;Catalog&gt;</returns>
        List<Catalog> GetCatalogChildrenIdsRequestCatalogIdchildrenGet(string accept, string catalogId, string cultureName);

        /// <summary>
        /// Retrieve all catalog children for a catalog - {GetCatalogChildrenIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all catalog children for a catalog
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The Id of the parent Catalog.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <returns>ApiResponse of List&lt;Catalog&gt;</returns>
        ApiResponse<List<Catalog>> GetCatalogChildrenIdsRequestCatalogIdchildrenGetWithHttpInfo(string accept, string catalogId, string cultureName);
        /// <summary>
        /// Retrieve a catalog - {GetCatalogRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a catalog
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The CatalogId of the request.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="includeChildren">Indicates if the children must be included in the response. (optional)</param>
        /// <returns>Catalog</returns>
        Catalog GetCatalogRequestCatalogIdGet(string accept, string catalogId, string cultureName, bool? includeChildren = default(bool?));

        /// <summary>
        /// Retrieve a catalog - {GetCatalogRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a catalog
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The CatalogId of the request.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="includeChildren">Indicates if the children must be included in the response. (optional)</param>
        /// <returns>ApiResponse of Catalog</returns>
        ApiResponse<Catalog> GetCatalogRequestCatalogIdGetWithHttpInfo(string accept, string catalogId, string cultureName, bool? includeChildren = default(bool?));
        /// <summary>
        /// Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest}. This allows to know if a language is supported by a given Catalog. If it is, it will be returned as is, otherwise the &#39;closest&#39; language is returned. The &#39;closest&#39; language could be the same language but different country, if it is not supported the default language of the catalog is returned.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The ID of the catalog</param>
        /// <param name="language">The requested language</param>
        /// <returns>string</returns>
        string GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGet(string accept, string catalogId, string language);

        /// <summary>
        /// Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest}. This allows to know if a language is supported by a given Catalog. If it is, it will be returned as is, otherwise the &#39;closest&#39; language is returned. The &#39;closest&#39; language could be the same language but different country, if it is not supported the default language of the catalog is returned.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The ID of the catalog</param>
        /// <param name="language">The requested language</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGetWithHttpInfo(string accept, string catalogId, string language);
        /// <summary>
        /// Retrieve the list of cultures supported by product catalogs - {GetUsedLanguagesRequest}
        /// </summary>
        /// <remarks>
        /// Returns the list of cultures supported by product catalogs - {GetUsedLanguagesRequest}
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>CultureIsoList</returns>
        CultureIsoList GetUsedLanguagesRequestusedCulturesGet(string accept);

        /// <summary>
        /// Retrieve the list of cultures supported by product catalogs - {GetUsedLanguagesRequest}
        /// </summary>
        /// <remarks>
        /// Returns the list of cultures supported by product catalogs - {GetUsedLanguagesRequest}
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of CultureIsoList</returns>
        ApiResponse<CultureIsoList> GetUsedLanguagesRequestusedCulturesGetWithHttpInfo(string accept);
        /// <summary>
        /// Update a catalog - {UpdateCatalogRequest}
        /// </summary>
        /// <remarks>
        /// Update a catalog
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The unique identifier of the catalog to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Catalog</returns>
        Catalog UpdateCatalogRequestCatalogIdCreate(string accept, string catalogId, UpdateCatalogRequest body = default(UpdateCatalogRequest));

        /// <summary>
        /// Update a catalog - {UpdateCatalogRequest}
        /// </summary>
        /// <remarks>
        /// Update a catalog
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The unique identifier of the catalog to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Catalog</returns>
        ApiResponse<Catalog> UpdateCatalogRequestCatalogIdCreateWithHttpInfo(string accept, string catalogId, UpdateCatalogRequest body = default(UpdateCatalogRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve all catalog children for a catalog - {GetCatalogChildrenIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all catalog children for a catalog
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The Id of the parent Catalog.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Catalog&gt;</returns>
        System.Threading.Tasks.Task<List<Catalog>> GetCatalogChildrenIdsRequestCatalogIdchildrenGetAsync(string accept, string catalogId, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all catalog children for a catalog - {GetCatalogChildrenIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all catalog children for a catalog
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The Id of the parent Catalog.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Catalog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Catalog>>> GetCatalogChildrenIdsRequestCatalogIdchildrenGetWithHttpInfoAsync(string accept, string catalogId, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a catalog - {GetCatalogRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a catalog
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The CatalogId of the request.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="includeChildren">Indicates if the children must be included in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Catalog</returns>
        System.Threading.Tasks.Task<Catalog> GetCatalogRequestCatalogIdGetAsync(string accept, string catalogId, string cultureName, bool? includeChildren = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a catalog - {GetCatalogRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a catalog
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The CatalogId of the request.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="includeChildren">Indicates if the children must be included in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Catalog)</returns>
        System.Threading.Tasks.Task<ApiResponse<Catalog>> GetCatalogRequestCatalogIdGetWithHttpInfoAsync(string accept, string catalogId, string cultureName, bool? includeChildren = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest}. This allows to know if a language is supported by a given Catalog. If it is, it will be returned as is, otherwise the &#39;closest&#39; language is returned. The &#39;closest&#39; language could be the same language but different country, if it is not supported the default language of the catalog is returned.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The ID of the catalog</param>
        /// <param name="language">The requested language</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGetAsync(string accept, string catalogId, string language, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest}. This allows to know if a language is supported by a given Catalog. If it is, it will be returned as is, otherwise the &#39;closest&#39; language is returned. The &#39;closest&#39; language could be the same language but different country, if it is not supported the default language of the catalog is returned.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The ID of the catalog</param>
        /// <param name="language">The requested language</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGetWithHttpInfoAsync(string accept, string catalogId, string language, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the list of cultures supported by product catalogs - {GetUsedLanguagesRequest}
        /// </summary>
        /// <remarks>
        /// Returns the list of cultures supported by product catalogs - {GetUsedLanguagesRequest}
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CultureIsoList</returns>
        System.Threading.Tasks.Task<CultureIsoList> GetUsedLanguagesRequestusedCulturesGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the list of cultures supported by product catalogs - {GetUsedLanguagesRequest}
        /// </summary>
        /// <remarks>
        /// Returns the list of cultures supported by product catalogs - {GetUsedLanguagesRequest}
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CultureIsoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CultureIsoList>> GetUsedLanguagesRequestusedCulturesGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a catalog - {UpdateCatalogRequest}
        /// </summary>
        /// <remarks>
        /// Update a catalog
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The unique identifier of the catalog to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Catalog</returns>
        System.Threading.Tasks.Task<Catalog> UpdateCatalogRequestCatalogIdCreateAsync(string accept, string catalogId, UpdateCatalogRequest body = default(UpdateCatalogRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a catalog - {UpdateCatalogRequest}
        /// </summary>
        /// <remarks>
        /// Update a catalog
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The unique identifier of the catalog to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Catalog)</returns>
        System.Threading.Tasks.Task<ApiResponse<Catalog>> UpdateCatalogRequestCatalogIdCreateWithHttpInfoAsync(string accept, string catalogId, UpdateCatalogRequest body = default(UpdateCatalogRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogsApi : ICatalogsApiSync, ICatalogsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatalogsApi : ICatalogsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CatalogsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CatalogsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve all catalog children for a catalog - {GetCatalogChildrenIdsRequest} Retrieve all catalog children for a catalog
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The Id of the parent Catalog.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <returns>List&lt;Catalog&gt;</returns>
        public List<Catalog> GetCatalogChildrenIdsRequestCatalogIdchildrenGet(string accept, string catalogId, string cultureName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Catalog>> localVarResponse = GetCatalogChildrenIdsRequestCatalogIdchildrenGetWithHttpInfo(accept, catalogId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all catalog children for a catalog - {GetCatalogChildrenIdsRequest} Retrieve all catalog children for a catalog
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The Id of the parent Catalog.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <returns>ApiResponse of List&lt;Catalog&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Catalog>> GetCatalogChildrenIdsRequestCatalogIdchildrenGetWithHttpInfo(string accept, string catalogId, string cultureName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CatalogsApi->GetCatalogChildrenIdsRequestCatalogIdchildrenGet");

            // verify the required parameter 'catalogId' is set
            if (catalogId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'catalogId' when calling CatalogsApi->GetCatalogChildrenIdsRequestCatalogIdchildrenGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CatalogsApi->GetCatalogChildrenIdsRequestCatalogIdchildrenGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CatalogId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(catalogId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Catalog>>("/catalogs/{CatalogId}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCatalogChildrenIdsRequestCatalogIdchildrenGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all catalog children for a catalog - {GetCatalogChildrenIdsRequest} Retrieve all catalog children for a catalog
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The Id of the parent Catalog.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Catalog&gt;</returns>
        public async System.Threading.Tasks.Task<List<Catalog>> GetCatalogChildrenIdsRequestCatalogIdchildrenGetAsync(string accept, string catalogId, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Catalog>> localVarResponse = await GetCatalogChildrenIdsRequestCatalogIdchildrenGetWithHttpInfoAsync(accept, catalogId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all catalog children for a catalog - {GetCatalogChildrenIdsRequest} Retrieve all catalog children for a catalog
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The Id of the parent Catalog.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Catalog&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Catalog>>> GetCatalogChildrenIdsRequestCatalogIdchildrenGetWithHttpInfoAsync(string accept, string catalogId, string cultureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CatalogsApi->GetCatalogChildrenIdsRequestCatalogIdchildrenGet");

            // verify the required parameter 'catalogId' is set
            if (catalogId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'catalogId' when calling CatalogsApi->GetCatalogChildrenIdsRequestCatalogIdchildrenGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CatalogsApi->GetCatalogChildrenIdsRequestCatalogIdchildrenGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CatalogId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(catalogId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Catalog>>("/catalogs/{CatalogId}/children", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCatalogChildrenIdsRequestCatalogIdchildrenGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a catalog - {GetCatalogRequest} Retrieve a catalog
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The CatalogId of the request.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="includeChildren">Indicates if the children must be included in the response. (optional)</param>
        /// <returns>Catalog</returns>
        public Catalog GetCatalogRequestCatalogIdGet(string accept, string catalogId, string cultureName, bool? includeChildren = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Catalog> localVarResponse = GetCatalogRequestCatalogIdGetWithHttpInfo(accept, catalogId, cultureName, includeChildren);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a catalog - {GetCatalogRequest} Retrieve a catalog
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The CatalogId of the request.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="includeChildren">Indicates if the children must be included in the response. (optional)</param>
        /// <returns>ApiResponse of Catalog</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Catalog> GetCatalogRequestCatalogIdGetWithHttpInfo(string accept, string catalogId, string cultureName, bool? includeChildren = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CatalogsApi->GetCatalogRequestCatalogIdGet");

            // verify the required parameter 'catalogId' is set
            if (catalogId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'catalogId' when calling CatalogsApi->GetCatalogRequestCatalogIdGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CatalogsApi->GetCatalogRequestCatalogIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CatalogId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(catalogId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            if (includeChildren != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildren", includeChildren));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Catalog>("/catalogs/{CatalogId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCatalogRequestCatalogIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a catalog - {GetCatalogRequest} Retrieve a catalog
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The CatalogId of the request.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="includeChildren">Indicates if the children must be included in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Catalog</returns>
        public async System.Threading.Tasks.Task<Catalog> GetCatalogRequestCatalogIdGetAsync(string accept, string catalogId, string cultureName, bool? includeChildren = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Catalog> localVarResponse = await GetCatalogRequestCatalogIdGetWithHttpInfoAsync(accept, catalogId, cultureName, includeChildren, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a catalog - {GetCatalogRequest} Retrieve a catalog
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The CatalogId of the request.</param>
        /// <param name="cultureName">The name of the culture (language) to use to process the request.</param>
        /// <param name="includeChildren">Indicates if the children must be included in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Catalog)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Catalog>> GetCatalogRequestCatalogIdGetWithHttpInfoAsync(string accept, string catalogId, string cultureName, bool? includeChildren = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CatalogsApi->GetCatalogRequestCatalogIdGet");

            // verify the required parameter 'catalogId' is set
            if (catalogId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'catalogId' when calling CatalogsApi->GetCatalogRequestCatalogIdGet");

            // verify the required parameter 'cultureName' is set
            if (cultureName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cultureName' when calling CatalogsApi->GetCatalogRequestCatalogIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CatalogId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(catalogId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            if (includeChildren != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildren", includeChildren));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Catalog>("/catalogs/{CatalogId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCatalogRequestCatalogIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest} Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest}. This allows to know if a language is supported by a given Catalog. If it is, it will be returned as is, otherwise the &#39;closest&#39; language is returned. The &#39;closest&#39; language could be the same language but different country, if it is not supported the default language of the catalog is returned.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The ID of the catalog</param>
        /// <param name="language">The requested language</param>
        /// <returns>string</returns>
        public string GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGet(string accept, string catalogId, string language)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGetWithHttpInfo(accept, catalogId, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest} Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest}. This allows to know if a language is supported by a given Catalog. If it is, it will be returned as is, otherwise the &#39;closest&#39; language is returned. The &#39;closest&#39; language could be the same language but different country, if it is not supported the default language of the catalog is returned.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The ID of the catalog</param>
        /// <param name="language">The requested language</param>
        /// <returns>ApiResponse of string</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGetWithHttpInfo(string accept, string catalogId, string language)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CatalogsApi->GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGet");

            // verify the required parameter 'catalogId' is set
            if (catalogId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'catalogId' when calling CatalogsApi->GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGet");

            // verify the required parameter 'language' is set
            if (language == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'language' when calling CatalogsApi->GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CatalogId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(catalogId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Language", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/catalogs/closestlanguage/{CatalogId}/{Language}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest} Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest}. This allows to know if a language is supported by a given Catalog. If it is, it will be returned as is, otherwise the &#39;closest&#39; language is returned. The &#39;closest&#39; language could be the same language but different country, if it is not supported the default language of the catalog is returned.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The ID of the catalog</param>
        /// <param name="language">The requested language</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGetAsync(string accept, string catalogId, string language, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = await GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGetWithHttpInfoAsync(accept, catalogId, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest} Retrieve the &#39;closest&#39; language supported by a catalog from the requested language - {GetClosestCatalogLanguageRequest}. This allows to know if a language is supported by a given Catalog. If it is, it will be returned as is, otherwise the &#39;closest&#39; language is returned. The &#39;closest&#39; language could be the same language but different country, if it is not supported the default language of the catalog is returned.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The ID of the catalog</param>
        /// <param name="language">The requested language</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string>> GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGetWithHttpInfoAsync(string accept, string catalogId, string language, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CatalogsApi->GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGet");

            // verify the required parameter 'catalogId' is set
            if (catalogId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'catalogId' when calling CatalogsApi->GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGet");

            // verify the required parameter 'language' is set
            if (language == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'language' when calling CatalogsApi->GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CatalogId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(catalogId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Language", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/catalogs/closestlanguage/{CatalogId}/{Language}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClosestCatalogLanguageRequestclosestlanguageCatalogIdLanguageGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the list of cultures supported by product catalogs - {GetUsedLanguagesRequest} Returns the list of cultures supported by product catalogs - {GetUsedLanguagesRequest}
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>CultureIsoList</returns>
        public CultureIsoList GetUsedLanguagesRequestusedCulturesGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CultureIsoList> localVarResponse = GetUsedLanguagesRequestusedCulturesGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the list of cultures supported by product catalogs - {GetUsedLanguagesRequest} Returns the list of cultures supported by product catalogs - {GetUsedLanguagesRequest}
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of CultureIsoList</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CultureIsoList> GetUsedLanguagesRequestusedCulturesGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CatalogsApi->GetUsedLanguagesRequestusedCulturesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CultureIsoList>("/catalogs/usedCultures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsedLanguagesRequestusedCulturesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the list of cultures supported by product catalogs - {GetUsedLanguagesRequest} Returns the list of cultures supported by product catalogs - {GetUsedLanguagesRequest}
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CultureIsoList</returns>
        public async System.Threading.Tasks.Task<CultureIsoList> GetUsedLanguagesRequestusedCulturesGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CultureIsoList> localVarResponse = await GetUsedLanguagesRequestusedCulturesGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the list of cultures supported by product catalogs - {GetUsedLanguagesRequest} Returns the list of cultures supported by product catalogs - {GetUsedLanguagesRequest}
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CultureIsoList)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CultureIsoList>> GetUsedLanguagesRequestusedCulturesGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CatalogsApi->GetUsedLanguagesRequestusedCulturesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CultureIsoList>("/catalogs/usedCultures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsedLanguagesRequestusedCulturesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a catalog - {UpdateCatalogRequest} Update a catalog
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The unique identifier of the catalog to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Catalog</returns>
        public Catalog UpdateCatalogRequestCatalogIdCreate(string accept, string catalogId, UpdateCatalogRequest body = default(UpdateCatalogRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Catalog> localVarResponse = UpdateCatalogRequestCatalogIdCreateWithHttpInfo(accept, catalogId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a catalog - {UpdateCatalogRequest} Update a catalog
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The unique identifier of the catalog to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Catalog</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Catalog> UpdateCatalogRequestCatalogIdCreateWithHttpInfo(string accept, string catalogId, UpdateCatalogRequest body = default(UpdateCatalogRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CatalogsApi->UpdateCatalogRequestCatalogIdCreate");

            // verify the required parameter 'catalogId' is set
            if (catalogId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'catalogId' when calling CatalogsApi->UpdateCatalogRequestCatalogIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CatalogId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(catalogId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Catalog>("/catalogs/{CatalogId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCatalogRequestCatalogIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a catalog - {UpdateCatalogRequest} Update a catalog
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The unique identifier of the catalog to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Catalog</returns>
        public async System.Threading.Tasks.Task<Catalog> UpdateCatalogRequestCatalogIdCreateAsync(string accept, string catalogId, UpdateCatalogRequest body = default(UpdateCatalogRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Catalog> localVarResponse = await UpdateCatalogRequestCatalogIdCreateWithHttpInfoAsync(accept, catalogId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a catalog - {UpdateCatalogRequest} Update a catalog
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="catalogId">The unique identifier of the catalog to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Catalog)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Catalog>> UpdateCatalogRequestCatalogIdCreateWithHttpInfoAsync(string accept, string catalogId, UpdateCatalogRequest body = default(UpdateCatalogRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CatalogsApi->UpdateCatalogRequestCatalogIdCreate");

            // verify the required parameter 'catalogId' is set
            if (catalogId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'catalogId' when calling CatalogsApi->UpdateCatalogRequestCatalogIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CatalogId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(catalogId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Catalog>("/catalogs/{CatalogId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCatalogRequestCatalogIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
