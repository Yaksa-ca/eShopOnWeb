/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add or update a campaign - {AddOrUpdateCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Add or update a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        Campaign AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreate(string accept, string scopeId, string campaignId, AddOrUpdateCampaignRequest body = default(AddOrUpdateCampaignRequest));

        /// <summary>
        /// Add or update a campaign - {AddOrUpdateCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Add or update a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreateWithHttpInfo(string accept, string scopeId, string campaignId, AddOrUpdateCampaignRequest body = default(AddOrUpdateCampaignRequest));
        /// <summary>
        /// Cancel a Campaign - {CancelCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Cancel a Campaign. The status will be changed to Canceled.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        Campaign CancelCampaignRequestScopeIdIdcancelPost(string accept, string scopeId, string id, Object body = default(Object));

        /// <summary>
        /// Cancel a Campaign - {CancelCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Cancel a Campaign. The status will be changed to Canceled.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> CancelCampaignRequestScopeIdIdcancelPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object));
        /// <summary>
        /// Copy a campaign - {CopyCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Copy a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fromCampaignId">The id of the campaign</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        Campaign CopyCampaignRequestScopeIdFromCampaignIdcopyPost(string accept, string scopeId, string fromCampaignId, CopyCampaignRequest body = default(CopyCampaignRequest));

        /// <summary>
        /// Copy a campaign - {CopyCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Copy a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fromCampaignId">The id of the campaign</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> CopyCampaignRequestScopeIdFromCampaignIdcopyPostWithHttpInfo(string accept, string scopeId, string fromCampaignId, CopyCampaignRequest body = default(CopyCampaignRequest));
        /// <summary>
        /// Create a campaign - {CreateCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Create a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        Campaign CreateCampaignRequestScopeIdPost(string accept, string scopeId, CreateCampaignRequest body = default(CreateCampaignRequest));

        /// <summary>
        /// Create a campaign - {CreateCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Create a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> CreateCampaignRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateCampaignRequest body = default(CreateCampaignRequest));
        /// <summary>
        /// Add a promotion to an existing campaign - {CreatePromotionRequest}
        /// </summary>
        /// <remarks>
        /// Add a promotion to an existing campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Promotion</returns>
        Promotion CreatePromotionRequestScopeIdCampaignIdpromotionsPost(string accept, string scopeId, string campaignId, CreatePromotionRequest body = default(CreatePromotionRequest));

        /// <summary>
        /// Add a promotion to an existing campaign - {CreatePromotionRequest}
        /// </summary>
        /// <remarks>
        /// Add a promotion to an existing campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Promotion</returns>
        ApiResponse<Promotion> CreatePromotionRequestScopeIdCampaignIdpromotionsPostWithHttpInfo(string accept, string scopeId, string campaignId, CreatePromotionRequest body = default(CreatePromotionRequest));
        /// <summary>
        /// Delete the specified promotion - {DeletePromotionRequest}
        /// </summary>
        /// <remarks>
        /// Delete the specified promotion
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to delete</param>
        /// <returns></returns>
        void DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDelete(string accept, string scopeId, string campaignId, string promotionId);

        /// <summary>
        /// Delete the specified promotion - {DeletePromotionRequest}
        /// </summary>
        /// <remarks>
        /// Delete the specified promotion
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDeleteWithHttpInfo(string accept, string scopeId, string campaignId, string promotionId);
        /// <summary>
        /// Search for campaigns. - {FindCampaignsRequest}
        /// </summary>
        /// <remarks>
        /// Search for campaigns. The search results do not return the promotions associated with the campaigns.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CampaignQueryResult</returns>
        CampaignQueryResult FindCampaignsRequestScopeIdfindPost(string accept, string scopeId, FindCampaignsRequest body = default(FindCampaignsRequest));

        /// <summary>
        /// Search for campaigns. - {FindCampaignsRequest}
        /// </summary>
        /// <remarks>
        /// Search for campaigns. The search results do not return the promotions associated with the campaigns.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CampaignQueryResult</returns>
        ApiResponse<CampaignQueryResult> FindCampaignsRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindCampaignsRequest body = default(FindCampaignsRequest));
        /// <summary>
        /// Retrieve the promotions of a campaign - {GetCampaignPromotionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the promotions of a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotions should be validated (only applicable if IncludePromotions is True) (optional)</param>
        /// <returns>List&lt;Promotion&gt;</returns>
        List<Promotion> GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGet(string accept, string scopeId, string campaignId, bool? validateTargeting = default(bool?));

        /// <summary>
        /// Retrieve the promotions of a campaign - {GetCampaignPromotionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the promotions of a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotions should be validated (only applicable if IncludePromotions is True) (optional)</param>
        /// <returns>ApiResponse of List&lt;Promotion&gt;</returns>
        ApiResponse<List<Promotion>> GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGetWithHttpInfo(string accept, string scopeId, string campaignId, bool? validateTargeting = default(bool?));
        /// <summary>
        /// Retrieve a campaign - {GetCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="includePromotions">Indicates whether the promotions be fully loaded. (optional)</param>
        /// <returns>Campaign</returns>
        Campaign GetCampaignRequestScopeIdCampaignIdGet(string accept, string scopeId, string campaignId, bool? includePromotions = default(bool?));

        /// <summary>
        /// Retrieve a campaign - {GetCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="includePromotions">Indicates whether the promotions be fully loaded. (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> GetCampaignRequestScopeIdCampaignIdGetWithHttpInfo(string accept, string scopeId, string campaignId, bool? includePromotions = default(bool?));
        /// <summary>
        /// Retrieve a list of campaigns by ids - {GetCampaignsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaigns by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignIds">Gets or sets the ids of the campaigns to retrieve.</param>
        /// <returns>List&lt;Campaign&gt;</returns>
        List<Campaign> GetCampaignsRequestScopeIdbyIdsCampaignIdsGet(string accept, string scopeId, List<string> campaignIds);

        /// <summary>
        /// Retrieve a list of campaigns by ids - {GetCampaignsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaigns by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignIds">Gets or sets the ids of the campaigns to retrieve.</param>
        /// <returns>ApiResponse of List&lt;Campaign&gt;</returns>
        ApiResponse<List<Campaign>> GetCampaignsRequestScopeIdbyIdsCampaignIdsGetWithHttpInfo(string accept, string scopeId, List<string> campaignIds);
        /// <summary>
        /// Retrieve a list of live campaigns - {GetLiveCampaignsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of live campaigns.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="effectiveDateTime">The date time at which the campaign must be effective. (optional)</param>
        /// <param name="includePromotions">Indicates whether to include promotions of retrieved campaigns. (optional)</param>
        /// <returns>List&lt;Campaign&gt;</returns>
        List<Campaign> GetLiveCampaignsRequestScopeIdgetliveGet(string accept, string scopeId, DateTime? effectiveDateTime = default(DateTime?), bool? includePromotions = default(bool?));

        /// <summary>
        /// Retrieve a list of live campaigns - {GetLiveCampaignsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of live campaigns.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="effectiveDateTime">The date time at which the campaign must be effective. (optional)</param>
        /// <param name="includePromotions">Indicates whether to include promotions of retrieved campaigns. (optional)</param>
        /// <returns>ApiResponse of List&lt;Campaign&gt;</returns>
        ApiResponse<List<Campaign>> GetLiveCampaignsRequestScopeIdgetliveGetWithHttpInfo(string accept, string scopeId, DateTime? effectiveDateTime = default(DateTime?), bool? includePromotions = default(bool?));
        /// <summary>
        /// Retrieve a promotion - {GetPromotionRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a promotion
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotion should be validated (optional)</param>
        /// <returns>Promotion</returns>
        Promotion GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGet(string accept, string scopeId, string campaignId, string promotionId, bool? validateTargeting = default(bool?));

        /// <summary>
        /// Retrieve a promotion - {GetPromotionRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a promotion
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotion should be validated (optional)</param>
        /// <returns>ApiResponse of Promotion</returns>
        ApiResponse<Promotion> GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGetWithHttpInfo(string accept, string scopeId, string campaignId, string promotionId, bool? validateTargeting = default(bool?));
        /// <summary>
        /// Retrieve the summaries of all promotions of a campaign - {GetPromotionSummariesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the summaries of all promotions of a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign</param>
        /// <returns>PromotionSummaries</returns>
        PromotionSummaries GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGet(string accept, string scopeId, string campaignId);

        /// <summary>
        /// Retrieve the summaries of all promotions of a campaign - {GetPromotionSummariesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the summaries of all promotions of a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign</param>
        /// <returns>ApiResponse of PromotionSummaries</returns>
        ApiResponse<PromotionSummaries> GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGetWithHttpInfo(string accept, string scopeId, string campaignId);
        /// <summary>
        /// Pause a Campaign - {PauseCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Pause a Campaign. The status will be changed to Paused.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        Campaign PauseCampaignRequestScopeIdIdpausePost(string accept, string scopeId, string id, Object body = default(Object));

        /// <summary>
        /// Pause a Campaign - {PauseCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Pause a Campaign. The status will be changed to Paused.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> PauseCampaignRequestScopeIdIdpausePostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object));
        /// <summary>
        /// Publish a Campaign - {PublishCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Publish a Campaign. The status will be changed to Ready or Live, depending on its processing
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        Campaign PublishCampaignRequestScopeIdIdpublishPost(string accept, string scopeId, string id, Object body = default(Object));

        /// <summary>
        /// Publish a Campaign - {PublishCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Publish a Campaign. The status will be changed to Ready or Live, depending on its processing
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> PublishCampaignRequestScopeIdIdpublishPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object));
        /// <summary>
        /// Reject a Campaign - {RejectCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Reject a Campaign. The status will be changed to Rejected.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        Campaign RejectCampaignRequestScopeIdIdrejectPost(string accept, string scopeId, string id, Object body = default(Object));

        /// <summary>
        /// Reject a Campaign - {RejectCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Reject a Campaign. The status will be changed to Rejected.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> RejectCampaignRequestScopeIdIdrejectPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object));
        /// <summary>
        /// Submit a Campaign - {SubmitCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Submit a Campaign. The status will be changed to PendingApproval.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        Campaign SubmitCampaignRequestScopeIdIdsubmitPost(string accept, string scopeId, string id, Object body = default(Object));

        /// <summary>
        /// Submit a Campaign - {SubmitCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Submit a Campaign. The status will be changed to PendingApproval.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> SubmitCampaignRequestScopeIdIdsubmitPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object));
        /// <summary>
        /// Update a campaign - {UpdateCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Update a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        Campaign UpdateCampaignRequestScopeIdIdCreate(string accept, string scopeId, string id, UpdateCampaignRequest body = default(UpdateCampaignRequest));

        /// <summary>
        /// Update a campaign - {UpdateCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Update a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> UpdateCampaignRequestScopeIdIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdateCampaignRequest body = default(UpdateCampaignRequest));
        /// <summary>
        /// Update the status of a campaign - {UpdateCampaignStatusRequest}
        /// </summary>
        /// <remarks>
        /// Update the status of a campaign. The possible values are Ready, Paused, PendingApproval, Rejected, Cancelled. Live and Obsolete are computed values, so it is useless to use those statuses, use Ready instead. The status is updated without checking the campaign workflow (for example the campaign does not have to be paused before requesting its cancellation).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        Campaign UpdateCampaignStatusRequestScopeIdIdstatusCreate(string accept, string scopeId, string id, UpdateCampaignStatusRequest body = default(UpdateCampaignStatusRequest));

        /// <summary>
        /// Update the status of a campaign - {UpdateCampaignStatusRequest}
        /// </summary>
        /// <remarks>
        /// Update the status of a campaign. The possible values are Ready, Paused, PendingApproval, Rejected, Cancelled. Live and Obsolete are computed values, so it is useless to use those statuses, use Ready instead. The status is updated without checking the campaign workflow (for example the campaign does not have to be paused before requesting its cancellation).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> UpdateCampaignStatusRequestScopeIdIdstatusCreateWithHttpInfo(string accept, string scopeId, string id, UpdateCampaignStatusRequest body = default(UpdateCampaignStatusRequest));
        /// <summary>
        /// Update an existing promotion - {UpdatePromotionRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing promotion
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to be updated</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Promotion</returns>
        Promotion UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreate(string accept, string scopeId, string campaignId, string promotionId, UpdatePromotionRequest body = default(UpdatePromotionRequest));

        /// <summary>
        /// Update an existing promotion - {UpdatePromotionRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing promotion
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to be updated</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Promotion</returns>
        ApiResponse<Promotion> UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreateWithHttpInfo(string accept, string scopeId, string campaignId, string promotionId, UpdatePromotionRequest body = default(UpdatePromotionRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add or update a campaign - {AddOrUpdateCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Add or update a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreateAsync(string accept, string scopeId, string campaignId, AddOrUpdateCampaignRequest body = default(AddOrUpdateCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or update a campaign - {AddOrUpdateCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Add or update a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreateWithHttpInfoAsync(string accept, string scopeId, string campaignId, AddOrUpdateCampaignRequest body = default(AddOrUpdateCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel a Campaign - {CancelCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Cancel a Campaign. The status will be changed to Canceled.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> CancelCampaignRequestScopeIdIdcancelPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel a Campaign - {CancelCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Cancel a Campaign. The status will be changed to Canceled.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> CancelCampaignRequestScopeIdIdcancelPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy a campaign - {CopyCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Copy a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fromCampaignId">The id of the campaign</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> CopyCampaignRequestScopeIdFromCampaignIdcopyPostAsync(string accept, string scopeId, string fromCampaignId, CopyCampaignRequest body = default(CopyCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy a campaign - {CopyCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Copy a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fromCampaignId">The id of the campaign</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> CopyCampaignRequestScopeIdFromCampaignIdcopyPostWithHttpInfoAsync(string accept, string scopeId, string fromCampaignId, CopyCampaignRequest body = default(CopyCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a campaign - {CreateCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Create a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> CreateCampaignRequestScopeIdPostAsync(string accept, string scopeId, CreateCampaignRequest body = default(CreateCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a campaign - {CreateCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Create a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> CreateCampaignRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateCampaignRequest body = default(CreateCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a promotion to an existing campaign - {CreatePromotionRequest}
        /// </summary>
        /// <remarks>
        /// Add a promotion to an existing campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Promotion</returns>
        System.Threading.Tasks.Task<Promotion> CreatePromotionRequestScopeIdCampaignIdpromotionsPostAsync(string accept, string scopeId, string campaignId, CreatePromotionRequest body = default(CreatePromotionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a promotion to an existing campaign - {CreatePromotionRequest}
        /// </summary>
        /// <remarks>
        /// Add a promotion to an existing campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Promotion)</returns>
        System.Threading.Tasks.Task<ApiResponse<Promotion>> CreatePromotionRequestScopeIdCampaignIdpromotionsPostWithHttpInfoAsync(string accept, string scopeId, string campaignId, CreatePromotionRequest body = default(CreatePromotionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the specified promotion - {DeletePromotionRequest}
        /// </summary>
        /// <remarks>
        /// Delete the specified promotion
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDeleteAsync(string accept, string scopeId, string campaignId, string promotionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the specified promotion - {DeletePromotionRequest}
        /// </summary>
        /// <remarks>
        /// Delete the specified promotion
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDeleteWithHttpInfoAsync(string accept, string scopeId, string campaignId, string promotionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for campaigns. - {FindCampaignsRequest}
        /// </summary>
        /// <remarks>
        /// Search for campaigns. The search results do not return the promotions associated with the campaigns.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignQueryResult</returns>
        System.Threading.Tasks.Task<CampaignQueryResult> FindCampaignsRequestScopeIdfindPostAsync(string accept, string scopeId, FindCampaignsRequest body = default(FindCampaignsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for campaigns. - {FindCampaignsRequest}
        /// </summary>
        /// <remarks>
        /// Search for campaigns. The search results do not return the promotions associated with the campaigns.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignQueryResult>> FindCampaignsRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindCampaignsRequest body = default(FindCampaignsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the promotions of a campaign - {GetCampaignPromotionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the promotions of a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotions should be validated (only applicable if IncludePromotions is True) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Promotion&gt;</returns>
        System.Threading.Tasks.Task<List<Promotion>> GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGetAsync(string accept, string scopeId, string campaignId, bool? validateTargeting = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the promotions of a campaign - {GetCampaignPromotionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the promotions of a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotions should be validated (only applicable if IncludePromotions is True) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Promotion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Promotion>>> GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGetWithHttpInfoAsync(string accept, string scopeId, string campaignId, bool? validateTargeting = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a campaign - {GetCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="includePromotions">Indicates whether the promotions be fully loaded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> GetCampaignRequestScopeIdCampaignIdGetAsync(string accept, string scopeId, string campaignId, bool? includePromotions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a campaign - {GetCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="includePromotions">Indicates whether the promotions be fully loaded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> GetCampaignRequestScopeIdCampaignIdGetWithHttpInfoAsync(string accept, string scopeId, string campaignId, bool? includePromotions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of campaigns by ids - {GetCampaignsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaigns by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignIds">Gets or sets the ids of the campaigns to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Campaign&gt;</returns>
        System.Threading.Tasks.Task<List<Campaign>> GetCampaignsRequestScopeIdbyIdsCampaignIdsGetAsync(string accept, string scopeId, List<string> campaignIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of campaigns by ids - {GetCampaignsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaigns by ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignIds">Gets or sets the ids of the campaigns to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Campaign&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Campaign>>> GetCampaignsRequestScopeIdbyIdsCampaignIdsGetWithHttpInfoAsync(string accept, string scopeId, List<string> campaignIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of live campaigns - {GetLiveCampaignsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of live campaigns.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="effectiveDateTime">The date time at which the campaign must be effective. (optional)</param>
        /// <param name="includePromotions">Indicates whether to include promotions of retrieved campaigns. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Campaign&gt;</returns>
        System.Threading.Tasks.Task<List<Campaign>> GetLiveCampaignsRequestScopeIdgetliveGetAsync(string accept, string scopeId, DateTime? effectiveDateTime = default(DateTime?), bool? includePromotions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of live campaigns - {GetLiveCampaignsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of live campaigns.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="effectiveDateTime">The date time at which the campaign must be effective. (optional)</param>
        /// <param name="includePromotions">Indicates whether to include promotions of retrieved campaigns. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Campaign&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Campaign>>> GetLiveCampaignsRequestScopeIdgetliveGetWithHttpInfoAsync(string accept, string scopeId, DateTime? effectiveDateTime = default(DateTime?), bool? includePromotions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a promotion - {GetPromotionRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a promotion
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotion should be validated (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Promotion</returns>
        System.Threading.Tasks.Task<Promotion> GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGetAsync(string accept, string scopeId, string campaignId, string promotionId, bool? validateTargeting = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a promotion - {GetPromotionRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a promotion
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotion should be validated (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Promotion)</returns>
        System.Threading.Tasks.Task<ApiResponse<Promotion>> GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGetWithHttpInfoAsync(string accept, string scopeId, string campaignId, string promotionId, bool? validateTargeting = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the summaries of all promotions of a campaign - {GetPromotionSummariesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the summaries of all promotions of a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionSummaries</returns>
        System.Threading.Tasks.Task<PromotionSummaries> GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGetAsync(string accept, string scopeId, string campaignId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the summaries of all promotions of a campaign - {GetPromotionSummariesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the summaries of all promotions of a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionSummaries)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionSummaries>> GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGetWithHttpInfoAsync(string accept, string scopeId, string campaignId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pause a Campaign - {PauseCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Pause a Campaign. The status will be changed to Paused.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> PauseCampaignRequestScopeIdIdpausePostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pause a Campaign - {PauseCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Pause a Campaign. The status will be changed to Paused.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> PauseCampaignRequestScopeIdIdpausePostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Publish a Campaign - {PublishCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Publish a Campaign. The status will be changed to Ready or Live, depending on its processing
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> PublishCampaignRequestScopeIdIdpublishPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Publish a Campaign - {PublishCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Publish a Campaign. The status will be changed to Ready or Live, depending on its processing
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> PublishCampaignRequestScopeIdIdpublishPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject a Campaign - {RejectCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Reject a Campaign. The status will be changed to Rejected.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> RejectCampaignRequestScopeIdIdrejectPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject a Campaign - {RejectCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Reject a Campaign. The status will be changed to Rejected.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> RejectCampaignRequestScopeIdIdrejectPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit a Campaign - {SubmitCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Submit a Campaign. The status will be changed to PendingApproval.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> SubmitCampaignRequestScopeIdIdsubmitPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit a Campaign - {SubmitCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Submit a Campaign. The status will be changed to PendingApproval.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> SubmitCampaignRequestScopeIdIdsubmitPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a campaign - {UpdateCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Update a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> UpdateCampaignRequestScopeIdIdCreateAsync(string accept, string scopeId, string id, UpdateCampaignRequest body = default(UpdateCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a campaign - {UpdateCampaignRequest}
        /// </summary>
        /// <remarks>
        /// Update a campaign
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> UpdateCampaignRequestScopeIdIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateCampaignRequest body = default(UpdateCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the status of a campaign - {UpdateCampaignStatusRequest}
        /// </summary>
        /// <remarks>
        /// Update the status of a campaign. The possible values are Ready, Paused, PendingApproval, Rejected, Cancelled. Live and Obsolete are computed values, so it is useless to use those statuses, use Ready instead. The status is updated without checking the campaign workflow (for example the campaign does not have to be paused before requesting its cancellation).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> UpdateCampaignStatusRequestScopeIdIdstatusCreateAsync(string accept, string scopeId, string id, UpdateCampaignStatusRequest body = default(UpdateCampaignStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the status of a campaign - {UpdateCampaignStatusRequest}
        /// </summary>
        /// <remarks>
        /// Update the status of a campaign. The possible values are Ready, Paused, PendingApproval, Rejected, Cancelled. Live and Obsolete are computed values, so it is useless to use those statuses, use Ready instead. The status is updated without checking the campaign workflow (for example the campaign does not have to be paused before requesting its cancellation).
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> UpdateCampaignStatusRequestScopeIdIdstatusCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateCampaignStatusRequest body = default(UpdateCampaignStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing promotion - {UpdatePromotionRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing promotion
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to be updated</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Promotion</returns>
        System.Threading.Tasks.Task<Promotion> UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreateAsync(string accept, string scopeId, string campaignId, string promotionId, UpdatePromotionRequest body = default(UpdatePromotionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing promotion - {UpdatePromotionRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing promotion
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to be updated</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Promotion)</returns>
        System.Threading.Tasks.Task<ApiResponse<Promotion>> UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreateWithHttpInfoAsync(string accept, string scopeId, string campaignId, string promotionId, UpdatePromotionRequest body = default(UpdatePromotionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignsApi : ICampaignsApiSync, ICampaignsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CampaignsApi : ICampaignsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CampaignsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CampaignsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CampaignsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CampaignsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add or update a campaign - {AddOrUpdateCampaignRequest} Add or update a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        public Campaign AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreate(string accept, string scopeId, string campaignId, AddOrUpdateCampaignRequest body = default(AddOrUpdateCampaignRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreateWithHttpInfo(accept, scopeId, campaignId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update a campaign - {AddOrUpdateCampaignRequest} Add or update a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreateWithHttpInfo(string accept, string scopeId, string campaignId, AddOrUpdateCampaignRequest body = default(AddOrUpdateCampaignRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreate");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Campaign>("/campaigns/{ScopeId}/{CampaignId}/full", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update a campaign - {AddOrUpdateCampaignRequest} Add or update a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreateAsync(string accept, string scopeId, string campaignId, AddOrUpdateCampaignRequest body = default(AddOrUpdateCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = await AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreateWithHttpInfoAsync(accept, scopeId, campaignId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update a campaign - {AddOrUpdateCampaignRequest} Add or update a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign>> AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreateWithHttpInfoAsync(string accept, string scopeId, string campaignId, AddOrUpdateCampaignRequest body = default(AddOrUpdateCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreate");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Campaign>("/campaigns/{ScopeId}/{CampaignId}/full", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateCampaignRequestScopeIdCampaignIdfullCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a Campaign - {CancelCampaignRequest} Cancel a Campaign. The status will be changed to Canceled.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        public Campaign CancelCampaignRequestScopeIdIdcancelPost(string accept, string scopeId, string id, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = CancelCampaignRequestScopeIdIdcancelPostWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a Campaign - {CancelCampaignRequest} Cancel a Campaign. The status will be changed to Canceled.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> CancelCampaignRequestScopeIdIdcancelPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->CancelCampaignRequestScopeIdIdcancelPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->CancelCampaignRequestScopeIdIdcancelPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->CancelCampaignRequestScopeIdIdcancelPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Campaign>("/campaigns/{ScopeId}/{Id}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelCampaignRequestScopeIdIdcancelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a Campaign - {CancelCampaignRequest} Cancel a Campaign. The status will be changed to Canceled.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> CancelCampaignRequestScopeIdIdcancelPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = await CancelCampaignRequestScopeIdIdcancelPostWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a Campaign - {CancelCampaignRequest} Cancel a Campaign. The status will be changed to Canceled.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign>> CancelCampaignRequestScopeIdIdcancelPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->CancelCampaignRequestScopeIdIdcancelPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->CancelCampaignRequestScopeIdIdcancelPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->CancelCampaignRequestScopeIdIdcancelPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Campaign>("/campaigns/{ScopeId}/{Id}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelCampaignRequestScopeIdIdcancelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a campaign - {CopyCampaignRequest} Copy a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fromCampaignId">The id of the campaign</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        public Campaign CopyCampaignRequestScopeIdFromCampaignIdcopyPost(string accept, string scopeId, string fromCampaignId, CopyCampaignRequest body = default(CopyCampaignRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = CopyCampaignRequestScopeIdFromCampaignIdcopyPostWithHttpInfo(accept, scopeId, fromCampaignId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a campaign - {CopyCampaignRequest} Copy a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fromCampaignId">The id of the campaign</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> CopyCampaignRequestScopeIdFromCampaignIdcopyPostWithHttpInfo(string accept, string scopeId, string fromCampaignId, CopyCampaignRequest body = default(CopyCampaignRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->CopyCampaignRequestScopeIdFromCampaignIdcopyPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->CopyCampaignRequestScopeIdFromCampaignIdcopyPost");

            // verify the required parameter 'fromCampaignId' is set
            if (fromCampaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fromCampaignId' when calling CampaignsApi->CopyCampaignRequestScopeIdFromCampaignIdcopyPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FromCampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fromCampaignId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Campaign>("/campaigns/{ScopeId}/{FromCampaignId}/copy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyCampaignRequestScopeIdFromCampaignIdcopyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a campaign - {CopyCampaignRequest} Copy a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fromCampaignId">The id of the campaign</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> CopyCampaignRequestScopeIdFromCampaignIdcopyPostAsync(string accept, string scopeId, string fromCampaignId, CopyCampaignRequest body = default(CopyCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = await CopyCampaignRequestScopeIdFromCampaignIdcopyPostWithHttpInfoAsync(accept, scopeId, fromCampaignId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a campaign - {CopyCampaignRequest} Copy a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fromCampaignId">The id of the campaign</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign>> CopyCampaignRequestScopeIdFromCampaignIdcopyPostWithHttpInfoAsync(string accept, string scopeId, string fromCampaignId, CopyCampaignRequest body = default(CopyCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->CopyCampaignRequestScopeIdFromCampaignIdcopyPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->CopyCampaignRequestScopeIdFromCampaignIdcopyPost");

            // verify the required parameter 'fromCampaignId' is set
            if (fromCampaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fromCampaignId' when calling CampaignsApi->CopyCampaignRequestScopeIdFromCampaignIdcopyPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FromCampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fromCampaignId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Campaign>("/campaigns/{ScopeId}/{FromCampaignId}/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyCampaignRequestScopeIdFromCampaignIdcopyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a campaign - {CreateCampaignRequest} Create a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        public Campaign CreateCampaignRequestScopeIdPost(string accept, string scopeId, CreateCampaignRequest body = default(CreateCampaignRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = CreateCampaignRequestScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a campaign - {CreateCampaignRequest} Create a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> CreateCampaignRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateCampaignRequest body = default(CreateCampaignRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->CreateCampaignRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->CreateCampaignRequestScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Campaign>("/campaigns/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCampaignRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a campaign - {CreateCampaignRequest} Create a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> CreateCampaignRequestScopeIdPostAsync(string accept, string scopeId, CreateCampaignRequest body = default(CreateCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = await CreateCampaignRequestScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a campaign - {CreateCampaignRequest} Create a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign>> CreateCampaignRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateCampaignRequest body = default(CreateCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->CreateCampaignRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->CreateCampaignRequestScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Campaign>("/campaigns/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCampaignRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a promotion to an existing campaign - {CreatePromotionRequest} Add a promotion to an existing campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Promotion</returns>
        public Promotion CreatePromotionRequestScopeIdCampaignIdpromotionsPost(string accept, string scopeId, string campaignId, CreatePromotionRequest body = default(CreatePromotionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Promotion> localVarResponse = CreatePromotionRequestScopeIdCampaignIdpromotionsPostWithHttpInfo(accept, scopeId, campaignId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a promotion to an existing campaign - {CreatePromotionRequest} Add a promotion to an existing campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Promotion</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Promotion> CreatePromotionRequestScopeIdCampaignIdpromotionsPostWithHttpInfo(string accept, string scopeId, string campaignId, CreatePromotionRequest body = default(CreatePromotionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->CreatePromotionRequestScopeIdCampaignIdpromotionsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->CreatePromotionRequestScopeIdCampaignIdpromotionsPost");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->CreatePromotionRequestScopeIdCampaignIdpromotionsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Promotion>("/campaigns/{ScopeId}/{CampaignId}/promotions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePromotionRequestScopeIdCampaignIdpromotionsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a promotion to an existing campaign - {CreatePromotionRequest} Add a promotion to an existing campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Promotion</returns>
        public async System.Threading.Tasks.Task<Promotion> CreatePromotionRequestScopeIdCampaignIdpromotionsPostAsync(string accept, string scopeId, string campaignId, CreatePromotionRequest body = default(CreatePromotionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Promotion> localVarResponse = await CreatePromotionRequestScopeIdCampaignIdpromotionsPostWithHttpInfoAsync(accept, scopeId, campaignId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a promotion to an existing campaign - {CreatePromotionRequest} Add a promotion to an existing campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Promotion)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Promotion>> CreatePromotionRequestScopeIdCampaignIdpromotionsPostWithHttpInfoAsync(string accept, string scopeId, string campaignId, CreatePromotionRequest body = default(CreatePromotionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->CreatePromotionRequestScopeIdCampaignIdpromotionsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->CreatePromotionRequestScopeIdCampaignIdpromotionsPost");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->CreatePromotionRequestScopeIdCampaignIdpromotionsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Promotion>("/campaigns/{ScopeId}/{CampaignId}/promotions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePromotionRequestScopeIdCampaignIdpromotionsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the specified promotion - {DeletePromotionRequest} Delete the specified promotion
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to delete</param>
        /// <returns></returns>
        public void DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDelete(string accept, string scopeId, string campaignId, string promotionId)
        {
            DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDeleteWithHttpInfo(accept, scopeId, campaignId, promotionId);
        }

        /// <summary>
        /// Delete the specified promotion - {DeletePromotionRequest} Delete the specified promotion
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDeleteWithHttpInfo(string accept, string scopeId, string campaignId, string promotionId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDelete");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDelete");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling CampaignsApi->DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/campaigns/{ScopeId}/{CampaignId}/promotions/{PromotionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the specified promotion - {DeletePromotionRequest} Delete the specified promotion
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDeleteAsync(string accept, string scopeId, string campaignId, string promotionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDeleteWithHttpInfoAsync(accept, scopeId, campaignId, promotionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete the specified promotion - {DeletePromotionRequest} Delete the specified promotion
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDeleteWithHttpInfoAsync(string accept, string scopeId, string campaignId, string promotionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDelete");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDelete");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling CampaignsApi->DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/campaigns/{ScopeId}/{CampaignId}/promotions/{PromotionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePromotionRequestScopeIdCampaignIdpromotionsPromotionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for campaigns. - {FindCampaignsRequest} Search for campaigns. The search results do not return the promotions associated with the campaigns.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CampaignQueryResult</returns>
        public CampaignQueryResult FindCampaignsRequestScopeIdfindPost(string accept, string scopeId, FindCampaignsRequest body = default(FindCampaignsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CampaignQueryResult> localVarResponse = FindCampaignsRequestScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for campaigns. - {FindCampaignsRequest} Search for campaigns. The search results do not return the promotions associated with the campaigns.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CampaignQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CampaignQueryResult> FindCampaignsRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindCampaignsRequest body = default(FindCampaignsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->FindCampaignsRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->FindCampaignsRequestScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CampaignQueryResult>("/campaigns/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCampaignsRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for campaigns. - {FindCampaignsRequest} Search for campaigns. The search results do not return the promotions associated with the campaigns.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignQueryResult</returns>
        public async System.Threading.Tasks.Task<CampaignQueryResult> FindCampaignsRequestScopeIdfindPostAsync(string accept, string scopeId, FindCampaignsRequest body = default(FindCampaignsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CampaignQueryResult> localVarResponse = await FindCampaignsRequestScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for campaigns. - {FindCampaignsRequest} Search for campaigns. The search results do not return the promotions associated with the campaigns.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CampaignQueryResult>> FindCampaignsRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindCampaignsRequest body = default(FindCampaignsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->FindCampaignsRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->FindCampaignsRequestScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CampaignQueryResult>("/campaigns/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCampaignsRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the promotions of a campaign - {GetCampaignPromotionsRequest} Retrieve the promotions of a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotions should be validated (only applicable if IncludePromotions is True) (optional)</param>
        /// <returns>List&lt;Promotion&gt;</returns>
        public List<Promotion> GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGet(string accept, string scopeId, string campaignId, bool? validateTargeting = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Promotion>> localVarResponse = GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGetWithHttpInfo(accept, scopeId, campaignId, validateTargeting);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the promotions of a campaign - {GetCampaignPromotionsRequest} Retrieve the promotions of a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotions should be validated (only applicable if IncludePromotions is True) (optional)</param>
        /// <returns>ApiResponse of List&lt;Promotion&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Promotion>> GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGetWithHttpInfo(string accept, string scopeId, string campaignId, bool? validateTargeting = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGet");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (validateTargeting != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ValidateTargeting", validateTargeting));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Promotion>>("/campaigns/{ScopeId}/{CampaignId}/promotions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the promotions of a campaign - {GetCampaignPromotionsRequest} Retrieve the promotions of a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotions should be validated (only applicable if IncludePromotions is True) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Promotion&gt;</returns>
        public async System.Threading.Tasks.Task<List<Promotion>> GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGetAsync(string accept, string scopeId, string campaignId, bool? validateTargeting = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Promotion>> localVarResponse = await GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGetWithHttpInfoAsync(accept, scopeId, campaignId, validateTargeting, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the promotions of a campaign - {GetCampaignPromotionsRequest} Retrieve the promotions of a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotions should be validated (only applicable if IncludePromotions is True) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Promotion&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Promotion>>> GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGetWithHttpInfoAsync(string accept, string scopeId, string campaignId, bool? validateTargeting = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGet");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (validateTargeting != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ValidateTargeting", validateTargeting));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Promotion>>("/campaigns/{ScopeId}/{CampaignId}/promotions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignPromotionsRequestScopeIdCampaignIdpromotionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a campaign - {GetCampaignRequest} Retrieve a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="includePromotions">Indicates whether the promotions be fully loaded. (optional)</param>
        /// <returns>Campaign</returns>
        public Campaign GetCampaignRequestScopeIdCampaignIdGet(string accept, string scopeId, string campaignId, bool? includePromotions = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = GetCampaignRequestScopeIdCampaignIdGetWithHttpInfo(accept, scopeId, campaignId, includePromotions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a campaign - {GetCampaignRequest} Retrieve a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="includePromotions">Indicates whether the promotions be fully loaded. (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> GetCampaignRequestScopeIdCampaignIdGetWithHttpInfo(string accept, string scopeId, string campaignId, bool? includePromotions = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->GetCampaignRequestScopeIdCampaignIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->GetCampaignRequestScopeIdCampaignIdGet");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->GetCampaignRequestScopeIdCampaignIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (includePromotions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePromotions", includePromotions));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Campaign>("/campaigns/{ScopeId}/{CampaignId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignRequestScopeIdCampaignIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a campaign - {GetCampaignRequest} Retrieve a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="includePromotions">Indicates whether the promotions be fully loaded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> GetCampaignRequestScopeIdCampaignIdGetAsync(string accept, string scopeId, string campaignId, bool? includePromotions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = await GetCampaignRequestScopeIdCampaignIdGetWithHttpInfoAsync(accept, scopeId, campaignId, includePromotions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a campaign - {GetCampaignRequest} Retrieve a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign to retrieve.</param>
        /// <param name="includePromotions">Indicates whether the promotions be fully loaded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign>> GetCampaignRequestScopeIdCampaignIdGetWithHttpInfoAsync(string accept, string scopeId, string campaignId, bool? includePromotions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->GetCampaignRequestScopeIdCampaignIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->GetCampaignRequestScopeIdCampaignIdGet");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->GetCampaignRequestScopeIdCampaignIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (includePromotions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePromotions", includePromotions));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Campaign>("/campaigns/{ScopeId}/{CampaignId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignRequestScopeIdCampaignIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of campaigns by ids - {GetCampaignsRequest} Retrieve a list of campaigns by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignIds">Gets or sets the ids of the campaigns to retrieve.</param>
        /// <returns>List&lt;Campaign&gt;</returns>
        public List<Campaign> GetCampaignsRequestScopeIdbyIdsCampaignIdsGet(string accept, string scopeId, List<string> campaignIds)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Campaign>> localVarResponse = GetCampaignsRequestScopeIdbyIdsCampaignIdsGetWithHttpInfo(accept, scopeId, campaignIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of campaigns by ids - {GetCampaignsRequest} Retrieve a list of campaigns by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignIds">Gets or sets the ids of the campaigns to retrieve.</param>
        /// <returns>ApiResponse of List&lt;Campaign&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Campaign>> GetCampaignsRequestScopeIdbyIdsCampaignIdsGetWithHttpInfo(string accept, string scopeId, List<string> campaignIds)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->GetCampaignsRequestScopeIdbyIdsCampaignIdsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->GetCampaignsRequestScopeIdbyIdsCampaignIdsGet");

            // verify the required parameter 'campaignIds' is set
            if (campaignIds == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignIds' when calling CampaignsApi->GetCampaignsRequestScopeIdbyIdsCampaignIdsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignIds", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignIds)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Campaign>>("/campaigns/{ScopeId}/byIds/{CampaignIds}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignsRequestScopeIdbyIdsCampaignIdsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of campaigns by ids - {GetCampaignsRequest} Retrieve a list of campaigns by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignIds">Gets or sets the ids of the campaigns to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Campaign&gt;</returns>
        public async System.Threading.Tasks.Task<List<Campaign>> GetCampaignsRequestScopeIdbyIdsCampaignIdsGetAsync(string accept, string scopeId, List<string> campaignIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Campaign>> localVarResponse = await GetCampaignsRequestScopeIdbyIdsCampaignIdsGetWithHttpInfoAsync(accept, scopeId, campaignIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of campaigns by ids - {GetCampaignsRequest} Retrieve a list of campaigns by ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignIds">Gets or sets the ids of the campaigns to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Campaign&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Campaign>>> GetCampaignsRequestScopeIdbyIdsCampaignIdsGetWithHttpInfoAsync(string accept, string scopeId, List<string> campaignIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->GetCampaignsRequestScopeIdbyIdsCampaignIdsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->GetCampaignsRequestScopeIdbyIdsCampaignIdsGet");

            // verify the required parameter 'campaignIds' is set
            if (campaignIds == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignIds' when calling CampaignsApi->GetCampaignsRequestScopeIdbyIdsCampaignIdsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignIds", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignIds)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Campaign>>("/campaigns/{ScopeId}/byIds/{CampaignIds}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignsRequestScopeIdbyIdsCampaignIdsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of live campaigns - {GetLiveCampaignsRequest} Retrieve a list of live campaigns.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="effectiveDateTime">The date time at which the campaign must be effective. (optional)</param>
        /// <param name="includePromotions">Indicates whether to include promotions of retrieved campaigns. (optional)</param>
        /// <returns>List&lt;Campaign&gt;</returns>
        public List<Campaign> GetLiveCampaignsRequestScopeIdgetliveGet(string accept, string scopeId, DateTime? effectiveDateTime = default(DateTime?), bool? includePromotions = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Campaign>> localVarResponse = GetLiveCampaignsRequestScopeIdgetliveGetWithHttpInfo(accept, scopeId, effectiveDateTime, includePromotions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of live campaigns - {GetLiveCampaignsRequest} Retrieve a list of live campaigns.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="effectiveDateTime">The date time at which the campaign must be effective. (optional)</param>
        /// <param name="includePromotions">Indicates whether to include promotions of retrieved campaigns. (optional)</param>
        /// <returns>ApiResponse of List&lt;Campaign&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Campaign>> GetLiveCampaignsRequestScopeIdgetliveGetWithHttpInfo(string accept, string scopeId, DateTime? effectiveDateTime = default(DateTime?), bool? includePromotions = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->GetLiveCampaignsRequestScopeIdgetliveGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->GetLiveCampaignsRequestScopeIdgetliveGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (effectiveDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "EffectiveDateTime", effectiveDateTime));
            }
            if (includePromotions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePromotions", includePromotions));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Campaign>>("/campaigns/{ScopeId}/getlive", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiveCampaignsRequestScopeIdgetliveGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of live campaigns - {GetLiveCampaignsRequest} Retrieve a list of live campaigns.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="effectiveDateTime">The date time at which the campaign must be effective. (optional)</param>
        /// <param name="includePromotions">Indicates whether to include promotions of retrieved campaigns. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Campaign&gt;</returns>
        public async System.Threading.Tasks.Task<List<Campaign>> GetLiveCampaignsRequestScopeIdgetliveGetAsync(string accept, string scopeId, DateTime? effectiveDateTime = default(DateTime?), bool? includePromotions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Campaign>> localVarResponse = await GetLiveCampaignsRequestScopeIdgetliveGetWithHttpInfoAsync(accept, scopeId, effectiveDateTime, includePromotions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of live campaigns - {GetLiveCampaignsRequest} Retrieve a list of live campaigns.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="effectiveDateTime">The date time at which the campaign must be effective. (optional)</param>
        /// <param name="includePromotions">Indicates whether to include promotions of retrieved campaigns. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Campaign&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Campaign>>> GetLiveCampaignsRequestScopeIdgetliveGetWithHttpInfoAsync(string accept, string scopeId, DateTime? effectiveDateTime = default(DateTime?), bool? includePromotions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->GetLiveCampaignsRequestScopeIdgetliveGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->GetLiveCampaignsRequestScopeIdgetliveGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (effectiveDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "EffectiveDateTime", effectiveDateTime));
            }
            if (includePromotions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludePromotions", includePromotions));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Campaign>>("/campaigns/{ScopeId}/getlive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiveCampaignsRequestScopeIdgetliveGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a promotion - {GetPromotionRequest} Retrieve a promotion
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotion should be validated (optional)</param>
        /// <returns>Promotion</returns>
        public Promotion GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGet(string accept, string scopeId, string campaignId, string promotionId, bool? validateTargeting = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Promotion> localVarResponse = GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGetWithHttpInfo(accept, scopeId, campaignId, promotionId, validateTargeting);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a promotion - {GetPromotionRequest} Retrieve a promotion
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotion should be validated (optional)</param>
        /// <returns>ApiResponse of Promotion</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Promotion> GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGetWithHttpInfo(string accept, string scopeId, string campaignId, string promotionId, bool? validateTargeting = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGet");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGet");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling CampaignsApi->GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            if (validateTargeting != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ValidateTargeting", validateTargeting));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Promotion>("/campaigns/{ScopeId}/{CampaignId}/promotions/{PromotionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a promotion - {GetPromotionRequest} Retrieve a promotion
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotion should be validated (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Promotion</returns>
        public async System.Threading.Tasks.Task<Promotion> GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGetAsync(string accept, string scopeId, string campaignId, string promotionId, bool? validateTargeting = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Promotion> localVarResponse = await GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGetWithHttpInfoAsync(accept, scopeId, campaignId, promotionId, validateTargeting, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a promotion - {GetPromotionRequest} Retrieve a promotion
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the promotion should be validated (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Promotion)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Promotion>> GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGetWithHttpInfoAsync(string accept, string scopeId, string campaignId, string promotionId, bool? validateTargeting = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGet");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGet");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling CampaignsApi->GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            if (validateTargeting != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ValidateTargeting", validateTargeting));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Promotion>("/campaigns/{ScopeId}/{CampaignId}/promotions/{PromotionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPromotionRequestScopeIdCampaignIdpromotionsPromotionIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the summaries of all promotions of a campaign - {GetPromotionSummariesRequest} Retrieve the summaries of all promotions of a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign</param>
        /// <returns>PromotionSummaries</returns>
        public PromotionSummaries GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGet(string accept, string scopeId, string campaignId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PromotionSummaries> localVarResponse = GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGetWithHttpInfo(accept, scopeId, campaignId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the summaries of all promotions of a campaign - {GetPromotionSummariesRequest} Retrieve the summaries of all promotions of a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign</param>
        /// <returns>ApiResponse of PromotionSummaries</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PromotionSummaries> GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGetWithHttpInfo(string accept, string scopeId, string campaignId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGet");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PromotionSummaries>("/campaigns/{ScopeId}/{CampaignId}/promotions/summaries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the summaries of all promotions of a campaign - {GetPromotionSummariesRequest} Retrieve the summaries of all promotions of a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionSummaries</returns>
        public async System.Threading.Tasks.Task<PromotionSummaries> GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGetAsync(string accept, string scopeId, string campaignId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PromotionSummaries> localVarResponse = await GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGetWithHttpInfoAsync(accept, scopeId, campaignId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the summaries of all promotions of a campaign - {GetPromotionSummariesRequest} Retrieve the summaries of all promotions of a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionSummaries)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<PromotionSummaries>> GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGetWithHttpInfoAsync(string accept, string scopeId, string campaignId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGet");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PromotionSummaries>("/campaigns/{ScopeId}/{CampaignId}/promotions/summaries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPromotionSummariesRequestScopeIdCampaignIdpromotionssummariesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause a Campaign - {PauseCampaignRequest} Pause a Campaign. The status will be changed to Paused.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        public Campaign PauseCampaignRequestScopeIdIdpausePost(string accept, string scopeId, string id, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = PauseCampaignRequestScopeIdIdpausePostWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause a Campaign - {PauseCampaignRequest} Pause a Campaign. The status will be changed to Paused.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> PauseCampaignRequestScopeIdIdpausePostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->PauseCampaignRequestScopeIdIdpausePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->PauseCampaignRequestScopeIdIdpausePost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->PauseCampaignRequestScopeIdIdpausePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Campaign>("/campaigns/{ScopeId}/{Id}/pause", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseCampaignRequestScopeIdIdpausePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause a Campaign - {PauseCampaignRequest} Pause a Campaign. The status will be changed to Paused.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> PauseCampaignRequestScopeIdIdpausePostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = await PauseCampaignRequestScopeIdIdpausePostWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause a Campaign - {PauseCampaignRequest} Pause a Campaign. The status will be changed to Paused.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign>> PauseCampaignRequestScopeIdIdpausePostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->PauseCampaignRequestScopeIdIdpausePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->PauseCampaignRequestScopeIdIdpausePost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->PauseCampaignRequestScopeIdIdpausePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Campaign>("/campaigns/{ScopeId}/{Id}/pause", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseCampaignRequestScopeIdIdpausePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a Campaign - {PublishCampaignRequest} Publish a Campaign. The status will be changed to Ready or Live, depending on its processing
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        public Campaign PublishCampaignRequestScopeIdIdpublishPost(string accept, string scopeId, string id, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = PublishCampaignRequestScopeIdIdpublishPostWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Publish a Campaign - {PublishCampaignRequest} Publish a Campaign. The status will be changed to Ready or Live, depending on its processing
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> PublishCampaignRequestScopeIdIdpublishPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->PublishCampaignRequestScopeIdIdpublishPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->PublishCampaignRequestScopeIdIdpublishPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->PublishCampaignRequestScopeIdIdpublishPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Campaign>("/campaigns/{ScopeId}/{Id}/publish", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublishCampaignRequestScopeIdIdpublishPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a Campaign - {PublishCampaignRequest} Publish a Campaign. The status will be changed to Ready or Live, depending on its processing
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> PublishCampaignRequestScopeIdIdpublishPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = await PublishCampaignRequestScopeIdIdpublishPostWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Publish a Campaign - {PublishCampaignRequest} Publish a Campaign. The status will be changed to Ready or Live, depending on its processing
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign>> PublishCampaignRequestScopeIdIdpublishPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->PublishCampaignRequestScopeIdIdpublishPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->PublishCampaignRequestScopeIdIdpublishPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->PublishCampaignRequestScopeIdIdpublishPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Campaign>("/campaigns/{ScopeId}/{Id}/publish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublishCampaignRequestScopeIdIdpublishPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a Campaign - {RejectCampaignRequest} Reject a Campaign. The status will be changed to Rejected.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        public Campaign RejectCampaignRequestScopeIdIdrejectPost(string accept, string scopeId, string id, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = RejectCampaignRequestScopeIdIdrejectPostWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject a Campaign - {RejectCampaignRequest} Reject a Campaign. The status will be changed to Rejected.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> RejectCampaignRequestScopeIdIdrejectPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->RejectCampaignRequestScopeIdIdrejectPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->RejectCampaignRequestScopeIdIdrejectPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->RejectCampaignRequestScopeIdIdrejectPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Campaign>("/campaigns/{ScopeId}/{Id}/reject", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectCampaignRequestScopeIdIdrejectPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a Campaign - {RejectCampaignRequest} Reject a Campaign. The status will be changed to Rejected.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> RejectCampaignRequestScopeIdIdrejectPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = await RejectCampaignRequestScopeIdIdrejectPostWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject a Campaign - {RejectCampaignRequest} Reject a Campaign. The status will be changed to Rejected.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign>> RejectCampaignRequestScopeIdIdrejectPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->RejectCampaignRequestScopeIdIdrejectPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->RejectCampaignRequestScopeIdIdrejectPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->RejectCampaignRequestScopeIdIdrejectPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Campaign>("/campaigns/{ScopeId}/{Id}/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectCampaignRequestScopeIdIdrejectPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit a Campaign - {SubmitCampaignRequest} Submit a Campaign. The status will be changed to PendingApproval.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        public Campaign SubmitCampaignRequestScopeIdIdsubmitPost(string accept, string scopeId, string id, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = SubmitCampaignRequestScopeIdIdsubmitPostWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a Campaign - {SubmitCampaignRequest} Submit a Campaign. The status will be changed to PendingApproval.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> SubmitCampaignRequestScopeIdIdsubmitPostWithHttpInfo(string accept, string scopeId, string id, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->SubmitCampaignRequestScopeIdIdsubmitPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->SubmitCampaignRequestScopeIdIdsubmitPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->SubmitCampaignRequestScopeIdIdsubmitPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Campaign>("/campaigns/{ScopeId}/{Id}/submit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitCampaignRequestScopeIdIdsubmitPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit a Campaign - {SubmitCampaignRequest} Submit a Campaign. The status will be changed to PendingApproval.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> SubmitCampaignRequestScopeIdIdsubmitPostAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = await SubmitCampaignRequestScopeIdIdsubmitPostWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a Campaign - {SubmitCampaignRequest} Submit a Campaign. The status will be changed to PendingApproval.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign>> SubmitCampaignRequestScopeIdIdsubmitPostWithHttpInfoAsync(string accept, string scopeId, string id, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->SubmitCampaignRequestScopeIdIdsubmitPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->SubmitCampaignRequestScopeIdIdsubmitPost");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->SubmitCampaignRequestScopeIdIdsubmitPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Campaign>("/campaigns/{ScopeId}/{Id}/submit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitCampaignRequestScopeIdIdsubmitPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a campaign - {UpdateCampaignRequest} Update a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        public Campaign UpdateCampaignRequestScopeIdIdCreate(string accept, string scopeId, string id, UpdateCampaignRequest body = default(UpdateCampaignRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = UpdateCampaignRequestScopeIdIdCreateWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a campaign - {UpdateCampaignRequest} Update a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> UpdateCampaignRequestScopeIdIdCreateWithHttpInfo(string accept, string scopeId, string id, UpdateCampaignRequest body = default(UpdateCampaignRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->UpdateCampaignRequestScopeIdIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->UpdateCampaignRequestScopeIdIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->UpdateCampaignRequestScopeIdIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Campaign>("/campaigns/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCampaignRequestScopeIdIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a campaign - {UpdateCampaignRequest} Update a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> UpdateCampaignRequestScopeIdIdCreateAsync(string accept, string scopeId, string id, UpdateCampaignRequest body = default(UpdateCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = await UpdateCampaignRequestScopeIdIdCreateWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a campaign - {UpdateCampaignRequest} Update a campaign
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign>> UpdateCampaignRequestScopeIdIdCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateCampaignRequest body = default(UpdateCampaignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->UpdateCampaignRequestScopeIdIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->UpdateCampaignRequestScopeIdIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->UpdateCampaignRequestScopeIdIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Campaign>("/campaigns/{ScopeId}/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCampaignRequestScopeIdIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the status of a campaign - {UpdateCampaignStatusRequest} Update the status of a campaign. The possible values are Ready, Paused, PendingApproval, Rejected, Cancelled. Live and Obsolete are computed values, so it is useless to use those statuses, use Ready instead. The status is updated without checking the campaign workflow (for example the campaign does not have to be paused before requesting its cancellation).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Campaign</returns>
        public Campaign UpdateCampaignStatusRequestScopeIdIdstatusCreate(string accept, string scopeId, string id, UpdateCampaignStatusRequest body = default(UpdateCampaignStatusRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = UpdateCampaignStatusRequestScopeIdIdstatusCreateWithHttpInfo(accept, scopeId, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the status of a campaign - {UpdateCampaignStatusRequest} Update the status of a campaign. The possible values are Ready, Paused, PendingApproval, Rejected, Cancelled. Live and Obsolete are computed values, so it is useless to use those statuses, use Ready instead. The status is updated without checking the campaign workflow (for example the campaign does not have to be paused before requesting its cancellation).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Campaign</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> UpdateCampaignStatusRequestScopeIdIdstatusCreateWithHttpInfo(string accept, string scopeId, string id, UpdateCampaignStatusRequest body = default(UpdateCampaignStatusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->UpdateCampaignStatusRequestScopeIdIdstatusCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->UpdateCampaignStatusRequestScopeIdIdstatusCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->UpdateCampaignStatusRequestScopeIdIdstatusCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Campaign>("/campaigns/{ScopeId}/{Id}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCampaignStatusRequestScopeIdIdstatusCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the status of a campaign - {UpdateCampaignStatusRequest} Update the status of a campaign. The possible values are Ready, Paused, PendingApproval, Rejected, Cancelled. Live and Obsolete are computed values, so it is useless to use those statuses, use Ready instead. The status is updated without checking the campaign workflow (for example the campaign does not have to be paused before requesting its cancellation).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> UpdateCampaignStatusRequestScopeIdIdstatusCreateAsync(string accept, string scopeId, string id, UpdateCampaignStatusRequest body = default(UpdateCampaignStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign> localVarResponse = await UpdateCampaignStatusRequestScopeIdIdstatusCreateWithHttpInfoAsync(accept, scopeId, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the status of a campaign - {UpdateCampaignStatusRequest} Update the status of a campaign. The possible values are Ready, Paused, PendingApproval, Rejected, Cancelled. Live and Obsolete are computed values, so it is useless to use those statuses, use Ready instead. The status is updated without checking the campaign workflow (for example the campaign does not have to be paused before requesting its cancellation).
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="id">The id of the campaign.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Campaign>> UpdateCampaignStatusRequestScopeIdIdstatusCreateWithHttpInfoAsync(string accept, string scopeId, string id, UpdateCampaignStatusRequest body = default(UpdateCampaignStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->UpdateCampaignStatusRequestScopeIdIdstatusCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->UpdateCampaignStatusRequestScopeIdIdstatusCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->UpdateCampaignStatusRequestScopeIdIdstatusCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Campaign>("/campaigns/{ScopeId}/{Id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCampaignStatusRequestScopeIdIdstatusCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing promotion - {UpdatePromotionRequest} Update an existing promotion
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to be updated</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Promotion</returns>
        public Promotion UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreate(string accept, string scopeId, string campaignId, string promotionId, UpdatePromotionRequest body = default(UpdatePromotionRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Promotion> localVarResponse = UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreateWithHttpInfo(accept, scopeId, campaignId, promotionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing promotion - {UpdatePromotionRequest} Update an existing promotion
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to be updated</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Promotion</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Promotion> UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreateWithHttpInfo(string accept, string scopeId, string campaignId, string promotionId, UpdatePromotionRequest body = default(UpdatePromotionRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreate");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreate");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling CampaignsApi->UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Promotion>("/campaigns/{ScopeId}/{CampaignId}/promotions/{PromotionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing promotion - {UpdatePromotionRequest} Update an existing promotion
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to be updated</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Promotion</returns>
        public async System.Threading.Tasks.Task<Promotion> UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreateAsync(string accept, string scopeId, string campaignId, string promotionId, UpdatePromotionRequest body = default(UpdatePromotionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Promotion> localVarResponse = await UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreateWithHttpInfoAsync(accept, scopeId, campaignId, promotionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing promotion - {UpdatePromotionRequest} Update an existing promotion
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="campaignId">The id of the promotion&#39;s campaign</param>
        /// <param name="promotionId">The id of the promotion to be updated</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Promotion)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Promotion>> UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreateWithHttpInfoAsync(string accept, string scopeId, string campaignId, string promotionId, UpdatePromotionRequest body = default(UpdatePromotionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CampaignsApi->UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CampaignsApi->UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreate");

            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreate");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling CampaignsApi->UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CampaignId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Promotion>("/campaigns/{ScopeId}/{CampaignId}/promotions/{PromotionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePromotionRequestScopeIdCampaignIdpromotionsPromotionIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
