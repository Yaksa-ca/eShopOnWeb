/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMembershipApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Change a Customer&#39;s password - {ChangePasswordRequest}
        /// </summary>
        /// <remarks>
        /// Change a Customer&#39;s password. Return information indicating whether the password was successfully changed or not.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The UserName</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ChangePasswordResponse</returns>
        ChangePasswordResponse ChangePasswordRequestScopeIdChangePasswordUserNamePost(string accept, string scopeId, string userName, ChangePasswordRequest body = default(ChangePasswordRequest));

        /// <summary>
        /// Change a Customer&#39;s password - {ChangePasswordRequest}
        /// </summary>
        /// <remarks>
        /// Change a Customer&#39;s password. Return information indicating whether the password was successfully changed or not.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The UserName</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ChangePasswordResponse</returns>
        ApiResponse<ChangePasswordResponse> ChangePasswordRequestScopeIdChangePasswordUserNamePostWithHttpInfo(string accept, string scopeId, string userName, ChangePasswordRequest body = default(ChangePasswordRequest));
        /// <summary>
        /// Change a Customer&#39;s user name - {ChangeUserNameRequest}
        /// </summary>
        /// <remarks>
        /// Change a Customer&#39;s user name. Return information indicating whether the user name was successfully changed or not.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="oldUsername">The old (current) username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ChangeUserNameResponse</returns>
        ChangeUserNameResponse ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePost(string accept, string scopeId, string oldUsername, ChangeUserNameRequest body = default(ChangeUserNameRequest));

        /// <summary>
        /// Change a Customer&#39;s user name - {ChangeUserNameRequest}
        /// </summary>
        /// <remarks>
        /// Change a Customer&#39;s user name. Return information indicating whether the user name was successfully changed or not.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="oldUsername">The old (current) username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ChangeUserNameResponse</returns>
        ApiResponse<ChangeUserNameResponse> ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePostWithHttpInfo(string accept, string scopeId, string oldUsername, ChangeUserNameRequest body = default(ChangeUserNameRequest));
        /// <summary>
        /// Create a new customer membership - {CreateCustomerMembershipRequest}
        /// </summary>
        /// <remarks>
        /// Create a new customer membership. Return the customer if the operation succeeded but raise an error and provide details when there is a problem. The error could be : UserNameAlreadyUsed, InvalidPassword or PasswordQuestionNoSet.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        Customer CreateCustomerMembershipRequestScopeIdPost(string accept, string scopeId, CreateCustomerMembershipRequest body = default(CreateCustomerMembershipRequest));

        /// <summary>
        /// Create a new customer membership - {CreateCustomerMembershipRequest}
        /// </summary>
        /// <remarks>
        /// Create a new customer membership. Return the customer if the operation succeeded but raise an error and provide details when there is a problem. The error could be : UserNameAlreadyUsed, InvalidPassword or PasswordQuestionNoSet.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CreateCustomerMembershipRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateCustomerMembershipRequest body = default(CreateCustomerMembershipRequest));
        /// <summary>
        /// Retrieve the membership configuration from the system - {GetMembershipConfigurationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the membership configuration.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>MembershipConfiguration</returns>
        MembershipConfiguration GetMembershipConfigurationRequestconfigurationGet(string accept);

        /// <summary>
        /// Retrieve the membership configuration from the system - {GetMembershipConfigurationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the membership configuration.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of MembershipConfiguration</returns>
        ApiResponse<MembershipConfiguration> GetMembershipConfigurationRequestconfigurationGetWithHttpInfo(string accept);
        /// <summary>
        /// Login the user with the values provided - {LoginRequest}
        /// </summary>
        /// <remarks>
        /// Login the user. A result is returned that indicates if the operation succeeded but raise an error and provide details when there is a problem. The error could be : CustomerMembershipDoesNotExist, PasswordDoesNotMatch or CustomerMembershipAccountIsNotActive.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>LoginResponse</returns>
        LoginResponse LoginRequestScopeIdLoginCreate(string accept, string scopeId, LoginRequest body = default(LoginRequest));

        /// <summary>
        /// Login the user with the values provided - {LoginRequest}
        /// </summary>
        /// <remarks>
        /// Login the user. A result is returned that indicates if the operation succeeded but raise an error and provide details when there is a problem. The error could be : CustomerMembershipDoesNotExist, PasswordDoesNotMatch or CustomerMembershipAccountIsNotActive.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        ApiResponse<LoginResponse> LoginRequestScopeIdLoginCreateWithHttpInfo(string accept, string scopeId, LoginRequest body = default(LoginRequest));
        /// <summary>
        /// Send a password reset email or reset password directly - {ResetPasswordRequest}
        /// </summary>
        /// <remarks>
        /// Send a password reset email or reset password directly. Return information indicating whether the password was successfully reset or not.If an email is specified in the request, the method sends an email to reset the password. If not, set an username, the password answer and a new password to reset the password directly
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResetPasswordResponse</returns>
        ResetPasswordResponse ResetPasswordRequestScopeIdResetPasswordPost(string accept, string scopeId, ResetPasswordRequest body = default(ResetPasswordRequest));

        /// <summary>
        /// Send a password reset email or reset password directly - {ResetPasswordRequest}
        /// </summary>
        /// <remarks>
        /// Send a password reset email or reset password directly. Return information indicating whether the password was successfully reset or not.If an email is specified in the request, the method sends an email to reset the password. If not, set an username, the password answer and a new password to reset the password directly
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResetPasswordResponse</returns>
        ApiResponse<ResetPasswordResponse> ResetPasswordRequestScopeIdResetPasswordPostWithHttpInfo(string accept, string scopeId, ResetPasswordRequest body = default(ResetPasswordRequest));
        /// <summary>
        /// Unlock a User account - {UnlockUserRequest}
        /// </summary>
        /// <remarks>
        /// Unlock a user. If the user is locked down, the request will unlock the account. If the user is not locked down, the request will succeed as if the account were locked down. If the user does not exists, the request will fail
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UnlockUserResponse</returns>
        UnlockUserResponse UnlockUserRequestScopeIdUnlockUserUserNamePost(string accept, string scopeId, string userName, Object body = default(Object));

        /// <summary>
        /// Unlock a User account - {UnlockUserRequest}
        /// </summary>
        /// <remarks>
        /// Unlock a user. If the user is locked down, the request will unlock the account. If the user is not locked down, the request will succeed as if the account were locked down. If the user does not exists, the request will fail
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UnlockUserResponse</returns>
        ApiResponse<UnlockUserResponse> UnlockUserRequestScopeIdUnlockUserUserNamePostWithHttpInfo(string accept, string scopeId, string userName, Object body = default(Object));
        /// <summary>
        /// Validate a username/password combination - {ValidateUserRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve true if it&#39;s a valid combination
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ValidateUserResponse</returns>
        ValidateUserResponse ValidateUserRequestScopeIdValidateCreate(string accept, string scopeId, ValidateUserRequest body = default(ValidateUserRequest));

        /// <summary>
        /// Validate a username/password combination - {ValidateUserRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve true if it&#39;s a valid combination
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ValidateUserResponse</returns>
        ApiResponse<ValidateUserResponse> ValidateUserRequestScopeIdValidateCreateWithHttpInfo(string accept, string scopeId, ValidateUserRequest body = default(ValidateUserRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMembershipApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Change a Customer&#39;s password - {ChangePasswordRequest}
        /// </summary>
        /// <remarks>
        /// Change a Customer&#39;s password. Return information indicating whether the password was successfully changed or not.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The UserName</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChangePasswordResponse</returns>
        System.Threading.Tasks.Task<ChangePasswordResponse> ChangePasswordRequestScopeIdChangePasswordUserNamePostAsync(string accept, string scopeId, string userName, ChangePasswordRequest body = default(ChangePasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Change a Customer&#39;s password - {ChangePasswordRequest}
        /// </summary>
        /// <remarks>
        /// Change a Customer&#39;s password. Return information indicating whether the password was successfully changed or not.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The UserName</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChangePasswordResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangePasswordResponse>> ChangePasswordRequestScopeIdChangePasswordUserNamePostWithHttpInfoAsync(string accept, string scopeId, string userName, ChangePasswordRequest body = default(ChangePasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Change a Customer&#39;s user name - {ChangeUserNameRequest}
        /// </summary>
        /// <remarks>
        /// Change a Customer&#39;s user name. Return information indicating whether the user name was successfully changed or not.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="oldUsername">The old (current) username</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChangeUserNameResponse</returns>
        System.Threading.Tasks.Task<ChangeUserNameResponse> ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePostAsync(string accept, string scopeId, string oldUsername, ChangeUserNameRequest body = default(ChangeUserNameRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Change a Customer&#39;s user name - {ChangeUserNameRequest}
        /// </summary>
        /// <remarks>
        /// Change a Customer&#39;s user name. Return information indicating whether the user name was successfully changed or not.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="oldUsername">The old (current) username</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChangeUserNameResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeUserNameResponse>> ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePostWithHttpInfoAsync(string accept, string scopeId, string oldUsername, ChangeUserNameRequest body = default(ChangeUserNameRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new customer membership - {CreateCustomerMembershipRequest}
        /// </summary>
        /// <remarks>
        /// Create a new customer membership. Return the customer if the operation succeeded but raise an error and provide details when there is a problem. The error could be : UserNameAlreadyUsed, InvalidPassword or PasswordQuestionNoSet.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CreateCustomerMembershipRequestScopeIdPostAsync(string accept, string scopeId, CreateCustomerMembershipRequest body = default(CreateCustomerMembershipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new customer membership - {CreateCustomerMembershipRequest}
        /// </summary>
        /// <remarks>
        /// Create a new customer membership. Return the customer if the operation succeeded but raise an error and provide details when there is a problem. The error could be : UserNameAlreadyUsed, InvalidPassword or PasswordQuestionNoSet.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CreateCustomerMembershipRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateCustomerMembershipRequest body = default(CreateCustomerMembershipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the membership configuration from the system - {GetMembershipConfigurationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the membership configuration.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembershipConfiguration</returns>
        System.Threading.Tasks.Task<MembershipConfiguration> GetMembershipConfigurationRequestconfigurationGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the membership configuration from the system - {GetMembershipConfigurationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the membership configuration.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembershipConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembershipConfiguration>> GetMembershipConfigurationRequestconfigurationGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Login the user with the values provided - {LoginRequest}
        /// </summary>
        /// <remarks>
        /// Login the user. A result is returned that indicates if the operation succeeded but raise an error and provide details when there is a problem. The error could be : CustomerMembershipDoesNotExist, PasswordDoesNotMatch or CustomerMembershipAccountIsNotActive.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        System.Threading.Tasks.Task<LoginResponse> LoginRequestScopeIdLoginCreateAsync(string accept, string scopeId, LoginRequest body = default(LoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Login the user with the values provided - {LoginRequest}
        /// </summary>
        /// <remarks>
        /// Login the user. A result is returned that indicates if the operation succeeded but raise an error and provide details when there is a problem. The error could be : CustomerMembershipDoesNotExist, PasswordDoesNotMatch or CustomerMembershipAccountIsNotActive.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginResponse>> LoginRequestScopeIdLoginCreateWithHttpInfoAsync(string accept, string scopeId, LoginRequest body = default(LoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send a password reset email or reset password directly - {ResetPasswordRequest}
        /// </summary>
        /// <remarks>
        /// Send a password reset email or reset password directly. Return information indicating whether the password was successfully reset or not.If an email is specified in the request, the method sends an email to reset the password. If not, set an username, the password answer and a new password to reset the password directly
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResetPasswordResponse</returns>
        System.Threading.Tasks.Task<ResetPasswordResponse> ResetPasswordRequestScopeIdResetPasswordPostAsync(string accept, string scopeId, ResetPasswordRequest body = default(ResetPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send a password reset email or reset password directly - {ResetPasswordRequest}
        /// </summary>
        /// <remarks>
        /// Send a password reset email or reset password directly. Return information indicating whether the password was successfully reset or not.If an email is specified in the request, the method sends an email to reset the password. If not, set an username, the password answer and a new password to reset the password directly
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResetPasswordResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResetPasswordResponse>> ResetPasswordRequestScopeIdResetPasswordPostWithHttpInfoAsync(string accept, string scopeId, ResetPasswordRequest body = default(ResetPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unlock a User account - {UnlockUserRequest}
        /// </summary>
        /// <remarks>
        /// Unlock a user. If the user is locked down, the request will unlock the account. If the user is not locked down, the request will succeed as if the account were locked down. If the user does not exists, the request will fail
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The username</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnlockUserResponse</returns>
        System.Threading.Tasks.Task<UnlockUserResponse> UnlockUserRequestScopeIdUnlockUserUserNamePostAsync(string accept, string scopeId, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unlock a User account - {UnlockUserRequest}
        /// </summary>
        /// <remarks>
        /// Unlock a user. If the user is locked down, the request will unlock the account. If the user is not locked down, the request will succeed as if the account were locked down. If the user does not exists, the request will fail
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The username</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnlockUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnlockUserResponse>> UnlockUserRequestScopeIdUnlockUserUserNamePostWithHttpInfoAsync(string accept, string scopeId, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate a username/password combination - {ValidateUserRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve true if it&#39;s a valid combination
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateUserResponse</returns>
        System.Threading.Tasks.Task<ValidateUserResponse> ValidateUserRequestScopeIdValidateCreateAsync(string accept, string scopeId, ValidateUserRequest body = default(ValidateUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate a username/password combination - {ValidateUserRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve true if it&#39;s a valid combination
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateUserResponse>> ValidateUserRequestScopeIdValidateCreateWithHttpInfoAsync(string accept, string scopeId, ValidateUserRequest body = default(ValidateUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMembershipApi : IMembershipApiSync, IMembershipApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MembershipApi : IMembershipApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MembershipApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MembershipApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MembershipApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MembershipApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Change a Customer&#39;s password - {ChangePasswordRequest} Change a Customer&#39;s password. Return information indicating whether the password was successfully changed or not.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The UserName</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ChangePasswordResponse</returns>
        public ChangePasswordResponse ChangePasswordRequestScopeIdChangePasswordUserNamePost(string accept, string scopeId, string userName, ChangePasswordRequest body = default(ChangePasswordRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ChangePasswordResponse> localVarResponse = ChangePasswordRequestScopeIdChangePasswordUserNamePostWithHttpInfo(accept, scopeId, userName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change a Customer&#39;s password - {ChangePasswordRequest} Change a Customer&#39;s password. Return information indicating whether the password was successfully changed or not.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The UserName</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ChangePasswordResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ChangePasswordResponse> ChangePasswordRequestScopeIdChangePasswordUserNamePostWithHttpInfo(string accept, string scopeId, string userName, ChangePasswordRequest body = default(ChangePasswordRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->ChangePasswordRequestScopeIdChangePasswordUserNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->ChangePasswordRequestScopeIdChangePasswordUserNamePost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling MembershipApi->ChangePasswordRequestScopeIdChangePasswordUserNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ChangePasswordResponse>("/membership/{ScopeId}/ChangePassword/{UserName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangePasswordRequestScopeIdChangePasswordUserNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change a Customer&#39;s password - {ChangePasswordRequest} Change a Customer&#39;s password. Return information indicating whether the password was successfully changed or not.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The UserName</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChangePasswordResponse</returns>
        public async System.Threading.Tasks.Task<ChangePasswordResponse> ChangePasswordRequestScopeIdChangePasswordUserNamePostAsync(string accept, string scopeId, string userName, ChangePasswordRequest body = default(ChangePasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ChangePasswordResponse> localVarResponse = await ChangePasswordRequestScopeIdChangePasswordUserNamePostWithHttpInfoAsync(accept, scopeId, userName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change a Customer&#39;s password - {ChangePasswordRequest} Change a Customer&#39;s password. Return information indicating whether the password was successfully changed or not.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The UserName</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChangePasswordResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ChangePasswordResponse>> ChangePasswordRequestScopeIdChangePasswordUserNamePostWithHttpInfoAsync(string accept, string scopeId, string userName, ChangePasswordRequest body = default(ChangePasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->ChangePasswordRequestScopeIdChangePasswordUserNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->ChangePasswordRequestScopeIdChangePasswordUserNamePost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling MembershipApi->ChangePasswordRequestScopeIdChangePasswordUserNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ChangePasswordResponse>("/membership/{ScopeId}/ChangePassword/{UserName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangePasswordRequestScopeIdChangePasswordUserNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change a Customer&#39;s user name - {ChangeUserNameRequest} Change a Customer&#39;s user name. Return information indicating whether the user name was successfully changed or not.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="oldUsername">The old (current) username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ChangeUserNameResponse</returns>
        public ChangeUserNameResponse ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePost(string accept, string scopeId, string oldUsername, ChangeUserNameRequest body = default(ChangeUserNameRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ChangeUserNameResponse> localVarResponse = ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePostWithHttpInfo(accept, scopeId, oldUsername, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change a Customer&#39;s user name - {ChangeUserNameRequest} Change a Customer&#39;s user name. Return information indicating whether the user name was successfully changed or not.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="oldUsername">The old (current) username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ChangeUserNameResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ChangeUserNameResponse> ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePostWithHttpInfo(string accept, string scopeId, string oldUsername, ChangeUserNameRequest body = default(ChangeUserNameRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePost");

            // verify the required parameter 'oldUsername' is set
            if (oldUsername == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'oldUsername' when calling MembershipApi->ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OldUsername", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(oldUsername)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ChangeUserNameResponse>("/membership/{ScopeId}/ChangeUserName/{OldUsername}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change a Customer&#39;s user name - {ChangeUserNameRequest} Change a Customer&#39;s user name. Return information indicating whether the user name was successfully changed or not.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="oldUsername">The old (current) username</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChangeUserNameResponse</returns>
        public async System.Threading.Tasks.Task<ChangeUserNameResponse> ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePostAsync(string accept, string scopeId, string oldUsername, ChangeUserNameRequest body = default(ChangeUserNameRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ChangeUserNameResponse> localVarResponse = await ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePostWithHttpInfoAsync(accept, scopeId, oldUsername, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change a Customer&#39;s user name - {ChangeUserNameRequest} Change a Customer&#39;s user name. Return information indicating whether the user name was successfully changed or not.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="oldUsername">The old (current) username</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChangeUserNameResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ChangeUserNameResponse>> ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePostWithHttpInfoAsync(string accept, string scopeId, string oldUsername, ChangeUserNameRequest body = default(ChangeUserNameRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePost");

            // verify the required parameter 'oldUsername' is set
            if (oldUsername == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'oldUsername' when calling MembershipApi->ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OldUsername", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(oldUsername)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ChangeUserNameResponse>("/membership/{ScopeId}/ChangeUserName/{OldUsername}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeUserNameRequestScopeIdChangeUserNameOldUsernamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new customer membership - {CreateCustomerMembershipRequest} Create a new customer membership. Return the customer if the operation succeeded but raise an error and provide details when there is a problem. The error could be : UserNameAlreadyUsed, InvalidPassword or PasswordQuestionNoSet.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        public Customer CreateCustomerMembershipRequestScopeIdPost(string accept, string scopeId, CreateCustomerMembershipRequest body = default(CreateCustomerMembershipRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = CreateCustomerMembershipRequestScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new customer membership - {CreateCustomerMembershipRequest} Create a new customer membership. Return the customer if the operation succeeded but raise an error and provide details when there is a problem. The error could be : UserNameAlreadyUsed, InvalidPassword or PasswordQuestionNoSet.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> CreateCustomerMembershipRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateCustomerMembershipRequest body = default(CreateCustomerMembershipRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->CreateCustomerMembershipRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->CreateCustomerMembershipRequestScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Customer>("/membership/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomerMembershipRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new customer membership - {CreateCustomerMembershipRequest} Create a new customer membership. Return the customer if the operation succeeded but raise an error and provide details when there is a problem. The error could be : UserNameAlreadyUsed, InvalidPassword or PasswordQuestionNoSet.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CreateCustomerMembershipRequestScopeIdPostAsync(string accept, string scopeId, CreateCustomerMembershipRequest body = default(CreateCustomerMembershipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer> localVarResponse = await CreateCustomerMembershipRequestScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new customer membership - {CreateCustomerMembershipRequest} Create a new customer membership. Return the customer if the operation succeeded but raise an error and provide details when there is a problem. The error could be : UserNameAlreadyUsed, InvalidPassword or PasswordQuestionNoSet.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Customer>> CreateCustomerMembershipRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateCustomerMembershipRequest body = default(CreateCustomerMembershipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->CreateCustomerMembershipRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->CreateCustomerMembershipRequestScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Customer>("/membership/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomerMembershipRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the membership configuration from the system - {GetMembershipConfigurationRequest} Retrieve the membership configuration.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>MembershipConfiguration</returns>
        public MembershipConfiguration GetMembershipConfigurationRequestconfigurationGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MembershipConfiguration> localVarResponse = GetMembershipConfigurationRequestconfigurationGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the membership configuration from the system - {GetMembershipConfigurationRequest} Retrieve the membership configuration.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of MembershipConfiguration</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MembershipConfiguration> GetMembershipConfigurationRequestconfigurationGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->GetMembershipConfigurationRequestconfigurationGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<MembershipConfiguration>("/membership/configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembershipConfigurationRequestconfigurationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the membership configuration from the system - {GetMembershipConfigurationRequest} Retrieve the membership configuration.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembershipConfiguration</returns>
        public async System.Threading.Tasks.Task<MembershipConfiguration> GetMembershipConfigurationRequestconfigurationGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MembershipConfiguration> localVarResponse = await GetMembershipConfigurationRequestconfigurationGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the membership configuration from the system - {GetMembershipConfigurationRequest} Retrieve the membership configuration.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembershipConfiguration)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<MembershipConfiguration>> GetMembershipConfigurationRequestconfigurationGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->GetMembershipConfigurationRequestconfigurationGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MembershipConfiguration>("/membership/configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembershipConfigurationRequestconfigurationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login the user with the values provided - {LoginRequest} Login the user. A result is returned that indicates if the operation succeeded but raise an error and provide details when there is a problem. The error could be : CustomerMembershipDoesNotExist, PasswordDoesNotMatch or CustomerMembershipAccountIsNotActive.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>LoginResponse</returns>
        public LoginResponse LoginRequestScopeIdLoginCreate(string accept, string scopeId, LoginRequest body = default(LoginRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<LoginResponse> localVarResponse = LoginRequestScopeIdLoginCreateWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login the user with the values provided - {LoginRequest} Login the user. A result is returned that indicates if the operation succeeded but raise an error and provide details when there is a problem. The error could be : CustomerMembershipDoesNotExist, PasswordDoesNotMatch or CustomerMembershipAccountIsNotActive.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<LoginResponse> LoginRequestScopeIdLoginCreateWithHttpInfo(string accept, string scopeId, LoginRequest body = default(LoginRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->LoginRequestScopeIdLoginCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->LoginRequestScopeIdLoginCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<LoginResponse>("/membership/{ScopeId}/Login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginRequestScopeIdLoginCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login the user with the values provided - {LoginRequest} Login the user. A result is returned that indicates if the operation succeeded but raise an error and provide details when there is a problem. The error could be : CustomerMembershipDoesNotExist, PasswordDoesNotMatch or CustomerMembershipAccountIsNotActive.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        public async System.Threading.Tasks.Task<LoginResponse> LoginRequestScopeIdLoginCreateAsync(string accept, string scopeId, LoginRequest body = default(LoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<LoginResponse> localVarResponse = await LoginRequestScopeIdLoginCreateWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login the user with the values provided - {LoginRequest} Login the user. A result is returned that indicates if the operation succeeded but raise an error and provide details when there is a problem. The error could be : CustomerMembershipDoesNotExist, PasswordDoesNotMatch or CustomerMembershipAccountIsNotActive.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<LoginResponse>> LoginRequestScopeIdLoginCreateWithHttpInfoAsync(string accept, string scopeId, LoginRequest body = default(LoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->LoginRequestScopeIdLoginCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->LoginRequestScopeIdLoginCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<LoginResponse>("/membership/{ScopeId}/Login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginRequestScopeIdLoginCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a password reset email or reset password directly - {ResetPasswordRequest} Send a password reset email or reset password directly. Return information indicating whether the password was successfully reset or not.If an email is specified in the request, the method sends an email to reset the password. If not, set an username, the password answer and a new password to reset the password directly
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResetPasswordResponse</returns>
        public ResetPasswordResponse ResetPasswordRequestScopeIdResetPasswordPost(string accept, string scopeId, ResetPasswordRequest body = default(ResetPasswordRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ResetPasswordResponse> localVarResponse = ResetPasswordRequestScopeIdResetPasswordPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a password reset email or reset password directly - {ResetPasswordRequest} Send a password reset email or reset password directly. Return information indicating whether the password was successfully reset or not.If an email is specified in the request, the method sends an email to reset the password. If not, set an username, the password answer and a new password to reset the password directly
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResetPasswordResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ResetPasswordResponse> ResetPasswordRequestScopeIdResetPasswordPostWithHttpInfo(string accept, string scopeId, ResetPasswordRequest body = default(ResetPasswordRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->ResetPasswordRequestScopeIdResetPasswordPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->ResetPasswordRequestScopeIdResetPasswordPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ResetPasswordResponse>("/membership/{ScopeId}/ResetPassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetPasswordRequestScopeIdResetPasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a password reset email or reset password directly - {ResetPasswordRequest} Send a password reset email or reset password directly. Return information indicating whether the password was successfully reset or not.If an email is specified in the request, the method sends an email to reset the password. If not, set an username, the password answer and a new password to reset the password directly
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResetPasswordResponse</returns>
        public async System.Threading.Tasks.Task<ResetPasswordResponse> ResetPasswordRequestScopeIdResetPasswordPostAsync(string accept, string scopeId, ResetPasswordRequest body = default(ResetPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ResetPasswordResponse> localVarResponse = await ResetPasswordRequestScopeIdResetPasswordPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a password reset email or reset password directly - {ResetPasswordRequest} Send a password reset email or reset password directly. Return information indicating whether the password was successfully reset or not.If an email is specified in the request, the method sends an email to reset the password. If not, set an username, the password answer and a new password to reset the password directly
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResetPasswordResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ResetPasswordResponse>> ResetPasswordRequestScopeIdResetPasswordPostWithHttpInfoAsync(string accept, string scopeId, ResetPasswordRequest body = default(ResetPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->ResetPasswordRequestScopeIdResetPasswordPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->ResetPasswordRequestScopeIdResetPasswordPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResetPasswordResponse>("/membership/{ScopeId}/ResetPassword", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetPasswordRequestScopeIdResetPasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock a User account - {UnlockUserRequest} Unlock a user. If the user is locked down, the request will unlock the account. If the user is not locked down, the request will succeed as if the account were locked down. If the user does not exists, the request will fail
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UnlockUserResponse</returns>
        public UnlockUserResponse UnlockUserRequestScopeIdUnlockUserUserNamePost(string accept, string scopeId, string userName, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UnlockUserResponse> localVarResponse = UnlockUserRequestScopeIdUnlockUserUserNamePostWithHttpInfo(accept, scopeId, userName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unlock a User account - {UnlockUserRequest} Unlock a user. If the user is locked down, the request will unlock the account. If the user is not locked down, the request will succeed as if the account were locked down. If the user does not exists, the request will fail
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The username</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UnlockUserResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UnlockUserResponse> UnlockUserRequestScopeIdUnlockUserUserNamePostWithHttpInfo(string accept, string scopeId, string userName, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->UnlockUserRequestScopeIdUnlockUserUserNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->UnlockUserRequestScopeIdUnlockUserUserNamePost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling MembershipApi->UnlockUserRequestScopeIdUnlockUserUserNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UnlockUserResponse>("/membership/{ScopeId}/UnlockUser/{UserName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlockUserRequestScopeIdUnlockUserUserNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock a User account - {UnlockUserRequest} Unlock a user. If the user is locked down, the request will unlock the account. If the user is not locked down, the request will succeed as if the account were locked down. If the user does not exists, the request will fail
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The username</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnlockUserResponse</returns>
        public async System.Threading.Tasks.Task<UnlockUserResponse> UnlockUserRequestScopeIdUnlockUserUserNamePostAsync(string accept, string scopeId, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UnlockUserResponse> localVarResponse = await UnlockUserRequestScopeIdUnlockUserUserNamePostWithHttpInfoAsync(accept, scopeId, userName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unlock a User account - {UnlockUserRequest} Unlock a user. If the user is locked down, the request will unlock the account. If the user is not locked down, the request will succeed as if the account were locked down. If the user does not exists, the request will fail
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="userName">The username</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnlockUserResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UnlockUserResponse>> UnlockUserRequestScopeIdUnlockUserUserNamePostWithHttpInfoAsync(string accept, string scopeId, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->UnlockUserRequestScopeIdUnlockUserUserNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->UnlockUserRequestScopeIdUnlockUserUserNamePost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling MembershipApi->UnlockUserRequestScopeIdUnlockUserUserNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UnlockUserResponse>("/membership/{ScopeId}/UnlockUser/{UserName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlockUserRequestScopeIdUnlockUserUserNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a username/password combination - {ValidateUserRequest} Retrieve true if it&#39;s a valid combination
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ValidateUserResponse</returns>
        public ValidateUserResponse ValidateUserRequestScopeIdValidateCreate(string accept, string scopeId, ValidateUserRequest body = default(ValidateUserRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ValidateUserResponse> localVarResponse = ValidateUserRequestScopeIdValidateCreateWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a username/password combination - {ValidateUserRequest} Retrieve true if it&#39;s a valid combination
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ValidateUserResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ValidateUserResponse> ValidateUserRequestScopeIdValidateCreateWithHttpInfo(string accept, string scopeId, ValidateUserRequest body = default(ValidateUserRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->ValidateUserRequestScopeIdValidateCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->ValidateUserRequestScopeIdValidateCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ValidateUserResponse>("/membership/{ScopeId}/Validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateUserRequestScopeIdValidateCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a username/password combination - {ValidateUserRequest} Retrieve true if it&#39;s a valid combination
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateUserResponse</returns>
        public async System.Threading.Tasks.Task<ValidateUserResponse> ValidateUserRequestScopeIdValidateCreateAsync(string accept, string scopeId, ValidateUserRequest body = default(ValidateUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ValidateUserResponse> localVarResponse = await ValidateUserRequestScopeIdValidateCreateWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a username/password combination - {ValidateUserRequest} Retrieve true if it&#39;s a valid combination
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateUserResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ValidateUserResponse>> ValidateUserRequestScopeIdValidateCreateWithHttpInfoAsync(string accept, string scopeId, ValidateUserRequest body = default(ValidateUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling MembershipApi->ValidateUserRequestScopeIdValidateCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling MembershipApi->ValidateUserRequestScopeIdValidateCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ValidateUserResponse>("/membership/{ScopeId}/Validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateUserRequestScopeIdValidateCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
