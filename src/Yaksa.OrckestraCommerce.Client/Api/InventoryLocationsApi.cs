/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryLocationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add an inventory schedule to a location - {AddInventoryScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Add an inventory schedule to a location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventorySchedule</returns>
        InventorySchedule AddInventoryScheduleRequestInventoryLocationIdschedulesPost(string accept, string inventoryLocationId, AddInventoryScheduleRequest body = default(AddInventoryScheduleRequest));

        /// <summary>
        /// Add an inventory schedule to a location - {AddInventoryScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Add an inventory schedule to a location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventorySchedule</returns>
        ApiResponse<InventorySchedule> AddInventoryScheduleRequestInventoryLocationIdschedulesPostWithHttpInfo(string accept, string inventoryLocationId, AddInventoryScheduleRequest body = default(AddInventoryScheduleRequest));
        /// <summary>
        /// Creates or updates an inventory location - {CreateInventoryLocationRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates an inventory location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryLocation</returns>
        InventoryLocation CreateInventoryLocationRequestScopeIdPost(string accept, string scopeId, CreateInventoryLocationRequest body = default(CreateInventoryLocationRequest));

        /// <summary>
        /// Creates or updates an inventory location - {CreateInventoryLocationRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates an inventory location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryLocation</returns>
        ApiResponse<InventoryLocation> CreateInventoryLocationRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateInventoryLocationRequest body = default(CreateInventoryLocationRequest));
        /// <summary>
        /// Delete an inventory schedule - {DeleteInventoryScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Delete an inventory schedule
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="scheduleId">The inventory schedule identifier used to find the right schedule to update</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns></returns>
        void DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDelete(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string));

        /// <summary>
        /// Delete an inventory schedule - {DeleteInventoryScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Delete an inventory schedule
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="scheduleId">The inventory schedule identifier used to find the right schedule to update</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDeleteWithHttpInfo(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string));
        /// <summary>
        /// Retrieve an inventory location by Id - {GetInventoryLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an inventory location by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="associatedLocationId">the business id for the inventory location to retrieve</param>
        /// <returns>InventoryLocation</returns>
        InventoryLocation GetInventoryLocationRequestScopeIdAssociatedLocationIdGet(string accept, string scopeId, string associatedLocationId);

        /// <summary>
        /// Retrieve an inventory location by Id - {GetInventoryLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an inventory location by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="associatedLocationId">the business id for the inventory location to retrieve</param>
        /// <returns>ApiResponse of InventoryLocation</returns>
        ApiResponse<InventoryLocation> GetInventoryLocationRequestScopeIdAssociatedLocationIdGetWithHttpInfo(string accept, string scopeId, string associatedLocationId);
        /// <summary>
        /// Retrieve an inventory schedule of a location using its id - {GetInventoryScheduleByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an inventory schedule of a location using its id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scheduleId">the id of the schedule to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>InventorySchedule</returns>
        InventorySchedule GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGet(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string));

        /// <summary>
        /// Retrieve an inventory schedule of a location using its id - {GetInventoryScheduleByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an inventory schedule of a location using its id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scheduleId">the id of the schedule to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of InventorySchedule</returns>
        ApiResponse<InventorySchedule> GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGetWithHttpInfo(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string));
        /// <summary>
        /// Retrieve all the inventory schedules of a location and a sku - {GetInventorySchedulesBySkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the inventory schedules of a location and a sku
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="sku">the sku for the product which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>List&lt;InventorySchedule&gt;</returns>
        List<InventorySchedule> GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGet(string accept, string inventoryLocationId, string sku, string scopeId = default(string));

        /// <summary>
        /// Retrieve all the inventory schedules of a location and a sku - {GetInventorySchedulesBySkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the inventory schedules of a location and a sku
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="sku">the sku for the product which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of List&lt;InventorySchedule&gt;</returns>
        ApiResponse<List<InventorySchedule>> GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGetWithHttpInfo(string accept, string inventoryLocationId, string sku, string scopeId = default(string));
        /// <summary>
        /// Retrieve all the inventory schedules of a location - {GetInventorySchedulesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the inventory schedules of a location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>List&lt;InventorySchedule&gt;</returns>
        List<InventorySchedule> GetInventorySchedulesRequestInventoryLocationIdschedulesGet(string accept, string inventoryLocationId, string scopeId = default(string));

        /// <summary>
        /// Retrieve all the inventory schedules of a location - {GetInventorySchedulesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the inventory schedules of a location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of List&lt;InventorySchedule&gt;</returns>
        ApiResponse<List<InventorySchedule>> GetInventorySchedulesRequestInventoryLocationIdschedulesGetWithHttpInfo(string accept, string inventoryLocationId, string scopeId = default(string));
        /// <summary>
        /// Update an inventory schedule daterange and status - {UpdateInventoryScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Update an inventory schedule daterange and status
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventorySchedule</returns>
        InventorySchedule UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreate(string accept, string inventoryLocationId, UpdateInventoryScheduleRequest body = default(UpdateInventoryScheduleRequest));

        /// <summary>
        /// Update an inventory schedule daterange and status - {UpdateInventoryScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Update an inventory schedule daterange and status
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventorySchedule</returns>
        ApiResponse<InventorySchedule> UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreateWithHttpInfo(string accept, string inventoryLocationId, UpdateInventoryScheduleRequest body = default(UpdateInventoryScheduleRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryLocationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add an inventory schedule to a location - {AddInventoryScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Add an inventory schedule to a location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventorySchedule</returns>
        System.Threading.Tasks.Task<InventorySchedule> AddInventoryScheduleRequestInventoryLocationIdschedulesPostAsync(string accept, string inventoryLocationId, AddInventoryScheduleRequest body = default(AddInventoryScheduleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add an inventory schedule to a location - {AddInventoryScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Add an inventory schedule to a location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventorySchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventorySchedule>> AddInventoryScheduleRequestInventoryLocationIdschedulesPostWithHttpInfoAsync(string accept, string inventoryLocationId, AddInventoryScheduleRequest body = default(AddInventoryScheduleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates an inventory location - {CreateInventoryLocationRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates an inventory location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryLocation</returns>
        System.Threading.Tasks.Task<InventoryLocation> CreateInventoryLocationRequestScopeIdPostAsync(string accept, string scopeId, CreateInventoryLocationRequest body = default(CreateInventoryLocationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates an inventory location - {CreateInventoryLocationRequest}
        /// </summary>
        /// <remarks>
        /// Creates or updates an inventory location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryLocation>> CreateInventoryLocationRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateInventoryLocationRequest body = default(CreateInventoryLocationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an inventory schedule - {DeleteInventoryScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Delete an inventory schedule
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="scheduleId">The inventory schedule identifier used to find the right schedule to update</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDeleteAsync(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an inventory schedule - {DeleteInventoryScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Delete an inventory schedule
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="scheduleId">The inventory schedule identifier used to find the right schedule to update</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDeleteWithHttpInfoAsync(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an inventory location by Id - {GetInventoryLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an inventory location by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="associatedLocationId">the business id for the inventory location to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryLocation</returns>
        System.Threading.Tasks.Task<InventoryLocation> GetInventoryLocationRequestScopeIdAssociatedLocationIdGetAsync(string accept, string scopeId, string associatedLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an inventory location by Id - {GetInventoryLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an inventory location by id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="associatedLocationId">the business id for the inventory location to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryLocation>> GetInventoryLocationRequestScopeIdAssociatedLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string associatedLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an inventory schedule of a location using its id - {GetInventoryScheduleByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an inventory schedule of a location using its id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scheduleId">the id of the schedule to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventorySchedule</returns>
        System.Threading.Tasks.Task<InventorySchedule> GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGetAsync(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an inventory schedule of a location using its id - {GetInventoryScheduleByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an inventory schedule of a location using its id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scheduleId">the id of the schedule to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventorySchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventorySchedule>> GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGetWithHttpInfoAsync(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all the inventory schedules of a location and a sku - {GetInventorySchedulesBySkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the inventory schedules of a location and a sku
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="sku">the sku for the product which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventorySchedule&gt;</returns>
        System.Threading.Tasks.Task<List<InventorySchedule>> GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGetAsync(string accept, string inventoryLocationId, string sku, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all the inventory schedules of a location and a sku - {GetInventorySchedulesBySkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the inventory schedules of a location and a sku
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="sku">the sku for the product which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventorySchedule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventorySchedule>>> GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGetWithHttpInfoAsync(string accept, string inventoryLocationId, string sku, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all the inventory schedules of a location - {GetInventorySchedulesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the inventory schedules of a location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventorySchedule&gt;</returns>
        System.Threading.Tasks.Task<List<InventorySchedule>> GetInventorySchedulesRequestInventoryLocationIdschedulesGetAsync(string accept, string inventoryLocationId, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all the inventory schedules of a location - {GetInventorySchedulesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the inventory schedules of a location
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventorySchedule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventorySchedule>>> GetInventorySchedulesRequestInventoryLocationIdschedulesGetWithHttpInfoAsync(string accept, string inventoryLocationId, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an inventory schedule daterange and status - {UpdateInventoryScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Update an inventory schedule daterange and status
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventorySchedule</returns>
        System.Threading.Tasks.Task<InventorySchedule> UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreateAsync(string accept, string inventoryLocationId, UpdateInventoryScheduleRequest body = default(UpdateInventoryScheduleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an inventory schedule daterange and status - {UpdateInventoryScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Update an inventory schedule daterange and status
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventorySchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventorySchedule>> UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreateWithHttpInfoAsync(string accept, string inventoryLocationId, UpdateInventoryScheduleRequest body = default(UpdateInventoryScheduleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryLocationsApi : IInventoryLocationsApiSync, IInventoryLocationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InventoryLocationsApi : IInventoryLocationsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryLocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InventoryLocationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryLocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InventoryLocationsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryLocationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InventoryLocationsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryLocationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InventoryLocationsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add an inventory schedule to a location - {AddInventoryScheduleRequest} Add an inventory schedule to a location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventorySchedule</returns>
        public InventorySchedule AddInventoryScheduleRequestInventoryLocationIdschedulesPost(string accept, string inventoryLocationId, AddInventoryScheduleRequest body = default(AddInventoryScheduleRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventorySchedule> localVarResponse = AddInventoryScheduleRequestInventoryLocationIdschedulesPostWithHttpInfo(accept, inventoryLocationId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an inventory schedule to a location - {AddInventoryScheduleRequest} Add an inventory schedule to a location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventorySchedule</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventorySchedule> AddInventoryScheduleRequestInventoryLocationIdschedulesPostWithHttpInfo(string accept, string inventoryLocationId, AddInventoryScheduleRequest body = default(AddInventoryScheduleRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->AddInventoryScheduleRequestInventoryLocationIdschedulesPost");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryLocationsApi->AddInventoryScheduleRequestInventoryLocationIdschedulesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InventorySchedule>("/inventoryLocations/{InventoryLocationId}/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddInventoryScheduleRequestInventoryLocationIdschedulesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an inventory schedule to a location - {AddInventoryScheduleRequest} Add an inventory schedule to a location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventorySchedule</returns>
        public async System.Threading.Tasks.Task<InventorySchedule> AddInventoryScheduleRequestInventoryLocationIdschedulesPostAsync(string accept, string inventoryLocationId, AddInventoryScheduleRequest body = default(AddInventoryScheduleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventorySchedule> localVarResponse = await AddInventoryScheduleRequestInventoryLocationIdschedulesPostWithHttpInfoAsync(accept, inventoryLocationId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an inventory schedule to a location - {AddInventoryScheduleRequest} Add an inventory schedule to a location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventorySchedule)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventorySchedule>> AddInventoryScheduleRequestInventoryLocationIdschedulesPostWithHttpInfoAsync(string accept, string inventoryLocationId, AddInventoryScheduleRequest body = default(AddInventoryScheduleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->AddInventoryScheduleRequestInventoryLocationIdschedulesPost");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryLocationsApi->AddInventoryScheduleRequestInventoryLocationIdschedulesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InventorySchedule>("/inventoryLocations/{InventoryLocationId}/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddInventoryScheduleRequestInventoryLocationIdschedulesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates an inventory location - {CreateInventoryLocationRequest} Creates or updates an inventory location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryLocation</returns>
        public InventoryLocation CreateInventoryLocationRequestScopeIdPost(string accept, string scopeId, CreateInventoryLocationRequest body = default(CreateInventoryLocationRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryLocation> localVarResponse = CreateInventoryLocationRequestScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates an inventory location - {CreateInventoryLocationRequest} Creates or updates an inventory location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryLocation</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryLocation> CreateInventoryLocationRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateInventoryLocationRequest body = default(CreateInventoryLocationRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->CreateInventoryLocationRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryLocationsApi->CreateInventoryLocationRequestScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InventoryLocation>("/inventoryLocations/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInventoryLocationRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates an inventory location - {CreateInventoryLocationRequest} Creates or updates an inventory location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryLocation</returns>
        public async System.Threading.Tasks.Task<InventoryLocation> CreateInventoryLocationRequestScopeIdPostAsync(string accept, string scopeId, CreateInventoryLocationRequest body = default(CreateInventoryLocationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryLocation> localVarResponse = await CreateInventoryLocationRequestScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates an inventory location - {CreateInventoryLocationRequest} Creates or updates an inventory location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryLocation)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryLocation>> CreateInventoryLocationRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateInventoryLocationRequest body = default(CreateInventoryLocationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->CreateInventoryLocationRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryLocationsApi->CreateInventoryLocationRequestScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InventoryLocation>("/inventoryLocations/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInventoryLocationRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inventory schedule - {DeleteInventoryScheduleRequest} Delete an inventory schedule
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="scheduleId">The inventory schedule identifier used to find the right schedule to update</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns></returns>
        public void DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDelete(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string))
        {
            DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDeleteWithHttpInfo(accept, inventoryLocationId, scheduleId, scopeId);
        }

        /// <summary>
        /// Delete an inventory schedule - {DeleteInventoryScheduleRequest} Delete an inventory schedule
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="scheduleId">The inventory schedule identifier used to find the right schedule to update</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDeleteWithHttpInfo(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDelete");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryLocationsApi->DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDelete");

            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling InventoryLocationsApi->DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ScheduleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter
            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/inventoryLocations/{InventoryLocationId}/schedules/{ScheduleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inventory schedule - {DeleteInventoryScheduleRequest} Delete an inventory schedule
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="scheduleId">The inventory schedule identifier used to find the right schedule to update</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDeleteAsync(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDeleteWithHttpInfoAsync(accept, inventoryLocationId, scheduleId, scopeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an inventory schedule - {DeleteInventoryScheduleRequest} Delete an inventory schedule
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="scheduleId">The inventory schedule identifier used to find the right schedule to update</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDeleteWithHttpInfoAsync(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDelete");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryLocationsApi->DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDelete");

            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling InventoryLocationsApi->DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ScheduleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter
            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/inventoryLocations/{InventoryLocationId}/schedules/{ScheduleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInventoryScheduleRequestInventoryLocationIdschedulesScheduleIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an inventory location by Id - {GetInventoryLocationRequest} Retrieve an inventory location by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="associatedLocationId">the business id for the inventory location to retrieve</param>
        /// <returns>InventoryLocation</returns>
        public InventoryLocation GetInventoryLocationRequestScopeIdAssociatedLocationIdGet(string accept, string scopeId, string associatedLocationId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryLocation> localVarResponse = GetInventoryLocationRequestScopeIdAssociatedLocationIdGetWithHttpInfo(accept, scopeId, associatedLocationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an inventory location by Id - {GetInventoryLocationRequest} Retrieve an inventory location by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="associatedLocationId">the business id for the inventory location to retrieve</param>
        /// <returns>ApiResponse of InventoryLocation</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryLocation> GetInventoryLocationRequestScopeIdAssociatedLocationIdGetWithHttpInfo(string accept, string scopeId, string associatedLocationId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->GetInventoryLocationRequestScopeIdAssociatedLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryLocationsApi->GetInventoryLocationRequestScopeIdAssociatedLocationIdGet");

            // verify the required parameter 'associatedLocationId' is set
            if (associatedLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'associatedLocationId' when calling InventoryLocationsApi->GetInventoryLocationRequestScopeIdAssociatedLocationIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AssociatedLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(associatedLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryLocation>("/inventoryLocations/{ScopeId}/{AssociatedLocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryLocationRequestScopeIdAssociatedLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an inventory location by Id - {GetInventoryLocationRequest} Retrieve an inventory location by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="associatedLocationId">the business id for the inventory location to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryLocation</returns>
        public async System.Threading.Tasks.Task<InventoryLocation> GetInventoryLocationRequestScopeIdAssociatedLocationIdGetAsync(string accept, string scopeId, string associatedLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryLocation> localVarResponse = await GetInventoryLocationRequestScopeIdAssociatedLocationIdGetWithHttpInfoAsync(accept, scopeId, associatedLocationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an inventory location by Id - {GetInventoryLocationRequest} Retrieve an inventory location by id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="associatedLocationId">the business id for the inventory location to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryLocation)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryLocation>> GetInventoryLocationRequestScopeIdAssociatedLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string associatedLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->GetInventoryLocationRequestScopeIdAssociatedLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryLocationsApi->GetInventoryLocationRequestScopeIdAssociatedLocationIdGet");

            // verify the required parameter 'associatedLocationId' is set
            if (associatedLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'associatedLocationId' when calling InventoryLocationsApi->GetInventoryLocationRequestScopeIdAssociatedLocationIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("AssociatedLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(associatedLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InventoryLocation>("/inventoryLocations/{ScopeId}/{AssociatedLocationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryLocationRequestScopeIdAssociatedLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an inventory schedule of a location using its id - {GetInventoryScheduleByIdRequest} Retrieve an inventory schedule of a location using its id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scheduleId">the id of the schedule to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>InventorySchedule</returns>
        public InventorySchedule GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGet(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventorySchedule> localVarResponse = GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGetWithHttpInfo(accept, inventoryLocationId, scheduleId, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an inventory schedule of a location using its id - {GetInventoryScheduleByIdRequest} Retrieve an inventory schedule of a location using its id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scheduleId">the id of the schedule to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of InventorySchedule</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventorySchedule> GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGetWithHttpInfo(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGet");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryLocationsApi->GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGet");

            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling InventoryLocationsApi->GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ScheduleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter
            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<InventorySchedule>("/inventoryLocations/{InventoryLocationId}/schedules/byId/{ScheduleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an inventory schedule of a location using its id - {GetInventoryScheduleByIdRequest} Retrieve an inventory schedule of a location using its id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scheduleId">the id of the schedule to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventorySchedule</returns>
        public async System.Threading.Tasks.Task<InventorySchedule> GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGetAsync(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventorySchedule> localVarResponse = await GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGetWithHttpInfoAsync(accept, inventoryLocationId, scheduleId, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an inventory schedule of a location using its id - {GetInventoryScheduleByIdRequest} Retrieve an inventory schedule of a location using its id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scheduleId">the id of the schedule to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventorySchedule)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventorySchedule>> GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGetWithHttpInfoAsync(string accept, string inventoryLocationId, string scheduleId, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGet");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryLocationsApi->GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGet");

            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling InventoryLocationsApi->GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ScheduleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter
            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InventorySchedule>("/inventoryLocations/{InventoryLocationId}/schedules/byId/{ScheduleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryScheduleByIdRequestInventoryLocationIdschedulesbyIdScheduleIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the inventory schedules of a location and a sku - {GetInventorySchedulesBySkuRequest} Retrieve all the inventory schedules of a location and a sku
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="sku">the sku for the product which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>List&lt;InventorySchedule&gt;</returns>
        public List<InventorySchedule> GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGet(string accept, string inventoryLocationId, string sku, string scopeId = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventorySchedule>> localVarResponse = GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGetWithHttpInfo(accept, inventoryLocationId, sku, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the inventory schedules of a location and a sku - {GetInventorySchedulesBySkuRequest} Retrieve all the inventory schedules of a location and a sku
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="sku">the sku for the product which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of List&lt;InventorySchedule&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventorySchedule>> GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGetWithHttpInfo(string accept, string inventoryLocationId, string sku, string scopeId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGet");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryLocationsApi->GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGet");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryLocationsApi->GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InventorySchedule>>("/inventoryLocations/{InventoryLocationId}/schedules/bySku/{Sku}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the inventory schedules of a location and a sku - {GetInventorySchedulesBySkuRequest} Retrieve all the inventory schedules of a location and a sku
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="sku">the sku for the product which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventorySchedule&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventorySchedule>> GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGetAsync(string accept, string inventoryLocationId, string sku, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventorySchedule>> localVarResponse = await GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGetWithHttpInfoAsync(accept, inventoryLocationId, sku, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the inventory schedules of a location and a sku - {GetInventorySchedulesBySkuRequest} Retrieve all the inventory schedules of a location and a sku
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="sku">the sku for the product which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventorySchedule&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventorySchedule>>> GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGetWithHttpInfoAsync(string accept, string inventoryLocationId, string sku, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGet");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryLocationsApi->GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGet");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryLocationsApi->GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InventorySchedule>>("/inventoryLocations/{InventoryLocationId}/schedules/bySku/{Sku}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventorySchedulesBySkuRequestInventoryLocationIdschedulesbySkuSkuGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the inventory schedules of a location - {GetInventorySchedulesRequest} Retrieve all the inventory schedules of a location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>List&lt;InventorySchedule&gt;</returns>
        public List<InventorySchedule> GetInventorySchedulesRequestInventoryLocationIdschedulesGet(string accept, string inventoryLocationId, string scopeId = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventorySchedule>> localVarResponse = GetInventorySchedulesRequestInventoryLocationIdschedulesGetWithHttpInfo(accept, inventoryLocationId, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the inventory schedules of a location - {GetInventorySchedulesRequest} Retrieve all the inventory schedules of a location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <returns>ApiResponse of List&lt;InventorySchedule&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventorySchedule>> GetInventorySchedulesRequestInventoryLocationIdschedulesGetWithHttpInfo(string accept, string inventoryLocationId, string scopeId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->GetInventorySchedulesRequestInventoryLocationIdschedulesGet");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryLocationsApi->GetInventorySchedulesRequestInventoryLocationIdschedulesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InventorySchedule>>("/inventoryLocations/{InventoryLocationId}/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventorySchedulesRequestInventoryLocationIdschedulesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the inventory schedules of a location - {GetInventorySchedulesRequest} Retrieve all the inventory schedules of a location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventorySchedule&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventorySchedule>> GetInventorySchedulesRequestInventoryLocationIdschedulesGetAsync(string accept, string inventoryLocationId, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventorySchedule>> localVarResponse = await GetInventorySchedulesRequestInventoryLocationIdschedulesGetWithHttpInfoAsync(accept, inventoryLocationId, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the inventory schedules of a location - {GetInventorySchedulesRequest} Retrieve all the inventory schedules of a location
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">the business id for the inventory location which schedules to retrieve</param>
        /// <param name="scopeId">The id of the requested scope (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventorySchedule&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventorySchedule>>> GetInventorySchedulesRequestInventoryLocationIdschedulesGetWithHttpInfoAsync(string accept, string inventoryLocationId, string scopeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->GetInventorySchedulesRequestInventoryLocationIdschedulesGet");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryLocationsApi->GetInventorySchedulesRequestInventoryLocationIdschedulesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            if (scopeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScopeId", scopeId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InventorySchedule>>("/inventoryLocations/{InventoryLocationId}/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventorySchedulesRequestInventoryLocationIdschedulesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an inventory schedule daterange and status - {UpdateInventoryScheduleRequest} Update an inventory schedule daterange and status
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventorySchedule</returns>
        public InventorySchedule UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreate(string accept, string inventoryLocationId, UpdateInventoryScheduleRequest body = default(UpdateInventoryScheduleRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventorySchedule> localVarResponse = UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreateWithHttpInfo(accept, inventoryLocationId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an inventory schedule daterange and status - {UpdateInventoryScheduleRequest} Update an inventory schedule daterange and status
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventorySchedule</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventorySchedule> UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreateWithHttpInfo(string accept, string inventoryLocationId, UpdateInventoryScheduleRequest body = default(UpdateInventoryScheduleRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreate");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryLocationsApi->UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<InventorySchedule>("/inventoryLocations/{InventoryLocationId}/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an inventory schedule daterange and status - {UpdateInventoryScheduleRequest} Update an inventory schedule daterange and status
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventorySchedule</returns>
        public async System.Threading.Tasks.Task<InventorySchedule> UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreateAsync(string accept, string inventoryLocationId, UpdateInventoryScheduleRequest body = default(UpdateInventoryScheduleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventorySchedule> localVarResponse = await UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreateWithHttpInfoAsync(accept, inventoryLocationId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an inventory schedule daterange and status - {UpdateInventoryScheduleRequest} Update an inventory schedule daterange and status
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right schedule to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventorySchedule)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventorySchedule>> UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreateWithHttpInfoAsync(string accept, string inventoryLocationId, UpdateInventoryScheduleRequest body = default(UpdateInventoryScheduleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryLocationsApi->UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreate");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryLocationsApi->UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<InventorySchedule>("/inventoryLocations/{InventoryLocationId}/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInventoryScheduleRequestInventoryLocationIdschedulesCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
