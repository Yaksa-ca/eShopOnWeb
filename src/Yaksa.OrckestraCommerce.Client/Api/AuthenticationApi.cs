/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Sign in the customer with credentials - {CustomerSignInRequest}
        /// </summary>
        /// <remarks>
        /// Sign in the customer with credentials.  Return a token.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Token</returns>
        Token CustomerSignInRequestcustomersigninPost(string accept, CustomerSignInRequest body = default(CustomerSignInRequest));

        /// <summary>
        /// Sign in the customer with credentials - {CustomerSignInRequest}
        /// </summary>
        /// <remarks>
        /// Sign in the customer with credentials.  Return a token.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> CustomerSignInRequestcustomersigninPostWithHttpInfo(string accept, CustomerSignInRequest body = default(CustomerSignInRequest));
        /// <summary>
        /// Returns a redirect to the provided returl url. - {FederationSignoutReplyRequest}
        /// </summary>
        /// <remarks>
        /// Returns a redirect to the provided returl url. This service acts as a pass-thru for Azure active directory reply from signout.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="returnUrl">the return URL. (optional)</param>
        /// <returns>Object</returns>
        Object FederationSignoutReplyRequestfedsignoutreplyGet(string accept, string returnUrl = default(string));

        /// <summary>
        /// Returns a redirect to the provided returl url. - {FederationSignoutReplyRequest}
        /// </summary>
        /// <remarks>
        /// Returns a redirect to the provided returl url. This service acts as a pass-thru for Azure active directory reply from signout.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="returnUrl">the return URL. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> FederationSignoutReplyRequestfedsignoutreplyGetWithHttpInfo(string accept, string returnUrl = default(string));
        /// <summary>
        /// Get the authentication configuration. - {GetAuthenticationConfiguration}
        /// </summary>
        /// <remarks>
        /// Get the authentication configuration.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>AuthenticationConfiguration</returns>
        AuthenticationConfiguration GetAuthenticationConfigurationconfigurationGet(string accept);

        /// <summary>
        /// Get the authentication configuration. - {GetAuthenticationConfiguration}
        /// </summary>
        /// <remarks>
        /// Get the authentication configuration.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of AuthenticationConfiguration</returns>
        ApiResponse<AuthenticationConfiguration> GetAuthenticationConfigurationconfigurationGetWithHttpInfo(string accept);
        /// <summary>
        /// Get the authentication status. - {GetAuthenticationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Get the authentication status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>AuthenticatedStatus</returns>
        AuthenticatedStatus GetAuthenticationStatusRequeststatusGet(string accept);

        /// <summary>
        /// Get the authentication status. - {GetAuthenticationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Get the authentication status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of AuthenticatedStatus</returns>
        ApiResponse<AuthenticatedStatus> GetAuthenticationStatusRequeststatusGetWithHttpInfo(string accept);
        /// <summary>
        /// Get the user profile. - {GetUserPermissionsRequest}
        /// </summary>
        /// <remarks>
        /// Get the user profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>UserPermissions</returns>
        UserPermissions GetUserPermissionsRequestprofileGet(string accept);

        /// <summary>
        /// Get the user profile. - {GetUserPermissionsRequest}
        /// </summary>
        /// <remarks>
        /// Get the user profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of UserPermissions</returns>
        ApiResponse<UserPermissions> GetUserPermissionsRequestprofileGetWithHttpInfo(string accept);
        /// <summary>
        /// Redirect the user from where he came from - {SignInRequest}
        /// </summary>
        /// <remarks>
        /// Redirect the user from where he came from.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object SignInRequestsigninPost(string accept, SignInRequest body = default(SignInRequest));

        /// <summary>
        /// Redirect the user from where he came from - {SignInRequest}
        /// </summary>
        /// <remarks>
        /// Redirect the user from where he came from.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SignInRequestsigninPostWithHttpInfo(string accept, SignInRequest body = default(SignInRequest));
        /// <summary>
        /// Sign in the user with credentials. - {SignInWithCredentialsRequest}
        /// </summary>
        /// <remarks>
        /// Sign in the user with credentials.  Return a security token.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserPermissions</returns>
        UserPermissions SignInWithCredentialsRequestsigninwithcredentialsPost(string accept, SignInWithCredentialsRequest body = default(SignInWithCredentialsRequest));

        /// <summary>
        /// Sign in the user with credentials. - {SignInWithCredentialsRequest}
        /// </summary>
        /// <remarks>
        /// Sign in the user with credentials.  Return a security token.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserPermissions</returns>
        ApiResponse<UserPermissions> SignInWithCredentialsRequestsigninwithcredentialsPostWithHttpInfo(string accept, SignInWithCredentialsRequest body = default(SignInWithCredentialsRequest));
        /// <summary>
        /// Sign in the user with a received token. - {SignInWithIssuedTokenRequest}
        /// </summary>
        /// <remarks>
        /// Sign in the user with a received token.  Return the user permissions when the authentication is successfull.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserPermissions</returns>
        UserPermissions SignInWithIssuedTokenRequestsigninwithtokenPost(string accept, SignInWithIssuedTokenRequest body = default(SignInWithIssuedTokenRequest));

        /// <summary>
        /// Sign in the user with a received token. - {SignInWithIssuedTokenRequest}
        /// </summary>
        /// <remarks>
        /// Sign in the user with a received token.  Return the user permissions when the authentication is successfull.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserPermissions</returns>
        ApiResponse<UserPermissions> SignInWithIssuedTokenRequestsigninwithtokenPostWithHttpInfo(string accept, SignInWithIssuedTokenRequest body = default(SignInWithIssuedTokenRequest));
        /// <summary>
        /// Sign in user with JWT token. Set authentication cookies and return the current user permissions. - {SignInWithJWTRequest}
        /// </summary>
        /// <remarks>
        /// Sign in user with JWT token. Set authentication cookies and return the current user permissions.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserPermissions</returns>
        UserPermissions SignInWithJWTRequestsigninwithjwtPost(string accept, SignInWithJWTRequest body = default(SignInWithJWTRequest));

        /// <summary>
        /// Sign in user with JWT token. Set authentication cookies and return the current user permissions. - {SignInWithJWTRequest}
        /// </summary>
        /// <remarks>
        /// Sign in user with JWT token. Set authentication cookies and return the current user permissions.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserPermissions</returns>
        ApiResponse<UserPermissions> SignInWithJWTRequestsigninwithjwtPostWithHttpInfo(string accept, SignInWithJWTRequest body = default(SignInWithJWTRequest));
        /// <summary>
        /// Signout the user - {SignOutRequest}
        /// </summary>
        /// <remarks>
        /// Signout the user
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SignOutRequestsignoutPost(string accept, SignOutRequest body = default(SignOutRequest));

        /// <summary>
        /// Signout the user - {SignOutRequest}
        /// </summary>
        /// <remarks>
        /// Signout the user
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SignOutRequestsignoutPostWithHttpInfo(string accept, SignOutRequest body = default(SignOutRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Sign in the customer with credentials - {CustomerSignInRequest}
        /// </summary>
        /// <remarks>
        /// Sign in the customer with credentials.  Return a token.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> CustomerSignInRequestcustomersigninPostAsync(string accept, CustomerSignInRequest body = default(CustomerSignInRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sign in the customer with credentials - {CustomerSignInRequest}
        /// </summary>
        /// <remarks>
        /// Sign in the customer with credentials.  Return a token.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> CustomerSignInRequestcustomersigninPostWithHttpInfoAsync(string accept, CustomerSignInRequest body = default(CustomerSignInRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a redirect to the provided returl url. - {FederationSignoutReplyRequest}
        /// </summary>
        /// <remarks>
        /// Returns a redirect to the provided returl url. This service acts as a pass-thru for Azure active directory reply from signout.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="returnUrl">the return URL. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> FederationSignoutReplyRequestfedsignoutreplyGetAsync(string accept, string returnUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a redirect to the provided returl url. - {FederationSignoutReplyRequest}
        /// </summary>
        /// <remarks>
        /// Returns a redirect to the provided returl url. This service acts as a pass-thru for Azure active directory reply from signout.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="returnUrl">the return URL. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FederationSignoutReplyRequestfedsignoutreplyGetWithHttpInfoAsync(string accept, string returnUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the authentication configuration. - {GetAuthenticationConfiguration}
        /// </summary>
        /// <remarks>
        /// Get the authentication configuration.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationConfiguration</returns>
        System.Threading.Tasks.Task<AuthenticationConfiguration> GetAuthenticationConfigurationconfigurationGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the authentication configuration. - {GetAuthenticationConfiguration}
        /// </summary>
        /// <remarks>
        /// Get the authentication configuration.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationConfiguration>> GetAuthenticationConfigurationconfigurationGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the authentication status. - {GetAuthenticationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Get the authentication status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticatedStatus</returns>
        System.Threading.Tasks.Task<AuthenticatedStatus> GetAuthenticationStatusRequeststatusGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the authentication status. - {GetAuthenticationStatusRequest}
        /// </summary>
        /// <remarks>
        /// Get the authentication status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticatedStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticatedStatus>> GetAuthenticationStatusRequeststatusGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the user profile. - {GetUserPermissionsRequest}
        /// </summary>
        /// <remarks>
        /// Get the user profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPermissions</returns>
        System.Threading.Tasks.Task<UserPermissions> GetUserPermissionsRequestprofileGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the user profile. - {GetUserPermissionsRequest}
        /// </summary>
        /// <remarks>
        /// Get the user profile.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPermissions)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPermissions>> GetUserPermissionsRequestprofileGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Redirect the user from where he came from - {SignInRequest}
        /// </summary>
        /// <remarks>
        /// Redirect the user from where he came from.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SignInRequestsigninPostAsync(string accept, SignInRequest body = default(SignInRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Redirect the user from where he came from - {SignInRequest}
        /// </summary>
        /// <remarks>
        /// Redirect the user from where he came from.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SignInRequestsigninPostWithHttpInfoAsync(string accept, SignInRequest body = default(SignInRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sign in the user with credentials. - {SignInWithCredentialsRequest}
        /// </summary>
        /// <remarks>
        /// Sign in the user with credentials.  Return a security token.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPermissions</returns>
        System.Threading.Tasks.Task<UserPermissions> SignInWithCredentialsRequestsigninwithcredentialsPostAsync(string accept, SignInWithCredentialsRequest body = default(SignInWithCredentialsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sign in the user with credentials. - {SignInWithCredentialsRequest}
        /// </summary>
        /// <remarks>
        /// Sign in the user with credentials.  Return a security token.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPermissions)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPermissions>> SignInWithCredentialsRequestsigninwithcredentialsPostWithHttpInfoAsync(string accept, SignInWithCredentialsRequest body = default(SignInWithCredentialsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sign in the user with a received token. - {SignInWithIssuedTokenRequest}
        /// </summary>
        /// <remarks>
        /// Sign in the user with a received token.  Return the user permissions when the authentication is successfull.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPermissions</returns>
        System.Threading.Tasks.Task<UserPermissions> SignInWithIssuedTokenRequestsigninwithtokenPostAsync(string accept, SignInWithIssuedTokenRequest body = default(SignInWithIssuedTokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sign in the user with a received token. - {SignInWithIssuedTokenRequest}
        /// </summary>
        /// <remarks>
        /// Sign in the user with a received token.  Return the user permissions when the authentication is successfull.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPermissions)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPermissions>> SignInWithIssuedTokenRequestsigninwithtokenPostWithHttpInfoAsync(string accept, SignInWithIssuedTokenRequest body = default(SignInWithIssuedTokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sign in user with JWT token. Set authentication cookies and return the current user permissions. - {SignInWithJWTRequest}
        /// </summary>
        /// <remarks>
        /// Sign in user with JWT token. Set authentication cookies and return the current user permissions.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPermissions</returns>
        System.Threading.Tasks.Task<UserPermissions> SignInWithJWTRequestsigninwithjwtPostAsync(string accept, SignInWithJWTRequest body = default(SignInWithJWTRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sign in user with JWT token. Set authentication cookies and return the current user permissions. - {SignInWithJWTRequest}
        /// </summary>
        /// <remarks>
        /// Sign in user with JWT token. Set authentication cookies and return the current user permissions.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPermissions)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPermissions>> SignInWithJWTRequestsigninwithjwtPostWithHttpInfoAsync(string accept, SignInWithJWTRequest body = default(SignInWithJWTRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Signout the user - {SignOutRequest}
        /// </summary>
        /// <remarks>
        /// Signout the user
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SignOutRequestsignoutPostAsync(string accept, SignOutRequest body = default(SignOutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Signout the user - {SignOutRequest}
        /// </summary>
        /// <remarks>
        /// Signout the user
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SignOutRequestsignoutPostWithHttpInfoAsync(string accept, SignOutRequest body = default(SignOutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IAuthenticationApiSync, IAuthenticationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthenticationApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Sign in the customer with credentials - {CustomerSignInRequest} Sign in the customer with credentials.  Return a token.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Token</returns>
        public Token CustomerSignInRequestcustomersigninPost(string accept, CustomerSignInRequest body = default(CustomerSignInRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Token> localVarResponse = CustomerSignInRequestcustomersigninPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign in the customer with credentials - {CustomerSignInRequest} Sign in the customer with credentials.  Return a token.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Token</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Token> CustomerSignInRequestcustomersigninPostWithHttpInfo(string accept, CustomerSignInRequest body = default(CustomerSignInRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->CustomerSignInRequestcustomersigninPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Token>("/authentication/customer/signin", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerSignInRequestcustomersigninPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign in the customer with credentials - {CustomerSignInRequest} Sign in the customer with credentials.  Return a token.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> CustomerSignInRequestcustomersigninPostAsync(string accept, CustomerSignInRequest body = default(CustomerSignInRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Token> localVarResponse = await CustomerSignInRequestcustomersigninPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign in the customer with credentials - {CustomerSignInRequest} Sign in the customer with credentials.  Return a token.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Token>> CustomerSignInRequestcustomersigninPostWithHttpInfoAsync(string accept, CustomerSignInRequest body = default(CustomerSignInRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->CustomerSignInRequestcustomersigninPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Token>("/authentication/customer/signin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerSignInRequestcustomersigninPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a redirect to the provided returl url. - {FederationSignoutReplyRequest} Returns a redirect to the provided returl url. This service acts as a pass-thru for Azure active directory reply from signout.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="returnUrl">the return URL. (optional)</param>
        /// <returns>Object</returns>
        public Object FederationSignoutReplyRequestfedsignoutreplyGet(string accept, string returnUrl = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> localVarResponse = FederationSignoutReplyRequestfedsignoutreplyGetWithHttpInfo(accept, returnUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a redirect to the provided returl url. - {FederationSignoutReplyRequest} Returns a redirect to the provided returl url. This service acts as a pass-thru for Azure active directory reply from signout.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="returnUrl">the return URL. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> FederationSignoutReplyRequestfedsignoutreplyGetWithHttpInfo(string accept, string returnUrl = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->FederationSignoutReplyRequestfedsignoutreplyGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (returnUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ReturnUrl", returnUrl));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/authentication/fedsignoutreply", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FederationSignoutReplyRequestfedsignoutreplyGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a redirect to the provided returl url. - {FederationSignoutReplyRequest} Returns a redirect to the provided returl url. This service acts as a pass-thru for Azure active directory reply from signout.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="returnUrl">the return URL. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> FederationSignoutReplyRequestfedsignoutreplyGetAsync(string accept, string returnUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> localVarResponse = await FederationSignoutReplyRequestfedsignoutreplyGetWithHttpInfoAsync(accept, returnUrl, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a redirect to the provided returl url. - {FederationSignoutReplyRequest} Returns a redirect to the provided returl url. This service acts as a pass-thru for Azure active directory reply from signout.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="returnUrl">the return URL. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> FederationSignoutReplyRequestfedsignoutreplyGetWithHttpInfoAsync(string accept, string returnUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->FederationSignoutReplyRequestfedsignoutreplyGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (returnUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ReturnUrl", returnUrl));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/authentication/fedsignoutreply", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FederationSignoutReplyRequestfedsignoutreplyGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the authentication configuration. - {GetAuthenticationConfiguration} Get the authentication configuration.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>AuthenticationConfiguration</returns>
        public AuthenticationConfiguration GetAuthenticationConfigurationconfigurationGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AuthenticationConfiguration> localVarResponse = GetAuthenticationConfigurationconfigurationGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the authentication configuration. - {GetAuthenticationConfiguration} Get the authentication configuration.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of AuthenticationConfiguration</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AuthenticationConfiguration> GetAuthenticationConfigurationconfigurationGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->GetAuthenticationConfigurationconfigurationGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthenticationConfiguration>("/authentication/configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthenticationConfigurationconfigurationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the authentication configuration. - {GetAuthenticationConfiguration} Get the authentication configuration.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationConfiguration</returns>
        public async System.Threading.Tasks.Task<AuthenticationConfiguration> GetAuthenticationConfigurationconfigurationGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AuthenticationConfiguration> localVarResponse = await GetAuthenticationConfigurationconfigurationGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the authentication configuration. - {GetAuthenticationConfiguration} Get the authentication configuration.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationConfiguration)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AuthenticationConfiguration>> GetAuthenticationConfigurationconfigurationGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->GetAuthenticationConfigurationconfigurationGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthenticationConfiguration>("/authentication/configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthenticationConfigurationconfigurationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the authentication status. - {GetAuthenticationStatusRequest} Get the authentication status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>AuthenticatedStatus</returns>
        public AuthenticatedStatus GetAuthenticationStatusRequeststatusGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AuthenticatedStatus> localVarResponse = GetAuthenticationStatusRequeststatusGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the authentication status. - {GetAuthenticationStatusRequest} Get the authentication status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of AuthenticatedStatus</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AuthenticatedStatus> GetAuthenticationStatusRequeststatusGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->GetAuthenticationStatusRequeststatusGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthenticatedStatus>("/authentication/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthenticationStatusRequeststatusGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the authentication status. - {GetAuthenticationStatusRequest} Get the authentication status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticatedStatus</returns>
        public async System.Threading.Tasks.Task<AuthenticatedStatus> GetAuthenticationStatusRequeststatusGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AuthenticatedStatus> localVarResponse = await GetAuthenticationStatusRequeststatusGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the authentication status. - {GetAuthenticationStatusRequest} Get the authentication status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticatedStatus)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<AuthenticatedStatus>> GetAuthenticationStatusRequeststatusGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->GetAuthenticationStatusRequeststatusGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthenticatedStatus>("/authentication/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthenticationStatusRequeststatusGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the user profile. - {GetUserPermissionsRequest} Get the user profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>UserPermissions</returns>
        public UserPermissions GetUserPermissionsRequestprofileGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions> localVarResponse = GetUserPermissionsRequestprofileGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user profile. - {GetUserPermissionsRequest} Get the user profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of UserPermissions</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions> GetUserPermissionsRequestprofileGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->GetUserPermissionsRequestprofileGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserPermissions>("/authentication/profile", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPermissionsRequestprofileGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the user profile. - {GetUserPermissionsRequest} Get the user profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPermissions</returns>
        public async System.Threading.Tasks.Task<UserPermissions> GetUserPermissionsRequestprofileGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions> localVarResponse = await GetUserPermissionsRequestprofileGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user profile. - {GetUserPermissionsRequest} Get the user profile.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPermissions)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions>> GetUserPermissionsRequestprofileGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->GetUserPermissionsRequestprofileGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserPermissions>("/authentication/profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPermissionsRequestprofileGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redirect the user from where he came from - {SignInRequest} Redirect the user from where he came from.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object SignInRequestsigninPost(string accept, SignInRequest body = default(SignInRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> localVarResponse = SignInRequestsigninPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redirect the user from where he came from - {SignInRequest} Redirect the user from where he came from.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> SignInRequestsigninPostWithHttpInfo(string accept, SignInRequest body = default(SignInRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->SignInRequestsigninPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/authentication/signin", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignInRequestsigninPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redirect the user from where he came from - {SignInRequest} Redirect the user from where he came from.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SignInRequestsigninPostAsync(string accept, SignInRequest body = default(SignInRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> localVarResponse = await SignInRequestsigninPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redirect the user from where he came from - {SignInRequest} Redirect the user from where he came from.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> SignInRequestsigninPostWithHttpInfoAsync(string accept, SignInRequest body = default(SignInRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->SignInRequestsigninPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/authentication/signin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignInRequestsigninPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign in the user with credentials. - {SignInWithCredentialsRequest} Sign in the user with credentials.  Return a security token.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserPermissions</returns>
        public UserPermissions SignInWithCredentialsRequestsigninwithcredentialsPost(string accept, SignInWithCredentialsRequest body = default(SignInWithCredentialsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions> localVarResponse = SignInWithCredentialsRequestsigninwithcredentialsPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign in the user with credentials. - {SignInWithCredentialsRequest} Sign in the user with credentials.  Return a security token.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserPermissions</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions> SignInWithCredentialsRequestsigninwithcredentialsPostWithHttpInfo(string accept, SignInWithCredentialsRequest body = default(SignInWithCredentialsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->SignInWithCredentialsRequestsigninwithcredentialsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UserPermissions>("/authentication/signinwithcredentials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignInWithCredentialsRequestsigninwithcredentialsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign in the user with credentials. - {SignInWithCredentialsRequest} Sign in the user with credentials.  Return a security token.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPermissions</returns>
        public async System.Threading.Tasks.Task<UserPermissions> SignInWithCredentialsRequestsigninwithcredentialsPostAsync(string accept, SignInWithCredentialsRequest body = default(SignInWithCredentialsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions> localVarResponse = await SignInWithCredentialsRequestsigninwithcredentialsPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign in the user with credentials. - {SignInWithCredentialsRequest} Sign in the user with credentials.  Return a security token.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPermissions)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions>> SignInWithCredentialsRequestsigninwithcredentialsPostWithHttpInfoAsync(string accept, SignInWithCredentialsRequest body = default(SignInWithCredentialsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->SignInWithCredentialsRequestsigninwithcredentialsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserPermissions>("/authentication/signinwithcredentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignInWithCredentialsRequestsigninwithcredentialsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign in the user with a received token. - {SignInWithIssuedTokenRequest} Sign in the user with a received token.  Return the user permissions when the authentication is successfull.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserPermissions</returns>
        public UserPermissions SignInWithIssuedTokenRequestsigninwithtokenPost(string accept, SignInWithIssuedTokenRequest body = default(SignInWithIssuedTokenRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions> localVarResponse = SignInWithIssuedTokenRequestsigninwithtokenPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign in the user with a received token. - {SignInWithIssuedTokenRequest} Sign in the user with a received token.  Return the user permissions when the authentication is successfull.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserPermissions</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions> SignInWithIssuedTokenRequestsigninwithtokenPostWithHttpInfo(string accept, SignInWithIssuedTokenRequest body = default(SignInWithIssuedTokenRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->SignInWithIssuedTokenRequestsigninwithtokenPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UserPermissions>("/authentication/signinwithtoken", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignInWithIssuedTokenRequestsigninwithtokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign in the user with a received token. - {SignInWithIssuedTokenRequest} Sign in the user with a received token.  Return the user permissions when the authentication is successfull.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPermissions</returns>
        public async System.Threading.Tasks.Task<UserPermissions> SignInWithIssuedTokenRequestsigninwithtokenPostAsync(string accept, SignInWithIssuedTokenRequest body = default(SignInWithIssuedTokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions> localVarResponse = await SignInWithIssuedTokenRequestsigninwithtokenPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign in the user with a received token. - {SignInWithIssuedTokenRequest} Sign in the user with a received token.  Return the user permissions when the authentication is successfull.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPermissions)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions>> SignInWithIssuedTokenRequestsigninwithtokenPostWithHttpInfoAsync(string accept, SignInWithIssuedTokenRequest body = default(SignInWithIssuedTokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->SignInWithIssuedTokenRequestsigninwithtokenPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserPermissions>("/authentication/signinwithtoken", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignInWithIssuedTokenRequestsigninwithtokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign in user with JWT token. Set authentication cookies and return the current user permissions. - {SignInWithJWTRequest} Sign in user with JWT token. Set authentication cookies and return the current user permissions.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserPermissions</returns>
        public UserPermissions SignInWithJWTRequestsigninwithjwtPost(string accept, SignInWithJWTRequest body = default(SignInWithJWTRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions> localVarResponse = SignInWithJWTRequestsigninwithjwtPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign in user with JWT token. Set authentication cookies and return the current user permissions. - {SignInWithJWTRequest} Sign in user with JWT token. Set authentication cookies and return the current user permissions.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserPermissions</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions> SignInWithJWTRequestsigninwithjwtPostWithHttpInfo(string accept, SignInWithJWTRequest body = default(SignInWithJWTRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->SignInWithJWTRequestsigninwithjwtPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UserPermissions>("/authentication/signinwithjwt", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignInWithJWTRequestsigninwithjwtPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign in user with JWT token. Set authentication cookies and return the current user permissions. - {SignInWithJWTRequest} Sign in user with JWT token. Set authentication cookies and return the current user permissions.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPermissions</returns>
        public async System.Threading.Tasks.Task<UserPermissions> SignInWithJWTRequestsigninwithjwtPostAsync(string accept, SignInWithJWTRequest body = default(SignInWithJWTRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions> localVarResponse = await SignInWithJWTRequestsigninwithjwtPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign in user with JWT token. Set authentication cookies and return the current user permissions. - {SignInWithJWTRequest} Sign in user with JWT token. Set authentication cookies and return the current user permissions.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPermissions)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<UserPermissions>> SignInWithJWTRequestsigninwithjwtPostWithHttpInfoAsync(string accept, SignInWithJWTRequest body = default(SignInWithJWTRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->SignInWithJWTRequestsigninwithjwtPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserPermissions>("/authentication/signinwithjwt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignInWithJWTRequestsigninwithjwtPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Signout the user - {SignOutRequest} Signout the user
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SignOutRequestsignoutPost(string accept, SignOutRequest body = default(SignOutRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = SignOutRequestsignoutPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Signout the user - {SignOutRequest} Signout the user
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> SignOutRequestsignoutPostWithHttpInfo(string accept, SignOutRequest body = default(SignOutRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->SignOutRequestsignoutPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/authentication/signout", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignOutRequestsignoutPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Signout the user - {SignOutRequest} Signout the user
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SignOutRequestsignoutPostAsync(string accept, SignOutRequest body = default(SignOutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = await SignOutRequestsignoutPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Signout the user - {SignOutRequest} Signout the user
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string>> SignOutRequestsignoutPostWithHttpInfoAsync(string accept, SignOutRequest body = default(SignOutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling AuthenticationApi->SignOutRequestsignoutPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/authentication/signout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignOutRequestsignoutPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
