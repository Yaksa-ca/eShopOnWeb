/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelationshipsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Clears all relationships on the specified entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">the type of the entity</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">the parent identifier (optional)</param>
        /// <returns></returns>
        void ClearRelationshipsRequestScopeIdEntityTypeEntityIdDelete(string accept, string scopeId, string entityType, string entityId, string parentId = default(string));

        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Clears all relationships on the specified entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">the type of the entity</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">the parent identifier (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearRelationshipsRequestScopeIdEntityTypeEntityIdDeleteWithHttpInfo(string accept, string scopeId, string entityType, string entityId, string parentId = default(string));
        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Clears all relationships on the specified entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">The type of the entity whose relationship should be deleted. For deleting relationships of a product variant, &#39;Product&#39; should be specified and ParentId should be set to Product Id.</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">This parameter should be specified when deleting a product variant. In this case this field will contain product&#39;s Id. (optional)</param>
        /// <returns></returns>
        void ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDelete(string accept, string scopeId, string entityType, string entityId, string parentId = default(string));

        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Clears all relationships on the specified entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">The type of the entity whose relationship should be deleted. For deleting relationships of a product variant, &#39;Product&#39; should be specified and ParentId should be set to Product Id.</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">This parameter should be specified when deleting a product variant. In this case this field will contain product&#39;s Id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDeleteWithHttpInfo(string accept, string scopeId, string entityType, string entityId, string parentId = default(string));
        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Creates relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateRelationshipsResult</returns>
        CreateRelationshipsResult CreateRelationshipsRequestScopeIdPost(string accept, string scopeId, CreateRelationshipsRequest body = default(CreateRelationshipsRequest));

        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Creates relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateRelationshipsResult</returns>
        ApiResponse<CreateRelationshipsResult> CreateRelationshipsRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateRelationshipsRequest body = default(CreateRelationshipsRequest));
        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Creates relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateRelationshipsResult</returns>
        CreateRelationshipsResult CreateRelationshipsV2Requestv2ScopeIdPost(string accept, string scopeId, CreateRelationshipsV2Request body = default(CreateRelationshipsV2Request));

        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Creates relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateRelationshipsResult</returns>
        ApiResponse<CreateRelationshipsResult> CreateRelationshipsV2Requestv2ScopeIdPostWithHttpInfo(string accept, string scopeId, CreateRelationshipsV2Request body = default(CreateRelationshipsV2Request));
        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Creates self-referencing relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateRelationshipsResult</returns>
        CreateRelationshipsResult CreateSelfReferencingRelationshipsRequestScopeIdselfPost(string accept, string scopeId, CreateSelfReferencingRelationshipsRequest body = default(CreateSelfReferencingRelationshipsRequest));

        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Creates self-referencing relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateRelationshipsResult</returns>
        ApiResponse<CreateRelationshipsResult> CreateSelfReferencingRelationshipsRequestScopeIdselfPostWithHttpInfo(string accept, string scopeId, CreateSelfReferencingRelationshipsRequest body = default(CreateSelfReferencingRelationshipsRequest));
        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Creates self-referencing relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateRelationshipsResult</returns>
        CreateRelationshipsResult CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPost(string accept, string scopeId, CreateSelfReferencingRelationshipsV2Request body = default(CreateSelfReferencingRelationshipsV2Request));

        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Creates self-referencing relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateRelationshipsResult</returns>
        ApiResponse<CreateRelationshipsResult> CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPostWithHttpInfo(string accept, string scopeId, CreateSelfReferencingRelationshipsV2Request body = default(CreateSelfReferencingRelationshipsV2Request));
        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Deletes specified relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <returns></returns>
        void DeleteRelationshipsRequestScopeIdDelete(string accept, string scopeId, List<string> ids = default(List<string>));

        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Deletes specified relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRelationshipsRequestScopeIdDeleteWithHttpInfo(string accept, string scopeId, List<string> ids = default(List<string>));
        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Deletes specified relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <returns></returns>
        void DeleteRelationshipsV2Requestv2ScopeIdDelete(string accept, string scopeId, List<string> ids = default(List<string>));

        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Deletes specified relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRelationshipsV2Requestv2ScopeIdDeleteWithHttpInfo(string accept, string scopeId, List<string> ids = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelationshipsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Clears all relationships on the specified entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">the type of the entity</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">the parent identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearRelationshipsRequestScopeIdEntityTypeEntityIdDeleteAsync(string accept, string scopeId, string entityType, string entityId, string parentId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Clears all relationships on the specified entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">the type of the entity</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">the parent identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearRelationshipsRequestScopeIdEntityTypeEntityIdDeleteWithHttpInfoAsync(string accept, string scopeId, string entityType, string entityId, string parentId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Clears all relationships on the specified entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">The type of the entity whose relationship should be deleted. For deleting relationships of a product variant, &#39;Product&#39; should be specified and ParentId should be set to Product Id.</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">This parameter should be specified when deleting a product variant. In this case this field will contain product&#39;s Id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDeleteAsync(string accept, string scopeId, string entityType, string entityId, string parentId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Clears all relationships on the specified entity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">The type of the entity whose relationship should be deleted. For deleting relationships of a product variant, &#39;Product&#39; should be specified and ParentId should be set to Product Id.</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">This parameter should be specified when deleting a product variant. In this case this field will contain product&#39;s Id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDeleteWithHttpInfoAsync(string accept, string scopeId, string entityType, string entityId, string parentId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Creates relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRelationshipsResult</returns>
        System.Threading.Tasks.Task<CreateRelationshipsResult> CreateRelationshipsRequestScopeIdPostAsync(string accept, string scopeId, CreateRelationshipsRequest body = default(CreateRelationshipsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Creates relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRelationshipsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateRelationshipsResult>> CreateRelationshipsRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateRelationshipsRequest body = default(CreateRelationshipsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Creates relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRelationshipsResult</returns>
        System.Threading.Tasks.Task<CreateRelationshipsResult> CreateRelationshipsV2Requestv2ScopeIdPostAsync(string accept, string scopeId, CreateRelationshipsV2Request body = default(CreateRelationshipsV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Creates relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRelationshipsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateRelationshipsResult>> CreateRelationshipsV2Requestv2ScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateRelationshipsV2Request body = default(CreateRelationshipsV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Creates self-referencing relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRelationshipsResult</returns>
        System.Threading.Tasks.Task<CreateRelationshipsResult> CreateSelfReferencingRelationshipsRequestScopeIdselfPostAsync(string accept, string scopeId, CreateSelfReferencingRelationshipsRequest body = default(CreateSelfReferencingRelationshipsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Creates self-referencing relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRelationshipsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateRelationshipsResult>> CreateSelfReferencingRelationshipsRequestScopeIdselfPostWithHttpInfoAsync(string accept, string scopeId, CreateSelfReferencingRelationshipsRequest body = default(CreateSelfReferencingRelationshipsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Creates self-referencing relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRelationshipsResult</returns>
        System.Threading.Tasks.Task<CreateRelationshipsResult> CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPostAsync(string accept, string scopeId, CreateSelfReferencingRelationshipsV2Request body = default(CreateSelfReferencingRelationshipsV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Creates self-referencing relationships between entities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRelationshipsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateRelationshipsResult>> CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPostWithHttpInfoAsync(string accept, string scopeId, CreateSelfReferencingRelationshipsV2Request body = default(CreateSelfReferencingRelationshipsV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Deletes specified relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRelationshipsRequestScopeIdDeleteAsync(string accept, string scopeId, List<string> ids = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsRequest}
        /// </summary>
        /// <remarks>
        /// Deletes specified relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRelationshipsRequestScopeIdDeleteWithHttpInfoAsync(string accept, string scopeId, List<string> ids = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Deletes specified relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRelationshipsV2Requestv2ScopeIdDeleteAsync(string accept, string scopeId, List<string> ids = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsV2Request}
        /// </summary>
        /// <remarks>
        /// Deletes specified relationships
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRelationshipsV2Requestv2ScopeIdDeleteWithHttpInfoAsync(string accept, string scopeId, List<string> ids = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelationshipsApi : IRelationshipsApiSync, IRelationshipsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RelationshipsApi : IRelationshipsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RelationshipsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RelationshipsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RelationshipsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RelationshipsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsRequest} Clears all relationships on the specified entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">the type of the entity</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">the parent identifier (optional)</param>
        /// <returns></returns>
        public void ClearRelationshipsRequestScopeIdEntityTypeEntityIdDelete(string accept, string scopeId, string entityType, string entityId, string parentId = default(string))
        {
            ClearRelationshipsRequestScopeIdEntityTypeEntityIdDeleteWithHttpInfo(accept, scopeId, entityType, entityId, parentId);
        }

        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsRequest} Clears all relationships on the specified entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">the type of the entity</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">the parent identifier (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> ClearRelationshipsRequestScopeIdEntityTypeEntityIdDeleteWithHttpInfo(string accept, string scopeId, string entityType, string entityId, string parentId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->ClearRelationshipsRequestScopeIdEntityTypeEntityIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->ClearRelationshipsRequestScopeIdEntityTypeEntityIdDelete");

            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityType' when calling RelationshipsApi->ClearRelationshipsRequestScopeIdEntityTypeEntityIdDelete");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling RelationshipsApi->ClearRelationshipsRequestScopeIdEntityTypeEntityIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ParentId", parentId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/relationships/{ScopeId}/{EntityType}/{EntityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearRelationshipsRequestScopeIdEntityTypeEntityIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsRequest} Clears all relationships on the specified entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">the type of the entity</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">the parent identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearRelationshipsRequestScopeIdEntityTypeEntityIdDeleteAsync(string accept, string scopeId, string entityType, string entityId, string parentId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ClearRelationshipsRequestScopeIdEntityTypeEntityIdDeleteWithHttpInfoAsync(accept, scopeId, entityType, entityId, parentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsRequest} Clears all relationships on the specified entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">the type of the entity</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">the parent identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> ClearRelationshipsRequestScopeIdEntityTypeEntityIdDeleteWithHttpInfoAsync(string accept, string scopeId, string entityType, string entityId, string parentId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->ClearRelationshipsRequestScopeIdEntityTypeEntityIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->ClearRelationshipsRequestScopeIdEntityTypeEntityIdDelete");

            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityType' when calling RelationshipsApi->ClearRelationshipsRequestScopeIdEntityTypeEntityIdDelete");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling RelationshipsApi->ClearRelationshipsRequestScopeIdEntityTypeEntityIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ParentId", parentId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/relationships/{ScopeId}/{EntityType}/{EntityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearRelationshipsRequestScopeIdEntityTypeEntityIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsV2Request} Clears all relationships on the specified entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">The type of the entity whose relationship should be deleted. For deleting relationships of a product variant, &#39;Product&#39; should be specified and ParentId should be set to Product Id.</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">This parameter should be specified when deleting a product variant. In this case this field will contain product&#39;s Id. (optional)</param>
        /// <returns></returns>
        public void ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDelete(string accept, string scopeId, string entityType, string entityId, string parentId = default(string))
        {
            ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDeleteWithHttpInfo(accept, scopeId, entityType, entityId, parentId);
        }

        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsV2Request} Clears all relationships on the specified entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">The type of the entity whose relationship should be deleted. For deleting relationships of a product variant, &#39;Product&#39; should be specified and ParentId should be set to Product Id.</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">This parameter should be specified when deleting a product variant. In this case this field will contain product&#39;s Id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDeleteWithHttpInfo(string accept, string scopeId, string entityType, string entityId, string parentId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDelete");

            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityType' when calling RelationshipsApi->ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDelete");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling RelationshipsApi->ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ParentId", parentId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/relationships/v2/{ScopeId}/{EntityType}/{EntityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsV2Request} Clears all relationships on the specified entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">The type of the entity whose relationship should be deleted. For deleting relationships of a product variant, &#39;Product&#39; should be specified and ParentId should be set to Product Id.</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">This parameter should be specified when deleting a product variant. In this case this field will contain product&#39;s Id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDeleteAsync(string accept, string scopeId, string entityType, string entityId, string parentId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDeleteWithHttpInfoAsync(accept, scopeId, entityType, entityId, parentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Clears all relationships on the specified entity - {ClearRelationshipsV2Request} Clears all relationships on the specified entity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="entityType">The type of the entity whose relationship should be deleted. For deleting relationships of a product variant, &#39;Product&#39; should be specified and ParentId should be set to Product Id.</param>
        /// <param name="entityId">the entity identifier</param>
        /// <param name="parentId">This parameter should be specified when deleting a product variant. In this case this field will contain product&#39;s Id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDeleteWithHttpInfoAsync(string accept, string scopeId, string entityType, string entityId, string parentId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDelete");

            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityType' when calling RelationshipsApi->ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDelete");

            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'entityId' when calling RelationshipsApi->ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("EntityId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ParentId", parentId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/relationships/v2/{ScopeId}/{EntityType}/{EntityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearRelationshipsV2Requestv2ScopeIdEntityTypeEntityIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsRequest} Creates relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateRelationshipsResult</returns>
        public CreateRelationshipsResult CreateRelationshipsRequestScopeIdPost(string accept, string scopeId, CreateRelationshipsRequest body = default(CreateRelationshipsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult> localVarResponse = CreateRelationshipsRequestScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsRequest} Creates relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateRelationshipsResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult> CreateRelationshipsRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateRelationshipsRequest body = default(CreateRelationshipsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->CreateRelationshipsRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->CreateRelationshipsRequestScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateRelationshipsResult>("/relationships/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRelationshipsRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsRequest} Creates relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRelationshipsResult</returns>
        public async System.Threading.Tasks.Task<CreateRelationshipsResult> CreateRelationshipsRequestScopeIdPostAsync(string accept, string scopeId, CreateRelationshipsRequest body = default(CreateRelationshipsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult> localVarResponse = await CreateRelationshipsRequestScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsRequest} Creates relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRelationshipsResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult>> CreateRelationshipsRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateRelationshipsRequest body = default(CreateRelationshipsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->CreateRelationshipsRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->CreateRelationshipsRequestScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateRelationshipsResult>("/relationships/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRelationshipsRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsV2Request} Creates relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateRelationshipsResult</returns>
        public CreateRelationshipsResult CreateRelationshipsV2Requestv2ScopeIdPost(string accept, string scopeId, CreateRelationshipsV2Request body = default(CreateRelationshipsV2Request))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult> localVarResponse = CreateRelationshipsV2Requestv2ScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsV2Request} Creates relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateRelationshipsResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult> CreateRelationshipsV2Requestv2ScopeIdPostWithHttpInfo(string accept, string scopeId, CreateRelationshipsV2Request body = default(CreateRelationshipsV2Request))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->CreateRelationshipsV2Requestv2ScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->CreateRelationshipsV2Requestv2ScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateRelationshipsResult>("/relationships/v2/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRelationshipsV2Requestv2ScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsV2Request} Creates relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRelationshipsResult</returns>
        public async System.Threading.Tasks.Task<CreateRelationshipsResult> CreateRelationshipsV2Requestv2ScopeIdPostAsync(string accept, string scopeId, CreateRelationshipsV2Request body = default(CreateRelationshipsV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult> localVarResponse = await CreateRelationshipsV2Requestv2ScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates relationships between entities - {CreateRelationshipsV2Request} Creates relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRelationshipsResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult>> CreateRelationshipsV2Requestv2ScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateRelationshipsV2Request body = default(CreateRelationshipsV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->CreateRelationshipsV2Requestv2ScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->CreateRelationshipsV2Requestv2ScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateRelationshipsResult>("/relationships/v2/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRelationshipsV2Requestv2ScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsRequest} Creates self-referencing relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateRelationshipsResult</returns>
        public CreateRelationshipsResult CreateSelfReferencingRelationshipsRequestScopeIdselfPost(string accept, string scopeId, CreateSelfReferencingRelationshipsRequest body = default(CreateSelfReferencingRelationshipsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult> localVarResponse = CreateSelfReferencingRelationshipsRequestScopeIdselfPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsRequest} Creates self-referencing relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateRelationshipsResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult> CreateSelfReferencingRelationshipsRequestScopeIdselfPostWithHttpInfo(string accept, string scopeId, CreateSelfReferencingRelationshipsRequest body = default(CreateSelfReferencingRelationshipsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->CreateSelfReferencingRelationshipsRequestScopeIdselfPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->CreateSelfReferencingRelationshipsRequestScopeIdselfPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateRelationshipsResult>("/relationships/{ScopeId}/self", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSelfReferencingRelationshipsRequestScopeIdselfPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsRequest} Creates self-referencing relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRelationshipsResult</returns>
        public async System.Threading.Tasks.Task<CreateRelationshipsResult> CreateSelfReferencingRelationshipsRequestScopeIdselfPostAsync(string accept, string scopeId, CreateSelfReferencingRelationshipsRequest body = default(CreateSelfReferencingRelationshipsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult> localVarResponse = await CreateSelfReferencingRelationshipsRequestScopeIdselfPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsRequest} Creates self-referencing relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRelationshipsResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult>> CreateSelfReferencingRelationshipsRequestScopeIdselfPostWithHttpInfoAsync(string accept, string scopeId, CreateSelfReferencingRelationshipsRequest body = default(CreateSelfReferencingRelationshipsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->CreateSelfReferencingRelationshipsRequestScopeIdselfPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->CreateSelfReferencingRelationshipsRequestScopeIdselfPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateRelationshipsResult>("/relationships/{ScopeId}/self", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSelfReferencingRelationshipsRequestScopeIdselfPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsV2Request} Creates self-referencing relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateRelationshipsResult</returns>
        public CreateRelationshipsResult CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPost(string accept, string scopeId, CreateSelfReferencingRelationshipsV2Request body = default(CreateSelfReferencingRelationshipsV2Request))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult> localVarResponse = CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsV2Request} Creates self-referencing relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateRelationshipsResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult> CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPostWithHttpInfo(string accept, string scopeId, CreateSelfReferencingRelationshipsV2Request body = default(CreateSelfReferencingRelationshipsV2Request))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateRelationshipsResult>("/relationships/v2/{ScopeId}/self", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsV2Request} Creates self-referencing relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRelationshipsResult</returns>
        public async System.Threading.Tasks.Task<CreateRelationshipsResult> CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPostAsync(string accept, string scopeId, CreateSelfReferencingRelationshipsV2Request body = default(CreateSelfReferencingRelationshipsV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult> localVarResponse = await CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates self-referencing relationships between entities - {CreateSelfReferencingRelationshipsV2Request} Creates self-referencing relationships between entities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRelationshipsResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CreateRelationshipsResult>> CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPostWithHttpInfoAsync(string accept, string scopeId, CreateSelfReferencingRelationshipsV2Request body = default(CreateSelfReferencingRelationshipsV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateRelationshipsResult>("/relationships/v2/{ScopeId}/self", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSelfReferencingRelationshipsV2Requestv2ScopeIdselfPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsRequest} Deletes specified relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <returns></returns>
        public void DeleteRelationshipsRequestScopeIdDelete(string accept, string scopeId, List<string> ids = default(List<string>))
        {
            DeleteRelationshipsRequestScopeIdDeleteWithHttpInfo(accept, scopeId, ids);
        }

        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsRequest} Deletes specified relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteRelationshipsRequestScopeIdDeleteWithHttpInfo(string accept, string scopeId, List<string> ids = default(List<string>))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->DeleteRelationshipsRequestScopeIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->DeleteRelationshipsRequestScopeIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "Ids", ids));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/relationships/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRelationshipsRequestScopeIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsRequest} Deletes specified relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRelationshipsRequestScopeIdDeleteAsync(string accept, string scopeId, List<string> ids = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRelationshipsRequestScopeIdDeleteWithHttpInfoAsync(accept, scopeId, ids, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsRequest} Deletes specified relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteRelationshipsRequestScopeIdDeleteWithHttpInfoAsync(string accept, string scopeId, List<string> ids = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->DeleteRelationshipsRequestScopeIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->DeleteRelationshipsRequestScopeIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "Ids", ids));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/relationships/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRelationshipsRequestScopeIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsV2Request} Deletes specified relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <returns></returns>
        public void DeleteRelationshipsV2Requestv2ScopeIdDelete(string accept, string scopeId, List<string> ids = default(List<string>))
        {
            DeleteRelationshipsV2Requestv2ScopeIdDeleteWithHttpInfo(accept, scopeId, ids);
        }

        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsV2Request} Deletes specified relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteRelationshipsV2Requestv2ScopeIdDeleteWithHttpInfo(string accept, string scopeId, List<string> ids = default(List<string>))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->DeleteRelationshipsV2Requestv2ScopeIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->DeleteRelationshipsV2Requestv2ScopeIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "Ids", ids));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/relationships/v2/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRelationshipsV2Requestv2ScopeIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsV2Request} Deletes specified relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRelationshipsV2Requestv2ScopeIdDeleteAsync(string accept, string scopeId, List<string> ids = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRelationshipsV2Requestv2ScopeIdDeleteWithHttpInfoAsync(accept, scopeId, ids, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes specified relationships - {DeleteRelationshipsV2Request} Deletes specified relationships
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="ids">Ids of the relationships to delete (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteRelationshipsV2Requestv2ScopeIdDeleteWithHttpInfoAsync(string accept, string scopeId, List<string> ids = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RelationshipsApi->DeleteRelationshipsV2Requestv2ScopeIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling RelationshipsApi->DeleteRelationshipsV2Requestv2ScopeIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "Ids", ids));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/relationships/v2/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRelationshipsV2Requestv2ScopeIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
