/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISegmentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create or update a segment based on name - {CreateOrUpdateSegmentRequest}
        /// </summary>
        /// <remarks>
        /// Create or update a segment based on name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Segment</returns>
        Segment CreateOrUpdateSegmentRequestPost(string accept, CreateOrUpdateSegmentRequest body = default(CreateOrUpdateSegmentRequest));

        /// <summary>
        /// Create or update a segment based on name - {CreateOrUpdateSegmentRequest}
        /// </summary>
        /// <remarks>
        /// Create or update a segment based on name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Segment</returns>
        ApiResponse<Segment> CreateOrUpdateSegmentRequestPostWithHttpInfo(string accept, CreateOrUpdateSegmentRequest body = default(CreateOrUpdateSegmentRequest));
        /// <summary>
        /// Delete a segment - {DeleteSegmentRequest}
        /// </summary>
        /// <remarks>
        /// Delete a segment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to delete.</param>
        /// <returns>DeleteSegmentResult</returns>
        DeleteSegmentResult DeleteSegmentRequestSegmentIdDelete(string accept, string segmentId);

        /// <summary>
        /// Delete a segment - {DeleteSegmentRequest}
        /// </summary>
        /// <remarks>
        /// Delete a segment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to delete.</param>
        /// <returns>ApiResponse of DeleteSegmentResult</returns>
        ApiResponse<DeleteSegmentResult> DeleteSegmentRequestSegmentIdDeleteWithHttpInfo(string accept, string segmentId);
        /// <summary>
        /// Search for segments matching the parameters - {FindSegmentsRequest}
        /// </summary>
        /// <remarks>
        /// Search for segments matching the parameters
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SegmentQueryResult</returns>
        SegmentQueryResult FindSegmentsRequestfindPost(string accept, FindSegmentsRequest body = default(FindSegmentsRequest));

        /// <summary>
        /// Search for segments matching the parameters - {FindSegmentsRequest}
        /// </summary>
        /// <remarks>
        /// Search for segments matching the parameters
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SegmentQueryResult</returns>
        ApiResponse<SegmentQueryResult> FindSegmentsRequestfindPostWithHttpInfo(string accept, FindSegmentsRequest body = default(FindSegmentsRequest));
        /// <summary>
        /// Retrieve a segment - {GetSegmentRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a segment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <returns>Segment</returns>
        Segment GetSegmentRequestSegmentIdGet(string accept, string segmentId, bool? validateTargeting = default(bool?));

        /// <summary>
        /// Retrieve a segment - {GetSegmentRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a segment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <returns>ApiResponse of Segment</returns>
        ApiResponse<Segment> GetSegmentRequestSegmentIdGetWithHttpInfo(string accept, string segmentId, bool? validateTargeting = default(bool?));
        /// <summary>
        /// Retrieve all segments - {GetSegmentsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all segments
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <param name="startingIndex">The starting index. (The offset of the first record when requesting paged data) (optional)</param>
        /// <param name="maximumItems">The number of items to return. (This is the page size when requesting paged data) (optional)</param>
        /// <returns>List&lt;Segment&gt;</returns>
        List<Segment> GetSegmentsRequestGet(string accept, bool? validateTargeting = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?));

        /// <summary>
        /// Retrieve all segments - {GetSegmentsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all segments
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <param name="startingIndex">The starting index. (The offset of the first record when requesting paged data) (optional)</param>
        /// <param name="maximumItems">The number of items to return. (This is the page size when requesting paged data) (optional)</param>
        /// <returns>ApiResponse of List&lt;Segment&gt;</returns>
        ApiResponse<List<Segment>> GetSegmentsRequestGetWithHttpInfo(string accept, bool? validateTargeting = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISegmentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create or update a segment based on name - {CreateOrUpdateSegmentRequest}
        /// </summary>
        /// <remarks>
        /// Create or update a segment based on name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Segment</returns>
        System.Threading.Tasks.Task<Segment> CreateOrUpdateSegmentRequestPostAsync(string accept, CreateOrUpdateSegmentRequest body = default(CreateOrUpdateSegmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update a segment based on name - {CreateOrUpdateSegmentRequest}
        /// </summary>
        /// <remarks>
        /// Create or update a segment based on name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Segment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Segment>> CreateOrUpdateSegmentRequestPostWithHttpInfoAsync(string accept, CreateOrUpdateSegmentRequest body = default(CreateOrUpdateSegmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a segment - {DeleteSegmentRequest}
        /// </summary>
        /// <remarks>
        /// Delete a segment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSegmentResult</returns>
        System.Threading.Tasks.Task<DeleteSegmentResult> DeleteSegmentRequestSegmentIdDeleteAsync(string accept, string segmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a segment - {DeleteSegmentRequest}
        /// </summary>
        /// <remarks>
        /// Delete a segment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSegmentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSegmentResult>> DeleteSegmentRequestSegmentIdDeleteWithHttpInfoAsync(string accept, string segmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for segments matching the parameters - {FindSegmentsRequest}
        /// </summary>
        /// <remarks>
        /// Search for segments matching the parameters
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SegmentQueryResult</returns>
        System.Threading.Tasks.Task<SegmentQueryResult> FindSegmentsRequestfindPostAsync(string accept, FindSegmentsRequest body = default(FindSegmentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for segments matching the parameters - {FindSegmentsRequest}
        /// </summary>
        /// <remarks>
        /// Search for segments matching the parameters
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SegmentQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SegmentQueryResult>> FindSegmentsRequestfindPostWithHttpInfoAsync(string accept, FindSegmentsRequest body = default(FindSegmentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a segment - {GetSegmentRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a segment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Segment</returns>
        System.Threading.Tasks.Task<Segment> GetSegmentRequestSegmentIdGetAsync(string accept, string segmentId, bool? validateTargeting = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a segment - {GetSegmentRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a segment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Segment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Segment>> GetSegmentRequestSegmentIdGetWithHttpInfoAsync(string accept, string segmentId, bool? validateTargeting = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all segments - {GetSegmentsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all segments
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <param name="startingIndex">The starting index. (The offset of the first record when requesting paged data) (optional)</param>
        /// <param name="maximumItems">The number of items to return. (This is the page size when requesting paged data) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Segment&gt;</returns>
        System.Threading.Tasks.Task<List<Segment>> GetSegmentsRequestGetAsync(string accept, bool? validateTargeting = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all segments - {GetSegmentsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all segments
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <param name="startingIndex">The starting index. (The offset of the first record when requesting paged data) (optional)</param>
        /// <param name="maximumItems">The number of items to return. (This is the page size when requesting paged data) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Segment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Segment>>> GetSegmentsRequestGetWithHttpInfoAsync(string accept, bool? validateTargeting = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISegmentsApi : ISegmentsApiSync, ISegmentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SegmentsApi : ISegmentsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SegmentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SegmentsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SegmentsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SegmentsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create or update a segment based on name - {CreateOrUpdateSegmentRequest} Create or update a segment based on name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Segment</returns>
        public Segment CreateOrUpdateSegmentRequestPost(string accept, CreateOrUpdateSegmentRequest body = default(CreateOrUpdateSegmentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Segment> localVarResponse = CreateOrUpdateSegmentRequestPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a segment based on name - {CreateOrUpdateSegmentRequest} Create or update a segment based on name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Segment</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Segment> CreateOrUpdateSegmentRequestPostWithHttpInfo(string accept, CreateOrUpdateSegmentRequest body = default(CreateOrUpdateSegmentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SegmentsApi->CreateOrUpdateSegmentRequestPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Segment>("/segments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateSegmentRequestPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update a segment based on name - {CreateOrUpdateSegmentRequest} Create or update a segment based on name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Segment</returns>
        public async System.Threading.Tasks.Task<Segment> CreateOrUpdateSegmentRequestPostAsync(string accept, CreateOrUpdateSegmentRequest body = default(CreateOrUpdateSegmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Segment> localVarResponse = await CreateOrUpdateSegmentRequestPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a segment based on name - {CreateOrUpdateSegmentRequest} Create or update a segment based on name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Segment)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Segment>> CreateOrUpdateSegmentRequestPostWithHttpInfoAsync(string accept, CreateOrUpdateSegmentRequest body = default(CreateOrUpdateSegmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SegmentsApi->CreateOrUpdateSegmentRequestPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Segment>("/segments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateSegmentRequestPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a segment - {DeleteSegmentRequest} Delete a segment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to delete.</param>
        /// <returns>DeleteSegmentResult</returns>
        public DeleteSegmentResult DeleteSegmentRequestSegmentIdDelete(string accept, string segmentId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeleteSegmentResult> localVarResponse = DeleteSegmentRequestSegmentIdDeleteWithHttpInfo(accept, segmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a segment - {DeleteSegmentRequest} Delete a segment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to delete.</param>
        /// <returns>ApiResponse of DeleteSegmentResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeleteSegmentResult> DeleteSegmentRequestSegmentIdDeleteWithHttpInfo(string accept, string segmentId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SegmentsApi->DeleteSegmentRequestSegmentIdDelete");

            // verify the required parameter 'segmentId' is set
            if (segmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'segmentId' when calling SegmentsApi->DeleteSegmentRequestSegmentIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("SegmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(segmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteSegmentResult>("/segments/{SegmentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSegmentRequestSegmentIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a segment - {DeleteSegmentRequest} Delete a segment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSegmentResult</returns>
        public async System.Threading.Tasks.Task<DeleteSegmentResult> DeleteSegmentRequestSegmentIdDeleteAsync(string accept, string segmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeleteSegmentResult> localVarResponse = await DeleteSegmentRequestSegmentIdDeleteWithHttpInfoAsync(accept, segmentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a segment - {DeleteSegmentRequest} Delete a segment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSegmentResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DeleteSegmentResult>> DeleteSegmentRequestSegmentIdDeleteWithHttpInfoAsync(string accept, string segmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SegmentsApi->DeleteSegmentRequestSegmentIdDelete");

            // verify the required parameter 'segmentId' is set
            if (segmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'segmentId' when calling SegmentsApi->DeleteSegmentRequestSegmentIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("SegmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(segmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteSegmentResult>("/segments/{SegmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSegmentRequestSegmentIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for segments matching the parameters - {FindSegmentsRequest} Search for segments matching the parameters
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SegmentQueryResult</returns>
        public SegmentQueryResult FindSegmentsRequestfindPost(string accept, FindSegmentsRequest body = default(FindSegmentsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SegmentQueryResult> localVarResponse = FindSegmentsRequestfindPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for segments matching the parameters - {FindSegmentsRequest} Search for segments matching the parameters
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SegmentQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SegmentQueryResult> FindSegmentsRequestfindPostWithHttpInfo(string accept, FindSegmentsRequest body = default(FindSegmentsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SegmentsApi->FindSegmentsRequestfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SegmentQueryResult>("/segments/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSegmentsRequestfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for segments matching the parameters - {FindSegmentsRequest} Search for segments matching the parameters
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SegmentQueryResult</returns>
        public async System.Threading.Tasks.Task<SegmentQueryResult> FindSegmentsRequestfindPostAsync(string accept, FindSegmentsRequest body = default(FindSegmentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SegmentQueryResult> localVarResponse = await FindSegmentsRequestfindPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for segments matching the parameters - {FindSegmentsRequest} Search for segments matching the parameters
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SegmentQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SegmentQueryResult>> FindSegmentsRequestfindPostWithHttpInfoAsync(string accept, FindSegmentsRequest body = default(FindSegmentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SegmentsApi->FindSegmentsRequestfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SegmentQueryResult>("/segments/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSegmentsRequestfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a segment - {GetSegmentRequest} Retrieve a segment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <returns>Segment</returns>
        public Segment GetSegmentRequestSegmentIdGet(string accept, string segmentId, bool? validateTargeting = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Segment> localVarResponse = GetSegmentRequestSegmentIdGetWithHttpInfo(accept, segmentId, validateTargeting);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a segment - {GetSegmentRequest} Retrieve a segment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <returns>ApiResponse of Segment</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Segment> GetSegmentRequestSegmentIdGetWithHttpInfo(string accept, string segmentId, bool? validateTargeting = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SegmentsApi->GetSegmentRequestSegmentIdGet");

            // verify the required parameter 'segmentId' is set
            if (segmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'segmentId' when calling SegmentsApi->GetSegmentRequestSegmentIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("SegmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(segmentId)); // path parameter
            if (validateTargeting != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ValidateTargeting", validateTargeting));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Segment>("/segments/{SegmentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegmentRequestSegmentIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a segment - {GetSegmentRequest} Retrieve a segment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Segment</returns>
        public async System.Threading.Tasks.Task<Segment> GetSegmentRequestSegmentIdGetAsync(string accept, string segmentId, bool? validateTargeting = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Segment> localVarResponse = await GetSegmentRequestSegmentIdGetWithHttpInfoAsync(accept, segmentId, validateTargeting, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a segment - {GetSegmentRequest} Retrieve a segment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="segmentId">The id of the segment to retrieve.</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Segment)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Segment>> GetSegmentRequestSegmentIdGetWithHttpInfoAsync(string accept, string segmentId, bool? validateTargeting = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SegmentsApi->GetSegmentRequestSegmentIdGet");

            // verify the required parameter 'segmentId' is set
            if (segmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'segmentId' when calling SegmentsApi->GetSegmentRequestSegmentIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("SegmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(segmentId)); // path parameter
            if (validateTargeting != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ValidateTargeting", validateTargeting));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Segment>("/segments/{SegmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegmentRequestSegmentIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all segments - {GetSegmentsRequest} Retrieve all segments
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <param name="startingIndex">The starting index. (The offset of the first record when requesting paged data) (optional)</param>
        /// <param name="maximumItems">The number of items to return. (This is the page size when requesting paged data) (optional)</param>
        /// <returns>List&lt;Segment&gt;</returns>
        public List<Segment> GetSegmentsRequestGet(string accept, bool? validateTargeting = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Segment>> localVarResponse = GetSegmentsRequestGetWithHttpInfo(accept, validateTargeting, startingIndex, maximumItems);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all segments - {GetSegmentsRequest} Retrieve all segments
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <param name="startingIndex">The starting index. (The offset of the first record when requesting paged data) (optional)</param>
        /// <param name="maximumItems">The number of items to return. (This is the page size when requesting paged data) (optional)</param>
        /// <returns>ApiResponse of List&lt;Segment&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Segment>> GetSegmentsRequestGetWithHttpInfo(string accept, bool? validateTargeting = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SegmentsApi->GetSegmentsRequestGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validateTargeting != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ValidateTargeting", validateTargeting));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Segment>>("/segments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegmentsRequestGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all segments - {GetSegmentsRequest} Retrieve all segments
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <param name="startingIndex">The starting index. (The offset of the first record when requesting paged data) (optional)</param>
        /// <param name="maximumItems">The number of items to return. (This is the page size when requesting paged data) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Segment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Segment>> GetSegmentsRequestGetAsync(string accept, bool? validateTargeting = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Segment>> localVarResponse = await GetSegmentsRequestGetWithHttpInfoAsync(accept, validateTargeting, startingIndex, maximumItems, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all segments - {GetSegmentsRequest} Retrieve all segments
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated (optional)</param>
        /// <param name="startingIndex">The starting index. (The offset of the first record when requesting paged data) (optional)</param>
        /// <param name="maximumItems">The number of items to return. (This is the page size when requesting paged data) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Segment&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Segment>>> GetSegmentsRequestGetWithHttpInfoAsync(string accept, bool? validateTargeting = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling SegmentsApi->GetSegmentsRequestGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validateTargeting != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ValidateTargeting", validateTargeting));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Segment>>("/segments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegmentsRequestGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
