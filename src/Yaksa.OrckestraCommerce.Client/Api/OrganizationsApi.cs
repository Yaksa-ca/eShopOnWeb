/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an organization - {CreateOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Create an organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Organization</returns>
        Organization CreateOrganizationRequestScopeIdPost(string accept, string scopeId, CreateOrganizationRequest body = default(CreateOrganizationRequest));

        /// <summary>
        /// Create an organization - {CreateOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Create an organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> CreateOrganizationRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateOrganizationRequest body = default(CreateOrganizationRequest));
        /// <summary>
        /// Search for Organizations based on search terms - {FindOrganizationsRequest}
        /// </summary>
        /// <remarks>
        /// Search for Organizations based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindOrganizationsQueryResult</returns>
        FindOrganizationsQueryResult FindOrganizationsRequestScopeIdfindPost(string accept, string scopeId, FindOrganizationsRequest body = default(FindOrganizationsRequest));

        /// <summary>
        /// Search for Organizations based on search terms - {FindOrganizationsRequest}
        /// </summary>
        /// <remarks>
        /// Search for Organizations based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindOrganizationsQueryResult</returns>
        ApiResponse<FindOrganizationsQueryResult> FindOrganizationsRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindOrganizationsRequest body = default(FindOrganizationsRequest));
        /// <summary>
        /// Retrieve Customers based on the organization name - {GetCustomersByOrganizationNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of an organization. Paging is available
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The organization name of the Customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>GetCustomersByOrganizationQueryResult</returns>
        GetCustomersByOrganizationQueryResult GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGet(string accept, string scopeId, string name, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?));

        /// <summary>
        /// Retrieve Customers based on the organization name - {GetCustomersByOrganizationNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of an organization. Paging is available
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The organization name of the Customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>ApiResponse of GetCustomersByOrganizationQueryResult</returns>
        ApiResponse<GetCustomersByOrganizationQueryResult> GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGetWithHttpInfo(string accept, string scopeId, string name, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?));
        /// <summary>
        /// Retrieve Customers based on the organization id - {GetCustomersByOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the Customers based on the organization id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organization identifier of the customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>GetCustomersByOrganizationQueryResult</returns>
        GetCustomersByOrganizationQueryResult GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGet(string accept, string scopeId, string organizationId, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?));

        /// <summary>
        /// Retrieve Customers based on the organization id - {GetCustomersByOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the Customers based on the organization id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organization identifier of the customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>ApiResponse of GetCustomersByOrganizationQueryResult</returns>
        ApiResponse<GetCustomersByOrganizationQueryResult> GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGetWithHttpInfo(string accept, string scopeId, string organizationId, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?));
        /// <summary>
        /// Retreive a specific organization by name - {GetOrganizationByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific organization by name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <returns>Organization</returns>
        Organization GetOrganizationByNameRequestScopeIdbyNameNameGet(string accept, string scopeId, string name, bool? includeAddresses = default(bool?));

        /// <summary>
        /// Retreive a specific organization by name - {GetOrganizationByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific organization by name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> GetOrganizationByNameRequestScopeIdbyNameNameGetWithHttpInfo(string accept, string scopeId, string name, bool? includeAddresses = default(bool?));
        /// <summary>
        /// Retreive a specific organization - {GetOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The identifier of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <returns>Organization</returns>
        Organization GetOrganizationRequestScopeIdOrganizationIdGet(string accept, string scopeId, string organizationId, bool? includeAddresses = default(bool?));

        /// <summary>
        /// Retreive a specific organization - {GetOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The identifier of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> GetOrganizationRequestScopeIdOrganizationIdGetWithHttpInfo(string accept, string scopeId, string organizationId, bool? includeAddresses = default(bool?));
        /// <summary>
        /// Update an organization - {UpdateOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Update an organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="organizationId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Organization</returns>
        Organization UpdateOrganizationRequestScopeIdOrganizationIdCreate(string accept, string scopeId, string organizationId, UpdateOrganizationRequest body = default(UpdateOrganizationRequest));

        /// <summary>
        /// Update an organization - {UpdateOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Update an organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="organizationId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> UpdateOrganizationRequestScopeIdOrganizationIdCreateWithHttpInfo(string accept, string scopeId, string organizationId, UpdateOrganizationRequest body = default(UpdateOrganizationRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an organization - {CreateOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Create an organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> CreateOrganizationRequestScopeIdPostAsync(string accept, string scopeId, CreateOrganizationRequest body = default(CreateOrganizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an organization - {CreateOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Create an organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> CreateOrganizationRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateOrganizationRequest body = default(CreateOrganizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for Organizations based on search terms - {FindOrganizationsRequest}
        /// </summary>
        /// <remarks>
        /// Search for Organizations based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindOrganizationsQueryResult</returns>
        System.Threading.Tasks.Task<FindOrganizationsQueryResult> FindOrganizationsRequestScopeIdfindPostAsync(string accept, string scopeId, FindOrganizationsRequest body = default(FindOrganizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for Organizations based on search terms - {FindOrganizationsRequest}
        /// </summary>
        /// <remarks>
        /// Search for Organizations based on search terms
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindOrganizationsQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindOrganizationsQueryResult>> FindOrganizationsRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindOrganizationsRequest body = default(FindOrganizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Customers based on the organization name - {GetCustomersByOrganizationNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of an organization. Paging is available
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The organization name of the Customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomersByOrganizationQueryResult</returns>
        System.Threading.Tasks.Task<GetCustomersByOrganizationQueryResult> GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGetAsync(string accept, string scopeId, string name, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Customers based on the organization name - {GetCustomersByOrganizationNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the customers of an organization. Paging is available
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The organization name of the Customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomersByOrganizationQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomersByOrganizationQueryResult>> GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGetWithHttpInfoAsync(string accept, string scopeId, string name, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Customers based on the organization id - {GetCustomersByOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the Customers based on the organization id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organization identifier of the customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomersByOrganizationQueryResult</returns>
        System.Threading.Tasks.Task<GetCustomersByOrganizationQueryResult> GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGetAsync(string accept, string scopeId, string organizationId, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Customers based on the organization id - {GetCustomersByOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the Customers based on the organization id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organization identifier of the customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomersByOrganizationQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomersByOrganizationQueryResult>> GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGetWithHttpInfoAsync(string accept, string scopeId, string organizationId, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retreive a specific organization by name - {GetOrganizationByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific organization by name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> GetOrganizationByNameRequestScopeIdbyNameNameGetAsync(string accept, string scopeId, string name, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retreive a specific organization by name - {GetOrganizationByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific organization by name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> GetOrganizationByNameRequestScopeIdbyNameNameGetWithHttpInfoAsync(string accept, string scopeId, string name, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retreive a specific organization - {GetOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The identifier of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> GetOrganizationRequestScopeIdOrganizationIdGetAsync(string accept, string scopeId, string organizationId, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retreive a specific organization - {GetOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The identifier of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> GetOrganizationRequestScopeIdOrganizationIdGetWithHttpInfoAsync(string accept, string scopeId, string organizationId, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an organization - {UpdateOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Update an organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="organizationId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> UpdateOrganizationRequestScopeIdOrganizationIdCreateAsync(string accept, string scopeId, string organizationId, UpdateOrganizationRequest body = default(UpdateOrganizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an organization - {UpdateOrganizationRequest}
        /// </summary>
        /// <remarks>
        /// Update an organization
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="organizationId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> UpdateOrganizationRequestScopeIdOrganizationIdCreateWithHttpInfoAsync(string accept, string scopeId, string organizationId, UpdateOrganizationRequest body = default(UpdateOrganizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationsApi : IOrganizationsApiSync, IOrganizationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationsApi : IOrganizationsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrganizationsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an organization - {CreateOrganizationRequest} Create an organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Organization</returns>
        public Organization CreateOrganizationRequestScopeIdPost(string accept, string scopeId, CreateOrganizationRequest body = default(CreateOrganizationRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization> localVarResponse = CreateOrganizationRequestScopeIdPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an organization - {CreateOrganizationRequest} Create an organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Organization</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization> CreateOrganizationRequestScopeIdPostWithHttpInfo(string accept, string scopeId, CreateOrganizationRequest body = default(CreateOrganizationRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->CreateOrganizationRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->CreateOrganizationRequestScopeIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Organization>("/organizations/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrganizationRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an organization - {CreateOrganizationRequest} Create an organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> CreateOrganizationRequestScopeIdPostAsync(string accept, string scopeId, CreateOrganizationRequest body = default(CreateOrganizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization> localVarResponse = await CreateOrganizationRequestScopeIdPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an organization - {CreateOrganizationRequest} Create an organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization>> CreateOrganizationRequestScopeIdPostWithHttpInfoAsync(string accept, string scopeId, CreateOrganizationRequest body = default(CreateOrganizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->CreateOrganizationRequestScopeIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->CreateOrganizationRequestScopeIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Organization>("/organizations/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrganizationRequestScopeIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Organizations based on search terms - {FindOrganizationsRequest} Search for Organizations based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindOrganizationsQueryResult</returns>
        public FindOrganizationsQueryResult FindOrganizationsRequestScopeIdfindPost(string accept, string scopeId, FindOrganizationsRequest body = default(FindOrganizationsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindOrganizationsQueryResult> localVarResponse = FindOrganizationsRequestScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for Organizations based on search terms - {FindOrganizationsRequest} Search for Organizations based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindOrganizationsQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindOrganizationsQueryResult> FindOrganizationsRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindOrganizationsRequest body = default(FindOrganizationsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->FindOrganizationsRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->FindOrganizationsRequestScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindOrganizationsQueryResult>("/organizations/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOrganizationsRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Organizations based on search terms - {FindOrganizationsRequest} Search for Organizations based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindOrganizationsQueryResult</returns>
        public async System.Threading.Tasks.Task<FindOrganizationsQueryResult> FindOrganizationsRequestScopeIdfindPostAsync(string accept, string scopeId, FindOrganizationsRequest body = default(FindOrganizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindOrganizationsQueryResult> localVarResponse = await FindOrganizationsRequestScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for Organizations based on search terms - {FindOrganizationsRequest} Search for Organizations based on search terms
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindOrganizationsQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindOrganizationsQueryResult>> FindOrganizationsRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindOrganizationsRequest body = default(FindOrganizationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->FindOrganizationsRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->FindOrganizationsRequestScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FindOrganizationsQueryResult>("/organizations/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOrganizationsRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Customers based on the organization name - {GetCustomersByOrganizationNameRequest} Retrieve the customers of an organization. Paging is available
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The organization name of the Customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>GetCustomersByOrganizationQueryResult</returns>
        public GetCustomersByOrganizationQueryResult GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGet(string accept, string scopeId, string name, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCustomersByOrganizationQueryResult> localVarResponse = GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGetWithHttpInfo(accept, scopeId, name, startingIndex, maximumItems, includeAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Customers based on the organization name - {GetCustomersByOrganizationNameRequest} Retrieve the customers of an organization. Paging is available
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The organization name of the Customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>ApiResponse of GetCustomersByOrganizationQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCustomersByOrganizationQueryResult> GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGetWithHttpInfo(string accept, string scopeId, string name, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling OrganizationsApi->GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCustomersByOrganizationQueryResult>("/organizations/{ScopeId}/byName/{Name}/customers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Customers based on the organization name - {GetCustomersByOrganizationNameRequest} Retrieve the customers of an organization. Paging is available
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The organization name of the Customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomersByOrganizationQueryResult</returns>
        public async System.Threading.Tasks.Task<GetCustomersByOrganizationQueryResult> GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGetAsync(string accept, string scopeId, string name, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCustomersByOrganizationQueryResult> localVarResponse = await GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGetWithHttpInfoAsync(accept, scopeId, name, startingIndex, maximumItems, includeAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Customers based on the organization name - {GetCustomersByOrganizationNameRequest} Retrieve the customers of an organization. Paging is available
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The organization name of the Customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomersByOrganizationQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCustomersByOrganizationQueryResult>> GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGetWithHttpInfoAsync(string accept, string scopeId, string name, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling OrganizationsApi->GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCustomersByOrganizationQueryResult>("/organizations/{ScopeId}/byName/{Name}/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomersByOrganizationNameRequestScopeIdbyNameNamecustomersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Customers based on the organization id - {GetCustomersByOrganizationRequest} Retrieve the Customers based on the organization id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organization identifier of the customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>GetCustomersByOrganizationQueryResult</returns>
        public GetCustomersByOrganizationQueryResult GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGet(string accept, string scopeId, string organizationId, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCustomersByOrganizationQueryResult> localVarResponse = GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGetWithHttpInfo(accept, scopeId, organizationId, startingIndex, maximumItems, includeAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Customers based on the organization id - {GetCustomersByOrganizationRequest} Retrieve the Customers based on the organization id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organization identifier of the customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <returns>ApiResponse of GetCustomersByOrganizationQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCustomersByOrganizationQueryResult> GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGetWithHttpInfo(string accept, string scopeId, string organizationId, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGet");

            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrganizationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCustomersByOrganizationQueryResult>("/organizations/{ScopeId}/{OrganizationId}/customers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Customers based on the organization id - {GetCustomersByOrganizationRequest} Retrieve the Customers based on the organization id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organization identifier of the customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomersByOrganizationQueryResult</returns>
        public async System.Threading.Tasks.Task<GetCustomersByOrganizationQueryResult> GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGetAsync(string accept, string scopeId, string organizationId, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCustomersByOrganizationQueryResult> localVarResponse = await GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGetWithHttpInfoAsync(accept, scopeId, organizationId, startingIndex, maximumItems, includeAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Customers based on the organization id - {GetCustomersByOrganizationRequest} Retrieve the Customers based on the organization id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The organization identifier of the customer to search for.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query. (optional)</param>
        /// <param name="includeAddresses">Whether or not to fully load the collection of addresses linked to the customer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomersByOrganizationQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetCustomersByOrganizationQueryResult>> GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGetWithHttpInfoAsync(string accept, string scopeId, string organizationId, int? startingIndex = default(int?), int? maximumItems = default(int?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGet");

            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrganizationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCustomersByOrganizationQueryResult>("/organizations/{ScopeId}/{OrganizationId}/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomersByOrganizationRequestScopeIdOrganizationIdcustomersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retreive a specific organization by name - {GetOrganizationByNameRequest} Retrieve a specific organization by name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <returns>Organization</returns>
        public Organization GetOrganizationByNameRequestScopeIdbyNameNameGet(string accept, string scopeId, string name, bool? includeAddresses = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization> localVarResponse = GetOrganizationByNameRequestScopeIdbyNameNameGetWithHttpInfo(accept, scopeId, name, includeAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retreive a specific organization by name - {GetOrganizationByNameRequest} Retrieve a specific organization by name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <returns>ApiResponse of Organization</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization> GetOrganizationByNameRequestScopeIdbyNameNameGetWithHttpInfo(string accept, string scopeId, string name, bool? includeAddresses = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->GetOrganizationByNameRequestScopeIdbyNameNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->GetOrganizationByNameRequestScopeIdbyNameNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling OrganizationsApi->GetOrganizationByNameRequestScopeIdbyNameNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Organization>("/organizations/{ScopeId}/byName/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationByNameRequestScopeIdbyNameNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retreive a specific organization by name - {GetOrganizationByNameRequest} Retrieve a specific organization by name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> GetOrganizationByNameRequestScopeIdbyNameNameGetAsync(string accept, string scopeId, string name, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization> localVarResponse = await GetOrganizationByNameRequestScopeIdbyNameNameGetWithHttpInfoAsync(accept, scopeId, name, includeAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retreive a specific organization by name - {GetOrganizationByNameRequest} Retrieve a specific organization by name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization>> GetOrganizationByNameRequestScopeIdbyNameNameGetWithHttpInfoAsync(string accept, string scopeId, string name, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->GetOrganizationByNameRequestScopeIdbyNameNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->GetOrganizationByNameRequestScopeIdbyNameNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling OrganizationsApi->GetOrganizationByNameRequestScopeIdbyNameNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Organization>("/organizations/{ScopeId}/byName/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationByNameRequestScopeIdbyNameNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retreive a specific organization - {GetOrganizationRequest} Retrieve a specific organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The identifier of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <returns>Organization</returns>
        public Organization GetOrganizationRequestScopeIdOrganizationIdGet(string accept, string scopeId, string organizationId, bool? includeAddresses = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization> localVarResponse = GetOrganizationRequestScopeIdOrganizationIdGetWithHttpInfo(accept, scopeId, organizationId, includeAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retreive a specific organization - {GetOrganizationRequest} Retrieve a specific organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The identifier of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <returns>ApiResponse of Organization</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization> GetOrganizationRequestScopeIdOrganizationIdGetWithHttpInfo(string accept, string scopeId, string organizationId, bool? includeAddresses = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->GetOrganizationRequestScopeIdOrganizationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->GetOrganizationRequestScopeIdOrganizationIdGet");

            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationRequestScopeIdOrganizationIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrganizationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Organization>("/organizations/{ScopeId}/{OrganizationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationRequestScopeIdOrganizationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retreive a specific organization - {GetOrganizationRequest} Retrieve a specific organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The identifier of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> GetOrganizationRequestScopeIdOrganizationIdGetAsync(string accept, string scopeId, string organizationId, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization> localVarResponse = await GetOrganizationRequestScopeIdOrganizationIdGetWithHttpInfoAsync(accept, scopeId, organizationId, includeAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retreive a specific organization - {GetOrganizationRequest} Retrieve a specific organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="organizationId">The identifier of the organization to retrieve.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the addresses. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization>> GetOrganizationRequestScopeIdOrganizationIdGetWithHttpInfoAsync(string accept, string scopeId, string organizationId, bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->GetOrganizationRequestScopeIdOrganizationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->GetOrganizationRequestScopeIdOrganizationIdGet");

            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetOrganizationRequestScopeIdOrganizationIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrganizationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Organization>("/organizations/{ScopeId}/{OrganizationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationRequestScopeIdOrganizationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an organization - {UpdateOrganizationRequest} Update an organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="organizationId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Organization</returns>
        public Organization UpdateOrganizationRequestScopeIdOrganizationIdCreate(string accept, string scopeId, string organizationId, UpdateOrganizationRequest body = default(UpdateOrganizationRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization> localVarResponse = UpdateOrganizationRequestScopeIdOrganizationIdCreateWithHttpInfo(accept, scopeId, organizationId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an organization - {UpdateOrganizationRequest} Update an organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="organizationId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Organization</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization> UpdateOrganizationRequestScopeIdOrganizationIdCreateWithHttpInfo(string accept, string scopeId, string organizationId, UpdateOrganizationRequest body = default(UpdateOrganizationRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->UpdateOrganizationRequestScopeIdOrganizationIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->UpdateOrganizationRequestScopeIdOrganizationIdCreate");

            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->UpdateOrganizationRequestScopeIdOrganizationIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrganizationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Organization>("/organizations/{ScopeId}/{OrganizationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrganizationRequestScopeIdOrganizationIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an organization - {UpdateOrganizationRequest} Update an organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="organizationId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> UpdateOrganizationRequestScopeIdOrganizationIdCreateAsync(string accept, string scopeId, string organizationId, UpdateOrganizationRequest body = default(UpdateOrganizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization> localVarResponse = await UpdateOrganizationRequestScopeIdOrganizationIdCreateWithHttpInfoAsync(accept, scopeId, organizationId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an organization - {UpdateOrganizationRequest} Update an organization
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope in which the organization belong.</param>
        /// <param name="organizationId">The unique identifier of the entity.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Organization>> UpdateOrganizationRequestScopeIdOrganizationIdCreateWithHttpInfoAsync(string accept, string scopeId, string organizationId, UpdateOrganizationRequest body = default(UpdateOrganizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling OrganizationsApi->UpdateOrganizationRequestScopeIdOrganizationIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling OrganizationsApi->UpdateOrganizationRequestScopeIdOrganizationIdCreate");

            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->UpdateOrganizationRequestScopeIdOrganizationIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("OrganizationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Organization>("/organizations/{ScopeId}/{OrganizationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrganizationRequestScopeIdOrganizationIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
