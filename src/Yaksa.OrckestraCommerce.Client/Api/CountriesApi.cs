/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICountriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a country - {AddCountryRequest}
        /// </summary>
        /// <remarks>
        /// Adds a country.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Country</returns>
        Country AddCountryRequestPost(string accept, AddCountryRequest body = default(AddCountryRequest));

        /// <summary>
        /// Adds a country - {AddCountryRequest}
        /// </summary>
        /// <remarks>
        /// Adds a country.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Country</returns>
        ApiResponse<Country> AddCountryRequestPostWithHttpInfo(string accept, AddCountryRequest body = default(AddCountryRequest));
        /// <summary>
        /// Retrieve all countries - {GetCountriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all countries.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported countries (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <returns>List&lt;Country&gt;</returns>
        List<Country> GetCountriesRequestGet(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?), bool? includeRegions = default(bool?));

        /// <summary>
        /// Retrieve all countries - {GetCountriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all countries.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported countries (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <returns>ApiResponse of List&lt;Country&gt;</returns>
        ApiResponse<List<Country>> GetCountriesRequestGetWithHttpInfo(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?), bool? includeRegions = default(bool?));
        /// <summary>
        /// Retrieve a country - {GetCountryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a country using its ISO code
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The countryIsoCode (unique) that identifies the country to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <returns>Country</returns>
        Country GetCountryRequestCountryIsoCodeGet(string accept, string countryIsoCode, string cultureName = default(string), bool? includeRegions = default(bool?));

        /// <summary>
        /// Retrieve a country - {GetCountryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a country using its ISO code
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The countryIsoCode (unique) that identifies the country to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <returns>ApiResponse of Country</returns>
        ApiResponse<Country> GetCountryRequestCountryIsoCodeGetWithHttpInfo(string accept, string countryIsoCode, string cultureName = default(string), bool? includeRegions = default(bool?));
        /// <summary>
        /// Retrieve all regions of a country - {GetRegionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all regions of a country
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The unique countryIsoCode that identifies the country whose regions will be retrieved</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported regions (optional)</param>
        /// <returns>List&lt;Region&gt;</returns>
        List<Region> GetRegionsRequestCountryIsoCoderegionsGet(string accept, string countryIsoCode, string cultureName = default(string), bool? includeUnsupported = default(bool?));

        /// <summary>
        /// Retrieve all regions of a country - {GetRegionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all regions of a country
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The unique countryIsoCode that identifies the country whose regions will be retrieved</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported regions (optional)</param>
        /// <returns>ApiResponse of List&lt;Region&gt;</returns>
        ApiResponse<List<Region>> GetRegionsRequestCountryIsoCoderegionsGetWithHttpInfo(string accept, string countryIsoCode, string cultureName = default(string), bool? includeUnsupported = default(bool?));
        /// <summary>
        /// Update a country and associated regions - {UpdateCountryAndRegionsRequest}
        /// </summary>
        /// <remarks>
        /// Updates a country and associated regions.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="isoCode">Two letter code that identifies Country uniquely (ISO 3166)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Country</returns>
        Country UpdateCountryAndRegionsRequestIsoCodeCreate(string accept, string isoCode, UpdateCountryAndRegionsRequest body = default(UpdateCountryAndRegionsRequest));

        /// <summary>
        /// Update a country and associated regions - {UpdateCountryAndRegionsRequest}
        /// </summary>
        /// <remarks>
        /// Updates a country and associated regions.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="isoCode">Two letter code that identifies Country uniquely (ISO 3166)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Country</returns>
        ApiResponse<Country> UpdateCountryAndRegionsRequestIsoCodeCreateWithHttpInfo(string accept, string isoCode, UpdateCountryAndRegionsRequest body = default(UpdateCountryAndRegionsRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICountriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds a country - {AddCountryRequest}
        /// </summary>
        /// <remarks>
        /// Adds a country.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Country</returns>
        System.Threading.Tasks.Task<Country> AddCountryRequestPostAsync(string accept, AddCountryRequest body = default(AddCountryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a country - {AddCountryRequest}
        /// </summary>
        /// <remarks>
        /// Adds a country.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Country)</returns>
        System.Threading.Tasks.Task<ApiResponse<Country>> AddCountryRequestPostWithHttpInfoAsync(string accept, AddCountryRequest body = default(AddCountryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all countries - {GetCountriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all countries.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported countries (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Country&gt;</returns>
        System.Threading.Tasks.Task<List<Country>> GetCountriesRequestGetAsync(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?), bool? includeRegions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all countries - {GetCountriesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all countries.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported countries (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Country&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Country>>> GetCountriesRequestGetWithHttpInfoAsync(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?), bool? includeRegions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a country - {GetCountryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a country using its ISO code
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The countryIsoCode (unique) that identifies the country to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Country</returns>
        System.Threading.Tasks.Task<Country> GetCountryRequestCountryIsoCodeGetAsync(string accept, string countryIsoCode, string cultureName = default(string), bool? includeRegions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a country - {GetCountryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a country using its ISO code
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The countryIsoCode (unique) that identifies the country to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Country)</returns>
        System.Threading.Tasks.Task<ApiResponse<Country>> GetCountryRequestCountryIsoCodeGetWithHttpInfoAsync(string accept, string countryIsoCode, string cultureName = default(string), bool? includeRegions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all regions of a country - {GetRegionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all regions of a country
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The unique countryIsoCode that identifies the country whose regions will be retrieved</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported regions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Region&gt;</returns>
        System.Threading.Tasks.Task<List<Region>> GetRegionsRequestCountryIsoCoderegionsGetAsync(string accept, string countryIsoCode, string cultureName = default(string), bool? includeUnsupported = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all regions of a country - {GetRegionsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all regions of a country
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The unique countryIsoCode that identifies the country whose regions will be retrieved</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported regions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Region&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Region>>> GetRegionsRequestCountryIsoCoderegionsGetWithHttpInfoAsync(string accept, string countryIsoCode, string cultureName = default(string), bool? includeUnsupported = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a country and associated regions - {UpdateCountryAndRegionsRequest}
        /// </summary>
        /// <remarks>
        /// Updates a country and associated regions.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="isoCode">Two letter code that identifies Country uniquely (ISO 3166)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Country</returns>
        System.Threading.Tasks.Task<Country> UpdateCountryAndRegionsRequestIsoCodeCreateAsync(string accept, string isoCode, UpdateCountryAndRegionsRequest body = default(UpdateCountryAndRegionsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a country and associated regions - {UpdateCountryAndRegionsRequest}
        /// </summary>
        /// <remarks>
        /// Updates a country and associated regions.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="isoCode">Two letter code that identifies Country uniquely (ISO 3166)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Country)</returns>
        System.Threading.Tasks.Task<ApiResponse<Country>> UpdateCountryAndRegionsRequestIsoCodeCreateWithHttpInfoAsync(string accept, string isoCode, UpdateCountryAndRegionsRequest body = default(UpdateCountryAndRegionsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICountriesApi : ICountriesApiSync, ICountriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CountriesApi : ICountriesApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CountriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CountriesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CountriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CountriesApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CountriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CountriesApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CountriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CountriesApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds a country - {AddCountryRequest} Adds a country.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Country</returns>
        public Country AddCountryRequestPost(string accept, AddCountryRequest body = default(AddCountryRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Country> localVarResponse = AddCountryRequestPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a country - {AddCountryRequest} Adds a country.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Country</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Country> AddCountryRequestPostWithHttpInfo(string accept, AddCountryRequest body = default(AddCountryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CountriesApi->AddCountryRequestPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Country>("/countries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCountryRequestPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a country - {AddCountryRequest} Adds a country.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Country</returns>
        public async System.Threading.Tasks.Task<Country> AddCountryRequestPostAsync(string accept, AddCountryRequest body = default(AddCountryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Country> localVarResponse = await AddCountryRequestPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a country - {AddCountryRequest} Adds a country.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Country)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Country>> AddCountryRequestPostWithHttpInfoAsync(string accept, AddCountryRequest body = default(AddCountryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CountriesApi->AddCountryRequestPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Country>("/countries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCountryRequestPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all countries - {GetCountriesRequest} Retrieve all countries.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported countries (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <returns>List&lt;Country&gt;</returns>
        public List<Country> GetCountriesRequestGet(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?), bool? includeRegions = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Country>> localVarResponse = GetCountriesRequestGetWithHttpInfo(accept, cultureName, includeUnsupported, includeRegions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all countries - {GetCountriesRequest} Retrieve all countries.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported countries (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <returns>ApiResponse of List&lt;Country&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Country>> GetCountriesRequestGetWithHttpInfo(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?), bool? includeRegions = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CountriesApi->GetCountriesRequestGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeUnsupported != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeUnsupported", includeUnsupported));
            }
            if (includeRegions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRegions", includeRegions));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Country>>("/countries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountriesRequestGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all countries - {GetCountriesRequest} Retrieve all countries.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported countries (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Country&gt;</returns>
        public async System.Threading.Tasks.Task<List<Country>> GetCountriesRequestGetAsync(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?), bool? includeRegions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Country>> localVarResponse = await GetCountriesRequestGetWithHttpInfoAsync(accept, cultureName, includeUnsupported, includeRegions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all countries - {GetCountriesRequest} Retrieve all countries.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported countries (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Country&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Country>>> GetCountriesRequestGetWithHttpInfoAsync(string accept, string cultureName = default(string), bool? includeUnsupported = default(bool?), bool? includeRegions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CountriesApi->GetCountriesRequestGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeUnsupported != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeUnsupported", includeUnsupported));
            }
            if (includeRegions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRegions", includeRegions));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Country>>("/countries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountriesRequestGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a country - {GetCountryRequest} Retrieve a country using its ISO code
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The countryIsoCode (unique) that identifies the country to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <returns>Country</returns>
        public Country GetCountryRequestCountryIsoCodeGet(string accept, string countryIsoCode, string cultureName = default(string), bool? includeRegions = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Country> localVarResponse = GetCountryRequestCountryIsoCodeGetWithHttpInfo(accept, countryIsoCode, cultureName, includeRegions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a country - {GetCountryRequest} Retrieve a country using its ISO code
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The countryIsoCode (unique) that identifies the country to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <returns>ApiResponse of Country</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Country> GetCountryRequestCountryIsoCodeGetWithHttpInfo(string accept, string countryIsoCode, string cultureName = default(string), bool? includeRegions = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CountriesApi->GetCountryRequestCountryIsoCodeGet");

            // verify the required parameter 'countryIsoCode' is set
            if (countryIsoCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'countryIsoCode' when calling CountriesApi->GetCountryRequestCountryIsoCodeGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CountryIsoCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(countryIsoCode)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeRegions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRegions", includeRegions));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Country>("/countries/{CountryIsoCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountryRequestCountryIsoCodeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a country - {GetCountryRequest} Retrieve a country using its ISO code
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The countryIsoCode (unique) that identifies the country to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Country</returns>
        public async System.Threading.Tasks.Task<Country> GetCountryRequestCountryIsoCodeGetAsync(string accept, string countryIsoCode, string cultureName = default(string), bool? includeRegions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Country> localVarResponse = await GetCountryRequestCountryIsoCodeGetWithHttpInfoAsync(accept, countryIsoCode, cultureName, includeRegions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a country - {GetCountryRequest} Retrieve a country using its ISO code
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The countryIsoCode (unique) that identifies the country to retrieve</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeRegions">Whether to include the regions in each country (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Country)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Country>> GetCountryRequestCountryIsoCodeGetWithHttpInfoAsync(string accept, string countryIsoCode, string cultureName = default(string), bool? includeRegions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CountriesApi->GetCountryRequestCountryIsoCodeGet");

            // verify the required parameter 'countryIsoCode' is set
            if (countryIsoCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'countryIsoCode' when calling CountriesApi->GetCountryRequestCountryIsoCodeGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CountryIsoCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(countryIsoCode)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeRegions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeRegions", includeRegions));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Country>("/countries/{CountryIsoCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountryRequestCountryIsoCodeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all regions of a country - {GetRegionsRequest} Retrieve all regions of a country
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The unique countryIsoCode that identifies the country whose regions will be retrieved</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported regions (optional)</param>
        /// <returns>List&lt;Region&gt;</returns>
        public List<Region> GetRegionsRequestCountryIsoCoderegionsGet(string accept, string countryIsoCode, string cultureName = default(string), bool? includeUnsupported = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Region>> localVarResponse = GetRegionsRequestCountryIsoCoderegionsGetWithHttpInfo(accept, countryIsoCode, cultureName, includeUnsupported);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all regions of a country - {GetRegionsRequest} Retrieve all regions of a country
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The unique countryIsoCode that identifies the country whose regions will be retrieved</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported regions (optional)</param>
        /// <returns>ApiResponse of List&lt;Region&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Region>> GetRegionsRequestCountryIsoCoderegionsGetWithHttpInfo(string accept, string countryIsoCode, string cultureName = default(string), bool? includeUnsupported = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CountriesApi->GetRegionsRequestCountryIsoCoderegionsGet");

            // verify the required parameter 'countryIsoCode' is set
            if (countryIsoCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'countryIsoCode' when calling CountriesApi->GetRegionsRequestCountryIsoCoderegionsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CountryIsoCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(countryIsoCode)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeUnsupported != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeUnsupported", includeUnsupported));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Region>>("/countries/{CountryIsoCode}/regions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegionsRequestCountryIsoCoderegionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all regions of a country - {GetRegionsRequest} Retrieve all regions of a country
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The unique countryIsoCode that identifies the country whose regions will be retrieved</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported regions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Region&gt;</returns>
        public async System.Threading.Tasks.Task<List<Region>> GetRegionsRequestCountryIsoCoderegionsGetAsync(string accept, string countryIsoCode, string cultureName = default(string), bool? includeUnsupported = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Region>> localVarResponse = await GetRegionsRequestCountryIsoCoderegionsGetWithHttpInfoAsync(accept, countryIsoCode, cultureName, includeUnsupported, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all regions of a country - {GetRegionsRequest} Retrieve all regions of a country
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="countryIsoCode">The unique countryIsoCode that identifies the country whose regions will be retrieved</param>
        /// <param name="cultureName">The culture name in which language the data will be returned (optional)</param>
        /// <param name="includeUnsupported">Whether to include the unsupported regions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Region&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Region>>> GetRegionsRequestCountryIsoCoderegionsGetWithHttpInfoAsync(string accept, string countryIsoCode, string cultureName = default(string), bool? includeUnsupported = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CountriesApi->GetRegionsRequestCountryIsoCoderegionsGet");

            // verify the required parameter 'countryIsoCode' is set
            if (countryIsoCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'countryIsoCode' when calling CountriesApi->GetRegionsRequestCountryIsoCoderegionsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("CountryIsoCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(countryIsoCode)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (includeUnsupported != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeUnsupported", includeUnsupported));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Region>>("/countries/{CountryIsoCode}/regions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegionsRequestCountryIsoCoderegionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a country and associated regions - {UpdateCountryAndRegionsRequest} Updates a country and associated regions.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="isoCode">Two letter code that identifies Country uniquely (ISO 3166)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Country</returns>
        public Country UpdateCountryAndRegionsRequestIsoCodeCreate(string accept, string isoCode, UpdateCountryAndRegionsRequest body = default(UpdateCountryAndRegionsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Country> localVarResponse = UpdateCountryAndRegionsRequestIsoCodeCreateWithHttpInfo(accept, isoCode, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a country and associated regions - {UpdateCountryAndRegionsRequest} Updates a country and associated regions.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="isoCode">Two letter code that identifies Country uniquely (ISO 3166)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Country</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Country> UpdateCountryAndRegionsRequestIsoCodeCreateWithHttpInfo(string accept, string isoCode, UpdateCountryAndRegionsRequest body = default(UpdateCountryAndRegionsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CountriesApi->UpdateCountryAndRegionsRequestIsoCodeCreate");

            // verify the required parameter 'isoCode' is set
            if (isoCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'isoCode' when calling CountriesApi->UpdateCountryAndRegionsRequestIsoCodeCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("IsoCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(isoCode)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Country>("/countries/{IsoCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCountryAndRegionsRequestIsoCodeCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a country and associated regions - {UpdateCountryAndRegionsRequest} Updates a country and associated regions.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="isoCode">Two letter code that identifies Country uniquely (ISO 3166)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Country</returns>
        public async System.Threading.Tasks.Task<Country> UpdateCountryAndRegionsRequestIsoCodeCreateAsync(string accept, string isoCode, UpdateCountryAndRegionsRequest body = default(UpdateCountryAndRegionsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Country> localVarResponse = await UpdateCountryAndRegionsRequestIsoCodeCreateWithHttpInfoAsync(accept, isoCode, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a country and associated regions - {UpdateCountryAndRegionsRequest} Updates a country and associated regions.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="isoCode">Two letter code that identifies Country uniquely (ISO 3166)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Country)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Country>> UpdateCountryAndRegionsRequestIsoCodeCreateWithHttpInfoAsync(string accept, string isoCode, UpdateCountryAndRegionsRequest body = default(UpdateCountryAndRegionsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CountriesApi->UpdateCountryAndRegionsRequestIsoCodeCreate");

            // verify the required parameter 'isoCode' is set
            if (isoCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'isoCode' when calling CountriesApi->UpdateCountryAndRegionsRequestIsoCodeCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("IsoCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(isoCode)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Country>("/countries/{IsoCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCountryAndRegionsRequestIsoCodeCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
