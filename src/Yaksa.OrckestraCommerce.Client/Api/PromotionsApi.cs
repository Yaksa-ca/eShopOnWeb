/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPromotionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Export a promotion&#39;s coupon codes list - {ExportCouponCodesRequest}
        /// </summary>
        /// <remarks>
        /// Export a promotion&#39;s coupon codes list
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ExportCouponCodesRequestPromotionIdcouponsexportPost(string accept, string promotionId, ExportCouponCodesRequest body = default(ExportCouponCodesRequest));

        /// <summary>
        /// Export a promotion&#39;s coupon codes list - {ExportCouponCodesRequest}
        /// </summary>
        /// <remarks>
        /// Export a promotion&#39;s coupon codes list
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ExportCouponCodesRequestPromotionIdcouponsexportPostWithHttpInfo(string accept, string promotionId, ExportCouponCodesRequest body = default(ExportCouponCodesRequest));
        /// <summary>
        /// Retrieve the list of the promotion&#39;s promo codes - {FindPromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the list of the promotion&#39;s promo codes. This is a paged result.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindPromoCodesResponse</returns>
        FindPromoCodesResponse FindPromoCodesRequestScopeIdPromotionIdpromoCodesPost(string accept, string scopeId, string promotionId, FindPromoCodesRequest body = default(FindPromoCodesRequest));

        /// <summary>
        /// Retrieve the list of the promotion&#39;s promo codes - {FindPromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the list of the promotion&#39;s promo codes. This is a paged result.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindPromoCodesResponse</returns>
        ApiResponse<FindPromoCodesResponse> FindPromoCodesRequestScopeIdPromotionIdpromoCodesPostWithHttpInfo(string accept, string scopeId, string promotionId, FindPromoCodesRequest body = default(FindPromoCodesRequest));
        /// <summary>
        /// Generate promo codes for the promotion - {GeneratePromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Generate promo codes for the promotion.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GeneratePromoCodesResponse</returns>
        GeneratePromoCodesResponse GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePost(string accept, string scopeId, string promotionId, GeneratePromoCodesRequest body = default(GeneratePromoCodesRequest));

        /// <summary>
        /// Generate promo codes for the promotion - {GeneratePromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Generate promo codes for the promotion.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GeneratePromoCodesResponse</returns>
        ApiResponse<GeneratePromoCodesResponse> GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePostWithHttpInfo(string accept, string scopeId, string promotionId, GeneratePromoCodesRequest body = default(GeneratePromoCodesRequest));
        /// <summary>
        /// Retrieve the number of promo codes associated to a promotion with multiple promo codes - {GetPromoCodesCountRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the number of promo codes associated to a promotion with multiple promo codes, return 0 if the promo code mode is different from Multiple.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <returns>GetPromoCodesCountResponse</returns>
        GetPromoCodesCountResponse GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGet(string accept, string scopeId, string promotionId);

        /// <summary>
        /// Retrieve the number of promo codes associated to a promotion with multiple promo codes - {GetPromoCodesCountRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the number of promo codes associated to a promotion with multiple promo codes, return 0 if the promo code mode is different from Multiple.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <returns>ApiResponse of GetPromoCodesCountResponse</returns>
        ApiResponse<GetPromoCodesCountResponse> GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGetWithHttpInfo(string accept, string scopeId, string promotionId);
        /// <summary>
        /// Import (insert or update) a promotion&#39;s coupons - {ImportCouponCodesRequest}
        /// </summary>
        /// <remarks>
        /// Import (insert or update) a promotion&#39;s coupons
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo ImportCouponCodesRequestPromotionIdcouponsimportPost(string accept, string promotionId, ImportCouponCodesRequest body = default(ImportCouponCodesRequest));

        /// <summary>
        /// Import (insert or update) a promotion&#39;s coupons - {ImportCouponCodesRequest}
        /// </summary>
        /// <remarks>
        /// Import (insert or update) a promotion&#39;s coupons
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> ImportCouponCodesRequestPromotionIdcouponsimportPostWithHttpInfo(string accept, string promotionId, ImportCouponCodesRequest body = default(ImportCouponCodesRequest));
        /// <summary>
        /// Validate if the promo code can be created - {ValidatePromoCodeRequest}
        /// </summary>
        /// <remarks>
        /// Validate if the promo code can be created. Returns true is the code is not created yet in the system, or created but associated to the specified promotion.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="promoCode">The promo code to validate</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ValidationResult</returns>
        ValidationResult ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePost(string accept, string scopeId, string promotionId, string promoCode, Object body = default(Object));

        /// <summary>
        /// Validate if the promo code can be created - {ValidatePromoCodeRequest}
        /// </summary>
        /// <remarks>
        /// Validate if the promo code can be created. Returns true is the code is not created yet in the system, or created but associated to the specified promotion.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="promoCode">The promo code to validate</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ValidationResult</returns>
        ApiResponse<ValidationResult> ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePostWithHttpInfo(string accept, string scopeId, string promotionId, string promoCode, Object body = default(Object));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPromotionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Export a promotion&#39;s coupon codes list - {ExportCouponCodesRequest}
        /// </summary>
        /// <remarks>
        /// Export a promotion&#39;s coupon codes list
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ExportCouponCodesRequestPromotionIdcouponsexportPostAsync(string accept, string promotionId, ExportCouponCodesRequest body = default(ExportCouponCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export a promotion&#39;s coupon codes list - {ExportCouponCodesRequest}
        /// </summary>
        /// <remarks>
        /// Export a promotion&#39;s coupon codes list
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ExportCouponCodesRequestPromotionIdcouponsexportPostWithHttpInfoAsync(string accept, string promotionId, ExportCouponCodesRequest body = default(ExportCouponCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the list of the promotion&#39;s promo codes - {FindPromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the list of the promotion&#39;s promo codes. This is a paged result.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindPromoCodesResponse</returns>
        System.Threading.Tasks.Task<FindPromoCodesResponse> FindPromoCodesRequestScopeIdPromotionIdpromoCodesPostAsync(string accept, string scopeId, string promotionId, FindPromoCodesRequest body = default(FindPromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the list of the promotion&#39;s promo codes - {FindPromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the list of the promotion&#39;s promo codes. This is a paged result.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindPromoCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindPromoCodesResponse>> FindPromoCodesRequestScopeIdPromotionIdpromoCodesPostWithHttpInfoAsync(string accept, string scopeId, string promotionId, FindPromoCodesRequest body = default(FindPromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate promo codes for the promotion - {GeneratePromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Generate promo codes for the promotion.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GeneratePromoCodesResponse</returns>
        System.Threading.Tasks.Task<GeneratePromoCodesResponse> GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePostAsync(string accept, string scopeId, string promotionId, GeneratePromoCodesRequest body = default(GeneratePromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate promo codes for the promotion - {GeneratePromoCodesRequest}
        /// </summary>
        /// <remarks>
        /// Generate promo codes for the promotion.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GeneratePromoCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeneratePromoCodesResponse>> GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePostWithHttpInfoAsync(string accept, string scopeId, string promotionId, GeneratePromoCodesRequest body = default(GeneratePromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the number of promo codes associated to a promotion with multiple promo codes - {GetPromoCodesCountRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the number of promo codes associated to a promotion with multiple promo codes, return 0 if the promo code mode is different from Multiple.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPromoCodesCountResponse</returns>
        System.Threading.Tasks.Task<GetPromoCodesCountResponse> GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGetAsync(string accept, string scopeId, string promotionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the number of promo codes associated to a promotion with multiple promo codes - {GetPromoCodesCountRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the number of promo codes associated to a promotion with multiple promo codes, return 0 if the promo code mode is different from Multiple.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPromoCodesCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPromoCodesCountResponse>> GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGetWithHttpInfoAsync(string accept, string scopeId, string promotionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import (insert or update) a promotion&#39;s coupons - {ImportCouponCodesRequest}
        /// </summary>
        /// <remarks>
        /// Import (insert or update) a promotion&#39;s coupons
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> ImportCouponCodesRequestPromotionIdcouponsimportPostAsync(string accept, string promotionId, ImportCouponCodesRequest body = default(ImportCouponCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import (insert or update) a promotion&#39;s coupons - {ImportCouponCodesRequest}
        /// </summary>
        /// <remarks>
        /// Import (insert or update) a promotion&#39;s coupons
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> ImportCouponCodesRequestPromotionIdcouponsimportPostWithHttpInfoAsync(string accept, string promotionId, ImportCouponCodesRequest body = default(ImportCouponCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate if the promo code can be created - {ValidatePromoCodeRequest}
        /// </summary>
        /// <remarks>
        /// Validate if the promo code can be created. Returns true is the code is not created yet in the system, or created but associated to the specified promotion.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="promoCode">The promo code to validate</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationResult</returns>
        System.Threading.Tasks.Task<ValidationResult> ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePostAsync(string accept, string scopeId, string promotionId, string promoCode, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate if the promo code can be created - {ValidatePromoCodeRequest}
        /// </summary>
        /// <remarks>
        /// Validate if the promo code can be created. Returns true is the code is not created yet in the system, or created but associated to the specified promotion.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="promoCode">The promo code to validate</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationResult>> ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePostWithHttpInfoAsync(string accept, string scopeId, string promotionId, string promoCode, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPromotionsApi : IPromotionsApiSync, IPromotionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PromotionsApi : IPromotionsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PromotionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PromotionsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PromotionsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PromotionsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Export a promotion&#39;s coupon codes list - {ExportCouponCodesRequest} Export a promotion&#39;s coupon codes list
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ExportCouponCodesRequestPromotionIdcouponsexportPost(string accept, string promotionId, ExportCouponCodesRequest body = default(ExportCouponCodesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<string>> localVarResponse = ExportCouponCodesRequestPromotionIdcouponsexportPostWithHttpInfo(accept, promotionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a promotion&#39;s coupon codes list - {ExportCouponCodesRequest} Export a promotion&#39;s coupon codes list
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<string>> ExportCouponCodesRequestPromotionIdcouponsexportPostWithHttpInfo(string accept, string promotionId, ExportCouponCodesRequest body = default(ExportCouponCodesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PromotionsApi->ExportCouponCodesRequestPromotionIdcouponsexportPost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->ExportCouponCodesRequestPromotionIdcouponsexportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<string>>("/promotions/{PromotionId}/coupons/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCouponCodesRequestPromotionIdcouponsexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a promotion&#39;s coupon codes list - {ExportCouponCodesRequest} Export a promotion&#39;s coupon codes list
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ExportCouponCodesRequestPromotionIdcouponsexportPostAsync(string accept, string promotionId, ExportCouponCodesRequest body = default(ExportCouponCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<string>> localVarResponse = await ExportCouponCodesRequestPromotionIdcouponsexportPostWithHttpInfoAsync(accept, promotionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a promotion&#39;s coupon codes list - {ExportCouponCodesRequest} Export a promotion&#39;s coupon codes list
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<string>>> ExportCouponCodesRequestPromotionIdcouponsexportPostWithHttpInfoAsync(string accept, string promotionId, ExportCouponCodesRequest body = default(ExportCouponCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PromotionsApi->ExportCouponCodesRequestPromotionIdcouponsexportPost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->ExportCouponCodesRequestPromotionIdcouponsexportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<string>>("/promotions/{PromotionId}/coupons/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCouponCodesRequestPromotionIdcouponsexportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the list of the promotion&#39;s promo codes - {FindPromoCodesRequest} Retrieve the list of the promotion&#39;s promo codes. This is a paged result.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindPromoCodesResponse</returns>
        public FindPromoCodesResponse FindPromoCodesRequestScopeIdPromotionIdpromoCodesPost(string accept, string scopeId, string promotionId, FindPromoCodesRequest body = default(FindPromoCodesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindPromoCodesResponse> localVarResponse = FindPromoCodesRequestScopeIdPromotionIdpromoCodesPostWithHttpInfo(accept, scopeId, promotionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the list of the promotion&#39;s promo codes - {FindPromoCodesRequest} Retrieve the list of the promotion&#39;s promo codes. This is a paged result.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindPromoCodesResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindPromoCodesResponse> FindPromoCodesRequestScopeIdPromotionIdpromoCodesPostWithHttpInfo(string accept, string scopeId, string promotionId, FindPromoCodesRequest body = default(FindPromoCodesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PromotionsApi->FindPromoCodesRequestScopeIdPromotionIdpromoCodesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PromotionsApi->FindPromoCodesRequestScopeIdPromotionIdpromoCodesPost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->FindPromoCodesRequestScopeIdPromotionIdpromoCodesPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindPromoCodesResponse>("/promotions/{ScopeId}/{PromotionId}/promoCodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindPromoCodesRequestScopeIdPromotionIdpromoCodesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the list of the promotion&#39;s promo codes - {FindPromoCodesRequest} Retrieve the list of the promotion&#39;s promo codes. This is a paged result.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindPromoCodesResponse</returns>
        public async System.Threading.Tasks.Task<FindPromoCodesResponse> FindPromoCodesRequestScopeIdPromotionIdpromoCodesPostAsync(string accept, string scopeId, string promotionId, FindPromoCodesRequest body = default(FindPromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindPromoCodesResponse> localVarResponse = await FindPromoCodesRequestScopeIdPromotionIdpromoCodesPostWithHttpInfoAsync(accept, scopeId, promotionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the list of the promotion&#39;s promo codes - {FindPromoCodesRequest} Retrieve the list of the promotion&#39;s promo codes. This is a paged result.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindPromoCodesResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindPromoCodesResponse>> FindPromoCodesRequestScopeIdPromotionIdpromoCodesPostWithHttpInfoAsync(string accept, string scopeId, string promotionId, FindPromoCodesRequest body = default(FindPromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PromotionsApi->FindPromoCodesRequestScopeIdPromotionIdpromoCodesPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PromotionsApi->FindPromoCodesRequestScopeIdPromotionIdpromoCodesPost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->FindPromoCodesRequestScopeIdPromotionIdpromoCodesPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FindPromoCodesResponse>("/promotions/{ScopeId}/{PromotionId}/promoCodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindPromoCodesRequestScopeIdPromotionIdpromoCodesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate promo codes for the promotion - {GeneratePromoCodesRequest} Generate promo codes for the promotion.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GeneratePromoCodesResponse</returns>
        public GeneratePromoCodesResponse GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePost(string accept, string scopeId, string promotionId, GeneratePromoCodesRequest body = default(GeneratePromoCodesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GeneratePromoCodesResponse> localVarResponse = GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePostWithHttpInfo(accept, scopeId, promotionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate promo codes for the promotion - {GeneratePromoCodesRequest} Generate promo codes for the promotion.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GeneratePromoCodesResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GeneratePromoCodesResponse> GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePostWithHttpInfo(string accept, string scopeId, string promotionId, GeneratePromoCodesRequest body = default(GeneratePromoCodesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PromotionsApi->GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PromotionsApi->GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GeneratePromoCodesResponse>("/promotions/{ScopeId}/{PromotionId}/promoCodes/generate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate promo codes for the promotion - {GeneratePromoCodesRequest} Generate promo codes for the promotion.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GeneratePromoCodesResponse</returns>
        public async System.Threading.Tasks.Task<GeneratePromoCodesResponse> GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePostAsync(string accept, string scopeId, string promotionId, GeneratePromoCodesRequest body = default(GeneratePromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GeneratePromoCodesResponse> localVarResponse = await GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePostWithHttpInfoAsync(accept, scopeId, promotionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate promo codes for the promotion - {GeneratePromoCodesRequest} Generate promo codes for the promotion.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GeneratePromoCodesResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GeneratePromoCodesResponse>> GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePostWithHttpInfoAsync(string accept, string scopeId, string promotionId, GeneratePromoCodesRequest body = default(GeneratePromoCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PromotionsApi->GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PromotionsApi->GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GeneratePromoCodesResponse>("/promotions/{ScopeId}/{PromotionId}/promoCodes/generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePromoCodesRequestScopeIdPromotionIdpromoCodesgeneratePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the number of promo codes associated to a promotion with multiple promo codes - {GetPromoCodesCountRequest} Retrieve the number of promo codes associated to a promotion with multiple promo codes, return 0 if the promo code mode is different from Multiple.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <returns>GetPromoCodesCountResponse</returns>
        public GetPromoCodesCountResponse GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGet(string accept, string scopeId, string promotionId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetPromoCodesCountResponse> localVarResponse = GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGetWithHttpInfo(accept, scopeId, promotionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the number of promo codes associated to a promotion with multiple promo codes - {GetPromoCodesCountRequest} Retrieve the number of promo codes associated to a promotion with multiple promo codes, return 0 if the promo code mode is different from Multiple.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <returns>ApiResponse of GetPromoCodesCountResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetPromoCodesCountResponse> GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGetWithHttpInfo(string accept, string scopeId, string promotionId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PromotionsApi->GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PromotionsApi->GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGet");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPromoCodesCountResponse>("/promotions/{ScopeId}/{PromotionId}/promoCodes/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the number of promo codes associated to a promotion with multiple promo codes - {GetPromoCodesCountRequest} Retrieve the number of promo codes associated to a promotion with multiple promo codes, return 0 if the promo code mode is different from Multiple.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPromoCodesCountResponse</returns>
        public async System.Threading.Tasks.Task<GetPromoCodesCountResponse> GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGetAsync(string accept, string scopeId, string promotionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetPromoCodesCountResponse> localVarResponse = await GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGetWithHttpInfoAsync(accept, scopeId, promotionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the number of promo codes associated to a promotion with multiple promo codes - {GetPromoCodesCountRequest} Retrieve the number of promo codes associated to a promotion with multiple promo codes, return 0 if the promo code mode is different from Multiple.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPromoCodesCountResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetPromoCodesCountResponse>> GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGetWithHttpInfoAsync(string accept, string scopeId, string promotionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PromotionsApi->GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PromotionsApi->GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGet");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPromoCodesCountResponse>("/promotions/{ScopeId}/{PromotionId}/promoCodes/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPromoCodesCountRequestScopeIdPromotionIdpromoCodescountGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import (insert or update) a promotion&#39;s coupons - {ImportCouponCodesRequest} Import (insert or update) a promotion&#39;s coupons
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo ImportCouponCodesRequestPromotionIdcouponsimportPost(string accept, string promotionId, ImportCouponCodesRequest body = default(ImportCouponCodesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = ImportCouponCodesRequestPromotionIdcouponsimportPostWithHttpInfo(accept, promotionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import (insert or update) a promotion&#39;s coupons - {ImportCouponCodesRequest} Import (insert or update) a promotion&#39;s coupons
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> ImportCouponCodesRequestPromotionIdcouponsimportPostWithHttpInfo(string accept, string promotionId, ImportCouponCodesRequest body = default(ImportCouponCodesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PromotionsApi->ImportCouponCodesRequestPromotionIdcouponsimportPost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->ImportCouponCodesRequestPromotionIdcouponsimportPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/promotions/{PromotionId}/coupons/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCouponCodesRequestPromotionIdcouponsimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import (insert or update) a promotion&#39;s coupons - {ImportCouponCodesRequest} Import (insert or update) a promotion&#39;s coupons
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> ImportCouponCodesRequestPromotionIdcouponsimportPostAsync(string accept, string promotionId, ImportCouponCodesRequest body = default(ImportCouponCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await ImportCouponCodesRequestPromotionIdcouponsimportPostWithHttpInfoAsync(accept, promotionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import (insert or update) a promotion&#39;s coupons - {ImportCouponCodesRequest} Import (insert or update) a promotion&#39;s coupons
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="promotionId">The promotion id.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> ImportCouponCodesRequestPromotionIdcouponsimportPostWithHttpInfoAsync(string accept, string promotionId, ImportCouponCodesRequest body = default(ImportCouponCodesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PromotionsApi->ImportCouponCodesRequestPromotionIdcouponsimportPost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->ImportCouponCodesRequestPromotionIdcouponsimportPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/promotions/{PromotionId}/coupons/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCouponCodesRequestPromotionIdcouponsimportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate if the promo code can be created - {ValidatePromoCodeRequest} Validate if the promo code can be created. Returns true is the code is not created yet in the system, or created but associated to the specified promotion.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="promoCode">The promo code to validate</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ValidationResult</returns>
        public ValidationResult ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePost(string accept, string scopeId, string promotionId, string promoCode, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ValidationResult> localVarResponse = ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePostWithHttpInfo(accept, scopeId, promotionId, promoCode, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate if the promo code can be created - {ValidatePromoCodeRequest} Validate if the promo code can be created. Returns true is the code is not created yet in the system, or created but associated to the specified promotion.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="promoCode">The promo code to validate</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ValidationResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ValidationResult> ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePostWithHttpInfo(string accept, string scopeId, string promotionId, string promoCode, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PromotionsApi->ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PromotionsApi->ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePost");

            // verify the required parameter 'promoCode' is set
            if (promoCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promoCode' when calling PromotionsApi->ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromoCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promoCode)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ValidationResult>("/promotions/{ScopeId}/{PromotionId}/promoCodes/{PromoCode}/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate if the promo code can be created - {ValidatePromoCodeRequest} Validate if the promo code can be created. Returns true is the code is not created yet in the system, or created but associated to the specified promotion.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="promoCode">The promo code to validate</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationResult</returns>
        public async System.Threading.Tasks.Task<ValidationResult> ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePostAsync(string accept, string scopeId, string promotionId, string promoCode, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ValidationResult> localVarResponse = await ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePostWithHttpInfoAsync(accept, scopeId, promotionId, promoCode, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate if the promo code can be created - {ValidatePromoCodeRequest} Validate if the promo code can be created. Returns true is the code is not created yet in the system, or created but associated to the specified promotion.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="promotionId">The id of the promotion.</param>
        /// <param name="promoCode">The promo code to validate</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ValidationResult>> ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePostWithHttpInfoAsync(string accept, string scopeId, string promotionId, string promoCode, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling PromotionsApi->ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling PromotionsApi->ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePost");

            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePost");

            // verify the required parameter 'promoCode' is set
            if (promoCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'promoCode' when calling PromotionsApi->ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromotionId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("PromoCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(promoCode)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ValidationResult>("/promotions/{ScopeId}/{PromotionId}/promoCodes/{PromoCode}/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidatePromoCodeRequestScopeIdPromotionIdpromoCodesPromoCodevalidatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
