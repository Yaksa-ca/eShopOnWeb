/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICartsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a coupon to a cart - {AddCouponRequest}
        /// </summary>
        /// <remarks>
        /// Add a coupon to a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">the coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost(string accept, string scopeId, string customerId, string cartName, string couponCode, AddCouponRequest body = default(AddCouponRequest));

        /// <summary>
        /// Add a coupon to a cart - {AddCouponRequest}
        /// </summary>
        /// <remarks>
        /// Add a coupon to a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">the coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string couponCode, AddCouponRequest body = default(AddCouponRequest));
        /// <summary>
        /// Add a line item to a specified shipment of a cart - {AddLineItemInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Add a line item to a specified shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddLineItemInShipmentRequest body = default(AddLineItemInShipmentRequest));

        /// <summary>
        /// Add a line item to a specified shipment of a cart - {AddLineItemInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Add a line item to a specified shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddLineItemInShipmentRequest body = default(AddLineItemInShipmentRequest));
        /// <summary>
        /// Add a line item to the first shipment of a cart - {AddLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Add a line item to the first shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost(string accept, string scopeId, string customerId, string cartName, AddLineItemRequest body = default(AddLineItemRequest));

        /// <summary>
        /// Add a line item to the first shipment of a cart - {AddLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Add a line item to the first shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, AddLineItemRequest body = default(AddLineItemRequest));
        /// <summary>
        /// Add or update multiple line items to a specific shipment of a cart - {AddOrUpdateLineItemsInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Add or update multiple line items to a specific shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment where to create line item.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddOrUpdateLineItemsInShipmentRequest body = default(AddOrUpdateLineItemsInShipmentRequest));

        /// <summary>
        /// Add or update multiple line items to a specific shipment of a cart - {AddOrUpdateLineItemsInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Add or update multiple line items to a specific shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment where to create line item.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddOrUpdateLineItemsInShipmentRequest body = default(AddOrUpdateLineItemsInShipmentRequest));
        /// <summary>
        /// Add or update multiple line items to the first shipment of a cart - {AddOrUpdateLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Add or update multiple line items to the first shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost(string accept, string scopeId, string customerId, string cartName, AddOrUpdateLineItemsRequest body = default(AddOrUpdateLineItemsRequest));

        /// <summary>
        /// Add or update multiple line items to the first shipment of a cart - {AddOrUpdateLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Add or update multiple line items to the first shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, AddOrUpdateLineItemsRequest body = default(AddOrUpdateLineItemsRequest));
        /// <summary>
        /// Add a payment in a cart - {AddPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Add a payment in a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost(string accept, string scopeId, string customerId, string cartName, AddPaymentRequest body = default(AddPaymentRequest));

        /// <summary>
        /// Add a payment in a cart - {AddPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Add a payment in a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, AddPaymentRequest body = default(AddPaymentRequest));
        /// <summary>
        /// Add a shipment to a cart - {AddShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Add a shipment to a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost(string accept, string scopeId, string customerId, string cartName, AddShipmentRequest body = default(AddShipmentRequest));

        /// <summary>
        /// Add a shipment to a cart - {AddShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Add a shipment to a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, AddShipmentRequest body = default(AddShipmentRequest));
        /// <summary>
        /// Authorize the payment in a cart - {AuthorizePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Authorize the payment in a cart.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to authorize.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        Cart AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost(string accept, string scopeId, string customerId, string cartName, string paymentId, AuthorizePaymentRequest body = default(AuthorizePaymentRequest));

        /// <summary>
        /// Authorize the payment in a cart - {AuthorizePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Authorize the payment in a cart.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to authorize.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        ApiResponse<Cart> AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, AuthorizePaymentRequest body = default(AuthorizePaymentRequest));
        /// <summary>
        /// Clears a cart by name - {ClearCartRequest}
        /// </summary>
        /// <remarks>
        /// Clears a cart by name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns></returns>
        void ClearCartRequestScopeIdCustomerIdCartNameclearDelete(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string));

        /// <summary>
        /// Clears a cart by name - {ClearCartRequest}
        /// </summary>
        /// <remarks>
        /// Clears a cart by name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearCartRequestScopeIdCustomerIdCartNameclearDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string));
        /// <summary>
        /// Complete the checkout of the cart - {CompleteCheckoutRequest}
        /// </summary>
        /// <remarks>
        /// Complete the checkout of the cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        Order CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost(string accept, string scopeId, string customerId, string cartName, CompleteCheckoutRequest body = default(CompleteCheckoutRequest));

        /// <summary>
        /// Complete the checkout of the cart - {CompleteCheckoutRequest}
        /// </summary>
        /// <remarks>
        /// Complete the checkout of the cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, CompleteCheckoutRequest body = default(CompleteCheckoutRequest));
        /// <summary>
        /// Copy an existing cart to another customer - {CopyCartToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Copy an existing cart to another customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="newCustomerId">the id of the customer who receives the cart.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate(string accept, string scopeId, string customerId, string cartName, string newCustomerId, CopyCartToCustomerRequest body = default(CopyCartToCustomerRequest));

        /// <summary>
        /// Copy an existing cart to another customer - {CopyCartToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Copy an existing cart to another customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="newCustomerId">the id of the customer who receives the cart.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string newCustomerId, CopyCartToCustomerRequest body = default(CopyCartToCustomerRequest));
        /// <summary>
        /// Delete a cart by name - {DeleteCartRequest}
        /// </summary>
        /// <remarks>
        /// Delete a cart by name, nothing is preserved, to remove only the items, use the ClearCartRequest instead.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns></returns>
        void DeleteCartRequestScopeIdCustomerIdCartNameDelete(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string));

        /// <summary>
        /// Delete a cart by name - {DeleteCartRequest}
        /// </summary>
        /// <remarks>
        /// Delete a cart by name, nothing is preserved, to remove only the items, use the ClearCartRequest instead.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCartRequestScopeIdCustomerIdCartNameDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string));
        /// <summary>
        /// Retrieve the payment method available for a specific payment provider - {FindCartPaymentMethodsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the payment methods available for the cart, as well as the payment methods previously used by the customer.The request calls the method GetPaymentMethods(Cart cart, Dictionary&lt;string, object&gt; parameters) of the payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">the name of the cart to retrieve</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;PaymentMethod&gt;</returns>
        List<PaymentMethod> FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost(string accept, string scopeId, string customerId, string cartName, string paymentProviderName, FindCartPaymentMethodsRequest body = default(FindCartPaymentMethodsRequest));

        /// <summary>
        /// Retrieve the payment method available for a specific payment provider - {FindCartPaymentMethodsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the payment methods available for the cart, as well as the payment methods previously used by the customer.The request calls the method GetPaymentMethods(Cart cart, Dictionary&lt;string, object&gt; parameters) of the payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">the name of the cart to retrieve</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PaymentMethod&gt;</returns>
        ApiResponse<List<PaymentMethod>> FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentProviderName, FindCartPaymentMethodsRequest body = default(FindCartPaymentMethodsRequest));
        /// <summary>
        /// Retrieve a cart - {GetCartRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a cart. The cart is created if it does not exist.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart GetCartRequestScopeIdCustomerIdCartNameGet(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string));

        /// <summary>
        /// Retrieve a cart - {GetCartRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a cart. The cart is created if it does not exist.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> GetCartRequestScopeIdCustomerIdCartNameGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string));
        /// <summary>
        /// Retrieve the states of a cart, its shipments and its line items - {GetCartStatesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the states of a cart, its shipments and its line items
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>List&lt;EntityState&gt;</returns>
        List<EntityState> GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string));

        /// <summary>
        /// Retrieve the states of a cart, its shipments and its line items - {GetCartStatesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the states of a cart, its shipments and its line items
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;EntityState&gt;</returns>
        ApiResponse<List<EntityState>> GetCartStatesRequestScopeIdCustomerIdCartNamestatesGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string));
        /// <summary>
        /// Retrieve the summary of a cart - {GetCartSummaryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the summary of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>CartSummary</returns>
        CartSummary GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string));

        /// <summary>
        /// Retrieve the summary of a cart - {GetCartSummaryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the summary of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of CartSummary</returns>
        ApiResponse<CartSummary> GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string));
        /// <summary>
        /// Retrieves the list of carts belonging to a customer - {GetCartsByCustomerIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves the list of carts belonging to a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="includeChildScopes">a value indicating whether to include carts found in child scopes. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cartType">The optional cart type. Only the carts of this specific type will be returned. (optional)</param>
        /// <returns>List&lt;CartSummary&gt;</returns>
        List<CartSummary> GetCartsByCustomerIdRequestScopeIdCustomerIdGet(string accept, string scopeId, string customerId, bool? includeChildScopes = default(bool?), string cultureName = default(string), string cartType = default(string));

        /// <summary>
        /// Retrieves the list of carts belonging to a customer - {GetCartsByCustomerIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves the list of carts belonging to a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="includeChildScopes">a value indicating whether to include carts found in child scopes. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cartType">The optional cart type. Only the carts of this specific type will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;CartSummary&gt;</returns>
        ApiResponse<List<CartSummary>> GetCartsByCustomerIdRequestScopeIdCustomerIdGetWithHttpInfo(string accept, string scopeId, string customerId, bool? includeChildScopes = default(bool?), string cultureName = default(string), string cartType = default(string));
        /// <summary>
        /// Get a line item of a cart - {GetLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Get a line item of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>LineItem</returns>
        LineItem GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string));

        /// <summary>
        /// Get a line item of a cart - {GetLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Get a line item of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of LineItem</returns>
        ApiResponse<LineItem> GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string));
        /// <summary>
        /// Get all the line items of a cart - {GetLineItemsInCartRequest}
        /// </summary>
        /// <remarks>
        /// Get all the line items of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>List&lt;LineItem&gt;</returns>
        List<LineItem> GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string));

        /// <summary>
        /// Get all the line items of a cart - {GetLineItemsInCartRequest}
        /// </summary>
        /// <remarks>
        /// Get all the line items of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;LineItem&gt;</returns>
        ApiResponse<List<LineItem>> GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string));
        /// <summary>
        /// Get all the line items of a shipment - {GetLineItemsInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Get all the line items of a shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>List&lt;LineItem&gt;</returns>
        List<LineItem> GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string));

        /// <summary>
        /// Get all the line items of a shipment - {GetLineItemsInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Get all the line items of a shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;LineItem&gt;</returns>
        ApiResponse<List<LineItem>> GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string));
        /// <summary>
        /// Get a payment of a cart - {GetPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Get a payment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>Payment</returns>
        Payment GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string));

        /// <summary>
        /// Get a payment of a cart - {GetPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Get a payment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string));
        /// <summary>
        /// Get all the payments of a cart - {GetPaymentsInCartRequest}
        /// </summary>
        /// <remarks>
        /// Get all the payments of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        List<Payment> GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string));

        /// <summary>
        /// Get all the payments of a cart - {GetPaymentsInCartRequest}
        /// </summary>
        /// <remarks>
        /// Get all the payments of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        ApiResponse<List<Payment>> GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string));
        /// <summary>
        /// Get a shipment of a cart - {GetShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Get a shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>Shipment</returns>
        Shipment GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string));

        /// <summary>
        /// Get a shipment of a cart - {GetShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Get a shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of Shipment</returns>
        ApiResponse<Shipment> GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string));
        /// <summary>
        /// Initialize the payment in a cart - {InitializePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Initialize the payment in a cart, Payment method of the payment should already exists
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to initialize.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        Cart InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost(string accept, string scopeId, string customerId, string cartName, string paymentId, InitializePaymentRequest body = default(InitializePaymentRequest));

        /// <summary>
        /// Initialize the payment in a cart - {InitializePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Initialize the payment in a cart, Payment method of the payment should already exists
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to initialize.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        ApiResponse<Cart> InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, InitializePaymentRequest body = default(InitializePaymentRequest));
        /// <summary>
        /// Refresh the payment in a cart - {RefreshPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Refresh the payment in a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to refresh.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        Cart RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost(string accept, string scopeId, string customerId, string cartName, string paymentId, RefreshPaymentRequest body = default(RefreshPaymentRequest));

        /// <summary>
        /// Refresh the payment in a cart - {RefreshPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Refresh the payment in a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to refresh.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        ApiResponse<Cart> RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, RefreshPaymentRequest body = default(RefreshPaymentRequest));
        /// <summary>
        /// Remove all the line items from a cart - {RemoveAllLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Remove all the line items from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), string workflowToExecute = default(string));

        /// <summary>
        /// Remove all the line items from a cart - {RemoveAllLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Remove all the line items from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), string workflowToExecute = default(string));
        /// <summary>
        /// Remove a coupon from a cart - {RemoveCouponRequest}
        /// </summary>
        /// <remarks>
        /// Remove a coupon from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">The unique identifier of the Coupon to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete(string accept, string scopeId, string customerId, string cartName, string couponCode, string cultureName = default(string), string workflowToExecute = default(string));

        /// <summary>
        /// Remove a coupon from a cart - {RemoveCouponRequest}
        /// </summary>
        /// <remarks>
        /// Remove a coupon from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">The unique identifier of the Coupon to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string couponCode, string cultureName = default(string), string workflowToExecute = default(string));
        /// <summary>
        /// Remove a line item from a cart - {RemoveLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Remove a line item from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string));

        /// <summary>
        /// Remove a line item from a cart - {RemoveLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Remove a line item from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string));
        /// <summary>
        /// Remove all the line items from a shipment - {RemoveLineItemsInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Remove all the line items from a shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string), string workflowToExecute = default(string));

        /// <summary>
        /// Remove all the line items from a shipment - {RemoveLineItemsInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Remove all the line items from a shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string), string workflowToExecute = default(string));
        /// <summary>
        /// Remove multiple line items from a cart - {RemoveLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Remove multiple line items from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="lineItemIds">The unique identifier of the LineItems to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete(string accept, string scopeId, string customerId, string cartName, List<string> lineItemIds, string cultureName = default(string), string workflowToExecute = default(string));

        /// <summary>
        /// Remove multiple line items from a cart - {RemoveLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Remove multiple line items from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="lineItemIds">The unique identifier of the LineItems to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, List<string> lineItemIds, string cultureName = default(string), string workflowToExecute = default(string));
        /// <summary>
        /// Removes a payment from a cart - {RemovePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Removes a payment from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string));

        /// <summary>
        /// Removes a payment from a cart - {RemovePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Removes a payment from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string));
        /// <summary>
        /// Removes a shipment from a cart - {RemoveShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Removes a shipment from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string));

        /// <summary>
        /// Removes a shipment from a cart - {RemoveShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Removes a shipment from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string));
        /// <summary>
        /// Adds or renew a timeslot reservation for a cart - {ReserveTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Adds or renew a timeslot reservation for a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <param name="timeSlotId">The unique identifier of the fullfilment timeslot to reserve.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost(string accept, string scopeId, string customerId, string cartName, string shipmentId, string timeSlotId, ReserveTimeSlotRequest body = default(ReserveTimeSlotRequest));

        /// <summary>
        /// Adds or renew a timeslot reservation for a cart - {ReserveTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Adds or renew a timeslot reservation for a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <param name="timeSlotId">The unique identifier of the fullfilment timeslot to reserve.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string shipmentId, string timeSlotId, ReserveTimeSlotRequest body = default(ReserveTimeSlotRequest));
        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentRequest}
        /// </summary>
        /// <remarks>
        /// Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate(string accept, string scopeId, string customerId, string cartName, string shipmentId, SetAdjustmentRequest body = default(SetAdjustmentRequest));

        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentRequest}
        /// </summary>
        /// <remarks>
        /// Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string shipmentId, SetAdjustmentRequest body = default(SetAdjustmentRequest));
        /// <summary>
        /// Settle the payment in a cart - {SettlePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Settle the payment in a cart - The payment has to be authorized before being settled.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        Cart SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost(string accept, string scopeId, string customerId, string cartName, string paymentId, SettlePaymentRequest body = default(SettlePaymentRequest));

        /// <summary>
        /// Settle the payment in a cart - {SettlePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Settle the payment in a cart - The payment has to be authorized before being settled.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        ApiResponse<Cart> SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, SettlePaymentRequest body = default(SettlePaymentRequest));
        /// <summary>
        /// Update the billing address of a payment - {UpdateBillingAddressRequest}
        /// </summary>
        /// <remarks>
        /// Update the billing address of a payment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdateBillingAddressRequest body = default(UpdateBillingAddressRequest));

        /// <summary>
        /// Update the billing address of a payment - {UpdateBillingAddressRequest}
        /// </summary>
        /// <remarks>
        /// Update the billing address of a payment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdateBillingAddressRequest body = default(UpdateBillingAddressRequest));
        /// <summary>
        /// Update the cart - {UpdateCartRequest}
        /// </summary>
        /// <remarks>
        /// Update the cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart UpdateCartRequestScopeIdCustomerIdCartNameCreate(string accept, string scopeId, string customerId, string cartName, UpdateCartRequest body = default(UpdateCartRequest));

        /// <summary>
        /// Update the cart - {UpdateCartRequest}
        /// </summary>
        /// <remarks>
        /// Update the cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> UpdateCartRequestScopeIdCustomerIdCartNameCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, UpdateCartRequest body = default(UpdateCartRequest));
        /// <summary>
        /// Update the customer summary of a cart - {UpdateCustomerSummaryRequest}
        /// </summary>
        /// <remarks>
        /// Update the customer summary of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CustomerSummary</returns>
        CustomerSummary UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate(string accept, string scopeId, string customerId, string cartName, UpdateCustomerSummaryRequest body = default(UpdateCustomerSummaryRequest));

        /// <summary>
        /// Update the customer summary of a cart - {UpdateCustomerSummaryRequest}
        /// </summary>
        /// <remarks>
        /// Update the customer summary of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CustomerSummary</returns>
        ApiResponse<CustomerSummary> UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, UpdateCustomerSummaryRequest body = default(UpdateCustomerSummaryRequest));
        /// <summary>
        /// Update a line item of a cart - {UpdateLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Update a line item of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate(string accept, string scopeId, string customerId, string cartName, string id, UpdateLineItemRequest body = default(UpdateLineItemRequest));

        /// <summary>
        /// Update a line item of a cart - {UpdateLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Update a line item of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, UpdateLineItemRequest body = default(UpdateLineItemRequest));
        /// <summary>
        /// Update the amount of a payment - {UpdatePaymentAmountRequest}
        /// </summary>
        /// <remarks>
        /// Update the amount of a payment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentAmountRequest body = default(UpdatePaymentAmountRequest));

        /// <summary>
        /// Update the amount of a payment - {UpdatePaymentAmountRequest}
        /// </summary>
        /// <remarks>
        /// Update the amount of a payment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentAmountRequest body = default(UpdatePaymentAmountRequest));
        /// <summary>
        /// Update a payment method of a payment - {UpdatePaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Update a payment method of a payment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentMethodRequest body = default(UpdatePaymentMethodRequest));

        /// <summary>
        /// Update a payment method of a payment - {UpdatePaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Update a payment method of a payment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentMethodRequest body = default(UpdatePaymentMethodRequest));
        /// <summary>
        /// Update a payment of a cart - {UpdatePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Update a payment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate(string accept, string scopeId, string customerId, string cartName, string id, UpdatePaymentRequest body = default(UpdatePaymentRequest));

        /// <summary>
        /// Update a payment of a cart - {UpdatePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Update a payment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, UpdatePaymentRequest body = default(UpdatePaymentRequest));
        /// <summary>
        /// Update a shipment of a cart - {UpdateShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Update a shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        ProcessedCart UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate(string accept, string scopeId, string customerId, string cartName, string id, UpdateShipmentRequest body = default(UpdateShipmentRequest));

        /// <summary>
        /// Update a shipment of a cart - {UpdateShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Update a shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        ApiResponse<ProcessedCart> UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, UpdateShipmentRequest body = default(UpdateShipmentRequest));
        /// <summary>
        /// Void the payment in a cart - {VoidPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Void the payment in a cart. A payment already with status Paid cannot be voided.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to void.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        Cart VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost(string accept, string scopeId, string customerId, string cartName, string paymentId, VoidPaymentRequest body = default(VoidPaymentRequest));

        /// <summary>
        /// Void the payment in a cart - {VoidPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Void the payment in a cart. A payment already with status Paid cannot be voided.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to void.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        ApiResponse<Cart> VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, VoidPaymentRequest body = default(VoidPaymentRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICartsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a coupon to a cart - {AddCouponRequest}
        /// </summary>
        /// <remarks>
        /// Add a coupon to a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">the coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePostAsync(string accept, string scopeId, string customerId, string cartName, string couponCode, AddCouponRequest body = default(AddCouponRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a coupon to a cart - {AddCouponRequest}
        /// </summary>
        /// <remarks>
        /// Add a coupon to a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">the coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string couponCode, AddCouponRequest body = default(AddCouponRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a line item to a specified shipment of a cart - {AddLineItemInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Add a line item to a specified shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPostAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddLineItemInShipmentRequest body = default(AddLineItemInShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a line item to a specified shipment of a cart - {AddLineItemInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Add a line item to a specified shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddLineItemInShipmentRequest body = default(AddLineItemInShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a line item to the first shipment of a cart - {AddLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Add a line item to the first shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPostAsync(string accept, string scopeId, string customerId, string cartName, AddLineItemRequest body = default(AddLineItemRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a line item to the first shipment of a cart - {AddLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Add a line item to the first shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, AddLineItemRequest body = default(AddLineItemRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add or update multiple line items to a specific shipment of a cart - {AddOrUpdateLineItemsInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Add or update multiple line items to a specific shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment where to create line item.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPostAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddOrUpdateLineItemsInShipmentRequest body = default(AddOrUpdateLineItemsInShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or update multiple line items to a specific shipment of a cart - {AddOrUpdateLineItemsInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Add or update multiple line items to a specific shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment where to create line item.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddOrUpdateLineItemsInShipmentRequest body = default(AddOrUpdateLineItemsInShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add or update multiple line items to the first shipment of a cart - {AddOrUpdateLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Add or update multiple line items to the first shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPostAsync(string accept, string scopeId, string customerId, string cartName, AddOrUpdateLineItemsRequest body = default(AddOrUpdateLineItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or update multiple line items to the first shipment of a cart - {AddOrUpdateLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Add or update multiple line items to the first shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, AddOrUpdateLineItemsRequest body = default(AddOrUpdateLineItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a payment in a cart - {AddPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Add a payment in a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPostAsync(string accept, string scopeId, string customerId, string cartName, AddPaymentRequest body = default(AddPaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a payment in a cart - {AddPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Add a payment in a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, AddPaymentRequest body = default(AddPaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a shipment to a cart - {AddShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Add a shipment to a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPostAsync(string accept, string scopeId, string customerId, string cartName, AddShipmentRequest body = default(AddShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a shipment to a cart - {AddShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Add a shipment to a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, AddShipmentRequest body = default(AddShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Authorize the payment in a cart - {AuthorizePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Authorize the payment in a cart.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to authorize.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        System.Threading.Tasks.Task<Cart> AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePostAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, AuthorizePaymentRequest body = default(AuthorizePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authorize the payment in a cart - {AuthorizePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Authorize the payment in a cart.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to authorize.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cart>> AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, AuthorizePaymentRequest body = default(AuthorizePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clears a cart by name - {ClearCartRequest}
        /// </summary>
        /// <remarks>
        /// Clears a cart by name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearCartRequestScopeIdCustomerIdCartNameclearDeleteAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clears a cart by name - {ClearCartRequest}
        /// </summary>
        /// <remarks>
        /// Clears a cart by name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearCartRequestScopeIdCustomerIdCartNameclearDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Complete the checkout of the cart - {CompleteCheckoutRequest}
        /// </summary>
        /// <remarks>
        /// Complete the checkout of the cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPostAsync(string accept, string scopeId, string customerId, string cartName, CompleteCheckoutRequest body = default(CompleteCheckoutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Complete the checkout of the cart - {CompleteCheckoutRequest}
        /// </summary>
        /// <remarks>
        /// Complete the checkout of the cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, CompleteCheckoutRequest body = default(CompleteCheckoutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy an existing cart to another customer - {CopyCartToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Copy an existing cart to another customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="newCustomerId">the id of the customer who receives the cart.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreateAsync(string accept, string scopeId, string customerId, string cartName, string newCustomerId, CopyCartToCustomerRequest body = default(CopyCartToCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy an existing cart to another customer - {CopyCartToCustomerRequest}
        /// </summary>
        /// <remarks>
        /// Copy an existing cart to another customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="newCustomerId">the id of the customer who receives the cart.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string newCustomerId, CopyCartToCustomerRequest body = default(CopyCartToCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a cart by name - {DeleteCartRequest}
        /// </summary>
        /// <remarks>
        /// Delete a cart by name, nothing is preserved, to remove only the items, use the ClearCartRequest instead.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCartRequestScopeIdCustomerIdCartNameDeleteAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a cart by name - {DeleteCartRequest}
        /// </summary>
        /// <remarks>
        /// Delete a cart by name, nothing is preserved, to remove only the items, use the ClearCartRequest instead.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCartRequestScopeIdCustomerIdCartNameDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the payment method available for a specific payment provider - {FindCartPaymentMethodsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the payment methods available for the cart, as well as the payment methods previously used by the customer.The request calls the method GetPaymentMethods(Cart cart, Dictionary&lt;string, object&gt; parameters) of the payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">the name of the cart to retrieve</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PaymentMethod&gt;</returns>
        System.Threading.Tasks.Task<List<PaymentMethod>> FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPostAsync(string accept, string scopeId, string customerId, string cartName, string paymentProviderName, FindCartPaymentMethodsRequest body = default(FindCartPaymentMethodsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the payment method available for a specific payment provider - {FindCartPaymentMethodsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the payment methods available for the cart, as well as the payment methods previously used by the customer.The request calls the method GetPaymentMethods(Cart cart, Dictionary&lt;string, object&gt; parameters) of the payment provider.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">the name of the cart to retrieve</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PaymentMethod&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PaymentMethod>>> FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentProviderName, FindCartPaymentMethodsRequest body = default(FindCartPaymentMethodsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a cart - {GetCartRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a cart. The cart is created if it does not exist.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> GetCartRequestScopeIdCustomerIdCartNameGetAsync(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a cart - {GetCartRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a cart. The cart is created if it does not exist.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> GetCartRequestScopeIdCustomerIdCartNameGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the states of a cart, its shipments and its line items - {GetCartStatesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the states of a cart, its shipments and its line items
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EntityState&gt;</returns>
        System.Threading.Tasks.Task<List<EntityState>> GetCartStatesRequestScopeIdCustomerIdCartNamestatesGetAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the states of a cart, its shipments and its line items - {GetCartStatesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the states of a cart, its shipments and its line items
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EntityState&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityState>>> GetCartStatesRequestScopeIdCustomerIdCartNamestatesGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the summary of a cart - {GetCartSummaryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the summary of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartSummary</returns>
        System.Threading.Tasks.Task<CartSummary> GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGetAsync(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the summary of a cart - {GetCartSummaryRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the summary of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartSummary>> GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the list of carts belonging to a customer - {GetCartsByCustomerIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves the list of carts belonging to a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="includeChildScopes">a value indicating whether to include carts found in child scopes. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cartType">The optional cart type. Only the carts of this specific type will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CartSummary&gt;</returns>
        System.Threading.Tasks.Task<List<CartSummary>> GetCartsByCustomerIdRequestScopeIdCustomerIdGetAsync(string accept, string scopeId, string customerId, bool? includeChildScopes = default(bool?), string cultureName = default(string), string cartType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the list of carts belonging to a customer - {GetCartsByCustomerIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves the list of carts belonging to a customer
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="includeChildScopes">a value indicating whether to include carts found in child scopes. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cartType">The optional cart type. Only the carts of this specific type will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CartSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CartSummary>>> GetCartsByCustomerIdRequestScopeIdCustomerIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, bool? includeChildScopes = default(bool?), string cultureName = default(string), string cartType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a line item of a cart - {GetLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Get a line item of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItem</returns>
        System.Threading.Tasks.Task<LineItem> GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGetAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a line item of a cart - {GetLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Get a line item of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineItem>> GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the line items of a cart - {GetLineItemsInCartRequest}
        /// </summary>
        /// <remarks>
        /// Get all the line items of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LineItem&gt;</returns>
        System.Threading.Tasks.Task<List<LineItem>> GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGetAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the line items of a cart - {GetLineItemsInCartRequest}
        /// </summary>
        /// <remarks>
        /// Get all the line items of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LineItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LineItem>>> GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the line items of a shipment - {GetLineItemsInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Get all the line items of a shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LineItem&gt;</returns>
        System.Threading.Tasks.Task<List<LineItem>> GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGetAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the line items of a shipment - {GetLineItemsInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Get all the line items of a shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LineItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LineItem>>> GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a payment of a cart - {GetPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Get a payment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGetAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a payment of a cart - {GetPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Get a payment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the payments of a cart - {GetPaymentsInCartRequest}
        /// </summary>
        /// <remarks>
        /// Get all the payments of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        System.Threading.Tasks.Task<List<Payment>> GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGetAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the payments of a cart - {GetPaymentsInCartRequest}
        /// </summary>
        /// <remarks>
        /// Get all the payments of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Payment>>> GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a shipment of a cart - {GetShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Get a shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Shipment</returns>
        System.Threading.Tasks.Task<Shipment> GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGetAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a shipment of a cart - {GetShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Get a shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Shipment>> GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initialize the payment in a cart - {InitializePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Initialize the payment in a cart, Payment method of the payment should already exists
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to initialize.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        System.Threading.Tasks.Task<Cart> InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePostAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, InitializePaymentRequest body = default(InitializePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initialize the payment in a cart - {InitializePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Initialize the payment in a cart, Payment method of the payment should already exists
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to initialize.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cart>> InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, InitializePaymentRequest body = default(InitializePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh the payment in a cart - {RefreshPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Refresh the payment in a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to refresh.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        System.Threading.Tasks.Task<Cart> RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPostAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, RefreshPaymentRequest body = default(RefreshPaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh the payment in a cart - {RefreshPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Refresh the payment in a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to refresh.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cart>> RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, RefreshPaymentRequest body = default(RefreshPaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove all the line items from a cart - {RemoveAllLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Remove all the line items from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDeleteAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove all the line items from a cart - {RemoveAllLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Remove all the line items from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a coupon from a cart - {RemoveCouponRequest}
        /// </summary>
        /// <remarks>
        /// Remove a coupon from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">The unique identifier of the Coupon to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDeleteAsync(string accept, string scopeId, string customerId, string cartName, string couponCode, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a coupon from a cart - {RemoveCouponRequest}
        /// </summary>
        /// <remarks>
        /// Remove a coupon from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">The unique identifier of the Coupon to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string couponCode, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a line item from a cart - {RemoveLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Remove a line item from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDeleteAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a line item from a cart - {RemoveLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Remove a line item from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove all the line items from a shipment - {RemoveLineItemsInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Remove all the line items from a shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDeleteAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove all the line items from a shipment - {RemoveLineItemsInShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Remove all the line items from a shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove multiple line items from a cart - {RemoveLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Remove multiple line items from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="lineItemIds">The unique identifier of the LineItems to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDeleteAsync(string accept, string scopeId, string customerId, string cartName, List<string> lineItemIds, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove multiple line items from a cart - {RemoveLineItemsRequest}
        /// </summary>
        /// <remarks>
        /// Remove multiple line items from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="lineItemIds">The unique identifier of the LineItems to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, List<string> lineItemIds, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes a payment from a cart - {RemovePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Removes a payment from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDeleteAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes a payment from a cart - {RemovePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Removes a payment from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes a shipment from a cart - {RemoveShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Removes a shipment from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDeleteAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes a shipment from a cart - {RemoveShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Removes a shipment from a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds or renew a timeslot reservation for a cart - {ReserveTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Adds or renew a timeslot reservation for a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <param name="timeSlotId">The unique identifier of the fullfilment timeslot to reserve.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPostAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, string timeSlotId, ReserveTimeSlotRequest body = default(ReserveTimeSlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds or renew a timeslot reservation for a cart - {ReserveTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Adds or renew a timeslot reservation for a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <param name="timeSlotId">The unique identifier of the fullfilment timeslot to reserve.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, string timeSlotId, ReserveTimeSlotRequest body = default(ReserveTimeSlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentRequest}
        /// </summary>
        /// <remarks>
        /// Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreateAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, SetAdjustmentRequest body = default(SetAdjustmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentRequest}
        /// </summary>
        /// <remarks>
        /// Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, SetAdjustmentRequest body = default(SetAdjustmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Settle the payment in a cart - {SettlePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Settle the payment in a cart - The payment has to be authorized before being settled.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        System.Threading.Tasks.Task<Cart> SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePostAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, SettlePaymentRequest body = default(SettlePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Settle the payment in a cart - {SettlePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Settle the payment in a cart - The payment has to be authorized before being settled.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cart>> SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, SettlePaymentRequest body = default(SettlePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the billing address of a payment - {UpdateBillingAddressRequest}
        /// </summary>
        /// <remarks>
        /// Update the billing address of a payment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreateAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdateBillingAddressRequest body = default(UpdateBillingAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the billing address of a payment - {UpdateBillingAddressRequest}
        /// </summary>
        /// <remarks>
        /// Update the billing address of a payment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdateBillingAddressRequest body = default(UpdateBillingAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the cart - {UpdateCartRequest}
        /// </summary>
        /// <remarks>
        /// Update the cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> UpdateCartRequestScopeIdCustomerIdCartNameCreateAsync(string accept, string scopeId, string customerId, string cartName, UpdateCartRequest body = default(UpdateCartRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the cart - {UpdateCartRequest}
        /// </summary>
        /// <remarks>
        /// Update the cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> UpdateCartRequestScopeIdCustomerIdCartNameCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, UpdateCartRequest body = default(UpdateCartRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the customer summary of a cart - {UpdateCustomerSummaryRequest}
        /// </summary>
        /// <remarks>
        /// Update the customer summary of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerSummary</returns>
        System.Threading.Tasks.Task<CustomerSummary> UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreateAsync(string accept, string scopeId, string customerId, string cartName, UpdateCustomerSummaryRequest body = default(UpdateCustomerSummaryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the customer summary of a cart - {UpdateCustomerSummaryRequest}
        /// </summary>
        /// <remarks>
        /// Update the customer summary of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerSummary>> UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, UpdateCustomerSummaryRequest body = default(UpdateCustomerSummaryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a line item of a cart - {UpdateLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Update a line item of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreateAsync(string accept, string scopeId, string customerId, string cartName, string id, UpdateLineItemRequest body = default(UpdateLineItemRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a line item of a cart - {UpdateLineItemRequest}
        /// </summary>
        /// <remarks>
        /// Update a line item of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, UpdateLineItemRequest body = default(UpdateLineItemRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the amount of a payment - {UpdatePaymentAmountRequest}
        /// </summary>
        /// <remarks>
        /// Update the amount of a payment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreateAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentAmountRequest body = default(UpdatePaymentAmountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the amount of a payment - {UpdatePaymentAmountRequest}
        /// </summary>
        /// <remarks>
        /// Update the amount of a payment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentAmountRequest body = default(UpdatePaymentAmountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a payment method of a payment - {UpdatePaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Update a payment method of a payment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreateAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentMethodRequest body = default(UpdatePaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a payment method of a payment - {UpdatePaymentMethodRequest}
        /// </summary>
        /// <remarks>
        /// Update a payment method of a payment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentMethodRequest body = default(UpdatePaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a payment of a cart - {UpdatePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Update a payment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreateAsync(string accept, string scopeId, string customerId, string cartName, string id, UpdatePaymentRequest body = default(UpdatePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a payment of a cart - {UpdatePaymentRequest}
        /// </summary>
        /// <remarks>
        /// Update a payment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, UpdatePaymentRequest body = default(UpdatePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a shipment of a cart - {UpdateShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Update a shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        System.Threading.Tasks.Task<ProcessedCart> UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreateAsync(string accept, string scopeId, string customerId, string cartName, string id, UpdateShipmentRequest body = default(UpdateShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a shipment of a cart - {UpdateShipmentRequest}
        /// </summary>
        /// <remarks>
        /// Update a shipment of a cart
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedCart>> UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, UpdateShipmentRequest body = default(UpdateShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Void the payment in a cart - {VoidPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Void the payment in a cart. A payment already with status Paid cannot be voided.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to void.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        System.Threading.Tasks.Task<Cart> VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPostAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, VoidPaymentRequest body = default(VoidPaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Void the payment in a cart - {VoidPaymentRequest}
        /// </summary>
        /// <remarks>
        /// Void the payment in a cart. A payment already with status Paid cannot be voided.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to void.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cart>> VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, VoidPaymentRequest body = default(VoidPaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICartsApi : ICartsApiSync, ICartsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CartsApi : ICartsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CartsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CartsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CartsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CartsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CartsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CartsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CartsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CartsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a coupon to a cart - {AddCouponRequest} Add a coupon to a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">the coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost(string accept, string scopeId, string customerId, string cartName, string couponCode, AddCouponRequest body = default(AddCouponRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePostWithHttpInfo(accept, scopeId, customerId, cartName, couponCode, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a coupon to a cart - {AddCouponRequest} Add a coupon to a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">the coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string couponCode, AddCouponRequest body = default(AddCouponRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost");

            // verify the required parameter 'couponCode' is set
            if (couponCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'couponCode' when calling CartsApi->AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("CouponCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(couponCode)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/coupons/{CouponCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a coupon to a cart - {AddCouponRequest} Add a coupon to a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">the coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePostAsync(string accept, string scopeId, string customerId, string cartName, string couponCode, AddCouponRequest body = default(AddCouponRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePostWithHttpInfoAsync(accept, scopeId, customerId, cartName, couponCode, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a coupon to a cart - {AddCouponRequest} Add a coupon to a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">the coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string couponCode, AddCouponRequest body = default(AddCouponRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost");

            // verify the required parameter 'couponCode' is set
            if (couponCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'couponCode' when calling CartsApi->AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("CouponCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(couponCode)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/coupons/{CouponCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a line item to a specified shipment of a cart - {AddLineItemInShipmentRequest} Add a line item to a specified shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddLineItemInShipmentRequest body = default(AddLineItemInShipmentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPostWithHttpInfo(accept, scopeId, customerId, cartName, shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a line item to a specified shipment of a cart - {AddLineItemInShipmentRequest} Add a line item to a specified shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddLineItemInShipmentRequest body = default(AddLineItemInShipmentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling CartsApi->AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/lineItems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a line item to a specified shipment of a cart - {AddLineItemInShipmentRequest} Add a line item to a specified shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPostAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddLineItemInShipmentRequest body = default(AddLineItemInShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPostWithHttpInfoAsync(accept, scopeId, customerId, cartName, shipmentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a line item to a specified shipment of a cart - {AddLineItemInShipmentRequest} Add a line item to a specified shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddLineItemInShipmentRequest body = default(AddLineItemInShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling CartsApi->AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/lineItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLineItemInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a line item to the first shipment of a cart - {AddLineItemRequest} Add a line item to the first shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost(string accept, string scopeId, string customerId, string cartName, AddLineItemRequest body = default(AddLineItemRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPostWithHttpInfo(accept, scopeId, customerId, cartName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a line item to the first shipment of a cart - {AddLineItemRequest} Add a line item to the first shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, AddLineItemRequest body = default(AddLineItemRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a line item to the first shipment of a cart - {AddLineItemRequest} Add a line item to the first shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPostAsync(string accept, string scopeId, string customerId, string cartName, AddLineItemRequest body = default(AddLineItemRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPostWithHttpInfoAsync(accept, scopeId, customerId, cartName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a line item to the first shipment of a cart - {AddLineItemRequest} Add a line item to the first shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, AddLineItemRequest body = default(AddLineItemRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLineItemRequestScopeIdCustomerIdCartNamelineItemsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update multiple line items to a specific shipment of a cart - {AddOrUpdateLineItemsInShipmentRequest} Add or update multiple line items to a specific shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment where to create line item.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddOrUpdateLineItemsInShipmentRequest body = default(AddOrUpdateLineItemsInShipmentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPostWithHttpInfo(accept, scopeId, customerId, cartName, shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update multiple line items to a specific shipment of a cart - {AddOrUpdateLineItemsInShipmentRequest} Add or update multiple line items to a specific shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment where to create line item.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddOrUpdateLineItemsInShipmentRequest body = default(AddOrUpdateLineItemsInShipmentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling CartsApi->AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/lineItems/batch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update multiple line items to a specific shipment of a cart - {AddOrUpdateLineItemsInShipmentRequest} Add or update multiple line items to a specific shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment where to create line item.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPostAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddOrUpdateLineItemsInShipmentRequest body = default(AddOrUpdateLineItemsInShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPostWithHttpInfoAsync(accept, scopeId, customerId, cartName, shipmentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update multiple line items to a specific shipment of a cart - {AddOrUpdateLineItemsInShipmentRequest} Add or update multiple line items to a specific shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment where to create line item.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, AddOrUpdateLineItemsInShipmentRequest body = default(AddOrUpdateLineItemsInShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling CartsApi->AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/lineItems/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsbatchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update multiple line items to the first shipment of a cart - {AddOrUpdateLineItemsRequest} Add or update multiple line items to the first shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost(string accept, string scopeId, string customerId, string cartName, AddOrUpdateLineItemsRequest body = default(AddOrUpdateLineItemsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPostWithHttpInfo(accept, scopeId, customerId, cartName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update multiple line items to the first shipment of a cart - {AddOrUpdateLineItemsRequest} Add or update multiple line items to the first shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, AddOrUpdateLineItemsRequest body = default(AddOrUpdateLineItemsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/batch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update multiple line items to the first shipment of a cart - {AddOrUpdateLineItemsRequest} Add or update multiple line items to the first shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPostAsync(string accept, string scopeId, string customerId, string cartName, AddOrUpdateLineItemsRequest body = default(AddOrUpdateLineItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPostWithHttpInfoAsync(accept, scopeId, customerId, cartName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update multiple line items to the first shipment of a cart - {AddOrUpdateLineItemsRequest} Add or update multiple line items to the first shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, AddOrUpdateLineItemsRequest body = default(AddOrUpdateLineItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a payment in a cart - {AddPaymentRequest} Add a payment in a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost(string accept, string scopeId, string customerId, string cartName, AddPaymentRequest body = default(AddPaymentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPostWithHttpInfo(accept, scopeId, customerId, cartName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a payment in a cart - {AddPaymentRequest} Add a payment in a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, AddPaymentRequest body = default(AddPaymentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a payment in a cart - {AddPaymentRequest} Add a payment in a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPostAsync(string accept, string scopeId, string customerId, string cartName, AddPaymentRequest body = default(AddPaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPostWithHttpInfoAsync(accept, scopeId, customerId, cartName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a payment in a cart - {AddPaymentRequest} Add a payment in a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, AddPaymentRequest body = default(AddPaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPaymentRequestScopeIdCustomerIdCartNamepaymentsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a shipment to a cart - {AddShipmentRequest} Add a shipment to a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost(string accept, string scopeId, string customerId, string cartName, AddShipmentRequest body = default(AddShipmentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPostWithHttpInfo(accept, scopeId, customerId, cartName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a shipment to a cart - {AddShipmentRequest} Add a shipment to a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, AddShipmentRequest body = default(AddShipmentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a shipment to a cart - {AddShipmentRequest} Add a shipment to a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPostAsync(string accept, string scopeId, string customerId, string cartName, AddShipmentRequest body = default(AddShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPostWithHttpInfoAsync(accept, scopeId, customerId, cartName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a shipment to a cart - {AddShipmentRequest} Add a shipment to a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, AddShipmentRequest body = default(AddShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddShipmentRequestScopeIdCustomerIdCartNameshipmentsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorize the payment in a cart - {AuthorizePaymentRequest} Authorize the payment in a cart.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to authorize.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        public Cart AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost(string accept, string scopeId, string customerId, string cartName, string paymentId, AuthorizePaymentRequest body = default(AuthorizePaymentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePostWithHttpInfo(accept, scopeId, customerId, cartName, paymentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize the payment in a cart - {AuthorizePaymentRequest} Authorize the payment in a cart.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to authorize.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, AuthorizePaymentRequest body = default(AuthorizePaymentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Cart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/authorize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorize the payment in a cart - {AuthorizePaymentRequest} Authorize the payment in a cart.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to authorize.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        public async System.Threading.Tasks.Task<Cart> AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePostAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, AuthorizePaymentRequest body = default(AuthorizePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = await AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePostWithHttpInfoAsync(accept, scopeId, customerId, cartName, paymentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize the payment in a cart - {AuthorizePaymentRequest} Authorize the payment in a cart.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to authorize.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart>> AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, AuthorizePaymentRequest body = default(AuthorizePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Cart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdauthorizePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clears a cart by name - {ClearCartRequest} Clears a cart by name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns></returns>
        public void ClearCartRequestScopeIdCustomerIdCartNameclearDelete(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string))
        {
            ClearCartRequestScopeIdCustomerIdCartNameclearDeleteWithHttpInfo(accept, scopeId, customerId, cartName, cultureName);
        }

        /// <summary>
        /// Clears a cart by name - {ClearCartRequest} Clears a cart by name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> ClearCartRequestScopeIdCustomerIdCartNameclearDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->ClearCartRequestScopeIdCustomerIdCartNameclearDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->ClearCartRequestScopeIdCustomerIdCartNameclearDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->ClearCartRequestScopeIdCustomerIdCartNameclearDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->ClearCartRequestScopeIdCustomerIdCartNameclearDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/carts/{ScopeId}/{CustomerId}/{CartName}/clear", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearCartRequestScopeIdCustomerIdCartNameclearDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clears a cart by name - {ClearCartRequest} Clears a cart by name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearCartRequestScopeIdCustomerIdCartNameclearDeleteAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ClearCartRequestScopeIdCustomerIdCartNameclearDeleteWithHttpInfoAsync(accept, scopeId, customerId, cartName, cultureName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Clears a cart by name - {ClearCartRequest} Clears a cart by name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> ClearCartRequestScopeIdCustomerIdCartNameclearDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->ClearCartRequestScopeIdCustomerIdCartNameclearDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->ClearCartRequestScopeIdCustomerIdCartNameclearDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->ClearCartRequestScopeIdCustomerIdCartNameclearDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->ClearCartRequestScopeIdCustomerIdCartNameclearDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/carts/{ScopeId}/{CustomerId}/{CartName}/clear", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearCartRequestScopeIdCustomerIdCartNameclearDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete the checkout of the cart - {CompleteCheckoutRequest} Complete the checkout of the cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Order</returns>
        public Order CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost(string accept, string scopeId, string customerId, string cartName, CompleteCheckoutRequest body = default(CompleteCheckoutRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPostWithHttpInfo(accept, scopeId, customerId, cartName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Complete the checkout of the cart - {CompleteCheckoutRequest} Complete the checkout of the cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, CompleteCheckoutRequest body = default(CompleteCheckoutRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Order>("/carts/{ScopeId}/{CustomerId}/{CartName}/completeCheckout", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete the checkout of the cart - {CompleteCheckoutRequest} Complete the checkout of the cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPostAsync(string accept, string scopeId, string customerId, string cartName, CompleteCheckoutRequest body = default(CompleteCheckoutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order> localVarResponse = await CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPostWithHttpInfoAsync(accept, scopeId, customerId, cartName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Complete the checkout of the cart - {CompleteCheckoutRequest} Complete the checkout of the cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Order>> CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, CompleteCheckoutRequest body = default(CompleteCheckoutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Order>("/carts/{ScopeId}/{CustomerId}/{CartName}/completeCheckout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteCheckoutRequestScopeIdCustomerIdCartNamecompleteCheckoutPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy an existing cart to another customer - {CopyCartToCustomerRequest} Copy an existing cart to another customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="newCustomerId">the id of the customer who receives the cart.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate(string accept, string scopeId, string customerId, string cartName, string newCustomerId, CopyCartToCustomerRequest body = default(CopyCartToCustomerRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreateWithHttpInfo(accept, scopeId, customerId, cartName, newCustomerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy an existing cart to another customer - {CopyCartToCustomerRequest} Copy an existing cart to another customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="newCustomerId">the id of the customer who receives the cart.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string newCustomerId, CopyCartToCustomerRequest body = default(CopyCartToCustomerRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate");

            // verify the required parameter 'newCustomerId' is set
            if (newCustomerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'newCustomerId' when calling CartsApi->CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("NewCustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(newCustomerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/copyTo/{NewCustomerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy an existing cart to another customer - {CopyCartToCustomerRequest} Copy an existing cart to another customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="newCustomerId">the id of the customer who receives the cart.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreateAsync(string accept, string scopeId, string customerId, string cartName, string newCustomerId, CopyCartToCustomerRequest body = default(CopyCartToCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreateWithHttpInfoAsync(accept, scopeId, customerId, cartName, newCustomerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy an existing cart to another customer - {CopyCartToCustomerRequest} Copy an existing cart to another customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="newCustomerId">the id of the customer who receives the cart.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string newCustomerId, CopyCartToCustomerRequest body = default(CopyCartToCustomerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate");

            // verify the required parameter 'newCustomerId' is set
            if (newCustomerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'newCustomerId' when calling CartsApi->CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("NewCustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(newCustomerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/copyTo/{NewCustomerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyCartToCustomerRequestScopeIdCustomerIdCartNamecopyToNewCustomerIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a cart by name - {DeleteCartRequest} Delete a cart by name, nothing is preserved, to remove only the items, use the ClearCartRequest instead.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns></returns>
        public void DeleteCartRequestScopeIdCustomerIdCartNameDelete(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string))
        {
            DeleteCartRequestScopeIdCustomerIdCartNameDeleteWithHttpInfo(accept, scopeId, customerId, cartName, cultureName);
        }

        /// <summary>
        /// Delete a cart by name - {DeleteCartRequest} Delete a cart by name, nothing is preserved, to remove only the items, use the ClearCartRequest instead.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteCartRequestScopeIdCustomerIdCartNameDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->DeleteCartRequestScopeIdCustomerIdCartNameDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->DeleteCartRequestScopeIdCustomerIdCartNameDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->DeleteCartRequestScopeIdCustomerIdCartNameDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->DeleteCartRequestScopeIdCustomerIdCartNameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/carts/{ScopeId}/{CustomerId}/{CartName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCartRequestScopeIdCustomerIdCartNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a cart by name - {DeleteCartRequest} Delete a cart by name, nothing is preserved, to remove only the items, use the ClearCartRequest instead.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCartRequestScopeIdCustomerIdCartNameDeleteAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCartRequestScopeIdCustomerIdCartNameDeleteWithHttpInfoAsync(accept, scopeId, customerId, cartName, cultureName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a cart by name - {DeleteCartRequest} Delete a cart by name, nothing is preserved, to remove only the items, use the ClearCartRequest instead.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteCartRequestScopeIdCustomerIdCartNameDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->DeleteCartRequestScopeIdCustomerIdCartNameDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->DeleteCartRequestScopeIdCustomerIdCartNameDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->DeleteCartRequestScopeIdCustomerIdCartNameDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->DeleteCartRequestScopeIdCustomerIdCartNameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/carts/{ScopeId}/{CustomerId}/{CartName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCartRequestScopeIdCustomerIdCartNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the payment method available for a specific payment provider - {FindCartPaymentMethodsRequest} Retrieve all the payment methods available for the cart, as well as the payment methods previously used by the customer.The request calls the method GetPaymentMethods(Cart cart, Dictionary&lt;string, object&gt; parameters) of the payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">the name of the cart to retrieve</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;PaymentMethod&gt;</returns>
        public List<PaymentMethod> FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost(string accept, string scopeId, string customerId, string cartName, string paymentProviderName, FindCartPaymentMethodsRequest body = default(FindCartPaymentMethodsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PaymentMethod>> localVarResponse = FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPostWithHttpInfo(accept, scopeId, customerId, cartName, paymentProviderName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the payment method available for a specific payment provider - {FindCartPaymentMethodsRequest} Retrieve all the payment methods available for the cart, as well as the payment methods previously used by the customer.The request calls the method GetPaymentMethods(Cart cart, Dictionary&lt;string, object&gt; parameters) of the payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">the name of the cart to retrieve</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PaymentMethod&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PaymentMethod>> FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentProviderName, FindCartPaymentMethodsRequest body = default(FindCartPaymentMethodsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CartsApi->FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<PaymentMethod>>("/carts/{ScopeId}/{CustomerId}/{CartName}/{PaymentProviderName}/paymentMethods", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the payment method available for a specific payment provider - {FindCartPaymentMethodsRequest} Retrieve all the payment methods available for the cart, as well as the payment methods previously used by the customer.The request calls the method GetPaymentMethods(Cart cart, Dictionary&lt;string, object&gt; parameters) of the payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">the name of the cart to retrieve</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PaymentMethod&gt;</returns>
        public async System.Threading.Tasks.Task<List<PaymentMethod>> FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPostAsync(string accept, string scopeId, string customerId, string cartName, string paymentProviderName, FindCartPaymentMethodsRequest body = default(FindCartPaymentMethodsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PaymentMethod>> localVarResponse = await FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPostWithHttpInfoAsync(accept, scopeId, customerId, cartName, paymentProviderName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the payment method available for a specific payment provider - {FindCartPaymentMethodsRequest} Retrieve all the payment methods available for the cart, as well as the payment methods previously used by the customer.The request calls the method GetPaymentMethods(Cart cart, Dictionary&lt;string, object&gt; parameters) of the payment provider.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">the unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">the name of the cart to retrieve</param>
        /// <param name="paymentProviderName">the name of the payment provider to use</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PaymentMethod&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<PaymentMethod>>> FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentProviderName, FindCartPaymentMethodsRequest body = default(FindCartPaymentMethodsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost");

            // verify the required parameter 'paymentProviderName' is set
            if (paymentProviderName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentProviderName' when calling CartsApi->FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentProviderName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentProviderName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<PaymentMethod>>("/carts/{ScopeId}/{CustomerId}/{CartName}/{PaymentProviderName}/paymentMethods", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCartPaymentMethodsRequestScopeIdCustomerIdCartNamePaymentProviderNamepaymentMethodsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a cart - {GetCartRequest} Retrieve a cart. The cart is created if it does not exist.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart GetCartRequestScopeIdCustomerIdCartNameGet(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = GetCartRequestScopeIdCustomerIdCartNameGetWithHttpInfo(accept, scopeId, customerId, cartName, executeWorkflow, cultureName, workflowToExecute);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a cart - {GetCartRequest} Retrieve a cart. The cart is created if it does not exist.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> GetCartRequestScopeIdCustomerIdCartNameGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetCartRequestScopeIdCustomerIdCartNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetCartRequestScopeIdCustomerIdCartNameGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetCartRequestScopeIdCustomerIdCartNameGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetCartRequestScopeIdCustomerIdCartNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (executeWorkflow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ExecuteWorkflow", executeWorkflow));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCartRequestScopeIdCustomerIdCartNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a cart - {GetCartRequest} Retrieve a cart. The cart is created if it does not exist.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> GetCartRequestScopeIdCustomerIdCartNameGetAsync(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await GetCartRequestScopeIdCustomerIdCartNameGetWithHttpInfoAsync(accept, scopeId, customerId, cartName, executeWorkflow, cultureName, workflowToExecute, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a cart - {GetCartRequest} Retrieve a cart. The cart is created if it does not exist.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> GetCartRequestScopeIdCustomerIdCartNameGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetCartRequestScopeIdCustomerIdCartNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetCartRequestScopeIdCustomerIdCartNameGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetCartRequestScopeIdCustomerIdCartNameGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetCartRequestScopeIdCustomerIdCartNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (executeWorkflow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ExecuteWorkflow", executeWorkflow));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCartRequestScopeIdCustomerIdCartNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the states of a cart, its shipments and its line items - {GetCartStatesRequest} Retrieve the states of a cart, its shipments and its line items
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>List&lt;EntityState&gt;</returns>
        public List<EntityState> GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<EntityState>> localVarResponse = GetCartStatesRequestScopeIdCustomerIdCartNamestatesGetWithHttpInfo(accept, scopeId, customerId, cartName, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the states of a cart, its shipments and its line items - {GetCartStatesRequest} Retrieve the states of a cart, its shipments and its line items
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;EntityState&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<EntityState>> GetCartStatesRequestScopeIdCustomerIdCartNamestatesGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EntityState>>("/carts/{ScopeId}/{CustomerId}/{CartName}/states", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the states of a cart, its shipments and its line items - {GetCartStatesRequest} Retrieve the states of a cart, its shipments and its line items
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EntityState&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityState>> GetCartStatesRequestScopeIdCustomerIdCartNamestatesGetAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<EntityState>> localVarResponse = await GetCartStatesRequestScopeIdCustomerIdCartNamestatesGetWithHttpInfoAsync(accept, scopeId, customerId, cartName, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the states of a cart, its shipments and its line items - {GetCartStatesRequest} Retrieve the states of a cart, its shipments and its line items
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EntityState&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<EntityState>>> GetCartStatesRequestScopeIdCustomerIdCartNamestatesGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EntityState>>("/carts/{ScopeId}/{CustomerId}/{CartName}/states", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCartStatesRequestScopeIdCustomerIdCartNamestatesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the summary of a cart - {GetCartSummaryRequest} Retrieve the summary of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>CartSummary</returns>
        public CartSummary GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CartSummary> localVarResponse = GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGetWithHttpInfo(accept, scopeId, customerId, cartName, executeWorkflow, cultureName, workflowToExecute);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the summary of a cart - {GetCartSummaryRequest} Retrieve the summary of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of CartSummary</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CartSummary> GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (executeWorkflow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ExecuteWorkflow", executeWorkflow));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CartSummary>("/carts/{ScopeId}/{CustomerId}/{CartName}/Summary", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the summary of a cart - {GetCartSummaryRequest} Retrieve the summary of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartSummary</returns>
        public async System.Threading.Tasks.Task<CartSummary> GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGetAsync(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CartSummary> localVarResponse = await GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGetWithHttpInfoAsync(accept, scopeId, customerId, cartName, executeWorkflow, cultureName, workflowToExecute, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the summary of a cart - {GetCartSummaryRequest} Retrieve the summary of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartSummary)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CartSummary>> GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, bool? executeWorkflow = default(bool?), string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (executeWorkflow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ExecuteWorkflow", executeWorkflow));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CartSummary>("/carts/{ScopeId}/{CustomerId}/{CartName}/Summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCartSummaryRequestScopeIdCustomerIdCartNameSummaryGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the list of carts belonging to a customer - {GetCartsByCustomerIdRequest} Retrieves the list of carts belonging to a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="includeChildScopes">a value indicating whether to include carts found in child scopes. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cartType">The optional cart type. Only the carts of this specific type will be returned. (optional)</param>
        /// <returns>List&lt;CartSummary&gt;</returns>
        public List<CartSummary> GetCartsByCustomerIdRequestScopeIdCustomerIdGet(string accept, string scopeId, string customerId, bool? includeChildScopes = default(bool?), string cultureName = default(string), string cartType = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<CartSummary>> localVarResponse = GetCartsByCustomerIdRequestScopeIdCustomerIdGetWithHttpInfo(accept, scopeId, customerId, includeChildScopes, cultureName, cartType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of carts belonging to a customer - {GetCartsByCustomerIdRequest} Retrieves the list of carts belonging to a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="includeChildScopes">a value indicating whether to include carts found in child scopes. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cartType">The optional cart type. Only the carts of this specific type will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;CartSummary&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<CartSummary>> GetCartsByCustomerIdRequestScopeIdCustomerIdGetWithHttpInfo(string accept, string scopeId, string customerId, bool? includeChildScopes = default(bool?), string cultureName = default(string), string cartType = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetCartsByCustomerIdRequestScopeIdCustomerIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetCartsByCustomerIdRequestScopeIdCustomerIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetCartsByCustomerIdRequestScopeIdCustomerIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (includeChildScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildScopes", includeChildScopes));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (cartType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CartType", cartType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CartSummary>>("/carts/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCartsByCustomerIdRequestScopeIdCustomerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the list of carts belonging to a customer - {GetCartsByCustomerIdRequest} Retrieves the list of carts belonging to a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="includeChildScopes">a value indicating whether to include carts found in child scopes. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cartType">The optional cart type. Only the carts of this specific type will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CartSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<CartSummary>> GetCartsByCustomerIdRequestScopeIdCustomerIdGetAsync(string accept, string scopeId, string customerId, bool? includeChildScopes = default(bool?), string cultureName = default(string), string cartType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<CartSummary>> localVarResponse = await GetCartsByCustomerIdRequestScopeIdCustomerIdGetWithHttpInfoAsync(accept, scopeId, customerId, includeChildScopes, cultureName, cartType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of carts belonging to a customer - {GetCartsByCustomerIdRequest} Retrieves the list of carts belonging to a customer
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="includeChildScopes">a value indicating whether to include carts found in child scopes. (optional)</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cartType">The optional cart type. Only the carts of this specific type will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CartSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<CartSummary>>> GetCartsByCustomerIdRequestScopeIdCustomerIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, bool? includeChildScopes = default(bool?), string cultureName = default(string), string cartType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetCartsByCustomerIdRequestScopeIdCustomerIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetCartsByCustomerIdRequestScopeIdCustomerIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetCartsByCustomerIdRequestScopeIdCustomerIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (includeChildScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildScopes", includeChildScopes));
            }
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (cartType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CartType", cartType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CartSummary>>("/carts/{ScopeId}/{CustomerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCartsByCustomerIdRequestScopeIdCustomerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a line item of a cart - {GetLineItemRequest} Get a line item of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>LineItem</returns>
        public LineItem GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<LineItem> localVarResponse = GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGetWithHttpInfo(accept, scopeId, customerId, cartName, id, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a line item of a cart - {GetLineItemRequest} Get a line item of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of LineItem</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<LineItem> GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<LineItem>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a line item of a cart - {GetLineItemRequest} Get a line item of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItem</returns>
        public async System.Threading.Tasks.Task<LineItem> GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGetAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<LineItem> localVarResponse = await GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGetWithHttpInfoAsync(accept, scopeId, customerId, cartName, id, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a line item of a cart - {GetLineItemRequest} Get a line item of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItem)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<LineItem>> GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LineItem>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLineItemRequestScopeIdCustomerIdCartNamelineItemsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the line items of a cart - {GetLineItemsInCartRequest} Get all the line items of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>List&lt;LineItem&gt;</returns>
        public List<LineItem> GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<LineItem>> localVarResponse = GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGetWithHttpInfo(accept, scopeId, customerId, cartName, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the line items of a cart - {GetLineItemsInCartRequest} Get all the line items of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;LineItem&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<LineItem>> GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LineItem>>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the line items of a cart - {GetLineItemsInCartRequest} Get all the line items of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LineItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<LineItem>> GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGetAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<LineItem>> localVarResponse = await GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGetWithHttpInfoAsync(accept, scopeId, customerId, cartName, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the line items of a cart - {GetLineItemsInCartRequest} Get all the line items of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LineItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<LineItem>>> GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LineItem>>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLineItemsInCartRequestScopeIdCustomerIdCartNamelineItemsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the line items of a shipment - {GetLineItemsInShipmentRequest} Get all the line items of a shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>List&lt;LineItem&gt;</returns>
        public List<LineItem> GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<LineItem>> localVarResponse = GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGetWithHttpInfo(accept, scopeId, customerId, cartName, shipmentId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the line items of a shipment - {GetLineItemsInShipmentRequest} Get all the line items of a shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;LineItem&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<LineItem>> GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling CartsApi->GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LineItem>>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/lineItems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the line items of a shipment - {GetLineItemsInShipmentRequest} Get all the line items of a shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LineItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<LineItem>> GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGetAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<LineItem>> localVarResponse = await GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGetWithHttpInfoAsync(accept, scopeId, customerId, cartName, shipmentId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the line items of a shipment - {GetLineItemsInShipmentRequest} Get all the line items of a shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LineItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<LineItem>>> GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling CartsApi->GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LineItem>>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/lineItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a payment of a cart - {GetPaymentRequest} Get a payment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>Payment</returns>
        public Payment GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Payment> localVarResponse = GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGetWithHttpInfo(accept, scopeId, customerId, cartName, id, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a payment of a cart - {GetPaymentRequest} Get a payment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Payment> GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Payment>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a payment of a cart - {GetPaymentRequest} Get a payment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGetAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Payment> localVarResponse = await GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGetWithHttpInfoAsync(accept, scopeId, customerId, cartName, id, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a payment of a cart - {GetPaymentRequest} Get a payment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Payment>> GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Payment>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentRequestScopeIdCustomerIdCartNamepaymentsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the payments of a cart - {GetPaymentsInCartRequest} Get all the payments of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        public List<Payment> GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Payment>> localVarResponse = GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGetWithHttpInfo(accept, scopeId, customerId, cartName, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the payments of a cart - {GetPaymentsInCartRequest} Get all the payments of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Payment>> GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Payment>>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the payments of a cart - {GetPaymentsInCartRequest} Get all the payments of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Payment>> GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGetAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Payment>> localVarResponse = await GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGetWithHttpInfoAsync(accept, scopeId, customerId, cartName, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the payments of a cart - {GetPaymentsInCartRequest} Get all the payments of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Payment>>> GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Payment>>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentsInCartRequestScopeIdCustomerIdCartNamepaymentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a shipment of a cart - {GetShipmentRequest} Get a shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>Shipment</returns>
        public Shipment GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Shipment> localVarResponse = GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGetWithHttpInfo(accept, scopeId, customerId, cartName, id, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a shipment of a cart - {GetShipmentRequest} Get a shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <returns>ApiResponse of Shipment</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Shipment> GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGetWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Shipment>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a shipment of a cart - {GetShipmentRequest} Get a shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Shipment</returns>
        public async System.Threading.Tasks.Task<Shipment> GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGetAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Shipment> localVarResponse = await GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGetWithHttpInfoAsync(accept, scopeId, customerId, cartName, id, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a shipment of a cart - {GetShipmentRequest} Get a shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to retreive</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Shipment>> GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGetWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Shipment>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentRequestScopeIdCustomerIdCartNameshipmentsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initialize the payment in a cart - {InitializePaymentRequest} Initialize the payment in a cart, Payment method of the payment should already exists
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to initialize.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        public Cart InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost(string accept, string scopeId, string customerId, string cartName, string paymentId, InitializePaymentRequest body = default(InitializePaymentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePostWithHttpInfo(accept, scopeId, customerId, cartName, paymentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initialize the payment in a cart - {InitializePaymentRequest} Initialize the payment in a cart, Payment method of the payment should already exists
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to initialize.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, InitializePaymentRequest body = default(InitializePaymentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Cart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/initialize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initialize the payment in a cart - {InitializePaymentRequest} Initialize the payment in a cart, Payment method of the payment should already exists
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to initialize.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        public async System.Threading.Tasks.Task<Cart> InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePostAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, InitializePaymentRequest body = default(InitializePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = await InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePostWithHttpInfoAsync(accept, scopeId, customerId, cartName, paymentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initialize the payment in a cart - {InitializePaymentRequest} Initialize the payment in a cart, Payment method of the payment should already exists
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to initialize.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart>> InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, InitializePaymentRequest body = default(InitializePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Cart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/initialize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitializePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdinitializePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh the payment in a cart - {RefreshPaymentRequest} Refresh the payment in a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to refresh.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        public Cart RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost(string accept, string scopeId, string customerId, string cartName, string paymentId, RefreshPaymentRequest body = default(RefreshPaymentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPostWithHttpInfo(accept, scopeId, customerId, cartName, paymentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh the payment in a cart - {RefreshPaymentRequest} Refresh the payment in a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to refresh.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, RefreshPaymentRequest body = default(RefreshPaymentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Cart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/refresh", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh the payment in a cart - {RefreshPaymentRequest} Refresh the payment in a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to refresh.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        public async System.Threading.Tasks.Task<Cart> RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPostAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, RefreshPaymentRequest body = default(RefreshPaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = await RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPostWithHttpInfoAsync(accept, scopeId, customerId, cartName, paymentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh the payment in a cart - {RefreshPaymentRequest} Refresh the payment in a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to refresh.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart>> RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, RefreshPaymentRequest body = default(RefreshPaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Cart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/refresh", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdrefreshPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all the line items from a cart - {RemoveAllLineItemsRequest} Remove all the line items from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), string workflowToExecute = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDeleteWithHttpInfo(accept, scopeId, customerId, cartName, cultureName, workflowToExecute);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove all the line items from a cart - {RemoveAllLineItemsRequest} Remove all the line items from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), string workflowToExecute = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/removeAllLineItems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all the line items from a cart - {RemoveAllLineItemsRequest} Remove all the line items from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDeleteAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDeleteWithHttpInfoAsync(accept, scopeId, customerId, cartName, cultureName, workflowToExecute, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove all the line items from a cart - {RemoveAllLineItemsRequest} Remove all the line items from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/removeAllLineItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllLineItemsRequestScopeIdCustomerIdCartNameremoveAllLineItemsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a coupon from a cart - {RemoveCouponRequest} Remove a coupon from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">The unique identifier of the Coupon to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete(string accept, string scopeId, string customerId, string cartName, string couponCode, string cultureName = default(string), string workflowToExecute = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDeleteWithHttpInfo(accept, scopeId, customerId, cartName, couponCode, cultureName, workflowToExecute);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a coupon from a cart - {RemoveCouponRequest} Remove a coupon from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">The unique identifier of the Coupon to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string couponCode, string cultureName = default(string), string workflowToExecute = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete");

            // verify the required parameter 'couponCode' is set
            if (couponCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'couponCode' when calling CartsApi->RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("CouponCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(couponCode)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/coupons/{CouponCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a coupon from a cart - {RemoveCouponRequest} Remove a coupon from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">The unique identifier of the Coupon to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDeleteAsync(string accept, string scopeId, string customerId, string cartName, string couponCode, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDeleteWithHttpInfoAsync(accept, scopeId, customerId, cartName, couponCode, cultureName, workflowToExecute, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a coupon from a cart - {RemoveCouponRequest} Remove a coupon from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="couponCode">The unique identifier of the Coupon to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string couponCode, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete");

            // verify the required parameter 'couponCode' is set
            if (couponCode == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'couponCode' when calling CartsApi->RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("CouponCode", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(couponCode)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/coupons/{CouponCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveCouponRequestScopeIdCustomerIdCartNamecouponsCouponCodeDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a line item from a cart - {RemoveLineItemRequest} Remove a line item from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDeleteWithHttpInfo(accept, scopeId, customerId, cartName, id, cultureName, workflowToExecute);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a line item from a cart - {RemoveLineItemRequest} Remove a line item from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a line item from a cart - {RemoveLineItemRequest} Remove a line item from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDeleteAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDeleteWithHttpInfoAsync(accept, scopeId, customerId, cartName, id, cultureName, workflowToExecute, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a line item from a cart - {RemoveLineItemRequest} Remove a line item from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLineItemRequestScopeIdCustomerIdCartNamelineItemsIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all the line items from a shipment - {RemoveLineItemsInShipmentRequest} Remove all the line items from a shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string), string workflowToExecute = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDeleteWithHttpInfo(accept, scopeId, customerId, cartName, shipmentId, cultureName, workflowToExecute);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove all the line items from a shipment - {RemoveLineItemsInShipmentRequest} Remove all the line items from a shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string), string workflowToExecute = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling CartsApi->RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/lineItems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all the line items from a shipment - {RemoveLineItemsInShipmentRequest} Remove all the line items from a shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDeleteAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDeleteWithHttpInfoAsync(accept, scopeId, customerId, cartName, shipmentId, cultureName, workflowToExecute, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove all the line items from a shipment - {RemoveLineItemsInShipmentRequest} Remove all the line items from a shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment to consider.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling CartsApi->RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/lineItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLineItemsInShipmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdlineItemsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove multiple line items from a cart - {RemoveLineItemsRequest} Remove multiple line items from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="lineItemIds">The unique identifier of the LineItems to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete(string accept, string scopeId, string customerId, string cartName, List<string> lineItemIds, string cultureName = default(string), string workflowToExecute = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDeleteWithHttpInfo(accept, scopeId, customerId, cartName, lineItemIds, cultureName, workflowToExecute);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove multiple line items from a cart - {RemoveLineItemsRequest} Remove multiple line items from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="lineItemIds">The unique identifier of the LineItems to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, List<string> lineItemIds, string cultureName = default(string), string workflowToExecute = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete");

            // verify the required parameter 'lineItemIds' is set
            if (lineItemIds == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lineItemIds' when calling CartsApi->RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "LineItemIds", lineItemIds));
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/batch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove multiple line items from a cart - {RemoveLineItemsRequest} Remove multiple line items from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="lineItemIds">The unique identifier of the LineItems to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDeleteAsync(string accept, string scopeId, string customerId, string cartName, List<string> lineItemIds, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDeleteWithHttpInfoAsync(accept, scopeId, customerId, cartName, lineItemIds, cultureName, workflowToExecute, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove multiple line items from a cart - {RemoveLineItemsRequest} Remove multiple line items from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="lineItemIds">The unique identifier of the LineItems to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, List<string> lineItemIds, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete");

            // verify the required parameter 'lineItemIds' is set
            if (lineItemIds == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'lineItemIds' when calling CartsApi->RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "LineItemIds", lineItemIds));
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLineItemsRequestScopeIdCustomerIdCartNamelineItemsbatchDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a payment from a cart - {RemovePaymentRequest} Removes a payment from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDeleteWithHttpInfo(accept, scopeId, customerId, cartName, id, cultureName, workflowToExecute);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a payment from a cart - {RemovePaymentRequest} Removes a payment from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a payment from a cart - {RemovePaymentRequest} Removes a payment from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDeleteAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDeleteWithHttpInfoAsync(accept, scopeId, customerId, cartName, id, cultureName, workflowToExecute, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a payment from a cart - {RemovePaymentRequest} Removes a payment from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePaymentRequestScopeIdCustomerIdCartNamepaymentsIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a shipment from a cart - {RemoveShipmentRequest} Removes a shipment from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDeleteWithHttpInfo(accept, scopeId, customerId, cartName, id, cultureName, workflowToExecute);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a shipment from a cart - {RemoveShipmentRequest} Removes a shipment from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDeleteWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a shipment from a cart - {RemoveShipmentRequest} Removes a shipment from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDeleteAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDeleteWithHttpInfoAsync(accept, scopeId, customerId, cartName, id, cultureName, workflowToExecute, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a shipment from a cart - {RemoveShipmentRequest} Removes a shipment from a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to be removed.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned. (optional)</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDeleteWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, string cultureName = default(string), string workflowToExecute = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            if (workflowToExecute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "WorkflowToExecute", workflowToExecute));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveShipmentRequestScopeIdCustomerIdCartNameshipmentsIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds or renew a timeslot reservation for a cart - {ReserveTimeSlotRequest} Adds or renew a timeslot reservation for a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <param name="timeSlotId">The unique identifier of the fullfilment timeslot to reserve.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost(string accept, string scopeId, string customerId, string cartName, string shipmentId, string timeSlotId, ReserveTimeSlotRequest body = default(ReserveTimeSlotRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPostWithHttpInfo(accept, scopeId, customerId, cartName, shipmentId, timeSlotId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds or renew a timeslot reservation for a cart - {ReserveTimeSlotRequest} Adds or renew a timeslot reservation for a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <param name="timeSlotId">The unique identifier of the fullfilment timeslot to reserve.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string shipmentId, string timeSlotId, ReserveTimeSlotRequest body = default(ReserveTimeSlotRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling CartsApi->ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost");

            // verify the required parameter 'timeSlotId' is set
            if (timeSlotId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'timeSlotId' when calling CartsApi->ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("TimeSlotId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(timeSlotId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/{TimeSlotId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds or renew a timeslot reservation for a cart - {ReserveTimeSlotRequest} Adds or renew a timeslot reservation for a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <param name="timeSlotId">The unique identifier of the fullfilment timeslot to reserve.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPostAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, string timeSlotId, ReserveTimeSlotRequest body = default(ReserveTimeSlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPostWithHttpInfoAsync(accept, scopeId, customerId, cartName, shipmentId, timeSlotId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds or renew a timeslot reservation for a cart - {ReserveTimeSlotRequest} Adds or renew a timeslot reservation for a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the Shipment.</param>
        /// <param name="timeSlotId">The unique identifier of the fullfilment timeslot to reserve.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, string timeSlotId, ReserveTimeSlotRequest body = default(ReserveTimeSlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling CartsApi->ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost");

            // verify the required parameter 'timeSlotId' is set
            if (timeSlotId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'timeSlotId' when calling CartsApi->ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("TimeSlotId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(timeSlotId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/{TimeSlotId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReserveTimeSlotRequestScopeIdCustomerIdCartNameshipmentsShipmentIdTimeSlotIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentRequest} Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate(string accept, string scopeId, string customerId, string cartName, string shipmentId, SetAdjustmentRequest body = default(SetAdjustmentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreateWithHttpInfo(accept, scopeId, customerId, cartName, shipmentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentRequest} Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string shipmentId, SetAdjustmentRequest body = default(SetAdjustmentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling CartsApi->SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/adjustment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentRequest} Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreateAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, SetAdjustmentRequest body = default(SetAdjustmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreateWithHttpInfoAsync(accept, scopeId, customerId, cartName, shipmentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the adjustment of a shipment - {SetAdjustmentRequest} Set the adjustment of a shipment - setting Amount to null or not providing an Amount will remove the adjustment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="shipmentId">The unique identifier of the shipment to adjust</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string shipmentId, SetAdjustmentRequest body = default(SetAdjustmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling CartsApi->SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/adjustment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAdjustmentRequestScopeIdCustomerIdCartNameshipmentsShipmentIdadjustmentCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Settle the payment in a cart - {SettlePaymentRequest} Settle the payment in a cart - The payment has to be authorized before being settled.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        public Cart SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost(string accept, string scopeId, string customerId, string cartName, string paymentId, SettlePaymentRequest body = default(SettlePaymentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePostWithHttpInfo(accept, scopeId, customerId, cartName, paymentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Settle the payment in a cart - {SettlePaymentRequest} Settle the payment in a cart - The payment has to be authorized before being settled.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, SettlePaymentRequest body = default(SettlePaymentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Cart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/settle", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Settle the payment in a cart - {SettlePaymentRequest} Settle the payment in a cart - The payment has to be authorized before being settled.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        public async System.Threading.Tasks.Task<Cart> SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePostAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, SettlePaymentRequest body = default(SettlePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = await SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePostWithHttpInfoAsync(accept, scopeId, customerId, cartName, paymentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Settle the payment in a cart - {SettlePaymentRequest} Settle the payment in a cart - The payment has to be authorized before being settled.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to settle.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart>> SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, SettlePaymentRequest body = default(SettlePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Cart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/settle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SettlePaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdsettlePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the billing address of a payment - {UpdateBillingAddressRequest} Update the billing address of a payment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdateBillingAddressRequest body = default(UpdateBillingAddressRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreateWithHttpInfo(accept, scopeId, customerId, cartName, paymentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the billing address of a payment - {UpdateBillingAddressRequest} Update the billing address of a payment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdateBillingAddressRequest body = default(UpdateBillingAddressRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/billingAddress", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the billing address of a payment - {UpdateBillingAddressRequest} Update the billing address of a payment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreateAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdateBillingAddressRequest body = default(UpdateBillingAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreateWithHttpInfoAsync(accept, scopeId, customerId, cartName, paymentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the billing address of a payment - {UpdateBillingAddressRequest} Update the billing address of a payment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdateBillingAddressRequest body = default(UpdateBillingAddressRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/billingAddress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBillingAddressRequestScopeIdCustomerIdCartNamepaymentsPaymentIdbillingAddressCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the cart - {UpdateCartRequest} Update the cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart UpdateCartRequestScopeIdCustomerIdCartNameCreate(string accept, string scopeId, string customerId, string cartName, UpdateCartRequest body = default(UpdateCartRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = UpdateCartRequestScopeIdCustomerIdCartNameCreateWithHttpInfo(accept, scopeId, customerId, cartName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the cart - {UpdateCartRequest} Update the cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> UpdateCartRequestScopeIdCustomerIdCartNameCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, UpdateCartRequest body = default(UpdateCartRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdateCartRequestScopeIdCustomerIdCartNameCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdateCartRequestScopeIdCustomerIdCartNameCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdateCartRequestScopeIdCustomerIdCartNameCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdateCartRequestScopeIdCustomerIdCartNameCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCartRequestScopeIdCustomerIdCartNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the cart - {UpdateCartRequest} Update the cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> UpdateCartRequestScopeIdCustomerIdCartNameCreateAsync(string accept, string scopeId, string customerId, string cartName, UpdateCartRequest body = default(UpdateCartRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await UpdateCartRequestScopeIdCustomerIdCartNameCreateWithHttpInfoAsync(accept, scopeId, customerId, cartName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the cart - {UpdateCartRequest} Update the cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> UpdateCartRequestScopeIdCustomerIdCartNameCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, UpdateCartRequest body = default(UpdateCartRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdateCartRequestScopeIdCustomerIdCartNameCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdateCartRequestScopeIdCustomerIdCartNameCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdateCartRequestScopeIdCustomerIdCartNameCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdateCartRequestScopeIdCustomerIdCartNameCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCartRequestScopeIdCustomerIdCartNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the customer summary of a cart - {UpdateCustomerSummaryRequest} Update the customer summary of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CustomerSummary</returns>
        public CustomerSummary UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate(string accept, string scopeId, string customerId, string cartName, UpdateCustomerSummaryRequest body = default(UpdateCustomerSummaryRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomerSummary> localVarResponse = UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreateWithHttpInfo(accept, scopeId, customerId, cartName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the customer summary of a cart - {UpdateCustomerSummaryRequest} Update the customer summary of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CustomerSummary</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomerSummary> UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, UpdateCustomerSummaryRequest body = default(UpdateCustomerSummaryRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<CustomerSummary>("/carts/{ScopeId}/{CustomerId}/{CartName}/customer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the customer summary of a cart - {UpdateCustomerSummaryRequest} Update the customer summary of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerSummary</returns>
        public async System.Threading.Tasks.Task<CustomerSummary> UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreateAsync(string accept, string scopeId, string customerId, string cartName, UpdateCustomerSummaryRequest body = default(UpdateCustomerSummaryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomerSummary> localVarResponse = await UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreateWithHttpInfoAsync(accept, scopeId, customerId, cartName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the customer summary of a cart - {UpdateCustomerSummaryRequest} Update the customer summary of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerSummary)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CustomerSummary>> UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, UpdateCustomerSummaryRequest body = default(UpdateCustomerSummaryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<CustomerSummary>("/carts/{ScopeId}/{CustomerId}/{CartName}/customer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomerSummaryRequestScopeIdCustomerIdCartNamecustomerCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a line item of a cart - {UpdateLineItemRequest} Update a line item of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate(string accept, string scopeId, string customerId, string cartName, string id, UpdateLineItemRequest body = default(UpdateLineItemRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreateWithHttpInfo(accept, scopeId, customerId, cartName, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a line item of a cart - {UpdateLineItemRequest} Update a line item of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, UpdateLineItemRequest body = default(UpdateLineItemRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a line item of a cart - {UpdateLineItemRequest} Update a line item of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreateAsync(string accept, string scopeId, string customerId, string cartName, string id, UpdateLineItemRequest body = default(UpdateLineItemRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreateWithHttpInfoAsync(accept, scopeId, customerId, cartName, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a line item of a cart - {UpdateLineItemRequest} Update a line item of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the LineItem to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, UpdateLineItemRequest body = default(UpdateLineItemRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLineItemRequestScopeIdCustomerIdCartNamelineItemsIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the amount of a payment - {UpdatePaymentAmountRequest} Update the amount of a payment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentAmountRequest body = default(UpdatePaymentAmountRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreateWithHttpInfo(accept, scopeId, customerId, cartName, paymentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the amount of a payment - {UpdatePaymentAmountRequest} Update the amount of a payment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentAmountRequest body = default(UpdatePaymentAmountRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/amount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the amount of a payment - {UpdatePaymentAmountRequest} Update the amount of a payment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreateAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentAmountRequest body = default(UpdatePaymentAmountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreateWithHttpInfoAsync(accept, scopeId, customerId, cartName, paymentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the amount of a payment - {UpdatePaymentAmountRequest} Update the amount of a payment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentAmountRequest body = default(UpdatePaymentAmountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/amount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePaymentAmountRequestScopeIdCustomerIdCartNamepaymentsPaymentIdamountCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a payment method of a payment - {UpdatePaymentMethodRequest} Update a payment method of a payment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentMethodRequest body = default(UpdatePaymentMethodRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreateWithHttpInfo(accept, scopeId, customerId, cartName, paymentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a payment method of a payment - {UpdatePaymentMethodRequest} Update a payment method of a payment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentMethodRequest body = default(UpdatePaymentMethodRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a payment method of a payment - {UpdatePaymentMethodRequest} Update a payment method of a payment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreateAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentMethodRequest body = default(UpdatePaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreateWithHttpInfoAsync(accept, scopeId, customerId, cartName, paymentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a payment method of a payment - {UpdatePaymentMethodRequest} Update a payment method of a payment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The Id of the payment</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, UpdatePaymentMethodRequest body = default(UpdatePaymentMethodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/method", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePaymentMethodRequestScopeIdCustomerIdCartNamepaymentsPaymentIdmethodCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a payment of a cart - {UpdatePaymentRequest} Update a payment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate(string accept, string scopeId, string customerId, string cartName, string id, UpdatePaymentRequest body = default(UpdatePaymentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreateWithHttpInfo(accept, scopeId, customerId, cartName, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a payment of a cart - {UpdatePaymentRequest} Update a payment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, UpdatePaymentRequest body = default(UpdatePaymentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a payment of a cart - {UpdatePaymentRequest} Update a payment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreateAsync(string accept, string scopeId, string customerId, string cartName, string id, UpdatePaymentRequest body = default(UpdatePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreateWithHttpInfoAsync(accept, scopeId, customerId, cartName, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a payment of a cart - {UpdatePaymentRequest} Update a payment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Payment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, UpdatePaymentRequest body = default(UpdatePaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePaymentRequestScopeIdCustomerIdCartNamepaymentsIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a shipment of a cart - {UpdateShipmentRequest} Update a shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessedCart</returns>
        public ProcessedCart UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate(string accept, string scopeId, string customerId, string cartName, string id, UpdateShipmentRequest body = default(UpdateShipmentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreateWithHttpInfo(accept, scopeId, customerId, cartName, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a shipment of a cart - {UpdateShipmentRequest} Update a shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessedCart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreateWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string id, UpdateShipmentRequest body = default(UpdateShipmentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a shipment of a cart - {UpdateShipmentRequest} Update a shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedCart</returns>
        public async System.Threading.Tasks.Task<ProcessedCart> UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreateAsync(string accept, string scopeId, string customerId, string cartName, string id, UpdateShipmentRequest body = default(UpdateShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart> localVarResponse = await UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreateWithHttpInfoAsync(accept, scopeId, customerId, cartName, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a shipment of a cart - {UpdateShipmentRequest} Update a shipment of a cart
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="id">The unique identifier of the Shipment to update.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedCart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ProcessedCart>> UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreateWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string id, UpdateShipmentRequest body = default(UpdateShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling CartsApi->UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ProcessedCart>("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShipmentRequestScopeIdCustomerIdCartNameshipmentsIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Void the payment in a cart - {VoidPaymentRequest} Void the payment in a cart. A payment already with status Paid cannot be voided.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to void.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Cart</returns>
        public Cart VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost(string accept, string scopeId, string customerId, string cartName, string paymentId, VoidPaymentRequest body = default(VoidPaymentRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPostWithHttpInfo(accept, scopeId, customerId, cartName, paymentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Void the payment in a cart - {VoidPaymentRequest} Void the payment in a cart. A payment already with status Paid cannot be voided.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to void.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Cart</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPostWithHttpInfo(string accept, string scopeId, string customerId, string cartName, string paymentId, VoidPaymentRequest body = default(VoidPaymentRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Cart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/void", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Void the payment in a cart - {VoidPaymentRequest} Void the payment in a cart. A payment already with status Paid cannot be voided.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to void.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cart</returns>
        public async System.Threading.Tasks.Task<Cart> VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPostAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, VoidPaymentRequest body = default(VoidPaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart> localVarResponse = await VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPostWithHttpInfoAsync(accept, scopeId, customerId, cartName, paymentId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Void the payment in a cart - {VoidPaymentRequest} Void the payment in a cart. A payment already with status Paid cannot be voided.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="customerId">The unique identifier of the Customer owning the cart</param>
        /// <param name="cartName">The name associated to the requested cart</param>
        /// <param name="paymentId">The unique identifier of the payment to void.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cart)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Cart>> VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPostWithHttpInfoAsync(string accept, string scopeId, string customerId, string cartName, string paymentId, VoidPaymentRequest body = default(VoidPaymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling CartsApi->VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling CartsApi->VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost");

            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'customerId' when calling CartsApi->VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost");

            // verify the required parameter 'cartName' is set
            if (cartName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'cartName' when calling CartsApi->VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost");

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling CartsApi->VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CustomerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("CartName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(cartName)); // path parameter
            localVarRequestOptions.PathParameters.Add("PaymentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Cart>("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/void", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VoidPaymentRequestScopeIdCustomerIdCartNamepaymentsPaymentIdvoidPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
