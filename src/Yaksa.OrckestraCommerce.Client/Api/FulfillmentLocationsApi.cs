/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFulfillmentLocationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a time slot from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Adds a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TimeSlot</returns>
        TimeSlot AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotRequest body = default(AddFulfillmentLocationTimeSlotRequest));

        /// <summary>
        /// Adds a time slot from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Adds a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TimeSlot</returns>
        ApiResponse<TimeSlot> AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPostWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotRequest body = default(AddFulfillmentLocationTimeSlotRequest));
        /// <summary>
        /// Adds a time slot reservation for a specific time slot - {AddFulfillmentLocationTimeSlotReservationRequest}
        /// </summary>
        /// <remarks>
        /// Adds a time slot reservation for a specific time slot.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TimeSlotReservation</returns>
        TimeSlotReservation AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost(string accept, string scopeId, string fulfillmentLocationId, string slotId, AddFulfillmentLocationTimeSlotReservationRequest body = default(AddFulfillmentLocationTimeSlotReservationRequest));

        /// <summary>
        /// Adds a time slot reservation for a specific time slot - {AddFulfillmentLocationTimeSlotReservationRequest}
        /// </summary>
        /// <remarks>
        /// Adds a time slot reservation for a specific time slot.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TimeSlotReservation</returns>
        ApiResponse<TimeSlotReservation> AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPostWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string slotId, AddFulfillmentLocationTimeSlotReservationRequest body = default(AddFulfillmentLocationTimeSlotReservationRequest));
        /// <summary>
        /// Adds a list of time slots from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Adds a list of time slots from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;TimeSlot&gt;</returns>
        List<TimeSlot> AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotsRequest body = default(AddFulfillmentLocationTimeSlotsRequest));

        /// <summary>
        /// Adds a list of time slots from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Adds a list of time slots from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TimeSlot&gt;</returns>
        ApiResponse<List<TimeSlot>> AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPostWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotsRequest body = default(AddFulfillmentLocationTimeSlotsRequest));
        /// <summary>
        /// Calculate the delay for a list of fulfillment locations - {CalculateFulfillmentLocationsDelayRequest}
        /// </summary>
        /// <remarks>
        /// Calculate the delay for a list of fulfillment locations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentLocationsDelayCalculationResult</returns>
        FulfillmentLocationsDelayCalculationResult CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPost(string accept, string scopeId, CalculateFulfillmentLocationsDelayRequest body = default(CalculateFulfillmentLocationsDelayRequest));

        /// <summary>
        /// Calculate the delay for a list of fulfillment locations - {CalculateFulfillmentLocationsDelayRequest}
        /// </summary>
        /// <remarks>
        /// Calculate the delay for a list of fulfillment locations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentLocationsDelayCalculationResult</returns>
        ApiResponse<FulfillmentLocationsDelayCalculationResult> CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPostWithHttpInfo(string accept, string scopeId, CalculateFulfillmentLocationsDelayRequest body = default(CalculateFulfillmentLocationsDelayRequest));
        /// <summary>
        ///  Combines a schedule and slot plan to calculate the availability of slots for the specified dates. - {CalculateScheduleAvailabilitySlotsRequest}
        /// </summary>
        /// <remarks>
        /// Combines a schedule and slot plan to calculate the availability of slots for the specified dates.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>DayAvailabilityResult</returns>
        DayAvailabilityResult CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePost(string accept, string fulfillmentLocationId, string fulfillmentType, CalculateScheduleAvailabilitySlotsRequest body = default(CalculateScheduleAvailabilitySlotsRequest));

        /// <summary>
        ///  Combines a schedule and slot plan to calculate the availability of slots for the specified dates. - {CalculateScheduleAvailabilitySlotsRequest}
        /// </summary>
        /// <remarks>
        /// Combines a schedule and slot plan to calculate the availability of slots for the specified dates.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DayAvailabilityResult</returns>
        ApiResponse<DayAvailabilityResult> CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePostWithHttpInfo(string accept, string fulfillmentLocationId, string fulfillmentType, CalculateScheduleAvailabilitySlotsRequest body = default(CalculateScheduleAvailabilitySlotsRequest));
        /// <summary>
        /// Checks the availability of a specific slot time on a specific date using the calculated schedule availability. - {CheckAvailabilitySlotRequest}
        /// </summary>
        /// <remarks>
        /// Checks the availability of a specific slot time on a specific date using the calculated schedule availability.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePost(string accept, string fulfillmentLocationId, string fulfillmentType, CheckAvailabilitySlotRequest body = default(CheckAvailabilitySlotRequest));

        /// <summary>
        /// Checks the availability of a specific slot time on a specific date using the calculated schedule availability. - {CheckAvailabilitySlotRequest}
        /// </summary>
        /// <remarks>
        /// Checks the availability of a specific slot time on a specific date using the calculated schedule availability.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePostWithHttpInfo(string accept, string fulfillmentLocationId, string fulfillmentType, CheckAvailabilitySlotRequest body = default(CheckAvailabilitySlotRequest));
        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <returns></returns>
        void DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId);

        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDeleteWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId);
        /// <summary>
        /// Deletes a time slot reservation - {DeleteFulfillmentLocationTimeSlotReservationRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a time slot reservation
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <returns></returns>
        void DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string));

        /// <summary>
        /// Deletes a time slot reservation - {DeleteFulfillmentLocationTimeSlotReservationRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a time slot reservation
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDeleteWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string));
        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Deletes all time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <returns></returns>
        void DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType);

        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Deletes all time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDeleteWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType);
        /// <summary>
        /// Search for fulfillment locations - {FindFulfillmentLocationsRequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment locations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindFulfillmentLocationsQueryResult</returns>
        FindFulfillmentLocationsQueryResult FindFulfillmentLocationsRequestScopeIdfindPost(string accept, string scopeId, FindFulfillmentLocationsRequest body = default(FindFulfillmentLocationsRequest));

        /// <summary>
        /// Search for fulfillment locations - {FindFulfillmentLocationsRequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment locations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindFulfillmentLocationsQueryResult</returns>
        ApiResponse<FindFulfillmentLocationsQueryResult> FindFulfillmentLocationsRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindFulfillmentLocationsRequest body = default(FindFulfillmentLocationsRequest));
        /// <summary>
        /// Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope - {GetDeliveryFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>List&lt;FulfillmentLocation&gt;</returns>
        List<FulfillmentLocation> GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGet(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?));

        /// <summary>
        /// Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope - {GetDeliveryFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>ApiResponse of List&lt;FulfillmentLocation&gt;</returns>
        ApiResponse<List<FulfillmentLocation>> GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGetWithHttpInfo(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?));
        /// <summary>
        /// Get the availability of a fulfillment location depending on specific time for a specific scope - {GetFulfillmentAvailabilityRequest}
        /// </summary>
        /// <remarks>
        /// Get the availability of a fulfillment location depending on specific time (in store timezone) for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentAvailability</returns>
        FulfillmentAvailability GetFulfillmentAvailabilityRequestScopeIdavailabiltyPost(string accept, string scopeId, GetFulfillmentAvailabilityRequest body = default(GetFulfillmentAvailabilityRequest));

        /// <summary>
        /// Get the availability of a fulfillment location depending on specific time for a specific scope - {GetFulfillmentAvailabilityRequest}
        /// </summary>
        /// <remarks>
        /// Get the availability of a fulfillment location depending on specific time (in store timezone) for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentAvailability</returns>
        ApiResponse<FulfillmentAvailability> GetFulfillmentAvailabilityRequestScopeIdavailabiltyPostWithHttpInfo(string accept, string scopeId, GetFulfillmentAvailabilityRequest body = default(GetFulfillmentAvailabilityRequest));
        /// <summary>
        /// Retrieve an elapsed time based on fulfillment location schedules - {GetFulfillmentLocationByIdElapsedTimeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an elapsed time based on fulfillment location schedules
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the fulfillment location.</param>
        /// <param name="startDate">The start date to determine elapsed time. (optional)</param>
        /// <param name="endDate">The end date to determine elapsed time. (optional)</param>
        /// <param name="scheduleType">The schedule type to use (optional)</param>
        /// <returns>GetFulfillmentLocationByIdElapsedTimeResult</returns>
        GetFulfillmentLocationByIdElapsedTimeResult GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGet(string accept, string scopeId, string fulfillmentLocationId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string scheduleType = default(string));

        /// <summary>
        /// Retrieve an elapsed time based on fulfillment location schedules - {GetFulfillmentLocationByIdElapsedTimeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an elapsed time based on fulfillment location schedules
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the fulfillment location.</param>
        /// <param name="startDate">The start date to determine elapsed time. (optional)</param>
        /// <param name="endDate">The end date to determine elapsed time. (optional)</param>
        /// <param name="scheduleType">The schedule type to use (optional)</param>
        /// <returns>ApiResponse of GetFulfillmentLocationByIdElapsedTimeResult</returns>
        ApiResponse<GetFulfillmentLocationByIdElapsedTimeResult> GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string scheduleType = default(string));
        /// <summary>
        /// Retrieve a fulfillment location for a specific scope - {GetFulfillmentLocationByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <returns>FulfillmentLocation</returns>
        FulfillmentLocation GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGet(string accept, string scopeId, string fulfillmentLocationId);

        /// <summary>
        /// Retrieve a fulfillment location for a specific scope - {GetFulfillmentLocationByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <returns>ApiResponse of FulfillmentLocation</returns>
        ApiResponse<FulfillmentLocation> GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId);
        /// <summary>
        /// Retrieves a time slot from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <returns>TimeSlot</returns>
        TimeSlot GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId);

        /// <summary>
        /// Retrieves a time slot from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <returns>ApiResponse of TimeSlot</returns>
        ApiResponse<TimeSlot> GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId);
        /// <summary>
        /// Retrieves a time slot reservation - {GetFulfillmentLocationTimeSlotReservationByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a time slot reservation
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <returns>TimeSlotReservation</returns>
        TimeSlotReservation GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string));

        /// <summary>
        /// Retrieves a time slot reservation - {GetFulfillmentLocationTimeSlotReservationByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a time slot reservation
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <returns>ApiResponse of TimeSlotReservation</returns>
        ApiResponse<TimeSlotReservation> GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string));
        /// <summary>
        /// Retrieves time slot reservations - {GetFulfillmentLocationTimeSlotReservationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves time slot reservations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot to be found (if not set, all timeslot ids are retrieved).</param>
        /// <param name="reservationDate">The reservation date.</param>
        /// <returns>TimeSlotReservationResult</returns>
        TimeSlotReservationResult GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet(string accept, string scopeId, string fulfillmentLocationId, string slotId, DateTime reservationDate);

        /// <summary>
        /// Retrieves time slot reservations - {GetFulfillmentLocationTimeSlotReservationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves time slot reservations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot to be found (if not set, all timeslot ids are retrieved).</param>
        /// <param name="reservationDate">The reservation date.</param>
        /// <returns>ApiResponse of TimeSlotReservationResult</returns>
        ApiResponse<TimeSlotReservationResult> GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string slotId, DateTime reservationDate);
        /// <summary>
        /// Retrieves time slots from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves time slots from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <returns>List&lt;TimeSlot&gt;</returns>
        List<TimeSlot> GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType);

        /// <summary>
        /// Retrieves time slots from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves time slots from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <returns>ApiResponse of List&lt;TimeSlot&gt;</returns>
        ApiResponse<List<TimeSlot>> GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType);
        /// <summary>
        /// Retrieves a list of fulfillment locations for scpecific inventory locations identifiers - {GetFulfillmentLocationsByInventoryLocationIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a list of fulfillment locations for specific inventory locations identifiers
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationIds">the unique identifiers of the inventory locations.</param>
        /// <returns>List&lt;FulfillmentLocation&gt;</returns>
        List<FulfillmentLocation> GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGet(string accept, string scopeId, List<string> inventoryLocationIds);

        /// <summary>
        /// Retrieves a list of fulfillment locations for scpecific inventory locations identifiers - {GetFulfillmentLocationsByInventoryLocationIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a list of fulfillment locations for specific inventory locations identifiers
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationIds">the unique identifiers of the inventory locations.</param>
        /// <returns>ApiResponse of List&lt;FulfillmentLocation&gt;</returns>
        ApiResponse<List<FulfillmentLocation>> GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGetWithHttpInfo(string accept, string scopeId, List<string> inventoryLocationIds);
        /// <summary>
        /// Retrieve fulfillment locations for a specific scope - {GetFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations for a specific scope. The addresses are not included in the result.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>List&lt;FulfillmentLocation&gt;</returns>
        List<FulfillmentLocation> GetFulfillmentLocationsByScopeRequestScopeIdGet(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?));

        /// <summary>
        /// Retrieve fulfillment locations for a specific scope - {GetFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations for a specific scope. The addresses are not included in the result.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>ApiResponse of List&lt;FulfillmentLocation&gt;</returns>
        ApiResponse<List<FulfillmentLocation>> GetFulfillmentLocationsByScopeRequestScopeIdGetWithHttpInfo(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?));
        /// <summary>
        /// Retreive a specific store&#39;s OperatingStatus - {GetOperatingStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store&#39;s OperatingStatus
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the FulfillmentLocation (Store or other) to retrieve.</param>
        /// <returns>OperatingStatus</returns>
        OperatingStatus GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGet(string accept, string scopeId, string fulfillmentLocationId);

        /// <summary>
        /// Retreive a specific store&#39;s OperatingStatus - {GetOperatingStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store&#39;s OperatingStatus
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the FulfillmentLocation (Store or other) to retrieve.</param>
        /// <returns>ApiResponse of OperatingStatus</returns>
        ApiResponse<OperatingStatus> GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId);
        /// <summary>
        /// Retrieve fulfillment locations supporting pickup as shipping method for a specific scope - {GetPickupFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations supporting pickup as shipping method for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>List&lt;FulfillmentLocation&gt;</returns>
        List<FulfillmentLocation> GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGet(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?));

        /// <summary>
        /// Retrieve fulfillment locations supporting pickup as shipping method for a specific scope - {GetPickupFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations supporting pickup as shipping method for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>ApiResponse of List&lt;FulfillmentLocation&gt;</returns>
        ApiResponse<List<FulfillmentLocation>> GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGetWithHttpInfo(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?));
        /// <summary>
        /// Retreive a specific store&#39;s Schedule - {GetScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store&#39;s Schedule
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the Store to retrieve.</param>
        /// <param name="scheduleType"> Gets or sets the type of the schedule. The possible values are : OpeningHours, Delivery or PickUp. (optional)</param>
        /// <returns>FulfillmentSchedule</returns>
        FulfillmentSchedule GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGet(string accept, string scopeId, string fulfillmentLocationId, string scheduleType = default(string));

        /// <summary>
        /// Retreive a specific store&#39;s Schedule - {GetScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store&#39;s Schedule
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the Store to retrieve.</param>
        /// <param name="scheduleType"> Gets or sets the type of the schedule. The possible values are : OpeningHours, Delivery or PickUp. (optional)</param>
        /// <returns>ApiResponse of FulfillmentSchedule</returns>
        ApiResponse<FulfillmentSchedule> GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string scheduleType = default(string));
        /// <summary>
        /// Retrieve fulfillment locations supporting shipping as shipping method for a specific scope - {GetShippingFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations supporting shipping as shipping method for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>List&lt;FulfillmentLocation&gt;</returns>
        List<FulfillmentLocation> GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGet(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?));

        /// <summary>
        /// Retrieve fulfillment locations supporting shipping as shipping method for a specific scope - {GetShippingFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations supporting shipping as shipping method for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>ApiResponse of List&lt;FulfillmentLocation&gt;</returns>
        ApiResponse<List<FulfillmentLocation>> GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGetWithHttpInfo(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?));
        /// <summary>
        /// Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) - {ReserveAvailabilitySlotRequest}
        /// </summary>
        /// <remarks>
        /// Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPost(string accept, string fulfillmentLocationId, ReserveAvailabilitySlotRequest body = default(ReserveAvailabilitySlotRequest));

        /// <summary>
        /// Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) - {ReserveAvailabilitySlotRequest}
        /// </summary>
        /// <remarks>
        /// Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPostWithHttpInfo(string accept, string fulfillmentLocationId, ReserveAvailabilitySlotRequest body = default(ReserveAvailabilitySlotRequest));
        /// <summary>
        /// Delete all time slot from a fulfillment location for a specific scope and add the list of time slots - {ResetFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Delete all time slot from a fulfillment location for a specific scope and add the list of time slots
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;TimeSlot&gt;</returns>
        List<TimeSlot> ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, ResetFulfillmentLocationTimeSlotsRequest body = default(ResetFulfillmentLocationTimeSlotsRequest));

        /// <summary>
        /// Delete all time slot from a fulfillment location for a specific scope and add the list of time slots - {ResetFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Delete all time slot from a fulfillment location for a specific scope and add the list of time slots
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TimeSlot&gt;</returns>
        ApiResponse<List<TimeSlot>> ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreateWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, ResetFulfillmentLocationTimeSlotsRequest body = default(ResetFulfillmentLocationTimeSlotsRequest));
        /// <summary>
        /// Updates the inventory informations for a specified fulfillment location. - {SetFulfillmentLocationInventoryManagementRequest}
        /// </summary>
        /// <remarks>
        /// Updates the inventory details for a specified fulfillment location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SetFulfillmentLocationInventoryManagementResult</returns>
        SetFulfillmentLocationInventoryManagementResult SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreate(string accept, string scopeId, string fulfillmentLocationId, SetFulfillmentLocationInventoryManagementRequest body = default(SetFulfillmentLocationInventoryManagementRequest));

        /// <summary>
        /// Updates the inventory informations for a specified fulfillment location. - {SetFulfillmentLocationInventoryManagementRequest}
        /// </summary>
        /// <remarks>
        /// Updates the inventory details for a specified fulfillment location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SetFulfillmentLocationInventoryManagementResult</returns>
        ApiResponse<SetFulfillmentLocationInventoryManagementResult> SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreateWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, SetFulfillmentLocationInventoryManagementRequest body = default(SetFulfillmentLocationInventoryManagementRequest));
        /// <summary>
        /// Updates a time slot from a fulfillment location for a specific scope - {UpdateFulfillmentLocationTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Updates a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TimeSlot</returns>
        TimeSlot UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, UpdateFulfillmentLocationTimeSlotRequest body = default(UpdateFulfillmentLocationTimeSlotRequest));

        /// <summary>
        /// Updates a time slot from a fulfillment location for a specific scope - {UpdateFulfillmentLocationTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Updates a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TimeSlot</returns>
        ApiResponse<TimeSlot> UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreateWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, UpdateFulfillmentLocationTimeSlotRequest body = default(UpdateFulfillmentLocationTimeSlotRequest));
        /// <summary>
        /// Updates a time slot reservation - {UpdateFulfillmentLocationTimeSlotReservationRequest}
        /// </summary>
        /// <remarks>
        /// Updates a time slot reservation.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TimeSlotReservation</returns>
        TimeSlotReservation UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, UpdateFulfillmentLocationTimeSlotReservationRequest body = default(UpdateFulfillmentLocationTimeSlotReservationRequest));

        /// <summary>
        /// Updates a time slot reservation - {UpdateFulfillmentLocationTimeSlotReservationRequest}
        /// </summary>
        /// <remarks>
        /// Updates a time slot reservation.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TimeSlotReservation</returns>
        ApiResponse<TimeSlotReservation> UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreateWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, UpdateFulfillmentLocationTimeSlotReservationRequest body = default(UpdateFulfillmentLocationTimeSlotReservationRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFulfillmentLocationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds a time slot from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Adds a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlot</returns>
        System.Threading.Tasks.Task<TimeSlot> AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPostAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotRequest body = default(AddFulfillmentLocationTimeSlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a time slot from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Adds a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlot)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeSlot>> AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotRequest body = default(AddFulfillmentLocationTimeSlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds a time slot reservation for a specific time slot - {AddFulfillmentLocationTimeSlotReservationRequest}
        /// </summary>
        /// <remarks>
        /// Adds a time slot reservation for a specific time slot.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlotReservation</returns>
        System.Threading.Tasks.Task<TimeSlotReservation> AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPostAsync(string accept, string scopeId, string fulfillmentLocationId, string slotId, AddFulfillmentLocationTimeSlotReservationRequest body = default(AddFulfillmentLocationTimeSlotReservationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a time slot reservation for a specific time slot - {AddFulfillmentLocationTimeSlotReservationRequest}
        /// </summary>
        /// <remarks>
        /// Adds a time slot reservation for a specific time slot.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlotReservation)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeSlotReservation>> AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string slotId, AddFulfillmentLocationTimeSlotReservationRequest body = default(AddFulfillmentLocationTimeSlotReservationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds a list of time slots from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Adds a list of time slots from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TimeSlot&gt;</returns>
        System.Threading.Tasks.Task<List<TimeSlot>> AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPostAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotsRequest body = default(AddFulfillmentLocationTimeSlotsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a list of time slots from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Adds a list of time slots from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TimeSlot&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimeSlot>>> AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotsRequest body = default(AddFulfillmentLocationTimeSlotsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Calculate the delay for a list of fulfillment locations - {CalculateFulfillmentLocationsDelayRequest}
        /// </summary>
        /// <remarks>
        /// Calculate the delay for a list of fulfillment locations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentLocationsDelayCalculationResult</returns>
        System.Threading.Tasks.Task<FulfillmentLocationsDelayCalculationResult> CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPostAsync(string accept, string scopeId, CalculateFulfillmentLocationsDelayRequest body = default(CalculateFulfillmentLocationsDelayRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Calculate the delay for a list of fulfillment locations - {CalculateFulfillmentLocationsDelayRequest}
        /// </summary>
        /// <remarks>
        /// Calculate the delay for a list of fulfillment locations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentLocationsDelayCalculationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentLocationsDelayCalculationResult>> CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPostWithHttpInfoAsync(string accept, string scopeId, CalculateFulfillmentLocationsDelayRequest body = default(CalculateFulfillmentLocationsDelayRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        ///  Combines a schedule and slot plan to calculate the availability of slots for the specified dates. - {CalculateScheduleAvailabilitySlotsRequest}
        /// </summary>
        /// <remarks>
        /// Combines a schedule and slot plan to calculate the availability of slots for the specified dates.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DayAvailabilityResult</returns>
        System.Threading.Tasks.Task<DayAvailabilityResult> CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePostAsync(string accept, string fulfillmentLocationId, string fulfillmentType, CalculateScheduleAvailabilitySlotsRequest body = default(CalculateScheduleAvailabilitySlotsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///  Combines a schedule and slot plan to calculate the availability of slots for the specified dates. - {CalculateScheduleAvailabilitySlotsRequest}
        /// </summary>
        /// <remarks>
        /// Combines a schedule and slot plan to calculate the availability of slots for the specified dates.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DayAvailabilityResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DayAvailabilityResult>> CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePostWithHttpInfoAsync(string accept, string fulfillmentLocationId, string fulfillmentType, CalculateScheduleAvailabilitySlotsRequest body = default(CalculateScheduleAvailabilitySlotsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Checks the availability of a specific slot time on a specific date using the calculated schedule availability. - {CheckAvailabilitySlotRequest}
        /// </summary>
        /// <remarks>
        /// Checks the availability of a specific slot time on a specific date using the calculated schedule availability.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePostAsync(string accept, string fulfillmentLocationId, string fulfillmentType, CheckAvailabilitySlotRequest body = default(CheckAvailabilitySlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Checks the availability of a specific slot time on a specific date using the calculated schedule availability. - {CheckAvailabilitySlotRequest}
        /// </summary>
        /// <remarks>
        /// Checks the availability of a specific slot time on a specific date using the calculated schedule availability.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePostWithHttpInfoAsync(string accept, string fulfillmentLocationId, string fulfillmentType, CheckAvailabilitySlotRequest body = default(CheckAvailabilitySlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDeleteAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDeleteWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a time slot reservation - {DeleteFulfillmentLocationTimeSlotReservationRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a time slot reservation
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDeleteAsync(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a time slot reservation - {DeleteFulfillmentLocationTimeSlotReservationRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a time slot reservation
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDeleteWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Deletes all time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDeleteAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Deletes all time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDeleteWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for fulfillment locations - {FindFulfillmentLocationsRequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment locations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindFulfillmentLocationsQueryResult</returns>
        System.Threading.Tasks.Task<FindFulfillmentLocationsQueryResult> FindFulfillmentLocationsRequestScopeIdfindPostAsync(string accept, string scopeId, FindFulfillmentLocationsRequest body = default(FindFulfillmentLocationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for fulfillment locations - {FindFulfillmentLocationsRequest}
        /// </summary>
        /// <remarks>
        /// Search for fulfillment locations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindFulfillmentLocationsQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindFulfillmentLocationsQueryResult>> FindFulfillmentLocationsRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindFulfillmentLocationsRequest body = default(FindFulfillmentLocationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope - {GetDeliveryFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FulfillmentLocation&gt;</returns>
        System.Threading.Tasks.Task<List<FulfillmentLocation>> GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGetAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope - {GetDeliveryFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FulfillmentLocation>>> GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGetWithHttpInfoAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the availability of a fulfillment location depending on specific time for a specific scope - {GetFulfillmentAvailabilityRequest}
        /// </summary>
        /// <remarks>
        /// Get the availability of a fulfillment location depending on specific time (in store timezone) for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentAvailability</returns>
        System.Threading.Tasks.Task<FulfillmentAvailability> GetFulfillmentAvailabilityRequestScopeIdavailabiltyPostAsync(string accept, string scopeId, GetFulfillmentAvailabilityRequest body = default(GetFulfillmentAvailabilityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the availability of a fulfillment location depending on specific time for a specific scope - {GetFulfillmentAvailabilityRequest}
        /// </summary>
        /// <remarks>
        /// Get the availability of a fulfillment location depending on specific time (in store timezone) for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentAvailability)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentAvailability>> GetFulfillmentAvailabilityRequestScopeIdavailabiltyPostWithHttpInfoAsync(string accept, string scopeId, GetFulfillmentAvailabilityRequest body = default(GetFulfillmentAvailabilityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an elapsed time based on fulfillment location schedules - {GetFulfillmentLocationByIdElapsedTimeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an elapsed time based on fulfillment location schedules
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the fulfillment location.</param>
        /// <param name="startDate">The start date to determine elapsed time. (optional)</param>
        /// <param name="endDate">The end date to determine elapsed time. (optional)</param>
        /// <param name="scheduleType">The schedule type to use (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFulfillmentLocationByIdElapsedTimeResult</returns>
        System.Threading.Tasks.Task<GetFulfillmentLocationByIdElapsedTimeResult> GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGetAsync(string accept, string scopeId, string fulfillmentLocationId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string scheduleType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an elapsed time based on fulfillment location schedules - {GetFulfillmentLocationByIdElapsedTimeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an elapsed time based on fulfillment location schedules
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the fulfillment location.</param>
        /// <param name="startDate">The start date to determine elapsed time. (optional)</param>
        /// <param name="endDate">The end date to determine elapsed time. (optional)</param>
        /// <param name="scheduleType">The schedule type to use (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFulfillmentLocationByIdElapsedTimeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFulfillmentLocationByIdElapsedTimeResult>> GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string scheduleType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a fulfillment location for a specific scope - {GetFulfillmentLocationByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentLocation</returns>
        System.Threading.Tasks.Task<FulfillmentLocation> GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a fulfillment location for a specific scope - {GetFulfillmentLocationByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentLocation>> GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a time slot from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlot</returns>
        System.Threading.Tasks.Task<TimeSlot> GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a time slot from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlot)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeSlot>> GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a time slot reservation - {GetFulfillmentLocationTimeSlotReservationByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a time slot reservation
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlotReservation</returns>
        System.Threading.Tasks.Task<TimeSlotReservation> GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a time slot reservation - {GetFulfillmentLocationTimeSlotReservationByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a time slot reservation
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlotReservation)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeSlotReservation>> GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves time slot reservations - {GetFulfillmentLocationTimeSlotReservationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves time slot reservations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot to be found (if not set, all timeslot ids are retrieved).</param>
        /// <param name="reservationDate">The reservation date.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlotReservationResult</returns>
        System.Threading.Tasks.Task<TimeSlotReservationResult> GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, string slotId, DateTime reservationDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves time slot reservations - {GetFulfillmentLocationTimeSlotReservationsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves time slot reservations
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot to be found (if not set, all timeslot ids are retrieved).</param>
        /// <param name="reservationDate">The reservation date.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlotReservationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeSlotReservationResult>> GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string slotId, DateTime reservationDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves time slots from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves time slots from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TimeSlot&gt;</returns>
        System.Threading.Tasks.Task<List<TimeSlot>> GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGetAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves time slots from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves time slots from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TimeSlot&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimeSlot>>> GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of fulfillment locations for scpecific inventory locations identifiers - {GetFulfillmentLocationsByInventoryLocationIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a list of fulfillment locations for specific inventory locations identifiers
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationIds">the unique identifiers of the inventory locations.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FulfillmentLocation&gt;</returns>
        System.Threading.Tasks.Task<List<FulfillmentLocation>> GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGetAsync(string accept, string scopeId, List<string> inventoryLocationIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of fulfillment locations for scpecific inventory locations identifiers - {GetFulfillmentLocationsByInventoryLocationIdsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieves a list of fulfillment locations for specific inventory locations identifiers
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationIds">the unique identifiers of the inventory locations.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FulfillmentLocation>>> GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGetWithHttpInfoAsync(string accept, string scopeId, List<string> inventoryLocationIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve fulfillment locations for a specific scope - {GetFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations for a specific scope. The addresses are not included in the result.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FulfillmentLocation&gt;</returns>
        System.Threading.Tasks.Task<List<FulfillmentLocation>> GetFulfillmentLocationsByScopeRequestScopeIdGetAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve fulfillment locations for a specific scope - {GetFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations for a specific scope. The addresses are not included in the result.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FulfillmentLocation>>> GetFulfillmentLocationsByScopeRequestScopeIdGetWithHttpInfoAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retreive a specific store&#39;s OperatingStatus - {GetOperatingStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store&#39;s OperatingStatus
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the FulfillmentLocation (Store or other) to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperatingStatus</returns>
        System.Threading.Tasks.Task<OperatingStatus> GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGetAsync(string accept, string scopeId, string fulfillmentLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retreive a specific store&#39;s OperatingStatus - {GetOperatingStatusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store&#39;s OperatingStatus
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the FulfillmentLocation (Store or other) to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperatingStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperatingStatus>> GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve fulfillment locations supporting pickup as shipping method for a specific scope - {GetPickupFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations supporting pickup as shipping method for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FulfillmentLocation&gt;</returns>
        System.Threading.Tasks.Task<List<FulfillmentLocation>> GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGetAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve fulfillment locations supporting pickup as shipping method for a specific scope - {GetPickupFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations supporting pickup as shipping method for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FulfillmentLocation>>> GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGetWithHttpInfoAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retreive a specific store&#39;s Schedule - {GetScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store&#39;s Schedule
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the Store to retrieve.</param>
        /// <param name="scheduleType"> Gets or sets the type of the schedule. The possible values are : OpeningHours, Delivery or PickUp. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentSchedule</returns>
        System.Threading.Tasks.Task<FulfillmentSchedule> GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGetAsync(string accept, string scopeId, string fulfillmentLocationId, string scheduleType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retreive a specific store&#39;s Schedule - {GetScheduleRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specific store&#39;s Schedule
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the Store to retrieve.</param>
        /// <param name="scheduleType"> Gets or sets the type of the schedule. The possible values are : OpeningHours, Delivery or PickUp. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentSchedule>> GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string scheduleType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve fulfillment locations supporting shipping as shipping method for a specific scope - {GetShippingFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations supporting shipping as shipping method for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FulfillmentLocation&gt;</returns>
        System.Threading.Tasks.Task<List<FulfillmentLocation>> GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGetAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve fulfillment locations supporting shipping as shipping method for a specific scope - {GetShippingFulfillmentLocationsByScopeRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve fulfillment locations supporting shipping as shipping method for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FulfillmentLocation>>> GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGetWithHttpInfoAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) - {ReserveAvailabilitySlotRequest}
        /// </summary>
        /// <remarks>
        /// Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPostAsync(string accept, string fulfillmentLocationId, ReserveAvailabilitySlotRequest body = default(ReserveAvailabilitySlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) - {ReserveAvailabilitySlotRequest}
        /// </summary>
        /// <remarks>
        /// Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) 
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPostWithHttpInfoAsync(string accept, string fulfillmentLocationId, ReserveAvailabilitySlotRequest body = default(ReserveAvailabilitySlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all time slot from a fulfillment location for a specific scope and add the list of time slots - {ResetFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Delete all time slot from a fulfillment location for a specific scope and add the list of time slots
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TimeSlot&gt;</returns>
        System.Threading.Tasks.Task<List<TimeSlot>> ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreateAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, ResetFulfillmentLocationTimeSlotsRequest body = default(ResetFulfillmentLocationTimeSlotsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all time slot from a fulfillment location for a specific scope and add the list of time slots - {ResetFulfillmentLocationTimeSlotsRequest}
        /// </summary>
        /// <remarks>
        /// Delete all time slot from a fulfillment location for a specific scope and add the list of time slots
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TimeSlot&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimeSlot>>> ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, ResetFulfillmentLocationTimeSlotsRequest body = default(ResetFulfillmentLocationTimeSlotsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the inventory informations for a specified fulfillment location. - {SetFulfillmentLocationInventoryManagementRequest}
        /// </summary>
        /// <remarks>
        /// Updates the inventory details for a specified fulfillment location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetFulfillmentLocationInventoryManagementResult</returns>
        System.Threading.Tasks.Task<SetFulfillmentLocationInventoryManagementResult> SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreateAsync(string accept, string scopeId, string fulfillmentLocationId, SetFulfillmentLocationInventoryManagementRequest body = default(SetFulfillmentLocationInventoryManagementRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the inventory informations for a specified fulfillment location. - {SetFulfillmentLocationInventoryManagementRequest}
        /// </summary>
        /// <remarks>
        /// Updates the inventory details for a specified fulfillment location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetFulfillmentLocationInventoryManagementResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetFulfillmentLocationInventoryManagementResult>> SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, SetFulfillmentLocationInventoryManagementRequest body = default(SetFulfillmentLocationInventoryManagementRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a time slot from a fulfillment location for a specific scope - {UpdateFulfillmentLocationTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Updates a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlot</returns>
        System.Threading.Tasks.Task<TimeSlot> UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreateAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, UpdateFulfillmentLocationTimeSlotRequest body = default(UpdateFulfillmentLocationTimeSlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a time slot from a fulfillment location for a specific scope - {UpdateFulfillmentLocationTimeSlotRequest}
        /// </summary>
        /// <remarks>
        /// Updates a time slot from a fulfillment location for a specific scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlot)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeSlot>> UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, UpdateFulfillmentLocationTimeSlotRequest body = default(UpdateFulfillmentLocationTimeSlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a time slot reservation - {UpdateFulfillmentLocationTimeSlotReservationRequest}
        /// </summary>
        /// <remarks>
        /// Updates a time slot reservation.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlotReservation</returns>
        System.Threading.Tasks.Task<TimeSlotReservation> UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreateAsync(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, UpdateFulfillmentLocationTimeSlotReservationRequest body = default(UpdateFulfillmentLocationTimeSlotReservationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a time slot reservation - {UpdateFulfillmentLocationTimeSlotReservationRequest}
        /// </summary>
        /// <remarks>
        /// Updates a time slot reservation.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlotReservation)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeSlotReservation>> UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, UpdateFulfillmentLocationTimeSlotReservationRequest body = default(UpdateFulfillmentLocationTimeSlotReservationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFulfillmentLocationsApi : IFulfillmentLocationsApiSync, IFulfillmentLocationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FulfillmentLocationsApi : IFulfillmentLocationsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentLocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FulfillmentLocationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentLocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FulfillmentLocationsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentLocationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FulfillmentLocationsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentLocationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FulfillmentLocationsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds a time slot from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotRequest} Adds a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TimeSlot</returns>
        public TimeSlot AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotRequest body = default(AddFulfillmentLocationTimeSlotRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlot> localVarResponse = AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPostWithHttpInfo(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a time slot from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotRequest} Adds a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TimeSlot</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlot> AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPostWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotRequest body = default(AddFulfillmentLocationTimeSlotRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TimeSlot>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a time slot from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotRequest} Adds a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlot</returns>
        public async System.Threading.Tasks.Task<TimeSlot> AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPostAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotRequest body = default(AddFulfillmentLocationTimeSlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlot> localVarResponse = await AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPostWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a time slot from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotRequest} Adds a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlot)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlot>> AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotRequest body = default(AddFulfillmentLocationTimeSlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TimeSlot>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a time slot reservation for a specific time slot - {AddFulfillmentLocationTimeSlotReservationRequest} Adds a time slot reservation for a specific time slot.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TimeSlotReservation</returns>
        public TimeSlotReservation AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost(string accept, string scopeId, string fulfillmentLocationId, string slotId, AddFulfillmentLocationTimeSlotReservationRequest body = default(AddFulfillmentLocationTimeSlotReservationRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservation> localVarResponse = AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPostWithHttpInfo(accept, scopeId, fulfillmentLocationId, slotId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a time slot reservation for a specific time slot - {AddFulfillmentLocationTimeSlotReservationRequest} Adds a time slot reservation for a specific time slot.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TimeSlotReservation</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservation> AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPostWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string slotId, AddFulfillmentLocationTimeSlotReservationRequest body = default(AddFulfillmentLocationTimeSlotReservationRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost");

            // verify the required parameter 'slotId' is set
            if (slotId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TimeSlotReservation>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/{SlotId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a time slot reservation for a specific time slot - {AddFulfillmentLocationTimeSlotReservationRequest} Adds a time slot reservation for a specific time slot.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlotReservation</returns>
        public async System.Threading.Tasks.Task<TimeSlotReservation> AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPostAsync(string accept, string scopeId, string fulfillmentLocationId, string slotId, AddFulfillmentLocationTimeSlotReservationRequest body = default(AddFulfillmentLocationTimeSlotReservationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservation> localVarResponse = await AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPostWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, slotId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a time slot reservation for a specific time slot - {AddFulfillmentLocationTimeSlotReservationRequest} Adds a time slot reservation for a specific time slot.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlotReservation)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservation>> AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string slotId, AddFulfillmentLocationTimeSlotReservationRequest body = default(AddFulfillmentLocationTimeSlotReservationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost");

            // verify the required parameter 'slotId' is set
            if (slotId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TimeSlotReservation>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/{SlotId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a list of time slots from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotsRequest} Adds a list of time slots from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;TimeSlot&gt;</returns>
        public List<TimeSlot> AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotsRequest body = default(AddFulfillmentLocationTimeSlotsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TimeSlot>> localVarResponse = AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPostWithHttpInfo(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a list of time slots from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotsRequest} Adds a list of time slots from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TimeSlot&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TimeSlot>> AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPostWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotsRequest body = default(AddFulfillmentLocationTimeSlotsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<TimeSlot>>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/several", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a list of time slots from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotsRequest} Adds a list of time slots from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TimeSlot&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimeSlot>> AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPostAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotsRequest body = default(AddFulfillmentLocationTimeSlotsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TimeSlot>> localVarResponse = await AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPostWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a list of time slots from a fulfillment location for a specific scope - {AddFulfillmentLocationTimeSlotsRequest} Adds a list of time slots from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TimeSlot&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TimeSlot>>> AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPostWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, AddFulfillmentLocationTimeSlotsRequest body = default(AddFulfillmentLocationTimeSlotsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TimeSlot>>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/several", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsseveralPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Calculate the delay for a list of fulfillment locations - {CalculateFulfillmentLocationsDelayRequest} Calculate the delay for a list of fulfillment locations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentLocationsDelayCalculationResult</returns>
        public FulfillmentLocationsDelayCalculationResult CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPost(string accept, string scopeId, CalculateFulfillmentLocationsDelayRequest body = default(CalculateFulfillmentLocationsDelayRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentLocationsDelayCalculationResult> localVarResponse = CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate the delay for a list of fulfillment locations - {CalculateFulfillmentLocationsDelayRequest} Calculate the delay for a list of fulfillment locations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentLocationsDelayCalculationResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentLocationsDelayCalculationResult> CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPostWithHttpInfo(string accept, string scopeId, CalculateFulfillmentLocationsDelayRequest body = default(CalculateFulfillmentLocationsDelayRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentLocationsDelayCalculationResult>("/fulfillmentLocations/{ScopeId}/calculateDelay", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Calculate the delay for a list of fulfillment locations - {CalculateFulfillmentLocationsDelayRequest} Calculate the delay for a list of fulfillment locations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentLocationsDelayCalculationResult</returns>
        public async System.Threading.Tasks.Task<FulfillmentLocationsDelayCalculationResult> CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPostAsync(string accept, string scopeId, CalculateFulfillmentLocationsDelayRequest body = default(CalculateFulfillmentLocationsDelayRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentLocationsDelayCalculationResult> localVarResponse = await CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate the delay for a list of fulfillment locations - {CalculateFulfillmentLocationsDelayRequest} Calculate the delay for a list of fulfillment locations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentLocationsDelayCalculationResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentLocationsDelayCalculationResult>> CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPostWithHttpInfoAsync(string accept, string scopeId, CalculateFulfillmentLocationsDelayRequest body = default(CalculateFulfillmentLocationsDelayRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentLocationsDelayCalculationResult>("/fulfillmentLocations/{ScopeId}/calculateDelay", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CalculateFulfillmentLocationsDelayRequestScopeIdcalculateDelayPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Combines a schedule and slot plan to calculate the availability of slots for the specified dates. - {CalculateScheduleAvailabilitySlotsRequest} Combines a schedule and slot plan to calculate the availability of slots for the specified dates.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>DayAvailabilityResult</returns>
        public DayAvailabilityResult CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePost(string accept, string fulfillmentLocationId, string fulfillmentType, CalculateScheduleAvailabilitySlotsRequest body = default(CalculateScheduleAvailabilitySlotsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DayAvailabilityResult> localVarResponse = CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePostWithHttpInfo(accept, fulfillmentLocationId, fulfillmentType, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Combines a schedule and slot plan to calculate the availability of slots for the specified dates. - {CalculateScheduleAvailabilitySlotsRequest} Combines a schedule and slot plan to calculate the availability of slots for the specified dates.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DayAvailabilityResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DayAvailabilityResult> CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePostWithHttpInfo(string accept, string fulfillmentLocationId, string fulfillmentType, CalculateScheduleAvailabilitySlotsRequest body = default(CalculateScheduleAvailabilitySlotsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePost");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePost");

            // verify the required parameter 'fulfillmentType' is set
            if (fulfillmentType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentType' when calling FulfillmentLocationsApi->CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DayAvailabilityResult>("/fulfillmentLocations/{FulfillmentLocationId}/{FulfillmentType}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Combines a schedule and slot plan to calculate the availability of slots for the specified dates. - {CalculateScheduleAvailabilitySlotsRequest} Combines a schedule and slot plan to calculate the availability of slots for the specified dates.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DayAvailabilityResult</returns>
        public async System.Threading.Tasks.Task<DayAvailabilityResult> CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePostAsync(string accept, string fulfillmentLocationId, string fulfillmentType, CalculateScheduleAvailabilitySlotsRequest body = default(CalculateScheduleAvailabilitySlotsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DayAvailabilityResult> localVarResponse = await CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePostWithHttpInfoAsync(accept, fulfillmentLocationId, fulfillmentType, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Combines a schedule and slot plan to calculate the availability of slots for the specified dates. - {CalculateScheduleAvailabilitySlotsRequest} Combines a schedule and slot plan to calculate the availability of slots for the specified dates.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DayAvailabilityResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<DayAvailabilityResult>> CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePostWithHttpInfoAsync(string accept, string fulfillmentLocationId, string fulfillmentType, CalculateScheduleAvailabilitySlotsRequest body = default(CalculateScheduleAvailabilitySlotsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePost");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePost");

            // verify the required parameter 'fulfillmentType' is set
            if (fulfillmentType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentType' when calling FulfillmentLocationsApi->CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DayAvailabilityResult>("/fulfillmentLocations/{FulfillmentLocationId}/{FulfillmentType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CalculateScheduleAvailabilitySlotsRequestFulfillmentLocationIdFulfillmentTypePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks the availability of a specific slot time on a specific date using the calculated schedule availability. - {CheckAvailabilitySlotRequest} Checks the availability of a specific slot time on a specific date using the calculated schedule availability.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePost(string accept, string fulfillmentLocationId, string fulfillmentType, CheckAvailabilitySlotRequest body = default(CheckAvailabilitySlotRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePostWithHttpInfo(accept, fulfillmentLocationId, fulfillmentType, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks the availability of a specific slot time on a specific date using the calculated schedule availability. - {CheckAvailabilitySlotRequest} Checks the availability of a specific slot time on a specific date using the calculated schedule availability.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePostWithHttpInfo(string accept, string fulfillmentLocationId, string fulfillmentType, CheckAvailabilitySlotRequest body = default(CheckAvailabilitySlotRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePost");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePost");

            // verify the required parameter 'fulfillmentType' is set
            if (fulfillmentType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentType' when calling FulfillmentLocationsApi->CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/fulfillmentLocations/forSlot/{FulfillmentLocationId}/{FulfillmentType}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks the availability of a specific slot time on a specific date using the calculated schedule availability. - {CheckAvailabilitySlotRequest} Checks the availability of a specific slot time on a specific date using the calculated schedule availability.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePostAsync(string accept, string fulfillmentLocationId, string fulfillmentType, CheckAvailabilitySlotRequest body = default(CheckAvailabilitySlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = await CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePostWithHttpInfoAsync(accept, fulfillmentLocationId, fulfillmentType, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks the availability of a specific slot time on a specific date using the calculated schedule availability. - {CheckAvailabilitySlotRequest} Checks the availability of a specific slot time on a specific date using the calculated schedule availability.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string>> CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePostWithHttpInfoAsync(string accept, string fulfillmentLocationId, string fulfillmentType, CheckAvailabilitySlotRequest body = default(CheckAvailabilitySlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePost");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePost");

            // verify the required parameter 'fulfillmentType' is set
            if (fulfillmentType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentType' when calling FulfillmentLocationsApi->CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/fulfillmentLocations/forSlot/{FulfillmentLocationId}/{FulfillmentType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckAvailabilitySlotRequestforSlotFulfillmentLocationIdFulfillmentTypePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotRequest} Deletes a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <returns></returns>
        public void DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId)
        {
            DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDeleteWithHttpInfo(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, slotId);
        }

        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotRequest} Deletes a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDeleteWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete");

            // verify the required parameter 'slotId' is set
            if (slotId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/{SlotId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotRequest} Deletes a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDeleteAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDeleteWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, slotId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotRequest} Deletes a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDeleteWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete");

            // verify the required parameter 'slotId' is set
            if (slotId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/{SlotId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a time slot reservation - {DeleteFulfillmentLocationTimeSlotReservationRequest} Deletes a time slot reservation
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <returns></returns>
        public void DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string))
        {
            DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDeleteWithHttpInfo(accept, scopeId, fulfillmentLocationId, slotReservationId, slotId);
        }

        /// <summary>
        /// Deletes a time slot reservation - {DeleteFulfillmentLocationTimeSlotReservationRequest} Deletes a time slot reservation
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDeleteWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete");

            // verify the required parameter 'slotReservationId' is set
            if (slotReservationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotReservationId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotReservationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotReservationId)); // path parameter
            if (slotId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SlotId", slotId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/byId/{SlotReservationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a time slot reservation - {DeleteFulfillmentLocationTimeSlotReservationRequest} Deletes a time slot reservation
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDeleteAsync(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDeleteWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, slotReservationId, slotId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a time slot reservation - {DeleteFulfillmentLocationTimeSlotReservationRequest} Deletes a time slot reservation
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDeleteWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete");

            // verify the required parameter 'slotReservationId' is set
            if (slotReservationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotReservationId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotReservationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotReservationId)); // path parameter
            if (slotId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SlotId", slotId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/byId/{SlotReservationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotsRequest} Deletes all time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <returns></returns>
        public void DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType)
        {
            DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDeleteWithHttpInfo(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType);
        }

        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotsRequest} Deletes all time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDeleteWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotsRequest} Deletes all time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDeleteAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDeleteWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a time slot from a fulfillment location for a specific scope - {DeleteFulfillmentLocationTimeSlotsRequest} Deletes all time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDeleteWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for fulfillment locations - {FindFulfillmentLocationsRequest} Search for fulfillment locations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindFulfillmentLocationsQueryResult</returns>
        public FindFulfillmentLocationsQueryResult FindFulfillmentLocationsRequestScopeIdfindPost(string accept, string scopeId, FindFulfillmentLocationsRequest body = default(FindFulfillmentLocationsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindFulfillmentLocationsQueryResult> localVarResponse = FindFulfillmentLocationsRequestScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for fulfillment locations - {FindFulfillmentLocationsRequest} Search for fulfillment locations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindFulfillmentLocationsQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindFulfillmentLocationsQueryResult> FindFulfillmentLocationsRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindFulfillmentLocationsRequest body = default(FindFulfillmentLocationsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->FindFulfillmentLocationsRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->FindFulfillmentLocationsRequestScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindFulfillmentLocationsQueryResult>("/fulfillmentLocations/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentLocationsRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for fulfillment locations - {FindFulfillmentLocationsRequest} Search for fulfillment locations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindFulfillmentLocationsQueryResult</returns>
        public async System.Threading.Tasks.Task<FindFulfillmentLocationsQueryResult> FindFulfillmentLocationsRequestScopeIdfindPostAsync(string accept, string scopeId, FindFulfillmentLocationsRequest body = default(FindFulfillmentLocationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindFulfillmentLocationsQueryResult> localVarResponse = await FindFulfillmentLocationsRequestScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for fulfillment locations - {FindFulfillmentLocationsRequest} Search for fulfillment locations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The scope to use to process the request</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindFulfillmentLocationsQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindFulfillmentLocationsQueryResult>> FindFulfillmentLocationsRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindFulfillmentLocationsRequest body = default(FindFulfillmentLocationsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->FindFulfillmentLocationsRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->FindFulfillmentLocationsRequestScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FindFulfillmentLocationsQueryResult>("/fulfillmentLocations/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFulfillmentLocationsRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope - {GetDeliveryFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>List&lt;FulfillmentLocation&gt;</returns>
        public List<FulfillmentLocation> GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGet(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> localVarResponse = GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGetWithHttpInfo(accept, scopeId, includeSchedules, includeChildScopes, onlyActive, onlyInventoryEnabled, includeAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope - {GetDeliveryFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>ApiResponse of List&lt;FulfillmentLocation&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGetWithHttpInfo(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeChildScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildScopes", includeChildScopes));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyActive", onlyActive));
            }
            if (onlyInventoryEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyInventoryEnabled", onlyInventoryEnabled));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FulfillmentLocation>>("/fulfillmentLocations/{ScopeId}/delivery", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope - {GetDeliveryFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FulfillmentLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<FulfillmentLocation>> GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGetAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> localVarResponse = await GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGetWithHttpInfoAsync(accept, scopeId, includeSchedules, includeChildScopes, onlyActive, onlyInventoryEnabled, includeAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope - {GetDeliveryFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations supporting delivery as Fulfillment method for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>>> GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGetWithHttpInfoAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeChildScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildScopes", includeChildScopes));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyActive", onlyActive));
            }
            if (onlyInventoryEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyInventoryEnabled", onlyInventoryEnabled));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FulfillmentLocation>>("/fulfillmentLocations/{ScopeId}/delivery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeliveryFulfillmentLocationsByScopeRequestScopeIddeliveryGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the availability of a fulfillment location depending on specific time for a specific scope - {GetFulfillmentAvailabilityRequest} Get the availability of a fulfillment location depending on specific time (in store timezone) for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FulfillmentAvailability</returns>
        public FulfillmentAvailability GetFulfillmentAvailabilityRequestScopeIdavailabiltyPost(string accept, string scopeId, GetFulfillmentAvailabilityRequest body = default(GetFulfillmentAvailabilityRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentAvailability> localVarResponse = GetFulfillmentAvailabilityRequestScopeIdavailabiltyPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the availability of a fulfillment location depending on specific time for a specific scope - {GetFulfillmentAvailabilityRequest} Get the availability of a fulfillment location depending on specific time (in store timezone) for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FulfillmentAvailability</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentAvailability> GetFulfillmentAvailabilityRequestScopeIdavailabiltyPostWithHttpInfo(string accept, string scopeId, GetFulfillmentAvailabilityRequest body = default(GetFulfillmentAvailabilityRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentAvailabilityRequestScopeIdavailabiltyPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentAvailabilityRequestScopeIdavailabiltyPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentAvailability>("/fulfillmentLocations/{ScopeId}/availabilty", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentAvailabilityRequestScopeIdavailabiltyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the availability of a fulfillment location depending on specific time for a specific scope - {GetFulfillmentAvailabilityRequest} Get the availability of a fulfillment location depending on specific time (in store timezone) for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentAvailability</returns>
        public async System.Threading.Tasks.Task<FulfillmentAvailability> GetFulfillmentAvailabilityRequestScopeIdavailabiltyPostAsync(string accept, string scopeId, GetFulfillmentAvailabilityRequest body = default(GetFulfillmentAvailabilityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentAvailability> localVarResponse = await GetFulfillmentAvailabilityRequestScopeIdavailabiltyPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the availability of a fulfillment location depending on specific time for a specific scope - {GetFulfillmentAvailabilityRequest} Get the availability of a fulfillment location depending on specific time (in store timezone) for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentAvailability)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentAvailability>> GetFulfillmentAvailabilityRequestScopeIdavailabiltyPostWithHttpInfoAsync(string accept, string scopeId, GetFulfillmentAvailabilityRequest body = default(GetFulfillmentAvailabilityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentAvailabilityRequestScopeIdavailabiltyPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentAvailabilityRequestScopeIdavailabiltyPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FulfillmentAvailability>("/fulfillmentLocations/{ScopeId}/availabilty", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentAvailabilityRequestScopeIdavailabiltyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an elapsed time based on fulfillment location schedules - {GetFulfillmentLocationByIdElapsedTimeRequest} Retrieve an elapsed time based on fulfillment location schedules
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the fulfillment location.</param>
        /// <param name="startDate">The start date to determine elapsed time. (optional)</param>
        /// <param name="endDate">The end date to determine elapsed time. (optional)</param>
        /// <param name="scheduleType">The schedule type to use (optional)</param>
        /// <returns>GetFulfillmentLocationByIdElapsedTimeResult</returns>
        public GetFulfillmentLocationByIdElapsedTimeResult GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGet(string accept, string scopeId, string fulfillmentLocationId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string scheduleType = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFulfillmentLocationByIdElapsedTimeResult> localVarResponse = GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGetWithHttpInfo(accept, scopeId, fulfillmentLocationId, startDate, endDate, scheduleType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an elapsed time based on fulfillment location schedules - {GetFulfillmentLocationByIdElapsedTimeRequest} Retrieve an elapsed time based on fulfillment location schedules
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the fulfillment location.</param>
        /// <param name="startDate">The start date to determine elapsed time. (optional)</param>
        /// <param name="endDate">The end date to determine elapsed time. (optional)</param>
        /// <param name="scheduleType">The schedule type to use (optional)</param>
        /// <returns>ApiResponse of GetFulfillmentLocationByIdElapsedTimeResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFulfillmentLocationByIdElapsedTimeResult> GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string scheduleType = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "EndDate", endDate));
            }
            if (scheduleType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScheduleType", scheduleType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetFulfillmentLocationByIdElapsedTimeResult>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/elapsedTime", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an elapsed time based on fulfillment location schedules - {GetFulfillmentLocationByIdElapsedTimeRequest} Retrieve an elapsed time based on fulfillment location schedules
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the fulfillment location.</param>
        /// <param name="startDate">The start date to determine elapsed time. (optional)</param>
        /// <param name="endDate">The end date to determine elapsed time. (optional)</param>
        /// <param name="scheduleType">The schedule type to use (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFulfillmentLocationByIdElapsedTimeResult</returns>
        public async System.Threading.Tasks.Task<GetFulfillmentLocationByIdElapsedTimeResult> GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGetAsync(string accept, string scopeId, string fulfillmentLocationId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string scheduleType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFulfillmentLocationByIdElapsedTimeResult> localVarResponse = await GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGetWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, startDate, endDate, scheduleType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an elapsed time based on fulfillment location schedules - {GetFulfillmentLocationByIdElapsedTimeRequest} Retrieve an elapsed time based on fulfillment location schedules
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the fulfillment location.</param>
        /// <param name="startDate">The start date to determine elapsed time. (optional)</param>
        /// <param name="endDate">The end date to determine elapsed time. (optional)</param>
        /// <param name="scheduleType">The schedule type to use (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFulfillmentLocationByIdElapsedTimeResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetFulfillmentLocationByIdElapsedTimeResult>> GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string scheduleType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "EndDate", endDate));
            }
            if (scheduleType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScheduleType", scheduleType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetFulfillmentLocationByIdElapsedTimeResult>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/elapsedTime", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationByIdElapsedTimeRequestScopeIdFulfillmentLocationIdelapsedTimeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a fulfillment location for a specific scope - {GetFulfillmentLocationByIdRequest} Retrieve a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <returns>FulfillmentLocation</returns>
        public FulfillmentLocation GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGet(string accept, string scopeId, string fulfillmentLocationId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentLocation> localVarResponse = GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGetWithHttpInfo(accept, scopeId, fulfillmentLocationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a fulfillment location for a specific scope - {GetFulfillmentLocationByIdRequest} Retrieve a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <returns>ApiResponse of FulfillmentLocation</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentLocation> GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentLocation>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a fulfillment location for a specific scope - {GetFulfillmentLocationByIdRequest} Retrieve a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentLocation</returns>
        public async System.Threading.Tasks.Task<FulfillmentLocation> GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentLocation> localVarResponse = await GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGetWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a fulfillment location for a specific scope - {GetFulfillmentLocationByIdRequest} Retrieve a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentLocation)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentLocation>> GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentLocation>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationByIdRequestScopeIdFulfillmentLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a time slot from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotByIdRequest} Retrieves a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <returns>TimeSlot</returns>
        public TimeSlot GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlot> localVarResponse = GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGetWithHttpInfo(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, slotId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a time slot from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotByIdRequest} Retrieves a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <returns>ApiResponse of TimeSlot</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlot> GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet");

            // verify the required parameter 'slotId' is set
            if (slotId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<TimeSlot>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/{SlotId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a time slot from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotByIdRequest} Retrieves a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlot</returns>
        public async System.Threading.Tasks.Task<TimeSlot> GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlot> localVarResponse = await GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGetWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, slotId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a time slot from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotByIdRequest} Retrieves a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlot)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlot>> GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet");

            // verify the required parameter 'slotId' is set
            if (slotId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TimeSlot>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/{SlotId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationTimeSlotByIdRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a time slot reservation - {GetFulfillmentLocationTimeSlotReservationByIdRequest} Retrieves a time slot reservation
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <returns>TimeSlotReservation</returns>
        public TimeSlotReservation GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservation> localVarResponse = GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGetWithHttpInfo(accept, scopeId, fulfillmentLocationId, slotReservationId, slotId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a time slot reservation - {GetFulfillmentLocationTimeSlotReservationByIdRequest} Retrieves a time slot reservation
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <returns>ApiResponse of TimeSlotReservation</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservation> GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet");

            // verify the required parameter 'slotReservationId' is set
            if (slotReservationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotReservationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotReservationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotReservationId)); // path parameter
            if (slotId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SlotId", slotId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<TimeSlotReservation>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/byId/{SlotReservationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a time slot reservation - {GetFulfillmentLocationTimeSlotReservationByIdRequest} Retrieves a time slot reservation
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlotReservation</returns>
        public async System.Threading.Tasks.Task<TimeSlotReservation> GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservation> localVarResponse = await GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGetWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, slotReservationId, slotId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a time slot reservation - {GetFulfillmentLocationTimeSlotReservationByIdRequest} Retrieves a time slot reservation
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="slotId">The unique identifier of the time slot. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlotReservation)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservation>> GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, string slotId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet");

            // verify the required parameter 'slotReservationId' is set
            if (slotReservationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotReservationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotReservationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotReservationId)); // path parameter
            if (slotId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SlotId", slotId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TimeSlotReservation>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/byId/{SlotReservationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationTimeSlotReservationByIdRequestScopeIdFulfillmentLocationIdreservationsbyIdSlotReservationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves time slot reservations - {GetFulfillmentLocationTimeSlotReservationsRequest} Retrieves time slot reservations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot to be found (if not set, all timeslot ids are retrieved).</param>
        /// <param name="reservationDate">The reservation date.</param>
        /// <returns>TimeSlotReservationResult</returns>
        public TimeSlotReservationResult GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet(string accept, string scopeId, string fulfillmentLocationId, string slotId, DateTime reservationDate)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservationResult> localVarResponse = GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGetWithHttpInfo(accept, scopeId, fulfillmentLocationId, slotId, reservationDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves time slot reservations - {GetFulfillmentLocationTimeSlotReservationsRequest} Retrieves time slot reservations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot to be found (if not set, all timeslot ids are retrieved).</param>
        /// <param name="reservationDate">The reservation date.</param>
        /// <returns>ApiResponse of TimeSlotReservationResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservationResult> GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string slotId, DateTime reservationDate)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet");

            // verify the required parameter 'slotId' is set
            if (slotId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ReservationDate", reservationDate));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<TimeSlotReservationResult>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/{SlotId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves time slot reservations - {GetFulfillmentLocationTimeSlotReservationsRequest} Retrieves time slot reservations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot to be found (if not set, all timeslot ids are retrieved).</param>
        /// <param name="reservationDate">The reservation date.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlotReservationResult</returns>
        public async System.Threading.Tasks.Task<TimeSlotReservationResult> GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, string slotId, DateTime reservationDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservationResult> localVarResponse = await GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGetWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, slotId, reservationDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves time slot reservations - {GetFulfillmentLocationTimeSlotReservationsRequest} Retrieves time slot reservations
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotId">The unique identifier of the time slot to be found (if not set, all timeslot ids are retrieved).</param>
        /// <param name="reservationDate">The reservation date.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlotReservationResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservationResult>> GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string slotId, DateTime reservationDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet");

            // verify the required parameter 'slotId' is set
            if (slotId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ReservationDate", reservationDate));
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TimeSlotReservationResult>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/{SlotId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationTimeSlotReservationsRequestScopeIdFulfillmentLocationIdreservationsSlotIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves time slots from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotsRequest} Retrieves time slots from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <returns>List&lt;TimeSlot&gt;</returns>
        public List<TimeSlot> GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TimeSlot>> localVarResponse = GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGetWithHttpInfo(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves time slots from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotsRequest} Retrieves time slots from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <returns>ApiResponse of List&lt;TimeSlot&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TimeSlot>> GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TimeSlot>>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves time slots from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotsRequest} Retrieves time slots from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TimeSlot&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimeSlot>> GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGetAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TimeSlot>> localVarResponse = await GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGetWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves time slots from a fulfillment location for a specific scope - {GetFulfillmentLocationTimeSlotsRequest} Retrieves time slots from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TimeSlot&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TimeSlot>>> GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TimeSlot>>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of fulfillment locations for scpecific inventory locations identifiers - {GetFulfillmentLocationsByInventoryLocationIdsRequest} Retrieves a list of fulfillment locations for specific inventory locations identifiers
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationIds">the unique identifiers of the inventory locations.</param>
        /// <returns>List&lt;FulfillmentLocation&gt;</returns>
        public List<FulfillmentLocation> GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGet(string accept, string scopeId, List<string> inventoryLocationIds)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> localVarResponse = GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGetWithHttpInfo(accept, scopeId, inventoryLocationIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of fulfillment locations for scpecific inventory locations identifiers - {GetFulfillmentLocationsByInventoryLocationIdsRequest} Retrieves a list of fulfillment locations for specific inventory locations identifiers
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationIds">the unique identifiers of the inventory locations.</param>
        /// <returns>ApiResponse of List&lt;FulfillmentLocation&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGetWithHttpInfo(string accept, string scopeId, List<string> inventoryLocationIds)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGet");

            // verify the required parameter 'inventoryLocationIds' is set
            if (inventoryLocationIds == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationIds' when calling FulfillmentLocationsApi->GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationIds", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationIds)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FulfillmentLocation>>("/fulfillmentLocations/{ScopeId}/{InventoryLocationIds}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of fulfillment locations for scpecific inventory locations identifiers - {GetFulfillmentLocationsByInventoryLocationIdsRequest} Retrieves a list of fulfillment locations for specific inventory locations identifiers
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationIds">the unique identifiers of the inventory locations.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FulfillmentLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<FulfillmentLocation>> GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGetAsync(string accept, string scopeId, List<string> inventoryLocationIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> localVarResponse = await GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGetWithHttpInfoAsync(accept, scopeId, inventoryLocationIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of fulfillment locations for scpecific inventory locations identifiers - {GetFulfillmentLocationsByInventoryLocationIdsRequest} Retrieves a list of fulfillment locations for specific inventory locations identifiers
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationIds">the unique identifiers of the inventory locations.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>>> GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGetWithHttpInfoAsync(string accept, string scopeId, List<string> inventoryLocationIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGet");

            // verify the required parameter 'inventoryLocationIds' is set
            if (inventoryLocationIds == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationIds' when calling FulfillmentLocationsApi->GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationIds", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationIds)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FulfillmentLocation>>("/fulfillmentLocations/{ScopeId}/{InventoryLocationIds}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationsByInventoryLocationIdsRequestScopeIdInventoryLocationIdsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve fulfillment locations for a specific scope - {GetFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations for a specific scope. The addresses are not included in the result.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>List&lt;FulfillmentLocation&gt;</returns>
        public List<FulfillmentLocation> GetFulfillmentLocationsByScopeRequestScopeIdGet(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> localVarResponse = GetFulfillmentLocationsByScopeRequestScopeIdGetWithHttpInfo(accept, scopeId, includeSchedules, includeChildScopes, onlyActive, onlyInventoryEnabled, includeAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve fulfillment locations for a specific scope - {GetFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations for a specific scope. The addresses are not included in the result.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>ApiResponse of List&lt;FulfillmentLocation&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> GetFulfillmentLocationsByScopeRequestScopeIdGetWithHttpInfo(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationsByScopeRequestScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationsByScopeRequestScopeIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeChildScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildScopes", includeChildScopes));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyActive", onlyActive));
            }
            if (onlyInventoryEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyInventoryEnabled", onlyInventoryEnabled));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FulfillmentLocation>>("/fulfillmentLocations/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationsByScopeRequestScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve fulfillment locations for a specific scope - {GetFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations for a specific scope. The addresses are not included in the result.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FulfillmentLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<FulfillmentLocation>> GetFulfillmentLocationsByScopeRequestScopeIdGetAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> localVarResponse = await GetFulfillmentLocationsByScopeRequestScopeIdGetWithHttpInfoAsync(accept, scopeId, includeSchedules, includeChildScopes, onlyActive, onlyInventoryEnabled, includeAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve fulfillment locations for a specific scope - {GetFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations for a specific scope. The addresses are not included in the result.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>>> GetFulfillmentLocationsByScopeRequestScopeIdGetWithHttpInfoAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetFulfillmentLocationsByScopeRequestScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetFulfillmentLocationsByScopeRequestScopeIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeChildScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildScopes", includeChildScopes));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyActive", onlyActive));
            }
            if (onlyInventoryEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyInventoryEnabled", onlyInventoryEnabled));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FulfillmentLocation>>("/fulfillmentLocations/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFulfillmentLocationsByScopeRequestScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retreive a specific store&#39;s OperatingStatus - {GetOperatingStatusRequest} Retrieve a specific store&#39;s OperatingStatus
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the FulfillmentLocation (Store or other) to retrieve.</param>
        /// <returns>OperatingStatus</returns>
        public OperatingStatus GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGet(string accept, string scopeId, string fulfillmentLocationId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OperatingStatus> localVarResponse = GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGetWithHttpInfo(accept, scopeId, fulfillmentLocationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retreive a specific store&#39;s OperatingStatus - {GetOperatingStatusRequest} Retrieve a specific store&#39;s OperatingStatus
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the FulfillmentLocation (Store or other) to retrieve.</param>
        /// <returns>ApiResponse of OperatingStatus</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OperatingStatus> GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<OperatingStatus>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/operatingStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retreive a specific store&#39;s OperatingStatus - {GetOperatingStatusRequest} Retrieve a specific store&#39;s OperatingStatus
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the FulfillmentLocation (Store or other) to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperatingStatus</returns>
        public async System.Threading.Tasks.Task<OperatingStatus> GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGetAsync(string accept, string scopeId, string fulfillmentLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OperatingStatus> localVarResponse = await GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGetWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retreive a specific store&#39;s OperatingStatus - {GetOperatingStatusRequest} Retrieve a specific store&#39;s OperatingStatus
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the FulfillmentLocation (Store or other) to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperatingStatus)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<OperatingStatus>> GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OperatingStatus>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/operatingStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOperatingStatusRequestScopeIdFulfillmentLocationIdoperatingStatusGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve fulfillment locations supporting pickup as shipping method for a specific scope - {GetPickupFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations supporting pickup as shipping method for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>List&lt;FulfillmentLocation&gt;</returns>
        public List<FulfillmentLocation> GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGet(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> localVarResponse = GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGetWithHttpInfo(accept, scopeId, includeSchedules, includeChildScopes, onlyActive, onlyInventoryEnabled, includeAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve fulfillment locations supporting pickup as shipping method for a specific scope - {GetPickupFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations supporting pickup as shipping method for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>ApiResponse of List&lt;FulfillmentLocation&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGetWithHttpInfo(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeChildScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildScopes", includeChildScopes));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyActive", onlyActive));
            }
            if (onlyInventoryEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyInventoryEnabled", onlyInventoryEnabled));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FulfillmentLocation>>("/fulfillmentLocations/{ScopeId}/pickup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve fulfillment locations supporting pickup as shipping method for a specific scope - {GetPickupFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations supporting pickup as shipping method for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FulfillmentLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<FulfillmentLocation>> GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGetAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> localVarResponse = await GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGetWithHttpInfoAsync(accept, scopeId, includeSchedules, includeChildScopes, onlyActive, onlyInventoryEnabled, includeAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve fulfillment locations supporting pickup as shipping method for a specific scope - {GetPickupFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations supporting pickup as shipping method for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>>> GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGetWithHttpInfoAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeChildScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildScopes", includeChildScopes));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyActive", onlyActive));
            }
            if (onlyInventoryEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyInventoryEnabled", onlyInventoryEnabled));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FulfillmentLocation>>("/fulfillmentLocations/{ScopeId}/pickup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPickupFulfillmentLocationsByScopeRequestScopeIdpickupGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retreive a specific store&#39;s Schedule - {GetScheduleRequest} Retrieve a specific store&#39;s Schedule
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the Store to retrieve.</param>
        /// <param name="scheduleType"> Gets or sets the type of the schedule. The possible values are : OpeningHours, Delivery or PickUp. (optional)</param>
        /// <returns>FulfillmentSchedule</returns>
        public FulfillmentSchedule GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGet(string accept, string scopeId, string fulfillmentLocationId, string scheduleType = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSchedule> localVarResponse = GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGetWithHttpInfo(accept, scopeId, fulfillmentLocationId, scheduleType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retreive a specific store&#39;s Schedule - {GetScheduleRequest} Retrieve a specific store&#39;s Schedule
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the Store to retrieve.</param>
        /// <param name="scheduleType"> Gets or sets the type of the schedule. The possible values are : OpeningHours, Delivery or PickUp. (optional)</param>
        /// <returns>ApiResponse of FulfillmentSchedule</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSchedule> GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string scheduleType = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            if (scheduleType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScheduleType", scheduleType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FulfillmentSchedule>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retreive a specific store&#39;s Schedule - {GetScheduleRequest} Retrieve a specific store&#39;s Schedule
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the Store to retrieve.</param>
        /// <param name="scheduleType"> Gets or sets the type of the schedule. The possible values are : OpeningHours, Delivery or PickUp. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentSchedule</returns>
        public async System.Threading.Tasks.Task<FulfillmentSchedule> GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGetAsync(string accept, string scopeId, string fulfillmentLocationId, string scheduleType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSchedule> localVarResponse = await GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGetWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, scheduleType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retreive a specific store&#39;s Schedule - {GetScheduleRequest} Retrieve a specific store&#39;s Schedule
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">The unique identifier of the Store to retrieve.</param>
        /// <param name="scheduleType"> Gets or sets the type of the schedule. The possible values are : OpeningHours, Delivery or PickUp. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentSchedule)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FulfillmentSchedule>> GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string scheduleType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            if (scheduleType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ScheduleType", scheduleType));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FulfillmentSchedule>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/schedule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScheduleRequestScopeIdFulfillmentLocationIdscheduleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve fulfillment locations supporting shipping as shipping method for a specific scope - {GetShippingFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations supporting shipping as shipping method for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>List&lt;FulfillmentLocation&gt;</returns>
        public List<FulfillmentLocation> GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGet(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> localVarResponse = GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGetWithHttpInfo(accept, scopeId, includeSchedules, includeChildScopes, onlyActive, onlyInventoryEnabled, includeAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve fulfillment locations supporting shipping as shipping method for a specific scope - {GetShippingFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations supporting shipping as shipping method for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <returns>ApiResponse of List&lt;FulfillmentLocation&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGetWithHttpInfo(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeChildScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildScopes", includeChildScopes));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyActive", onlyActive));
            }
            if (onlyInventoryEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyInventoryEnabled", onlyInventoryEnabled));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FulfillmentLocation>>("/fulfillmentLocations/{ScopeId}/shipping", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve fulfillment locations supporting shipping as shipping method for a specific scope - {GetShippingFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations supporting shipping as shipping method for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FulfillmentLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<FulfillmentLocation>> GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGetAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>> localVarResponse = await GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGetWithHttpInfoAsync(accept, scopeId, includeSchedules, includeChildScopes, onlyActive, onlyInventoryEnabled, includeAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve fulfillment locations supporting shipping as shipping method for a specific scope - {GetShippingFulfillmentLocationsByScopeRequest} Retrieve fulfillment locations supporting shipping as shipping method for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the fulfillment location. (optional)</param>
        /// <param name="includeChildScopes">Includes the results for the child scopes. (optional)</param>
        /// <param name="onlyActive">Filter the results to return only active. (optional)</param>
        /// <param name="onlyInventoryEnabled">Filter the results to return only inventory enabled. (optional)</param>
        /// <param name="includeAddresses">Specifies whether or not to load addresses of the fulfillment location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FulfillmentLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<FulfillmentLocation>>> GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGetWithHttpInfoAsync(string accept, string scopeId, bool? includeSchedules = default(bool?), bool? includeChildScopes = default(bool?), bool? onlyActive = default(bool?), bool? onlyInventoryEnabled = default(bool?), bool? includeAddresses = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (includeSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeSchedules", includeSchedules));
            }
            if (includeChildScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildScopes", includeChildScopes));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyActive", onlyActive));
            }
            if (onlyInventoryEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OnlyInventoryEnabled", onlyInventoryEnabled));
            }
            if (includeAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeAddresses", includeAddresses));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FulfillmentLocation>>("/fulfillmentLocations/{ScopeId}/shipping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShippingFulfillmentLocationsByScopeRequestScopeIdshippingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) - {ReserveAvailabilitySlotRequest} Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPost(string accept, string fulfillmentLocationId, ReserveAvailabilitySlotRequest body = default(ReserveAvailabilitySlotRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPostWithHttpInfo(accept, fulfillmentLocationId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) - {ReserveAvailabilitySlotRequest} Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPostWithHttpInfo(string accept, string fulfillmentLocationId, ReserveAvailabilitySlotRequest body = default(ReserveAvailabilitySlotRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPost");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/fulfillmentLocations/reserveSlot/{FulfillmentLocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) - {ReserveAvailabilitySlotRequest} Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPostAsync(string accept, string fulfillmentLocationId, ReserveAvailabilitySlotRequest body = default(ReserveAvailabilitySlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = await ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPostWithHttpInfoAsync(accept, fulfillmentLocationId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) - {ReserveAvailabilitySlotRequest} Reserves a fulfillment slot for the Shipment of an Order. (Not implemented in default provider) 
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string>> ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPostWithHttpInfoAsync(string accept, string fulfillmentLocationId, ReserveAvailabilitySlotRequest body = default(ReserveAvailabilitySlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPost");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/fulfillmentLocations/reserveSlot/{FulfillmentLocationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReserveAvailabilitySlotRequestreserveSlotFulfillmentLocationIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all time slot from a fulfillment location for a specific scope and add the list of time slots - {ResetFulfillmentLocationTimeSlotsRequest} Delete all time slot from a fulfillment location for a specific scope and add the list of time slots
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;TimeSlot&gt;</returns>
        public List<TimeSlot> ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, ResetFulfillmentLocationTimeSlotsRequest body = default(ResetFulfillmentLocationTimeSlotsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TimeSlot>> localVarResponse = ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreateWithHttpInfo(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all time slot from a fulfillment location for a specific scope and add the list of time slots - {ResetFulfillmentLocationTimeSlotsRequest} Delete all time slot from a fulfillment location for a specific scope and add the list of time slots
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TimeSlot&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TimeSlot>> ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreateWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, ResetFulfillmentLocationTimeSlotsRequest body = default(ResetFulfillmentLocationTimeSlotsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<List<TimeSlot>>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/reset", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all time slot from a fulfillment location for a specific scope and add the list of time slots - {ResetFulfillmentLocationTimeSlotsRequest} Delete all time slot from a fulfillment location for a specific scope and add the list of time slots
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TimeSlot&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimeSlot>> ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreateAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, ResetFulfillmentLocationTimeSlotsRequest body = default(ResetFulfillmentLocationTimeSlotsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TimeSlot>> localVarResponse = await ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreateWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all time slot from a fulfillment location for a specific scope and add the list of time slots - {ResetFulfillmentLocationTimeSlotsRequest} Delete all time slot from a fulfillment location for a specific scope and add the list of time slots
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TimeSlot&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TimeSlot>>> ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, ResetFulfillmentLocationTimeSlotsRequest body = default(ResetFulfillmentLocationTimeSlotsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<List<TimeSlot>>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/reset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetFulfillmentLocationTimeSlotsRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsresetCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the inventory informations for a specified fulfillment location. - {SetFulfillmentLocationInventoryManagementRequest} Updates the inventory details for a specified fulfillment location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SetFulfillmentLocationInventoryManagementResult</returns>
        public SetFulfillmentLocationInventoryManagementResult SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreate(string accept, string scopeId, string fulfillmentLocationId, SetFulfillmentLocationInventoryManagementRequest body = default(SetFulfillmentLocationInventoryManagementRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SetFulfillmentLocationInventoryManagementResult> localVarResponse = SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreateWithHttpInfo(accept, scopeId, fulfillmentLocationId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the inventory informations for a specified fulfillment location. - {SetFulfillmentLocationInventoryManagementRequest} Updates the inventory details for a specified fulfillment location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SetFulfillmentLocationInventoryManagementResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SetFulfillmentLocationInventoryManagementResult> SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreateWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, SetFulfillmentLocationInventoryManagementRequest body = default(SetFulfillmentLocationInventoryManagementRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreate");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<SetFulfillmentLocationInventoryManagementResult>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/inventory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the inventory informations for a specified fulfillment location. - {SetFulfillmentLocationInventoryManagementRequest} Updates the inventory details for a specified fulfillment location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetFulfillmentLocationInventoryManagementResult</returns>
        public async System.Threading.Tasks.Task<SetFulfillmentLocationInventoryManagementResult> SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreateAsync(string accept, string scopeId, string fulfillmentLocationId, SetFulfillmentLocationInventoryManagementRequest body = default(SetFulfillmentLocationInventoryManagementRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SetFulfillmentLocationInventoryManagementResult> localVarResponse = await SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreateWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the inventory informations for a specified fulfillment location. - {SetFulfillmentLocationInventoryManagementRequest} Updates the inventory details for a specified fulfillment location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetFulfillmentLocationInventoryManagementResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<SetFulfillmentLocationInventoryManagementResult>> SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, SetFulfillmentLocationInventoryManagementRequest body = default(SetFulfillmentLocationInventoryManagementRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreate");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SetFulfillmentLocationInventoryManagementResult>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/inventory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetFulfillmentLocationInventoryManagementRequestScopeIdFulfillmentLocationIdinventoryCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a time slot from a fulfillment location for a specific scope - {UpdateFulfillmentLocationTimeSlotRequest} Updates a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TimeSlot</returns>
        public TimeSlot UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, UpdateFulfillmentLocationTimeSlotRequest body = default(UpdateFulfillmentLocationTimeSlotRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlot> localVarResponse = UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreateWithHttpInfo(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, slotId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a time slot from a fulfillment location for a specific scope - {UpdateFulfillmentLocationTimeSlotRequest} Updates a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TimeSlot</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlot> UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreateWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, UpdateFulfillmentLocationTimeSlotRequest body = default(UpdateFulfillmentLocationTimeSlotRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate");

            // verify the required parameter 'slotId' is set
            if (slotId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotId' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<TimeSlot>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/{SlotId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a time slot from a fulfillment location for a specific scope - {UpdateFulfillmentLocationTimeSlotRequest} Updates a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlot</returns>
        public async System.Threading.Tasks.Task<TimeSlot> UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreateAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, UpdateFulfillmentLocationTimeSlotRequest body = default(UpdateFulfillmentLocationTimeSlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlot> localVarResponse = await UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreateWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, fulfillmentMethodType, slotId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a time slot from a fulfillment location for a specific scope - {UpdateFulfillmentLocationTimeSlotRequest} Updates a time slot from a fulfillment location for a specific scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</param>
        /// <param name="slotId">the unique identifier of the time slot.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlot)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlot>> UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string fulfillmentMethodType, string slotId, UpdateFulfillmentLocationTimeSlotRequest body = default(UpdateFulfillmentLocationTimeSlotRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate");

            // verify the required parameter 'fulfillmentMethodType' is set
            if (fulfillmentMethodType == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentMethodType' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate");

            // verify the required parameter 'slotId' is set
            if (slotId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotId' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentMethodType", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentMethodType)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TimeSlot>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/{SlotId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFulfillmentLocationTimeSlotRequestScopeIdFulfillmentLocationIdFulfillmentMethodTypeslotsSlotIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a time slot reservation - {UpdateFulfillmentLocationTimeSlotReservationRequest} Updates a time slot reservation.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TimeSlotReservation</returns>
        public TimeSlotReservation UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, UpdateFulfillmentLocationTimeSlotReservationRequest body = default(UpdateFulfillmentLocationTimeSlotReservationRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservation> localVarResponse = UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreateWithHttpInfo(accept, scopeId, fulfillmentLocationId, slotReservationId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a time slot reservation - {UpdateFulfillmentLocationTimeSlotReservationRequest} Updates a time slot reservation.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TimeSlotReservation</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservation> UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreateWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, UpdateFulfillmentLocationTimeSlotReservationRequest body = default(UpdateFulfillmentLocationTimeSlotReservationRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate");

            // verify the required parameter 'slotReservationId' is set
            if (slotReservationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotReservationId' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotReservationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotReservationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<TimeSlotReservation>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/{SlotReservationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a time slot reservation - {UpdateFulfillmentLocationTimeSlotReservationRequest} Updates a time slot reservation.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSlotReservation</returns>
        public async System.Threading.Tasks.Task<TimeSlotReservation> UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreateAsync(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, UpdateFulfillmentLocationTimeSlotReservationRequest body = default(UpdateFulfillmentLocationTimeSlotReservationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservation> localVarResponse = await UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreateWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, slotReservationId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a time slot reservation - {UpdateFulfillmentLocationTimeSlotReservationRequest} Updates a time slot reservation.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location.</param>
        /// <param name="slotReservationId">the unique identifier of the time slot reservation.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSlotReservation)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TimeSlotReservation>> UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreateWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, string slotReservationId, UpdateFulfillmentLocationTimeSlotReservationRequest body = default(UpdateFulfillmentLocationTimeSlotReservationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate");

            // verify the required parameter 'slotReservationId' is set
            if (slotReservationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'slotReservationId' when calling FulfillmentLocationsApi->UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("SlotReservationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(slotReservationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TimeSlotReservation>("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/{SlotReservationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFulfillmentLocationTimeSlotReservationRequestScopeIdFulfillmentLocationIdreservationsSlotReservationIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
