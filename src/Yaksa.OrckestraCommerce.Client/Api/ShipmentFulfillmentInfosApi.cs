/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentFulfillmentInfosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Number of shipment Fulfillment Infos - {GetCountShipmentFulfillmentInfosRequest}
        /// </summary>
        /// <remarks>
        /// Get Number of shipment Fulfillment Infos.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date Range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <returns>CountShipmentFulfillmentInfos</returns>
        CountShipmentFulfillmentInfos GetCountShipmentFulfillmentInfosRequestScopeIdcountGet(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string));

        /// <summary>
        /// Get Number of shipment Fulfillment Infos - {GetCountShipmentFulfillmentInfosRequest}
        /// </summary>
        /// <remarks>
        /// Get Number of shipment Fulfillment Infos.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date Range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <returns>ApiResponse of CountShipmentFulfillmentInfos</returns>
        ApiResponse<CountShipmentFulfillmentInfos> GetCountShipmentFulfillmentInfosRequestScopeIdcountGetWithHttpInfo(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string));
        /// <summary>
        /// Get the number of shipments for a fulfillment location - {GetNumberOfShipmentsForFulfillmentLocationRequest}
        /// </summary>
        /// <remarks>
        /// Get the number of shipments for a fulfillment location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId</param>
        /// <returns>GetNumberOfShipmentsForFulfillmentLocationResponse</returns>
        GetNumberOfShipmentsForFulfillmentLocationResponse GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGet(string accept, string scopeId, string fulfillmentLocationId);

        /// <summary>
        /// Get the number of shipments for a fulfillment location - {GetNumberOfShipmentsForFulfillmentLocationRequest}
        /// </summary>
        /// <remarks>
        /// Get the number of shipments for a fulfillment location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId</param>
        /// <returns>ApiResponse of GetNumberOfShipmentsForFulfillmentLocationResponse</returns>
        ApiResponse<GetNumberOfShipmentsForFulfillmentLocationResponse> GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId);
        /// <summary>
        /// Get the uri of printable version of the shipment - {GetPrintableShipmentUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of the shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <returns>string</returns>
        string GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGet(string accept, string scopeId, string shipmentId);

        /// <summary>
        /// Get the uri of printable version of the shipment - {GetPrintableShipmentUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of the shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGetWithHttpInfo(string accept, string scopeId, string shipmentId);
        /// <summary>
        /// Get the uri of printable version of a list of shipment - {GetPrintableShipmentsUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of a list of shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string GetPrintableShipmentsUriRequestScopeIdprintShipmentsPost(string accept, string scopeId, GetPrintableShipmentsUriRequest body = default(GetPrintableShipmentsUriRequest));

        /// <summary>
        /// Get the uri of printable version of a list of shipment - {GetPrintableShipmentsUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of a list of shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetPrintableShipmentsUriRequestScopeIdprintShipmentsPostWithHttpInfo(string accept, string scopeId, GetPrintableShipmentsUriRequest body = default(GetPrintableShipmentsUriRequest));
        /// <summary>
        /// Get shipment Fulfillment Infos - {GetShipmentFulfillmentInfosRequest}
        /// </summary>
        /// <remarks>
        /// Get shipment Fulfillment Infos.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="pageSize">the PageSize (optional)</param>
        /// <param name="pageNumber">the PageNumber (optional)</param>
        /// <param name="sort">the sorted fields, seperated by commas, use &#39;-&#39; before field name for descending (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <param name="requiredFields">The fields from ShipmentFulfillmentInfo that are absolutely required. Default is all. (optional)</param>
        /// <returns>ShipmentFulfillmentInfoQueryResult</returns>
        ShipmentFulfillmentInfoQueryResult GetShipmentFulfillmentInfosRequestScopeIdGet(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string sort = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string), List<string> requiredFields = default(List<string>));

        /// <summary>
        /// Get shipment Fulfillment Infos - {GetShipmentFulfillmentInfosRequest}
        /// </summary>
        /// <remarks>
        /// Get shipment Fulfillment Infos.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="pageSize">the PageSize (optional)</param>
        /// <param name="pageNumber">the PageNumber (optional)</param>
        /// <param name="sort">the sorted fields, seperated by commas, use &#39;-&#39; before field name for descending (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <param name="requiredFields">The fields from ShipmentFulfillmentInfo that are absolutely required. Default is all. (optional)</param>
        /// <returns>ApiResponse of ShipmentFulfillmentInfoQueryResult</returns>
        ApiResponse<ShipmentFulfillmentInfoQueryResult> GetShipmentFulfillmentInfosRequestScopeIdGetWithHttpInfo(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string sort = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string), List<string> requiredFields = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentFulfillmentInfosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Number of shipment Fulfillment Infos - {GetCountShipmentFulfillmentInfosRequest}
        /// </summary>
        /// <remarks>
        /// Get Number of shipment Fulfillment Infos.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date Range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountShipmentFulfillmentInfos</returns>
        System.Threading.Tasks.Task<CountShipmentFulfillmentInfos> GetCountShipmentFulfillmentInfosRequestScopeIdcountGetAsync(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Number of shipment Fulfillment Infos - {GetCountShipmentFulfillmentInfosRequest}
        /// </summary>
        /// <remarks>
        /// Get Number of shipment Fulfillment Infos.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date Range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountShipmentFulfillmentInfos)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountShipmentFulfillmentInfos>> GetCountShipmentFulfillmentInfosRequestScopeIdcountGetWithHttpInfoAsync(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the number of shipments for a fulfillment location - {GetNumberOfShipmentsForFulfillmentLocationRequest}
        /// </summary>
        /// <remarks>
        /// Get the number of shipments for a fulfillment location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetNumberOfShipmentsForFulfillmentLocationResponse</returns>
        System.Threading.Tasks.Task<GetNumberOfShipmentsForFulfillmentLocationResponse> GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the number of shipments for a fulfillment location - {GetNumberOfShipmentsForFulfillmentLocationRequest}
        /// </summary>
        /// <remarks>
        /// Get the number of shipments for a fulfillment location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetNumberOfShipmentsForFulfillmentLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetNumberOfShipmentsForFulfillmentLocationResponse>> GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the uri of printable version of the shipment - {GetPrintableShipmentUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of the shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGetAsync(string accept, string scopeId, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the uri of printable version of the shipment - {GetPrintableShipmentUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of the shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGetWithHttpInfoAsync(string accept, string scopeId, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the uri of printable version of a list of shipment - {GetPrintableShipmentsUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of a list of shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetPrintableShipmentsUriRequestScopeIdprintShipmentsPostAsync(string accept, string scopeId, GetPrintableShipmentsUriRequest body = default(GetPrintableShipmentsUriRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the uri of printable version of a list of shipment - {GetPrintableShipmentsUriRequest}
        /// </summary>
        /// <remarks>
        /// Get the uri of printable version of a list of shipment
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetPrintableShipmentsUriRequestScopeIdprintShipmentsPostWithHttpInfoAsync(string accept, string scopeId, GetPrintableShipmentsUriRequest body = default(GetPrintableShipmentsUriRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get shipment Fulfillment Infos - {GetShipmentFulfillmentInfosRequest}
        /// </summary>
        /// <remarks>
        /// Get shipment Fulfillment Infos.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="pageSize">the PageSize (optional)</param>
        /// <param name="pageNumber">the PageNumber (optional)</param>
        /// <param name="sort">the sorted fields, seperated by commas, use &#39;-&#39; before field name for descending (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <param name="requiredFields">The fields from ShipmentFulfillmentInfo that are absolutely required. Default is all. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentFulfillmentInfoQueryResult</returns>
        System.Threading.Tasks.Task<ShipmentFulfillmentInfoQueryResult> GetShipmentFulfillmentInfosRequestScopeIdGetAsync(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string sort = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string), List<string> requiredFields = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get shipment Fulfillment Infos - {GetShipmentFulfillmentInfosRequest}
        /// </summary>
        /// <remarks>
        /// Get shipment Fulfillment Infos.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="pageSize">the PageSize (optional)</param>
        /// <param name="pageNumber">the PageNumber (optional)</param>
        /// <param name="sort">the sorted fields, seperated by commas, use &#39;-&#39; before field name for descending (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <param name="requiredFields">The fields from ShipmentFulfillmentInfo that are absolutely required. Default is all. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentFulfillmentInfoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentFulfillmentInfoQueryResult>> GetShipmentFulfillmentInfosRequestScopeIdGetWithHttpInfoAsync(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string sort = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string), List<string> requiredFields = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentFulfillmentInfosApi : IShipmentFulfillmentInfosApiSync, IShipmentFulfillmentInfosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShipmentFulfillmentInfosApi : IShipmentFulfillmentInfosApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentFulfillmentInfosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentFulfillmentInfosApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentFulfillmentInfosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentFulfillmentInfosApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentFulfillmentInfosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShipmentFulfillmentInfosApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentFulfillmentInfosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ShipmentFulfillmentInfosApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Number of shipment Fulfillment Infos - {GetCountShipmentFulfillmentInfosRequest} Get Number of shipment Fulfillment Infos.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date Range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <returns>CountShipmentFulfillmentInfos</returns>
        public CountShipmentFulfillmentInfos GetCountShipmentFulfillmentInfosRequestScopeIdcountGet(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CountShipmentFulfillmentInfos> localVarResponse = GetCountShipmentFulfillmentInfosRequestScopeIdcountGetWithHttpInfo(accept, scopeId, pickUpLocationId, fulfillmentLocationId, startDate, endDate, statuses, type, searchText, flaggedOnly, excludeShipmentInFinalState, dateRangeFilter, orderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Number of shipment Fulfillment Infos - {GetCountShipmentFulfillmentInfosRequest} Get Number of shipment Fulfillment Infos.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date Range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <returns>ApiResponse of CountShipmentFulfillmentInfos</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CountShipmentFulfillmentInfos> GetCountShipmentFulfillmentInfosRequestScopeIdcountGetWithHttpInfo(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ShipmentFulfillmentInfosApi->GetCountShipmentFulfillmentInfosRequestScopeIdcountGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ShipmentFulfillmentInfosApi->GetCountShipmentFulfillmentInfosRequestScopeIdcountGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (pickUpLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "pickUpLocationId", pickUpLocationId));
            }
            if (fulfillmentLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "fulfillmentLocationId", fulfillmentLocationId));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "statuses", statuses));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (flaggedOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "flaggedOnly", flaggedOnly));
            }
            if (excludeShipmentInFinalState != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "excludeShipmentInFinalState", excludeShipmentInFinalState));
            }
            if (dateRangeFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "dateRangeFilter", dateRangeFilter));
            }
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountShipmentFulfillmentInfos>("/shipmentFulfillmentInfos/{ScopeId}/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountShipmentFulfillmentInfosRequestScopeIdcountGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Number of shipment Fulfillment Infos - {GetCountShipmentFulfillmentInfosRequest} Get Number of shipment Fulfillment Infos.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date Range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountShipmentFulfillmentInfos</returns>
        public async System.Threading.Tasks.Task<CountShipmentFulfillmentInfos> GetCountShipmentFulfillmentInfosRequestScopeIdcountGetAsync(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CountShipmentFulfillmentInfos> localVarResponse = await GetCountShipmentFulfillmentInfosRequestScopeIdcountGetWithHttpInfoAsync(accept, scopeId, pickUpLocationId, fulfillmentLocationId, startDate, endDate, statuses, type, searchText, flaggedOnly, excludeShipmentInFinalState, dateRangeFilter, orderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Number of shipment Fulfillment Infos - {GetCountShipmentFulfillmentInfosRequest} Get Number of shipment Fulfillment Infos.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date Range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountShipmentFulfillmentInfos)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<CountShipmentFulfillmentInfos>> GetCountShipmentFulfillmentInfosRequestScopeIdcountGetWithHttpInfoAsync(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ShipmentFulfillmentInfosApi->GetCountShipmentFulfillmentInfosRequestScopeIdcountGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ShipmentFulfillmentInfosApi->GetCountShipmentFulfillmentInfosRequestScopeIdcountGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (pickUpLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "pickUpLocationId", pickUpLocationId));
            }
            if (fulfillmentLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "fulfillmentLocationId", fulfillmentLocationId));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "statuses", statuses));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (flaggedOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "flaggedOnly", flaggedOnly));
            }
            if (excludeShipmentInFinalState != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "excludeShipmentInFinalState", excludeShipmentInFinalState));
            }
            if (dateRangeFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "dateRangeFilter", dateRangeFilter));
            }
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountShipmentFulfillmentInfos>("/shipmentFulfillmentInfos/{ScopeId}/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountShipmentFulfillmentInfosRequestScopeIdcountGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the number of shipments for a fulfillment location - {GetNumberOfShipmentsForFulfillmentLocationRequest} Get the number of shipments for a fulfillment location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId</param>
        /// <returns>GetNumberOfShipmentsForFulfillmentLocationResponse</returns>
        public GetNumberOfShipmentsForFulfillmentLocationResponse GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGet(string accept, string scopeId, string fulfillmentLocationId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetNumberOfShipmentsForFulfillmentLocationResponse> localVarResponse = GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGetWithHttpInfo(accept, scopeId, fulfillmentLocationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the number of shipments for a fulfillment location - {GetNumberOfShipmentsForFulfillmentLocationRequest} Get the number of shipments for a fulfillment location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId</param>
        /// <returns>ApiResponse of GetNumberOfShipmentsForFulfillmentLocationResponse</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetNumberOfShipmentsForFulfillmentLocationResponse> GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGetWithHttpInfo(string accept, string scopeId, string fulfillmentLocationId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ShipmentFulfillmentInfosApi->GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ShipmentFulfillmentInfosApi->GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling ShipmentFulfillmentInfosApi->GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetNumberOfShipmentsForFulfillmentLocationResponse>("/shipmentFulfillmentInfos/{ScopeId}/numberOfShipmentsForFulfillmentLocation/{FulfillmentLocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the number of shipments for a fulfillment location - {GetNumberOfShipmentsForFulfillmentLocationRequest} Get the number of shipments for a fulfillment location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetNumberOfShipmentsForFulfillmentLocationResponse</returns>
        public async System.Threading.Tasks.Task<GetNumberOfShipmentsForFulfillmentLocationResponse> GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGetAsync(string accept, string scopeId, string fulfillmentLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetNumberOfShipmentsForFulfillmentLocationResponse> localVarResponse = await GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGetWithHttpInfoAsync(accept, scopeId, fulfillmentLocationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the number of shipments for a fulfillment location - {GetNumberOfShipmentsForFulfillmentLocationRequest} Get the number of shipments for a fulfillment location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetNumberOfShipmentsForFulfillmentLocationResponse)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetNumberOfShipmentsForFulfillmentLocationResponse>> GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string fulfillmentLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ShipmentFulfillmentInfosApi->GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ShipmentFulfillmentInfosApi->GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGet");

            // verify the required parameter 'fulfillmentLocationId' is set
            if (fulfillmentLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'fulfillmentLocationId' when calling ShipmentFulfillmentInfosApi->GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("FulfillmentLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(fulfillmentLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetNumberOfShipmentsForFulfillmentLocationResponse>("/shipmentFulfillmentInfos/{ScopeId}/numberOfShipmentsForFulfillmentLocation/{FulfillmentLocationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfShipmentsForFulfillmentLocationRequestScopeIdnumberOfShipmentsForFulfillmentLocationFulfillmentLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri of printable version of the shipment - {GetPrintableShipmentUriRequest} Get the uri of printable version of the shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <returns>string</returns>
        public string GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGet(string accept, string scopeId, string shipmentId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGetWithHttpInfo(accept, scopeId, shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri of printable version of the shipment - {GetPrintableShipmentUriRequest} Get the uri of printable version of the shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <returns>ApiResponse of string</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGetWithHttpInfo(string accept, string scopeId, string shipmentId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ShipmentFulfillmentInfosApi->GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ShipmentFulfillmentInfosApi->GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGet");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentFulfillmentInfosApi->GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/shipmentFulfillmentInfos/{ScopeId}/{ShipmentId}/printuri", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri of printable version of the shipment - {GetPrintableShipmentUriRequest} Get the uri of printable version of the shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGetAsync(string accept, string scopeId, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = await GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGetWithHttpInfoAsync(accept, scopeId, shipmentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri of printable version of the shipment - {GetPrintableShipmentUriRequest} Get the uri of printable version of the shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="shipmentId">The shipment id for the request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string>> GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGetWithHttpInfoAsync(string accept, string scopeId, string shipmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ShipmentFulfillmentInfosApi->GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ShipmentFulfillmentInfosApi->GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGet");

            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentFulfillmentInfosApi->GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ShipmentId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/shipmentFulfillmentInfos/{ScopeId}/{ShipmentId}/printuri", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrintableShipmentUriRequestScopeIdShipmentIdprinturiGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri of printable version of a list of shipment - {GetPrintableShipmentsUriRequest} Get the uri of printable version of a list of shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string GetPrintableShipmentsUriRequestScopeIdprintShipmentsPost(string accept, string scopeId, GetPrintableShipmentsUriRequest body = default(GetPrintableShipmentsUriRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = GetPrintableShipmentsUriRequestScopeIdprintShipmentsPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri of printable version of a list of shipment - {GetPrintableShipmentsUriRequest} Get the uri of printable version of a list of shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> GetPrintableShipmentsUriRequestScopeIdprintShipmentsPostWithHttpInfo(string accept, string scopeId, GetPrintableShipmentsUriRequest body = default(GetPrintableShipmentsUriRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ShipmentFulfillmentInfosApi->GetPrintableShipmentsUriRequestScopeIdprintShipmentsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ShipmentFulfillmentInfosApi->GetPrintableShipmentsUriRequestScopeIdprintShipmentsPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/shipmentFulfillmentInfos/{ScopeId}/printShipments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrintableShipmentsUriRequestScopeIdprintShipmentsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri of printable version of a list of shipment - {GetPrintableShipmentsUriRequest} Get the uri of printable version of a list of shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetPrintableShipmentsUriRequestScopeIdprintShipmentsPostAsync(string accept, string scopeId, GetPrintableShipmentsUriRequest body = default(GetPrintableShipmentsUriRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string> localVarResponse = await GetPrintableShipmentsUriRequestScopeIdprintShipmentsPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri of printable version of a list of shipment - {GetPrintableShipmentsUriRequest} Get the uri of printable version of a list of shipment
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<string>> GetPrintableShipmentsUriRequestScopeIdprintShipmentsPostWithHttpInfoAsync(string accept, string scopeId, GetPrintableShipmentsUriRequest body = default(GetPrintableShipmentsUriRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ShipmentFulfillmentInfosApi->GetPrintableShipmentsUriRequestScopeIdprintShipmentsPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ShipmentFulfillmentInfosApi->GetPrintableShipmentsUriRequestScopeIdprintShipmentsPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/shipmentFulfillmentInfos/{ScopeId}/printShipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrintableShipmentsUriRequestScopeIdprintShipmentsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get shipment Fulfillment Infos - {GetShipmentFulfillmentInfosRequest} Get shipment Fulfillment Infos.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="pageSize">the PageSize (optional)</param>
        /// <param name="pageNumber">the PageNumber (optional)</param>
        /// <param name="sort">the sorted fields, seperated by commas, use &#39;-&#39; before field name for descending (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <param name="requiredFields">The fields from ShipmentFulfillmentInfo that are absolutely required. Default is all. (optional)</param>
        /// <returns>ShipmentFulfillmentInfoQueryResult</returns>
        public ShipmentFulfillmentInfoQueryResult GetShipmentFulfillmentInfosRequestScopeIdGet(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string sort = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string), List<string> requiredFields = default(List<string>))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentFulfillmentInfoQueryResult> localVarResponse = GetShipmentFulfillmentInfosRequestScopeIdGetWithHttpInfo(accept, scopeId, pickUpLocationId, fulfillmentLocationId, startDate, endDate, statuses, type, pageSize, pageNumber, sort, searchText, flaggedOnly, excludeShipmentInFinalState, dateRangeFilter, orderId, requiredFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get shipment Fulfillment Infos - {GetShipmentFulfillmentInfosRequest} Get shipment Fulfillment Infos.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="pageSize">the PageSize (optional)</param>
        /// <param name="pageNumber">the PageNumber (optional)</param>
        /// <param name="sort">the sorted fields, seperated by commas, use &#39;-&#39; before field name for descending (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <param name="requiredFields">The fields from ShipmentFulfillmentInfo that are absolutely required. Default is all. (optional)</param>
        /// <returns>ApiResponse of ShipmentFulfillmentInfoQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentFulfillmentInfoQueryResult> GetShipmentFulfillmentInfosRequestScopeIdGetWithHttpInfo(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string sort = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string), List<string> requiredFields = default(List<string>))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ShipmentFulfillmentInfosApi->GetShipmentFulfillmentInfosRequestScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ShipmentFulfillmentInfosApi->GetShipmentFulfillmentInfosRequestScopeIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (pickUpLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "pickUpLocationId", pickUpLocationId));
            }
            if (fulfillmentLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "fulfillmentLocationId", fulfillmentLocationId));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "statuses", statuses));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (flaggedOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "flaggedOnly", flaggedOnly));
            }
            if (excludeShipmentInFinalState != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "excludeShipmentInFinalState", excludeShipmentInFinalState));
            }
            if (dateRangeFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "dateRangeFilter", dateRangeFilter));
            }
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            }
            if (requiredFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "requiredFields", requiredFields));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ShipmentFulfillmentInfoQueryResult>("/shipmentFulfillmentInfos/{ScopeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentFulfillmentInfosRequestScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get shipment Fulfillment Infos - {GetShipmentFulfillmentInfosRequest} Get shipment Fulfillment Infos.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="pageSize">the PageSize (optional)</param>
        /// <param name="pageNumber">the PageNumber (optional)</param>
        /// <param name="sort">the sorted fields, seperated by commas, use &#39;-&#39; before field name for descending (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <param name="requiredFields">The fields from ShipmentFulfillmentInfo that are absolutely required. Default is all. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentFulfillmentInfoQueryResult</returns>
        public async System.Threading.Tasks.Task<ShipmentFulfillmentInfoQueryResult> GetShipmentFulfillmentInfosRequestScopeIdGetAsync(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string sort = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string), List<string> requiredFields = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentFulfillmentInfoQueryResult> localVarResponse = await GetShipmentFulfillmentInfosRequestScopeIdGetWithHttpInfoAsync(accept, scopeId, pickUpLocationId, fulfillmentLocationId, startDate, endDate, statuses, type, pageSize, pageNumber, sort, searchText, flaggedOnly, excludeShipmentInFinalState, dateRangeFilter, orderId, requiredFields, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get shipment Fulfillment Infos - {GetShipmentFulfillmentInfosRequest} Get shipment Fulfillment Infos.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="pickUpLocationId">the PickUpLocationId (optional)</param>
        /// <param name="fulfillmentLocationId">the FulfillmentLocationId (optional)</param>
        /// <param name="startDate">the StartDate, ISO-8601 format (optional)</param>
        /// <param name="endDate">the EndDate, ISO-8601 format (optional)</param>
        /// <param name="statuses">the Statuses (optional)</param>
        /// <param name="type">the FulfillmentMethodType (optional)</param>
        /// <param name="pageSize">the PageSize (optional)</param>
        /// <param name="pageNumber">the PageNumber (optional)</param>
        /// <param name="sort">the sorted fields, seperated by commas, use &#39;-&#39; before field name for descending (optional)</param>
        /// <param name="searchText">the SearchText (optional)</param>
        /// <param name="flaggedOnly">true if you just want to get flagged Shipments (optional)</param>
        /// <param name="excludeShipmentInFinalState">value indicating whether or not shipments in final state of the workflow will be returned (optional)</param>
        /// <param name="dateRangeFilter">the date range filter (optional)</param>
        /// <param name="orderId">the order id (optional)</param>
        /// <param name="requiredFields">The fields from ShipmentFulfillmentInfo that are absolutely required. Default is all. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentFulfillmentInfoQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ShipmentFulfillmentInfoQueryResult>> GetShipmentFulfillmentInfosRequestScopeIdGetWithHttpInfoAsync(string accept, string scopeId, string pickUpLocationId = default(string), string fulfillmentLocationId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> statuses = default(List<string>), string type = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string sort = default(string), string searchText = default(string), bool? flaggedOnly = default(bool?), bool? excludeShipmentInFinalState = default(bool?), string dateRangeFilter = default(string), string orderId = default(string), List<string> requiredFields = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling ShipmentFulfillmentInfosApi->GetShipmentFulfillmentInfosRequestScopeIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling ShipmentFulfillmentInfosApi->GetShipmentFulfillmentInfosRequestScopeIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (pickUpLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "pickUpLocationId", pickUpLocationId));
            }
            if (fulfillmentLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "fulfillmentLocationId", fulfillmentLocationId));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "statuses", statuses));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            }
            if (flaggedOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "flaggedOnly", flaggedOnly));
            }
            if (excludeShipmentInFinalState != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "excludeShipmentInFinalState", excludeShipmentInFinalState));
            }
            if (dateRangeFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "dateRangeFilter", dateRangeFilter));
            }
            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            }
            if (requiredFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "requiredFields", requiredFields));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ShipmentFulfillmentInfoQueryResult>("/shipmentFulfillmentInfos/{ScopeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentFulfillmentInfosRequestScopeIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
