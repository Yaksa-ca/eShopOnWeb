/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add or update a trigger of a scheduled task - {AddOrUpdateScheduledTaskTrigger}
        /// </summary>
        /// <remarks>
        /// Add or update a trigger of a scheduled task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ScheduledTaskInfo</returns>
        ScheduledTaskInfo AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName, AddOrUpdateScheduledTaskTrigger body = default(AddOrUpdateScheduledTaskTrigger));

        /// <summary>
        /// Add or update a trigger of a scheduled task - {AddOrUpdateScheduledTaskTrigger}
        /// </summary>
        /// <remarks>
        /// Add or update a trigger of a scheduled task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ScheduledTaskInfo</returns>
        ApiResponse<ScheduledTaskInfo> AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreateWithHttpInfo(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName, AddOrUpdateScheduledTaskTrigger body = default(AddOrUpdateScheduledTaskTrigger));
        /// <summary>
        /// Cancels the specified long running (batch processing) task. - {CancelTaskRequest}
        /// </summary>
        /// <remarks>
        /// Cancels the specified long running (batch processing) task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CancelTaskRequestTaskIdcancelPost(string accept, string taskId, Object body = default(Object));

        /// <summary>
        /// Cancels the specified long running (batch processing) task. - {CancelTaskRequest}
        /// </summary>
        /// <remarks>
        /// Cancels the specified long running (batch processing) task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelTaskRequestTaskIdcancelPostWithHttpInfo(string accept, string taskId, Object body = default(Object));
        /// <summary>
        /// Remove all the scheduled task activities - {DeleteAllScheduledTasksRequest}
        /// </summary>
        /// <remarks>
        /// Remove all the scheduled task activities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns></returns>
        void DeleteAllScheduledTasksRequestscheduledallDelete(string accept);

        /// <summary>
        /// Remove all the scheduled task activities - {DeleteAllScheduledTasksRequest}
        /// </summary>
        /// <remarks>
        /// Remove all the scheduled task activities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllScheduledTasksRequestscheduledallDeleteWithHttpInfo(string accept);
        /// <summary>
        /// Remove a specific scheduled task activity - {DeleteScheduledTaskRequest}
        /// </summary>
        /// <remarks>
        /// Remove a specific scheduled task activity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <returns></returns>
        void DeleteScheduledTaskRequestscheduledGroupNameDelete(string accept, string group, string name);

        /// <summary>
        /// Remove a specific scheduled task activity - {DeleteScheduledTaskRequest}
        /// </summary>
        /// <remarks>
        /// Remove a specific scheduled task activity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScheduledTaskRequestscheduledGroupNameDeleteWithHttpInfo(string accept, string group, string name);
        /// <summary>
        /// Delete a long running task - {DeleteTaskInfoRequest}
        /// </summary>
        /// <remarks>
        /// Delete a long running task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="force">force delete task. (optional)</param>
        /// <returns></returns>
        void DeleteTaskInfoRequestTaskIdDelete(string accept, string taskId, bool? force = default(bool?));

        /// <summary>
        /// Delete a long running task - {DeleteTaskInfoRequest}
        /// </summary>
        /// <remarks>
        /// Delete a long running task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="force">force delete task. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskInfoRequestTaskIdDeleteWithHttpInfo(string accept, string taskId, bool? force = default(bool?));
        /// <summary>
        /// Retrieve a list of all the scheduled tasks - {GetAllScheduledTasksRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all the scheduled tasks
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;ScheduledTaskInfo&gt;</returns>
        List<ScheduledTaskInfo> GetAllScheduledTasksRequestscheduledallGet(string accept);

        /// <summary>
        /// Retrieve a list of all the scheduled tasks - {GetAllScheduledTasksRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all the scheduled tasks
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;ScheduledTaskInfo&gt;</returns>
        ApiResponse<List<ScheduledTaskInfo>> GetAllScheduledTasksRequestscheduledallGetWithHttpInfo(string accept);
        /// <summary>
        /// Retrieve a list of long running tasks for a specified requester - {GetRequesterTasksInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of long running tasks for a specified requester
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="requester">The username of the user that requested the tasks. (optional)</param>
        /// <param name="lastModified">The last modification date of the task. Use this to limit the results to items after this date (optional)</param>
        /// <param name="filterTaskNames">The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine) (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        List<TaskInfo> GetRequesterTasksInfoRequestGet(string accept, string requester = default(string), DateTime? lastModified = default(DateTime?), List<string> filterTaskNames = default(List<string>));

        /// <summary>
        /// Retrieve a list of long running tasks for a specified requester - {GetRequesterTasksInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of long running tasks for a specified requester
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="requester">The username of the user that requested the tasks. (optional)</param>
        /// <param name="lastModified">The last modification date of the task. Use this to limit the results to items after this date (optional)</param>
        /// <param name="filterTaskNames">The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine) (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        ApiResponse<List<TaskInfo>> GetRequesterTasksInfoRequestGetWithHttpInfo(string accept, string requester = default(string), DateTime? lastModified = default(DateTime?), List<string> filterTaskNames = default(List<string>));
        /// <summary>
        /// Retrieve the job info of the currently running scheduled tasks - {GetRunningScheduledTasksRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the job info of the currently running scheduled tasks
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;RunningScheduledTaskInfo&gt;</returns>
        List<RunningScheduledTaskInfo> GetRunningScheduledTasksRequestscheduledrunningGet(string accept);

        /// <summary>
        /// Retrieve the job info of the currently running scheduled tasks - {GetRunningScheduledTasksRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the job info of the currently running scheduled tasks
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;RunningScheduledTaskInfo&gt;</returns>
        ApiResponse<List<RunningScheduledTaskInfo>> GetRunningScheduledTasksRequestscheduledrunningGetWithHttpInfo(string accept);
        /// <summary>
        /// Retrieve a specfic scheduled task - {GetScheduledTaskRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specfic scheduled task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <returns>ScheduledTaskInfo</returns>
        ScheduledTaskInfo GetScheduledTaskRequestscheduledGroupNameGet(string accept, string group, string name);

        /// <summary>
        /// Retrieve a specfic scheduled task - {GetScheduledTaskRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specfic scheduled task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <returns>ApiResponse of ScheduledTaskInfo</returns>
        ApiResponse<ScheduledTaskInfo> GetScheduledTaskRequestscheduledGroupNameGetWithHttpInfo(string accept, string group, string name);
        /// <summary>
        /// Retrieve the log entries from a long running task - {GetTaskExecutionLogsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the log entries from a long running task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <returns>List&lt;TaskExecutionLogEntry&gt;</returns>
        List<TaskExecutionLogEntry> GetTaskExecutionLogsRequestTaskIdlogsGet(string accept, string taskId);

        /// <summary>
        /// Retrieve the log entries from a long running task - {GetTaskExecutionLogsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the log entries from a long running task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <returns>ApiResponse of List&lt;TaskExecutionLogEntry&gt;</returns>
        ApiResponse<List<TaskExecutionLogEntry>> GetTaskExecutionLogsRequestTaskIdlogsGetWithHttpInfo(string accept, string taskId);
        /// <summary>
        /// Retrieve the state of a long running task - {GetTaskInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the state of a long running task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <returns>TaskInfo</returns>
        TaskInfo GetTaskInfoRequestTaskIdGet(string accept, string taskId);

        /// <summary>
        /// Retrieve the state of a long running task - {GetTaskInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the state of a long running task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> GetTaskInfoRequestTaskIdGetWithHttpInfo(string accept, string taskId);
        /// <summary>
        /// Retrieve the state of long running tasks by correlation id - {GetTasksInfoByCorrelationIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the state of long running tasks by correlation id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The task correlation identifier</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        List<TaskInfo> GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGet(string accept, string id);

        /// <summary>
        /// Retrieve the state of long running tasks by correlation id - {GetTasksInfoByCorrelationIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the state of long running tasks by correlation id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The task correlation identifier</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        ApiResponse<List<TaskInfo>> GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGetWithHttpInfo(string accept, string id);
        /// <summary>
        /// Queue a new task activity - {QueueActivityTaskRequest}
        /// </summary>
        /// <remarks>
        /// Queue a new task activity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo QueueActivityTaskRequestactivitiesTaskIdPost(string accept, string taskId, QueueActivityTaskRequest body = default(QueueActivityTaskRequest));

        /// <summary>
        /// Queue a new task activity - {QueueActivityTaskRequest}
        /// </summary>
        /// <remarks>
        /// Queue a new task activity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> QueueActivityTaskRequestactivitiesTaskIdPostWithHttpInfo(string accept, string taskId, QueueActivityTaskRequest body = default(QueueActivityTaskRequest));
        /// <summary>
        /// Queue a new task workflow - {QueueWorkflowTaskRequest}
        /// </summary>
        /// <remarks>
        /// Queue a new task workflow
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        TaskInfo QueueWorkflowTaskRequestworkflowsTaskIdPost(string accept, string taskId, QueueWorkflowTaskRequest body = default(QueueWorkflowTaskRequest));

        /// <summary>
        /// Queue a new task workflow - {QueueWorkflowTaskRequest}
        /// </summary>
        /// <remarks>
        /// Queue a new task workflow
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> QueueWorkflowTaskRequestworkflowsTaskIdPostWithHttpInfo(string accept, string taskId, QueueWorkflowTaskRequest body = default(QueueWorkflowTaskRequest));
        /// <summary>
        /// Remove a given trigger of a scheduled task - {RemoveScheduledTaskTriggerRequest}
        /// </summary>
        /// <remarks>
        /// Remove a given trigger of a scheduled task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <returns>ScheduledTaskInfo</returns>
        ScheduledTaskInfo RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName);

        /// <summary>
        /// Remove a given trigger of a scheduled task - {RemoveScheduledTaskTriggerRequest}
        /// </summary>
        /// <remarks>
        /// Remove a given trigger of a scheduled task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <returns>ApiResponse of ScheduledTaskInfo</returns>
        ApiResponse<ScheduledTaskInfo> RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDeleteWithHttpInfo(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName);
        /// <summary>
        /// Create a scheduled activity task based on a activity class - {ScheduleTaskActivityRequest}
        /// </summary>
        /// <remarks>
        /// Create a scheduled activity task based on a activity class
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ScheduledTaskInfo</returns>
        ScheduledTaskInfo ScheduleTaskActivityRequestscheduledactivitiesGroupNamePost(string accept, string group, string name, ScheduleTaskActivityRequest body = default(ScheduleTaskActivityRequest));

        /// <summary>
        /// Create a scheduled activity task based on a activity class - {ScheduleTaskActivityRequest}
        /// </summary>
        /// <remarks>
        /// Create a scheduled activity task based on a activity class
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ScheduledTaskInfo</returns>
        ApiResponse<ScheduledTaskInfo> ScheduleTaskActivityRequestscheduledactivitiesGroupNamePostWithHttpInfo(string accept, string group, string name, ScheduleTaskActivityRequest body = default(ScheduleTaskActivityRequest));
        /// <summary>
        /// Create a scheduled workflow task based on a workflow file - {ScheduleTaskWorkflowRequest}
        /// </summary>
        /// <remarks>
        /// Create a scheduled workflow task based on a workflow file
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ScheduledTaskInfo</returns>
        ScheduledTaskInfo ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePost(string accept, string group, string name, ScheduleTaskWorkflowRequest body = default(ScheduleTaskWorkflowRequest));

        /// <summary>
        /// Create a scheduled workflow task based on a workflow file - {ScheduleTaskWorkflowRequest}
        /// </summary>
        /// <remarks>
        /// Create a scheduled workflow task based on a workflow file
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ScheduledTaskInfo</returns>
        ApiResponse<ScheduledTaskInfo> ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePostWithHttpInfo(string accept, string group, string name, ScheduleTaskWorkflowRequest body = default(ScheduleTaskWorkflowRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add or update a trigger of a scheduled task - {AddOrUpdateScheduledTaskTrigger}
        /// </summary>
        /// <remarks>
        /// Add or update a trigger of a scheduled task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledTaskInfo</returns>
        System.Threading.Tasks.Task<ScheduledTaskInfo> AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreateAsync(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName, AddOrUpdateScheduledTaskTrigger body = default(AddOrUpdateScheduledTaskTrigger), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or update a trigger of a scheduled task - {AddOrUpdateScheduledTaskTrigger}
        /// </summary>
        /// <remarks>
        /// Add or update a trigger of a scheduled task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledTaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledTaskInfo>> AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreateWithHttpInfoAsync(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName, AddOrUpdateScheduledTaskTrigger body = default(AddOrUpdateScheduledTaskTrigger), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancels the specified long running (batch processing) task. - {CancelTaskRequest}
        /// </summary>
        /// <remarks>
        /// Cancels the specified long running (batch processing) task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelTaskRequestTaskIdcancelPostAsync(string accept, string taskId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancels the specified long running (batch processing) task. - {CancelTaskRequest}
        /// </summary>
        /// <remarks>
        /// Cancels the specified long running (batch processing) task.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelTaskRequestTaskIdcancelPostWithHttpInfoAsync(string accept, string taskId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove all the scheduled task activities - {DeleteAllScheduledTasksRequest}
        /// </summary>
        /// <remarks>
        /// Remove all the scheduled task activities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllScheduledTasksRequestscheduledallDeleteAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove all the scheduled task activities - {DeleteAllScheduledTasksRequest}
        /// </summary>
        /// <remarks>
        /// Remove all the scheduled task activities
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllScheduledTasksRequestscheduledallDeleteWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a specific scheduled task activity - {DeleteScheduledTaskRequest}
        /// </summary>
        /// <remarks>
        /// Remove a specific scheduled task activity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScheduledTaskRequestscheduledGroupNameDeleteAsync(string accept, string group, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a specific scheduled task activity - {DeleteScheduledTaskRequest}
        /// </summary>
        /// <remarks>
        /// Remove a specific scheduled task activity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledTaskRequestscheduledGroupNameDeleteWithHttpInfoAsync(string accept, string group, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a long running task - {DeleteTaskInfoRequest}
        /// </summary>
        /// <remarks>
        /// Delete a long running task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="force">force delete task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskInfoRequestTaskIdDeleteAsync(string accept, string taskId, bool? force = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a long running task - {DeleteTaskInfoRequest}
        /// </summary>
        /// <remarks>
        /// Delete a long running task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="force">force delete task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskInfoRequestTaskIdDeleteWithHttpInfoAsync(string accept, string taskId, bool? force = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of all the scheduled tasks - {GetAllScheduledTasksRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all the scheduled tasks
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledTaskInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ScheduledTaskInfo>> GetAllScheduledTasksRequestscheduledallGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of all the scheduled tasks - {GetAllScheduledTasksRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all the scheduled tasks
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledTaskInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ScheduledTaskInfo>>> GetAllScheduledTasksRequestscheduledallGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of long running tasks for a specified requester - {GetRequesterTasksInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of long running tasks for a specified requester
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="requester">The username of the user that requested the tasks. (optional)</param>
        /// <param name="lastModified">The last modification date of the task. Use this to limit the results to items after this date (optional)</param>
        /// <param name="filterTaskNames">The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TaskInfo>> GetRequesterTasksInfoRequestGetAsync(string accept, string requester = default(string), DateTime? lastModified = default(DateTime?), List<string> filterTaskNames = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of long running tasks for a specified requester - {GetRequesterTasksInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of long running tasks for a specified requester
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="requester">The username of the user that requested the tasks. (optional)</param>
        /// <param name="lastModified">The last modification date of the task. Use this to limit the results to items after this date (optional)</param>
        /// <param name="filterTaskNames">The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskInfo>>> GetRequesterTasksInfoRequestGetWithHttpInfoAsync(string accept, string requester = default(string), DateTime? lastModified = default(DateTime?), List<string> filterTaskNames = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the job info of the currently running scheduled tasks - {GetRunningScheduledTasksRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the job info of the currently running scheduled tasks
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RunningScheduledTaskInfo&gt;</returns>
        System.Threading.Tasks.Task<List<RunningScheduledTaskInfo>> GetRunningScheduledTasksRequestscheduledrunningGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the job info of the currently running scheduled tasks - {GetRunningScheduledTasksRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the job info of the currently running scheduled tasks
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RunningScheduledTaskInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RunningScheduledTaskInfo>>> GetRunningScheduledTasksRequestscheduledrunningGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a specfic scheduled task - {GetScheduledTaskRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specfic scheduled task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledTaskInfo</returns>
        System.Threading.Tasks.Task<ScheduledTaskInfo> GetScheduledTaskRequestscheduledGroupNameGetAsync(string accept, string group, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a specfic scheduled task - {GetScheduledTaskRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a specfic scheduled task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledTaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledTaskInfo>> GetScheduledTaskRequestscheduledGroupNameGetWithHttpInfoAsync(string accept, string group, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the log entries from a long running task - {GetTaskExecutionLogsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the log entries from a long running task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskExecutionLogEntry&gt;</returns>
        System.Threading.Tasks.Task<List<TaskExecutionLogEntry>> GetTaskExecutionLogsRequestTaskIdlogsGetAsync(string accept, string taskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the log entries from a long running task - {GetTaskExecutionLogsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the log entries from a long running task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskExecutionLogEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskExecutionLogEntry>>> GetTaskExecutionLogsRequestTaskIdlogsGetWithHttpInfoAsync(string accept, string taskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the state of a long running task - {GetTaskInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the state of a long running task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> GetTaskInfoRequestTaskIdGetAsync(string accept, string taskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the state of a long running task - {GetTaskInfoRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the state of a long running task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> GetTaskInfoRequestTaskIdGetWithHttpInfoAsync(string accept, string taskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the state of long running tasks by correlation id - {GetTasksInfoByCorrelationIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the state of long running tasks by correlation id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The task correlation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TaskInfo>> GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGetAsync(string accept, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the state of long running tasks by correlation id - {GetTasksInfoByCorrelationIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the state of long running tasks by correlation id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The task correlation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskInfo>>> GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGetWithHttpInfoAsync(string accept, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Queue a new task activity - {QueueActivityTaskRequest}
        /// </summary>
        /// <remarks>
        /// Queue a new task activity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> QueueActivityTaskRequestactivitiesTaskIdPostAsync(string accept, string taskId, QueueActivityTaskRequest body = default(QueueActivityTaskRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Queue a new task activity - {QueueActivityTaskRequest}
        /// </summary>
        /// <remarks>
        /// Queue a new task activity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> QueueActivityTaskRequestactivitiesTaskIdPostWithHttpInfoAsync(string accept, string taskId, QueueActivityTaskRequest body = default(QueueActivityTaskRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Queue a new task workflow - {QueueWorkflowTaskRequest}
        /// </summary>
        /// <remarks>
        /// Queue a new task workflow
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> QueueWorkflowTaskRequestworkflowsTaskIdPostAsync(string accept, string taskId, QueueWorkflowTaskRequest body = default(QueueWorkflowTaskRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Queue a new task workflow - {QueueWorkflowTaskRequest}
        /// </summary>
        /// <remarks>
        /// Queue a new task workflow
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> QueueWorkflowTaskRequestworkflowsTaskIdPostWithHttpInfoAsync(string accept, string taskId, QueueWorkflowTaskRequest body = default(QueueWorkflowTaskRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a given trigger of a scheduled task - {RemoveScheduledTaskTriggerRequest}
        /// </summary>
        /// <remarks>
        /// Remove a given trigger of a scheduled task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledTaskInfo</returns>
        System.Threading.Tasks.Task<ScheduledTaskInfo> RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDeleteAsync(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a given trigger of a scheduled task - {RemoveScheduledTaskTriggerRequest}
        /// </summary>
        /// <remarks>
        /// Remove a given trigger of a scheduled task
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledTaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledTaskInfo>> RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDeleteWithHttpInfoAsync(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a scheduled activity task based on a activity class - {ScheduleTaskActivityRequest}
        /// </summary>
        /// <remarks>
        /// Create a scheduled activity task based on a activity class
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledTaskInfo</returns>
        System.Threading.Tasks.Task<ScheduledTaskInfo> ScheduleTaskActivityRequestscheduledactivitiesGroupNamePostAsync(string accept, string group, string name, ScheduleTaskActivityRequest body = default(ScheduleTaskActivityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a scheduled activity task based on a activity class - {ScheduleTaskActivityRequest}
        /// </summary>
        /// <remarks>
        /// Create a scheduled activity task based on a activity class
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledTaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledTaskInfo>> ScheduleTaskActivityRequestscheduledactivitiesGroupNamePostWithHttpInfoAsync(string accept, string group, string name, ScheduleTaskActivityRequest body = default(ScheduleTaskActivityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a scheduled workflow task based on a workflow file - {ScheduleTaskWorkflowRequest}
        /// </summary>
        /// <remarks>
        /// Create a scheduled workflow task based on a workflow file
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledTaskInfo</returns>
        System.Threading.Tasks.Task<ScheduledTaskInfo> ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePostAsync(string accept, string group, string name, ScheduleTaskWorkflowRequest body = default(ScheduleTaskWorkflowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a scheduled workflow task based on a workflow file - {ScheduleTaskWorkflowRequest}
        /// </summary>
        /// <remarks>
        /// Create a scheduled workflow task based on a workflow file
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledTaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledTaskInfo>> ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePostWithHttpInfoAsync(string accept, string group, string name, ScheduleTaskWorkflowRequest body = default(ScheduleTaskWorkflowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApi : ITasksApiSync, ITasksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TasksApi : ITasksApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TasksApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add or update a trigger of a scheduled task - {AddOrUpdateScheduledTaskTrigger} Add or update a trigger of a scheduled task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ScheduledTaskInfo</returns>
        public ScheduledTaskInfo AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName, AddOrUpdateScheduledTaskTrigger body = default(AddOrUpdateScheduledTaskTrigger))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> localVarResponse = AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreateWithHttpInfo(accept, taskGroup, taskName, triggerGroup, triggerName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update a trigger of a scheduled task - {AddOrUpdateScheduledTaskTrigger} Add or update a trigger of a scheduled task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ScheduledTaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreateWithHttpInfo(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName, AddOrUpdateScheduledTaskTrigger body = default(AddOrUpdateScheduledTaskTrigger))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate");

            // verify the required parameter 'taskGroup' is set
            if (taskGroup == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskGroup' when calling TasksApi->AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate");

            // verify the required parameter 'taskName' is set
            if (taskName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskName' when calling TasksApi->AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate");

            // verify the required parameter 'triggerGroup' is set
            if (triggerGroup == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'triggerGroup' when calling TasksApi->AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate");

            // verify the required parameter 'triggerName' is set
            if (triggerName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'triggerName' when calling TasksApi->AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskGroup", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskGroup)); // path parameter
            localVarRequestOptions.PathParameters.Add("TaskName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskName)); // path parameter
            localVarRequestOptions.PathParameters.Add("TriggerGroup", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(triggerGroup)); // path parameter
            localVarRequestOptions.PathParameters.Add("TriggerName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(triggerName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ScheduledTaskInfo>("/tasks/scheduled/{TaskGroup}/{TaskName}/triggers/{TriggerGroup}/{TriggerName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or update a trigger of a scheduled task - {AddOrUpdateScheduledTaskTrigger} Add or update a trigger of a scheduled task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledTaskInfo</returns>
        public async System.Threading.Tasks.Task<ScheduledTaskInfo> AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreateAsync(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName, AddOrUpdateScheduledTaskTrigger body = default(AddOrUpdateScheduledTaskTrigger), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> localVarResponse = await AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreateWithHttpInfoAsync(accept, taskGroup, taskName, triggerGroup, triggerName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update a trigger of a scheduled task - {AddOrUpdateScheduledTaskTrigger} Add or update a trigger of a scheduled task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledTaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo>> AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreateWithHttpInfoAsync(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName, AddOrUpdateScheduledTaskTrigger body = default(AddOrUpdateScheduledTaskTrigger), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate");

            // verify the required parameter 'taskGroup' is set
            if (taskGroup == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskGroup' when calling TasksApi->AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate");

            // verify the required parameter 'taskName' is set
            if (taskName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskName' when calling TasksApi->AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate");

            // verify the required parameter 'triggerGroup' is set
            if (triggerGroup == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'triggerGroup' when calling TasksApi->AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate");

            // verify the required parameter 'triggerName' is set
            if (triggerName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'triggerName' when calling TasksApi->AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskGroup", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskGroup)); // path parameter
            localVarRequestOptions.PathParameters.Add("TaskName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskName)); // path parameter
            localVarRequestOptions.PathParameters.Add("TriggerGroup", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(triggerGroup)); // path parameter
            localVarRequestOptions.PathParameters.Add("TriggerName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(triggerName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ScheduledTaskInfo>("/tasks/scheduled/{TaskGroup}/{TaskName}/triggers/{TriggerGroup}/{TriggerName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOrUpdateScheduledTaskTriggerscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancels the specified long running (batch processing) task. - {CancelTaskRequest} Cancels the specified long running (batch processing) task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CancelTaskRequestTaskIdcancelPost(string accept, string taskId, Object body = default(Object))
        {
            CancelTaskRequestTaskIdcancelPostWithHttpInfo(accept, taskId, body);
        }

        /// <summary>
        /// Cancels the specified long running (batch processing) task. - {CancelTaskRequest} Cancels the specified long running (batch processing) task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> CancelTaskRequestTaskIdcancelPostWithHttpInfo(string accept, string taskId, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->CancelTaskRequestTaskIdcancelPost");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->CancelTaskRequestTaskIdcancelPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tasks/{TaskId}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelTaskRequestTaskIdcancelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancels the specified long running (batch processing) task. - {CancelTaskRequest} Cancels the specified long running (batch processing) task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelTaskRequestTaskIdcancelPostAsync(string accept, string taskId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelTaskRequestTaskIdcancelPostWithHttpInfoAsync(accept, taskId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancels the specified long running (batch processing) task. - {CancelTaskRequest} Cancels the specified long running (batch processing) task.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> CancelTaskRequestTaskIdcancelPostWithHttpInfoAsync(string accept, string taskId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->CancelTaskRequestTaskIdcancelPost");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->CancelTaskRequestTaskIdcancelPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tasks/{TaskId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelTaskRequestTaskIdcancelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all the scheduled task activities - {DeleteAllScheduledTasksRequest} Remove all the scheduled task activities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns></returns>
        public void DeleteAllScheduledTasksRequestscheduledallDelete(string accept)
        {
            DeleteAllScheduledTasksRequestscheduledallDeleteWithHttpInfo(accept);
        }

        /// <summary>
        /// Remove all the scheduled task activities - {DeleteAllScheduledTasksRequest} Remove all the scheduled task activities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteAllScheduledTasksRequestscheduledallDeleteWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->DeleteAllScheduledTasksRequestscheduledallDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tasks/scheduled/all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllScheduledTasksRequestscheduledallDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all the scheduled task activities - {DeleteAllScheduledTasksRequest} Remove all the scheduled task activities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllScheduledTasksRequestscheduledallDeleteAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAllScheduledTasksRequestscheduledallDeleteWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove all the scheduled task activities - {DeleteAllScheduledTasksRequest} Remove all the scheduled task activities
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteAllScheduledTasksRequestscheduledallDeleteWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->DeleteAllScheduledTasksRequestscheduledallDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tasks/scheduled/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllScheduledTasksRequestscheduledallDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a specific scheduled task activity - {DeleteScheduledTaskRequest} Remove a specific scheduled task activity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <returns></returns>
        public void DeleteScheduledTaskRequestscheduledGroupNameDelete(string accept, string group, string name)
        {
            DeleteScheduledTaskRequestscheduledGroupNameDeleteWithHttpInfo(accept, group, name);
        }

        /// <summary>
        /// Remove a specific scheduled task activity - {DeleteScheduledTaskRequest} Remove a specific scheduled task activity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteScheduledTaskRequestscheduledGroupNameDeleteWithHttpInfo(string accept, string group, string name)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->DeleteScheduledTaskRequestscheduledGroupNameDelete");

            // verify the required parameter 'group' is set
            if (group == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'group' when calling TasksApi->DeleteScheduledTaskRequestscheduledGroupNameDelete");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TasksApi->DeleteScheduledTaskRequestscheduledGroupNameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Group", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(group)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tasks/scheduled/{Group}/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteScheduledTaskRequestscheduledGroupNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a specific scheduled task activity - {DeleteScheduledTaskRequest} Remove a specific scheduled task activity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScheduledTaskRequestscheduledGroupNameDeleteAsync(string accept, string group, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteScheduledTaskRequestscheduledGroupNameDeleteWithHttpInfoAsync(accept, group, name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a specific scheduled task activity - {DeleteScheduledTaskRequest} Remove a specific scheduled task activity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteScheduledTaskRequestscheduledGroupNameDeleteWithHttpInfoAsync(string accept, string group, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->DeleteScheduledTaskRequestscheduledGroupNameDelete");

            // verify the required parameter 'group' is set
            if (group == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'group' when calling TasksApi->DeleteScheduledTaskRequestscheduledGroupNameDelete");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TasksApi->DeleteScheduledTaskRequestscheduledGroupNameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Group", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(group)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tasks/scheduled/{Group}/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteScheduledTaskRequestscheduledGroupNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a long running task - {DeleteTaskInfoRequest} Delete a long running task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="force">force delete task. (optional)</param>
        /// <returns></returns>
        public void DeleteTaskInfoRequestTaskIdDelete(string accept, string taskId, bool? force = default(bool?))
        {
            DeleteTaskInfoRequestTaskIdDeleteWithHttpInfo(accept, taskId, force);
        }

        /// <summary>
        /// Delete a long running task - {DeleteTaskInfoRequest} Delete a long running task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="force">force delete task. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteTaskInfoRequestTaskIdDeleteWithHttpInfo(string accept, string taskId, bool? force = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->DeleteTaskInfoRequestTaskIdDelete");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteTaskInfoRequestTaskIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Force", force));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tasks/{TaskId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTaskInfoRequestTaskIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a long running task - {DeleteTaskInfoRequest} Delete a long running task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="force">force delete task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskInfoRequestTaskIdDeleteAsync(string accept, string taskId, bool? force = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTaskInfoRequestTaskIdDeleteWithHttpInfoAsync(accept, taskId, force, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a long running task - {DeleteTaskInfoRequest} Delete a long running task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="force">force delete task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteTaskInfoRequestTaskIdDeleteWithHttpInfoAsync(string accept, string taskId, bool? force = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->DeleteTaskInfoRequestTaskIdDelete");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteTaskInfoRequestTaskIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Force", force));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tasks/{TaskId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTaskInfoRequestTaskIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all the scheduled tasks - {GetAllScheduledTasksRequest} Retrieve a list of all the scheduled tasks
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;ScheduledTaskInfo&gt;</returns>
        public List<ScheduledTaskInfo> GetAllScheduledTasksRequestscheduledallGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScheduledTaskInfo>> localVarResponse = GetAllScheduledTasksRequestscheduledallGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all the scheduled tasks - {GetAllScheduledTasksRequest} Retrieve a list of all the scheduled tasks
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;ScheduledTaskInfo&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScheduledTaskInfo>> GetAllScheduledTasksRequestscheduledallGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetAllScheduledTasksRequestscheduledallGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ScheduledTaskInfo>>("/tasks/scheduled/all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllScheduledTasksRequestscheduledallGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all the scheduled tasks - {GetAllScheduledTasksRequest} Retrieve a list of all the scheduled tasks
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduledTaskInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ScheduledTaskInfo>> GetAllScheduledTasksRequestscheduledallGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScheduledTaskInfo>> localVarResponse = await GetAllScheduledTasksRequestscheduledallGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all the scheduled tasks - {GetAllScheduledTasksRequest} Retrieve a list of all the scheduled tasks
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledTaskInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<ScheduledTaskInfo>>> GetAllScheduledTasksRequestscheduledallGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetAllScheduledTasksRequestscheduledallGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ScheduledTaskInfo>>("/tasks/scheduled/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllScheduledTasksRequestscheduledallGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of long running tasks for a specified requester - {GetRequesterTasksInfoRequest} Retrieve a list of long running tasks for a specified requester
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="requester">The username of the user that requested the tasks. (optional)</param>
        /// <param name="lastModified">The last modification date of the task. Use this to limit the results to items after this date (optional)</param>
        /// <param name="filterTaskNames">The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine) (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        public List<TaskInfo> GetRequesterTasksInfoRequestGet(string accept, string requester = default(string), DateTime? lastModified = default(DateTime?), List<string> filterTaskNames = default(List<string>))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> localVarResponse = GetRequesterTasksInfoRequestGetWithHttpInfo(accept, requester, lastModified, filterTaskNames);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of long running tasks for a specified requester - {GetRequesterTasksInfoRequest} Retrieve a list of long running tasks for a specified requester
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="requester">The username of the user that requested the tasks. (optional)</param>
        /// <param name="lastModified">The last modification date of the task. Use this to limit the results to items after this date (optional)</param>
        /// <param name="filterTaskNames">The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine) (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> GetRequesterTasksInfoRequestGetWithHttpInfo(string accept, string requester = default(string), DateTime? lastModified = default(DateTime?), List<string> filterTaskNames = default(List<string>))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetRequesterTasksInfoRequestGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (requester != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Requester", requester));
            }
            if (lastModified != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "LastModified", lastModified));
            }
            if (filterTaskNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "FilterTaskNames", filterTaskNames));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TaskInfo>>("/tasks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRequesterTasksInfoRequestGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of long running tasks for a specified requester - {GetRequesterTasksInfoRequest} Retrieve a list of long running tasks for a specified requester
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="requester">The username of the user that requested the tasks. (optional)</param>
        /// <param name="lastModified">The last modification date of the task. Use this to limit the results to items after this date (optional)</param>
        /// <param name="filterTaskNames">The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskInfo>> GetRequesterTasksInfoRequestGetAsync(string accept, string requester = default(string), DateTime? lastModified = default(DateTime?), List<string> filterTaskNames = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> localVarResponse = await GetRequesterTasksInfoRequestGetWithHttpInfoAsync(accept, requester, lastModified, filterTaskNames, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of long running tasks for a specified requester - {GetRequesterTasksInfoRequest} Retrieve a list of long running tasks for a specified requester
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="requester">The username of the user that requested the tasks. (optional)</param>
        /// <param name="lastModified">The last modification date of the task. Use this to limit the results to items after this date (optional)</param>
        /// <param name="filterTaskNames">The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>>> GetRequesterTasksInfoRequestGetWithHttpInfoAsync(string accept, string requester = default(string), DateTime? lastModified = default(DateTime?), List<string> filterTaskNames = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetRequesterTasksInfoRequestGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (requester != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Requester", requester));
            }
            if (lastModified != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "LastModified", lastModified));
            }
            if (filterTaskNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "FilterTaskNames", filterTaskNames));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TaskInfo>>("/tasks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRequesterTasksInfoRequestGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the job info of the currently running scheduled tasks - {GetRunningScheduledTasksRequest} Retrieve the job info of the currently running scheduled tasks
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;RunningScheduledTaskInfo&gt;</returns>
        public List<RunningScheduledTaskInfo> GetRunningScheduledTasksRequestscheduledrunningGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<RunningScheduledTaskInfo>> localVarResponse = GetRunningScheduledTasksRequestscheduledrunningGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the job info of the currently running scheduled tasks - {GetRunningScheduledTasksRequest} Retrieve the job info of the currently running scheduled tasks
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;RunningScheduledTaskInfo&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<RunningScheduledTaskInfo>> GetRunningScheduledTasksRequestscheduledrunningGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetRunningScheduledTasksRequestscheduledrunningGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RunningScheduledTaskInfo>>("/tasks/scheduled/running", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunningScheduledTasksRequestscheduledrunningGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the job info of the currently running scheduled tasks - {GetRunningScheduledTasksRequest} Retrieve the job info of the currently running scheduled tasks
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RunningScheduledTaskInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<RunningScheduledTaskInfo>> GetRunningScheduledTasksRequestscheduledrunningGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<RunningScheduledTaskInfo>> localVarResponse = await GetRunningScheduledTasksRequestscheduledrunningGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the job info of the currently running scheduled tasks - {GetRunningScheduledTasksRequest} Retrieve the job info of the currently running scheduled tasks
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RunningScheduledTaskInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<RunningScheduledTaskInfo>>> GetRunningScheduledTasksRequestscheduledrunningGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetRunningScheduledTasksRequestscheduledrunningGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RunningScheduledTaskInfo>>("/tasks/scheduled/running", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunningScheduledTasksRequestscheduledrunningGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a specfic scheduled task - {GetScheduledTaskRequest} Retrieve a specfic scheduled task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <returns>ScheduledTaskInfo</returns>
        public ScheduledTaskInfo GetScheduledTaskRequestscheduledGroupNameGet(string accept, string group, string name)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> localVarResponse = GetScheduledTaskRequestscheduledGroupNameGetWithHttpInfo(accept, group, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a specfic scheduled task - {GetScheduledTaskRequest} Retrieve a specfic scheduled task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <returns>ApiResponse of ScheduledTaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> GetScheduledTaskRequestscheduledGroupNameGetWithHttpInfo(string accept, string group, string name)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetScheduledTaskRequestscheduledGroupNameGet");

            // verify the required parameter 'group' is set
            if (group == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'group' when calling TasksApi->GetScheduledTaskRequestscheduledGroupNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TasksApi->GetScheduledTaskRequestscheduledGroupNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Group", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(group)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ScheduledTaskInfo>("/tasks/scheduled/{Group}/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScheduledTaskRequestscheduledGroupNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a specfic scheduled task - {GetScheduledTaskRequest} Retrieve a specfic scheduled task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledTaskInfo</returns>
        public async System.Threading.Tasks.Task<ScheduledTaskInfo> GetScheduledTaskRequestscheduledGroupNameGetAsync(string accept, string group, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> localVarResponse = await GetScheduledTaskRequestscheduledGroupNameGetWithHttpInfoAsync(accept, group, name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a specfic scheduled task - {GetScheduledTaskRequest} Retrieve a specfic scheduled task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">the affinity group of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledTaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo>> GetScheduledTaskRequestscheduledGroupNameGetWithHttpInfoAsync(string accept, string group, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetScheduledTaskRequestscheduledGroupNameGet");

            // verify the required parameter 'group' is set
            if (group == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'group' when calling TasksApi->GetScheduledTaskRequestscheduledGroupNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TasksApi->GetScheduledTaskRequestscheduledGroupNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Group", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(group)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ScheduledTaskInfo>("/tasks/scheduled/{Group}/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScheduledTaskRequestscheduledGroupNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the log entries from a long running task - {GetTaskExecutionLogsRequest} Retrieve the log entries from a long running task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <returns>List&lt;TaskExecutionLogEntry&gt;</returns>
        public List<TaskExecutionLogEntry> GetTaskExecutionLogsRequestTaskIdlogsGet(string accept, string taskId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskExecutionLogEntry>> localVarResponse = GetTaskExecutionLogsRequestTaskIdlogsGetWithHttpInfo(accept, taskId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the log entries from a long running task - {GetTaskExecutionLogsRequest} Retrieve the log entries from a long running task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <returns>ApiResponse of List&lt;TaskExecutionLogEntry&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskExecutionLogEntry>> GetTaskExecutionLogsRequestTaskIdlogsGetWithHttpInfo(string accept, string taskId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetTaskExecutionLogsRequestTaskIdlogsGet");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTaskExecutionLogsRequestTaskIdlogsGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TaskExecutionLogEntry>>("/tasks/{TaskId}/logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskExecutionLogsRequestTaskIdlogsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the log entries from a long running task - {GetTaskExecutionLogsRequest} Retrieve the log entries from a long running task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskExecutionLogEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskExecutionLogEntry>> GetTaskExecutionLogsRequestTaskIdlogsGetAsync(string accept, string taskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskExecutionLogEntry>> localVarResponse = await GetTaskExecutionLogsRequestTaskIdlogsGetWithHttpInfoAsync(accept, taskId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the log entries from a long running task - {GetTaskExecutionLogsRequest} Retrieve the log entries from a long running task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskExecutionLogEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskExecutionLogEntry>>> GetTaskExecutionLogsRequestTaskIdlogsGetWithHttpInfoAsync(string accept, string taskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetTaskExecutionLogsRequestTaskIdlogsGet");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTaskExecutionLogsRequestTaskIdlogsGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TaskExecutionLogEntry>>("/tasks/{TaskId}/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskExecutionLogsRequestTaskIdlogsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the state of a long running task - {GetTaskInfoRequest} Retrieve the state of a long running task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo GetTaskInfoRequestTaskIdGet(string accept, string taskId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = GetTaskInfoRequestTaskIdGetWithHttpInfo(accept, taskId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the state of a long running task - {GetTaskInfoRequest} Retrieve the state of a long running task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> GetTaskInfoRequestTaskIdGetWithHttpInfo(string accept, string taskId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetTaskInfoRequestTaskIdGet");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTaskInfoRequestTaskIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<TaskInfo>("/tasks/{TaskId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskInfoRequestTaskIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the state of a long running task - {GetTaskInfoRequest} Retrieve the state of a long running task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> GetTaskInfoRequestTaskIdGetAsync(string accept, string taskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await GetTaskInfoRequestTaskIdGetWithHttpInfoAsync(accept, taskId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the state of a long running task - {GetTaskInfoRequest} Retrieve the state of a long running task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> GetTaskInfoRequestTaskIdGetWithHttpInfoAsync(string accept, string taskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetTaskInfoRequestTaskIdGet");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTaskInfoRequestTaskIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskInfo>("/tasks/{TaskId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskInfoRequestTaskIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the state of long running tasks by correlation id - {GetTasksInfoByCorrelationIdRequest} Retrieve the state of long running tasks by correlation id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The task correlation identifier</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        public List<TaskInfo> GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGet(string accept, string id)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> localVarResponse = GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGetWithHttpInfo(accept, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the state of long running tasks by correlation id - {GetTasksInfoByCorrelationIdRequest} Retrieve the state of long running tasks by correlation id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The task correlation identifier</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGetWithHttpInfo(string accept, string id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TaskInfo>>("/tasks/byCorrelationId/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the state of long running tasks by correlation id - {GetTasksInfoByCorrelationIdRequest} Retrieve the state of long running tasks by correlation id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The task correlation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskInfo>> GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGetAsync(string accept, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>> localVarResponse = await GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGetWithHttpInfoAsync(accept, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the state of long running tasks by correlation id - {GetTasksInfoByCorrelationIdRequest} Retrieve the state of long running tasks by correlation id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The task correlation identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TaskInfo>>> GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGetWithHttpInfoAsync(string accept, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGet");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TaskInfo>>("/tasks/byCorrelationId/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTasksInfoByCorrelationIdRequestbyCorrelationIdIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Queue a new task activity - {QueueActivityTaskRequest} Queue a new task activity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo QueueActivityTaskRequestactivitiesTaskIdPost(string accept, string taskId, QueueActivityTaskRequest body = default(QueueActivityTaskRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = QueueActivityTaskRequestactivitiesTaskIdPostWithHttpInfo(accept, taskId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Queue a new task activity - {QueueActivityTaskRequest} Queue a new task activity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> QueueActivityTaskRequestactivitiesTaskIdPostWithHttpInfo(string accept, string taskId, QueueActivityTaskRequest body = default(QueueActivityTaskRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->QueueActivityTaskRequestactivitiesTaskIdPost");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->QueueActivityTaskRequestactivitiesTaskIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/tasks/activities/{TaskId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueActivityTaskRequestactivitiesTaskIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Queue a new task activity - {QueueActivityTaskRequest} Queue a new task activity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> QueueActivityTaskRequestactivitiesTaskIdPostAsync(string accept, string taskId, QueueActivityTaskRequest body = default(QueueActivityTaskRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await QueueActivityTaskRequestactivitiesTaskIdPostWithHttpInfoAsync(accept, taskId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Queue a new task activity - {QueueActivityTaskRequest} Queue a new task activity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> QueueActivityTaskRequestactivitiesTaskIdPostWithHttpInfoAsync(string accept, string taskId, QueueActivityTaskRequest body = default(QueueActivityTaskRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->QueueActivityTaskRequestactivitiesTaskIdPost");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->QueueActivityTaskRequestactivitiesTaskIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/tasks/activities/{TaskId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueActivityTaskRequestactivitiesTaskIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Queue a new task workflow - {QueueWorkflowTaskRequest} Queue a new task workflow
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo QueueWorkflowTaskRequestworkflowsTaskIdPost(string accept, string taskId, QueueWorkflowTaskRequest body = default(QueueWorkflowTaskRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = QueueWorkflowTaskRequestworkflowsTaskIdPostWithHttpInfo(accept, taskId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Queue a new task workflow - {QueueWorkflowTaskRequest} Queue a new task workflow
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> QueueWorkflowTaskRequestworkflowsTaskIdPostWithHttpInfo(string accept, string taskId, QueueWorkflowTaskRequest body = default(QueueWorkflowTaskRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->QueueWorkflowTaskRequestworkflowsTaskIdPost");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->QueueWorkflowTaskRequestworkflowsTaskIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/tasks/workflows/{TaskId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueWorkflowTaskRequestworkflowsTaskIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Queue a new task workflow - {QueueWorkflowTaskRequest} Queue a new task workflow
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> QueueWorkflowTaskRequestworkflowsTaskIdPostAsync(string accept, string taskId, QueueWorkflowTaskRequest body = default(QueueWorkflowTaskRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo> localVarResponse = await QueueWorkflowTaskRequestworkflowsTaskIdPostWithHttpInfoAsync(accept, taskId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Queue a new task workflow - {QueueWorkflowTaskRequest} Queue a new task workflow
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskId">The task identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TaskInfo>> QueueWorkflowTaskRequestworkflowsTaskIdPostWithHttpInfoAsync(string accept, string taskId, QueueWorkflowTaskRequest body = default(QueueWorkflowTaskRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->QueueWorkflowTaskRequestworkflowsTaskIdPost");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->QueueWorkflowTaskRequestworkflowsTaskIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/tasks/workflows/{TaskId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueueWorkflowTaskRequestworkflowsTaskIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a given trigger of a scheduled task - {RemoveScheduledTaskTriggerRequest} Remove a given trigger of a scheduled task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <returns>ScheduledTaskInfo</returns>
        public ScheduledTaskInfo RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> localVarResponse = RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDeleteWithHttpInfo(accept, taskGroup, taskName, triggerGroup, triggerName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a given trigger of a scheduled task - {RemoveScheduledTaskTriggerRequest} Remove a given trigger of a scheduled task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <returns>ApiResponse of ScheduledTaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDeleteWithHttpInfo(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete");

            // verify the required parameter 'taskGroup' is set
            if (taskGroup == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskGroup' when calling TasksApi->RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete");

            // verify the required parameter 'taskName' is set
            if (taskName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskName' when calling TasksApi->RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete");

            // verify the required parameter 'triggerGroup' is set
            if (triggerGroup == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'triggerGroup' when calling TasksApi->RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete");

            // verify the required parameter 'triggerName' is set
            if (triggerName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'triggerName' when calling TasksApi->RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskGroup", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskGroup)); // path parameter
            localVarRequestOptions.PathParameters.Add("TaskName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskName)); // path parameter
            localVarRequestOptions.PathParameters.Add("TriggerGroup", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(triggerGroup)); // path parameter
            localVarRequestOptions.PathParameters.Add("TriggerName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(triggerName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ScheduledTaskInfo>("/tasks/scheduled/{TaskGroup}/{TaskName}/triggers/{TriggerGroup}/{TriggerName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a given trigger of a scheduled task - {RemoveScheduledTaskTriggerRequest} Remove a given trigger of a scheduled task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledTaskInfo</returns>
        public async System.Threading.Tasks.Task<ScheduledTaskInfo> RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDeleteAsync(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> localVarResponse = await RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDeleteWithHttpInfoAsync(accept, taskGroup, taskName, triggerGroup, triggerName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a given trigger of a scheduled task - {RemoveScheduledTaskTriggerRequest} Remove a given trigger of a scheduled task
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="taskGroup">the affinity group of the scheduled job.</param>
        /// <param name="taskName">the name of the scheduled job.</param>
        /// <param name="triggerGroup">the trigger affinity group.</param>
        /// <param name="triggerName">the trigger name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledTaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo>> RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDeleteWithHttpInfoAsync(string accept, string taskGroup, string taskName, string triggerGroup, string triggerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete");

            // verify the required parameter 'taskGroup' is set
            if (taskGroup == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskGroup' when calling TasksApi->RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete");

            // verify the required parameter 'taskName' is set
            if (taskName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'taskName' when calling TasksApi->RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete");

            // verify the required parameter 'triggerGroup' is set
            if (triggerGroup == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'triggerGroup' when calling TasksApi->RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete");

            // verify the required parameter 'triggerName' is set
            if (triggerName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'triggerName' when calling TasksApi->RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("TaskGroup", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskGroup)); // path parameter
            localVarRequestOptions.PathParameters.Add("TaskName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(taskName)); // path parameter
            localVarRequestOptions.PathParameters.Add("TriggerGroup", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(triggerGroup)); // path parameter
            localVarRequestOptions.PathParameters.Add("TriggerName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(triggerName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ScheduledTaskInfo>("/tasks/scheduled/{TaskGroup}/{TaskName}/triggers/{TriggerGroup}/{TriggerName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveScheduledTaskTriggerRequestscheduledTaskGroupTaskNametriggersTriggerGroupTriggerNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a scheduled activity task based on a activity class - {ScheduleTaskActivityRequest} Create a scheduled activity task based on a activity class
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ScheduledTaskInfo</returns>
        public ScheduledTaskInfo ScheduleTaskActivityRequestscheduledactivitiesGroupNamePost(string accept, string group, string name, ScheduleTaskActivityRequest body = default(ScheduleTaskActivityRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> localVarResponse = ScheduleTaskActivityRequestscheduledactivitiesGroupNamePostWithHttpInfo(accept, group, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a scheduled activity task based on a activity class - {ScheduleTaskActivityRequest} Create a scheduled activity task based on a activity class
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ScheduledTaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> ScheduleTaskActivityRequestscheduledactivitiesGroupNamePostWithHttpInfo(string accept, string group, string name, ScheduleTaskActivityRequest body = default(ScheduleTaskActivityRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->ScheduleTaskActivityRequestscheduledactivitiesGroupNamePost");

            // verify the required parameter 'group' is set
            if (group == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'group' when calling TasksApi->ScheduleTaskActivityRequestscheduledactivitiesGroupNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TasksApi->ScheduleTaskActivityRequestscheduledactivitiesGroupNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Group", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(group)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ScheduledTaskInfo>("/tasks/scheduled/activities/{Group}/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduleTaskActivityRequestscheduledactivitiesGroupNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a scheduled activity task based on a activity class - {ScheduleTaskActivityRequest} Create a scheduled activity task based on a activity class
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledTaskInfo</returns>
        public async System.Threading.Tasks.Task<ScheduledTaskInfo> ScheduleTaskActivityRequestscheduledactivitiesGroupNamePostAsync(string accept, string group, string name, ScheduleTaskActivityRequest body = default(ScheduleTaskActivityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> localVarResponse = await ScheduleTaskActivityRequestscheduledactivitiesGroupNamePostWithHttpInfoAsync(accept, group, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a scheduled activity task based on a activity class - {ScheduleTaskActivityRequest} Create a scheduled activity task based on a activity class
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledTaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo>> ScheduleTaskActivityRequestscheduledactivitiesGroupNamePostWithHttpInfoAsync(string accept, string group, string name, ScheduleTaskActivityRequest body = default(ScheduleTaskActivityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->ScheduleTaskActivityRequestscheduledactivitiesGroupNamePost");

            // verify the required parameter 'group' is set
            if (group == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'group' when calling TasksApi->ScheduleTaskActivityRequestscheduledactivitiesGroupNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TasksApi->ScheduleTaskActivityRequestscheduledactivitiesGroupNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Group", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(group)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ScheduledTaskInfo>("/tasks/scheduled/activities/{Group}/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduleTaskActivityRequestscheduledactivitiesGroupNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a scheduled workflow task based on a workflow file - {ScheduleTaskWorkflowRequest} Create a scheduled workflow task based on a workflow file
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ScheduledTaskInfo</returns>
        public ScheduledTaskInfo ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePost(string accept, string group, string name, ScheduleTaskWorkflowRequest body = default(ScheduleTaskWorkflowRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> localVarResponse = ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePostWithHttpInfo(accept, group, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a scheduled workflow task based on a workflow file - {ScheduleTaskWorkflowRequest} Create a scheduled workflow task based on a workflow file
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ScheduledTaskInfo</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePostWithHttpInfo(string accept, string group, string name, ScheduleTaskWorkflowRequest body = default(ScheduleTaskWorkflowRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePost");

            // verify the required parameter 'group' is set
            if (group == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'group' when calling TasksApi->ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TasksApi->ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Group", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(group)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ScheduledTaskInfo>("/tasks/scheduled/workflows/{Group}/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a scheduled workflow task based on a workflow file - {ScheduleTaskWorkflowRequest} Create a scheduled workflow task based on a workflow file
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledTaskInfo</returns>
        public async System.Threading.Tasks.Task<ScheduledTaskInfo> ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePostAsync(string accept, string group, string name, ScheduleTaskWorkflowRequest body = default(ScheduleTaskWorkflowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo> localVarResponse = await ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePostWithHttpInfoAsync(accept, group, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a scheduled workflow task based on a workflow file - {ScheduleTaskWorkflowRequest} Create a scheduled workflow task based on a workflow file
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="group">The group affinity of the scheduled job.</param>
        /// <param name="name">the name of the scheduled job.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledTaskInfo)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ScheduledTaskInfo>> ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePostWithHttpInfoAsync(string accept, string group, string name, ScheduleTaskWorkflowRequest body = default(ScheduleTaskWorkflowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TasksApi->ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePost");

            // verify the required parameter 'group' is set
            if (group == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'group' when calling TasksApi->ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TasksApi->ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Group", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(group)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ScheduledTaskInfo>("/tasks/scheduled/workflows/{Group}/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduleTaskWorkflowRequestscheduledworkflowsGroupNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
