/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryItemsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel all inventory reserved items associated to the specified owner and inventory location. - {CancelAllInventoryReservedItemsRequest}
        /// </summary>
        /// <remarks>
        /// Cancel all inventory reserved items associated to the specified owner and inventory location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">Gets or sets the unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPost(string accept, string ownerId, CancelAllInventoryReservedItemsRequest body = default(CancelAllInventoryReservedItemsRequest));

        /// <summary>
        /// Cancel all inventory reserved items associated to the specified owner and inventory location. - {CancelAllInventoryReservedItemsRequest}
        /// </summary>
        /// <remarks>
        /// Cancel all inventory reserved items associated to the specified owner and inventory location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">Gets or sets the unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPostWithHttpInfo(string accept, string ownerId, CancelAllInventoryReservedItemsRequest body = default(CancelAllInventoryReservedItemsRequest));
        /// <summary>
        /// Allows to cancel a list of inventory reserved items associated to the specified owner. - {CancelInventoryReservedItemsRequest}
        /// </summary>
        /// <remarks>
        /// Allows to cancel a list of inventory reserved items associated to the specified owner.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPost(string accept, string ownerId, CancelInventoryReservedItemsRequest body = default(CancelInventoryReservedItemsRequest));

        /// <summary>
        /// Allows to cancel a list of inventory reserved items associated to the specified owner. - {CancelInventoryReservedItemsRequest}
        /// </summary>
        /// <remarks>
        /// Allows to cancel a list of inventory reserved items associated to the specified owner.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPostWithHttpInfo(string accept, string ownerId, CancelInventoryReservedItemsRequest body = default(CancelInventoryReservedItemsRequest));
        /// <summary>
        /// Change the stock status of inventory reserved items from their current stock status to the new given stock status. - {ChangeInventoryReservedItemsStockStatusRequest}
        /// </summary>
        /// <remarks>
        /// Change the stock status of inventory reserved items from their current stock status to the new given stock status.Executing this request will only update the stock status of the specified reserved items. All corresponding order line items status will remain unchanged.The corresponding order must be reprocessed by using the PostProcessOrderRequest to get it&#39;s line items status updated with the new reserved stock status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ChangeInventoryReservedItemsStockStatusResult</returns>
        ChangeInventoryReservedItemsStockStatusResult ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPost(string accept, string ownerId, ChangeInventoryReservedItemsStockStatusRequest body = default(ChangeInventoryReservedItemsStockStatusRequest));

        /// <summary>
        /// Change the stock status of inventory reserved items from their current stock status to the new given stock status. - {ChangeInventoryReservedItemsStockStatusRequest}
        /// </summary>
        /// <remarks>
        /// Change the stock status of inventory reserved items from their current stock status to the new given stock status.Executing this request will only update the stock status of the specified reserved items. All corresponding order line items status will remain unchanged.The corresponding order must be reprocessed by using the PostProcessOrderRequest to get it&#39;s line items status updated with the new reserved stock status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ChangeInventoryReservedItemsStockStatusResult</returns>
        ApiResponse<ChangeInventoryReservedItemsStockStatusResult> ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPostWithHttpInfo(string accept, string ownerId, ChangeInventoryReservedItemsStockStatusRequest body = default(ChangeInventoryReservedItemsStockStatusRequest));
        /// <summary>
        /// Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed. - {ConfirmInventoryReservedOrderItemsRequest}
        /// </summary>
        /// <remarks>
        /// Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;InventoryReservedItem&gt;</returns>
        List<InventoryReservedItem> ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPost(string accept, string ownerId, ConfirmInventoryReservedOrderItemsRequest body = default(ConfirmInventoryReservedOrderItemsRequest));

        /// <summary>
        /// Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed. - {ConfirmInventoryReservedOrderItemsRequest}
        /// </summary>
        /// <remarks>
        /// Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryReservedItem&gt;</returns>
        ApiResponse<List<InventoryReservedItem>> ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPostWithHttpInfo(string accept, string ownerId, ConfirmInventoryReservedOrderItemsRequest body = default(ConfirmInventoryReservedOrderItemsRequest));
        /// <summary>
        /// Create or update an inventory item - {CreateOrUpdateInventoryItemRequest}
        /// </summary>
        /// <remarks>
        /// Create or update an inventory item
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryItem</returns>
        InventoryItem CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreate(string accept, string scopeId, string inventoryLocationId, string sku, CreateOrUpdateInventoryItemRequest body = default(CreateOrUpdateInventoryItemRequest));

        /// <summary>
        /// Create or update an inventory item - {CreateOrUpdateInventoryItemRequest}
        /// </summary>
        /// <remarks>
        /// Create or update an inventory item
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryItem</returns>
        ApiResponse<InventoryItem> CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreateWithHttpInfo(string accept, string scopeId, string inventoryLocationId, string sku, CreateOrUpdateInventoryItemRequest body = default(CreateOrUpdateInventoryItemRequest));
        /// <summary>
        /// Decrease an inventory quantity - {DecreaseInventoryQuantityRequest}
        /// </summary>
        /// <remarks>
        /// Decrease an inventory quantity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to remove from the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryQuantity</returns>
        InventoryQuantity DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPost(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object));

        /// <summary>
        /// Decrease an inventory quantity - {DecreaseInventoryQuantityRequest}
        /// </summary>
        /// <remarks>
        /// Decrease an inventory quantity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to remove from the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryQuantity</returns>
        ApiResponse<InventoryQuantity> DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPostWithHttpInfo(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object));
        /// <summary>
        /// Allows to send requests to evaluate inventory item availability - {EvaluateInventoryAvailabilityRequest}
        /// </summary>
        /// <remarks>
        /// Allows to send requests to evaluate inventory item availability.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;InventoryItemAvailabilityEvaluationResult&gt;</returns>
        List<InventoryItemAvailabilityEvaluationResult> EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePost(string accept, string ownerId, EvaluateInventoryAvailabilityRequest body = default(EvaluateInventoryAvailabilityRequest));

        /// <summary>
        /// Allows to send requests to evaluate inventory item availability - {EvaluateInventoryAvailabilityRequest}
        /// </summary>
        /// <remarks>
        /// Allows to send requests to evaluate inventory item availability.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItemAvailabilityEvaluationResult&gt;</returns>
        ApiResponse<List<InventoryItemAvailabilityEvaluationResult>> EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePostWithHttpInfo(string accept, string ownerId, EvaluateInventoryAvailabilityRequest body = default(EvaluateInventoryAvailabilityRequest));
        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemStatusByLocationAndSkusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;InventoryItemAvailability&gt;</returns>
        List<InventoryItemAvailability> FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPost(string accept, string scopeId, string inventoryLocationId, FindInventoryItemStatusByLocationAndSkusRequest body = default(FindInventoryItemStatusByLocationAndSkusRequest));

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemStatusByLocationAndSkusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItemAvailability&gt;</returns>
        ApiResponse<List<InventoryItemAvailability>> FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPostWithHttpInfo(string accept, string scopeId, string inventoryLocationId, FindInventoryItemStatusByLocationAndSkusRequest body = default(FindInventoryItemStatusByLocationAndSkusRequest));
        /// <summary>
        /// Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date - {FindInventoryItemStatusBySkuAndLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryItemAvailability</returns>
        InventoryItemAvailability FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPost(string accept, string scopeId, string sku, string inventoryLocationId, FindInventoryItemStatusBySkuAndLocationRequest body = default(FindInventoryItemStatusBySkuAndLocationRequest));

        /// <summary>
        /// Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date - {FindInventoryItemStatusBySkuAndLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryItemAvailability</returns>
        ApiResponse<InventoryItemAvailability> FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPostWithHttpInfo(string accept, string scopeId, string sku, string inventoryLocationId, FindInventoryItemStatusBySkuAndLocationRequest body = default(FindInventoryItemStatusBySkuAndLocationRequest));
        /// <summary>
        /// Retrieve a list of InventoryItem - {FindInventoryItemsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItem
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;InventoryItem&gt;</returns>
        List<InventoryItem> FindInventoryItemsRequestScopeIdfindPost(string accept, string scopeId, FindInventoryItemsRequest body = default(FindInventoryItemsRequest));

        /// <summary>
        /// Retrieve a list of InventoryItem - {FindInventoryItemsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItem
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItem&gt;</returns>
        ApiResponse<List<InventoryItem>> FindInventoryItemsRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindInventoryItemsRequest body = default(FindInventoryItemsRequest));
        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date - {FindInventoryItemsStatusByScopeAndSkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;InventoryItemAvailability&gt;</returns>
        List<InventoryItemAvailability> FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPost(string accept, string scopeId, string sku, FindInventoryItemsStatusByScopeAndSkuRequest body = default(FindInventoryItemsStatusByScopeAndSkuRequest));

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date - {FindInventoryItemsStatusByScopeAndSkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItemAvailability&gt;</returns>
        ApiResponse<List<InventoryItemAvailability>> FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPostWithHttpInfo(string accept, string scopeId, string sku, FindInventoryItemsStatusByScopeAndSkuRequest body = default(FindInventoryItemsStatusByScopeAndSkuRequest));
        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemsStatusByScopeAndSkusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;InventoryItemAvailability&gt;</returns>
        List<InventoryItemAvailability> FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPost(string accept, string scopeId, FindInventoryItemsStatusByScopeAndSkusRequest body = default(FindInventoryItemsStatusByScopeAndSkusRequest));

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemsStatusByScopeAndSkusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItemAvailability&gt;</returns>
        ApiResponse<List<InventoryItemAvailability>> FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPostWithHttpInfo(string accept, string scopeId, FindInventoryItemsStatusByScopeAndSkusRequest body = default(FindInventoryItemsStatusByScopeAndSkusRequest));
        /// <summary>
        /// Retrieve an InventoryItem represented by association of sku and location id - {GetInventoryItemBySkuAndLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an InventoryItem represented by association of sku and location id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="date">The date for which the status will be computed. If is default, DateTime.Now will be used. (optional)</param>
        /// <returns>InventoryItemStatusDetails</returns>
        InventoryItemStatusDetails GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGet(string accept, string scopeId, string sku, string inventoryLocationId, DateTime? date = default(DateTime?));

        /// <summary>
        /// Retrieve an InventoryItem represented by association of sku and location id - {GetInventoryItemBySkuAndLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an InventoryItem represented by association of sku and location id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="date">The date for which the status will be computed. If is default, DateTime.Now will be used. (optional)</param>
        /// <returns>ApiResponse of InventoryItemStatusDetails</returns>
        ApiResponse<InventoryItemStatusDetails> GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGetWithHttpInfo(string accept, string scopeId, string sku, string inventoryLocationId, DateTime? date = default(DateTime?));
        /// <summary>
        /// Retrieve a list of InventoryItem represented by inventory location id - {GetInventoryItemsByLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItem represented by inventory location id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <returns>List&lt;InventoryItem&gt;</returns>
        List<InventoryItem> GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGet(string accept, string scopeId, string inventoryLocationId);

        /// <summary>
        /// Retrieve a list of InventoryItem represented by inventory location id - {GetInventoryItemsByLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItem represented by inventory location id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <returns>ApiResponse of List&lt;InventoryItem&gt;</returns>
        ApiResponse<List<InventoryItem>> GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGetWithHttpInfo(string accept, string scopeId, string inventoryLocationId);
        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="includeChildScopes">Whether inventory locations from child scopes should also be included in the results. (optional)</param>
        /// <param name="startingIndex">The starting index (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query, default to 50 (optional)</param>
        /// <param name="sortOrderField">the sort order field. (optional)</param>
        /// <param name="sortDirection">The sort direction. (Ascending or descending) (optional)</param>
        /// <param name="date">The date which will be used to compute the status. If is not set, DateTime.Now will be used. (optional)</param>
        /// <returns>InventoryItemStatusDetailsQueryResult</returns>
        InventoryItemStatusDetailsQueryResult GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGet(string accept, string scopeId, string sku, bool? includeChildScopes = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortOrderField = default(string), string sortDirection = default(string), DateTime? date = default(DateTime?));

        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="includeChildScopes">Whether inventory locations from child scopes should also be included in the results. (optional)</param>
        /// <param name="startingIndex">The starting index (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query, default to 50 (optional)</param>
        /// <param name="sortOrderField">the sort order field. (optional)</param>
        /// <param name="sortDirection">The sort direction. (Ascending or descending) (optional)</param>
        /// <param name="date">The date which will be used to compute the status. If is not set, DateTime.Now will be used. (optional)</param>
        /// <returns>ApiResponse of InventoryItemStatusDetailsQueryResult</returns>
        ApiResponse<InventoryItemStatusDetailsQueryResult> GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGetWithHttpInfo(string accept, string scopeId, string sku, bool? includeChildScopes = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortOrderField = default(string), string sortDirection = default(string), DateTime? date = default(DateTime?));
        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryItemStatusDetailsQueryResult</returns>
        InventoryItemStatusDetailsQueryResult GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPost(string accept, string scopeId, GetInventoryItemsByScopeAndSkusRequest body = default(GetInventoryItemsByScopeAndSkusRequest));

        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryItemStatusDetailsQueryResult</returns>
        ApiResponse<InventoryItemStatusDetailsQueryResult> GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPostWithHttpInfo(string accept, string scopeId, GetInventoryItemsByScopeAndSkusRequest body = default(GetInventoryItemsByScopeAndSkusRequest));
        /// <summary>
        /// Retrieves all available inventory providers - {GetInventoryProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Finds all available inventory providers available in the system.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <returns>List&lt;InventoryProviderDetails&gt;</returns>
        List<InventoryProviderDetails> GetInventoryProvidersRequestScopeIdfindProvidersGet(string accept, string scopeId, string cultureName = default(string));

        /// <summary>
        /// Retrieves all available inventory providers - {GetInventoryProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Finds all available inventory providers available in the system.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryProviderDetails&gt;</returns>
        ApiResponse<List<InventoryProviderDetails>> GetInventoryProvidersRequestScopeIdfindProvidersGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string));
        /// <summary>
        /// Find all reserved inventory items associated to the specified owner - {GetInventoryReservedItemsRequest}
        /// </summary>
        /// <remarks>
        /// Find all reserved inventory items associated to the specified owner.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <returns>List&lt;InventoryReservedItem&gt;</returns>
        List<InventoryReservedItem> GetInventoryReservedItemsRequestreservationsOwnerIdGet(string accept, string ownerId);

        /// <summary>
        /// Find all reserved inventory items associated to the specified owner - {GetInventoryReservedItemsRequest}
        /// </summary>
        /// <remarks>
        /// Find all reserved inventory items associated to the specified owner.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <returns>ApiResponse of List&lt;InventoryReservedItem&gt;</returns>
        ApiResponse<List<InventoryReservedItem>> GetInventoryReservedItemsRequestreservationsOwnerIdGetWithHttpInfo(string accept, string ownerId);
        /// <summary>
        /// Increase an inventory quantity - {IncreaseInventoryQuantityRequest}
        /// </summary>
        /// <remarks>
        /// Increase an inventory quantity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to add in the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryQuantity</returns>
        InventoryQuantity IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPost(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object));

        /// <summary>
        /// Increase an inventory quantity - {IncreaseInventoryQuantityRequest}
        /// </summary>
        /// <remarks>
        /// Increase an inventory quantity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to add in the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryQuantity</returns>
        ApiResponse<InventoryQuantity> IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPostWithHttpInfo(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object));
        /// <summary>
        /// Allows to send requests to reserve a list of inventory items - {ReserveInventoryItemsRequest}
        /// </summary>
        /// <remarks>
        /// Allows to send requests to reserve a list of inventory items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryReservationResult</returns>
        InventoryReservationResult ReserveInventoryItemsRequestreservationsOwnerIdPost(string accept, string ownerId, ReserveInventoryItemsRequest body = default(ReserveInventoryItemsRequest));

        /// <summary>
        /// Allows to send requests to reserve a list of inventory items - {ReserveInventoryItemsRequest}
        /// </summary>
        /// <remarks>
        /// Allows to send requests to reserve a list of inventory items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryReservationResult</returns>
        ApiResponse<InventoryReservationResult> ReserveInventoryItemsRequestreservationsOwnerIdPostWithHttpInfo(string accept, string ownerId, ReserveInventoryItemsRequest body = default(ReserveInventoryItemsRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryItemsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel all inventory reserved items associated to the specified owner and inventory location. - {CancelAllInventoryReservedItemsRequest}
        /// </summary>
        /// <remarks>
        /// Cancel all inventory reserved items associated to the specified owner and inventory location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">Gets or sets the unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPostAsync(string accept, string ownerId, CancelAllInventoryReservedItemsRequest body = default(CancelAllInventoryReservedItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel all inventory reserved items associated to the specified owner and inventory location. - {CancelAllInventoryReservedItemsRequest}
        /// </summary>
        /// <remarks>
        /// Cancel all inventory reserved items associated to the specified owner and inventory location.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">Gets or sets the unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPostWithHttpInfoAsync(string accept, string ownerId, CancelAllInventoryReservedItemsRequest body = default(CancelAllInventoryReservedItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Allows to cancel a list of inventory reserved items associated to the specified owner. - {CancelInventoryReservedItemsRequest}
        /// </summary>
        /// <remarks>
        /// Allows to cancel a list of inventory reserved items associated to the specified owner.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPostAsync(string accept, string ownerId, CancelInventoryReservedItemsRequest body = default(CancelInventoryReservedItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allows to cancel a list of inventory reserved items associated to the specified owner. - {CancelInventoryReservedItemsRequest}
        /// </summary>
        /// <remarks>
        /// Allows to cancel a list of inventory reserved items associated to the specified owner.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPostWithHttpInfoAsync(string accept, string ownerId, CancelInventoryReservedItemsRequest body = default(CancelInventoryReservedItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Change the stock status of inventory reserved items from their current stock status to the new given stock status. - {ChangeInventoryReservedItemsStockStatusRequest}
        /// </summary>
        /// <remarks>
        /// Change the stock status of inventory reserved items from their current stock status to the new given stock status.Executing this request will only update the stock status of the specified reserved items. All corresponding order line items status will remain unchanged.The corresponding order must be reprocessed by using the PostProcessOrderRequest to get it&#39;s line items status updated with the new reserved stock status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChangeInventoryReservedItemsStockStatusResult</returns>
        System.Threading.Tasks.Task<ChangeInventoryReservedItemsStockStatusResult> ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPostAsync(string accept, string ownerId, ChangeInventoryReservedItemsStockStatusRequest body = default(ChangeInventoryReservedItemsStockStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Change the stock status of inventory reserved items from their current stock status to the new given stock status. - {ChangeInventoryReservedItemsStockStatusRequest}
        /// </summary>
        /// <remarks>
        /// Change the stock status of inventory reserved items from their current stock status to the new given stock status.Executing this request will only update the stock status of the specified reserved items. All corresponding order line items status will remain unchanged.The corresponding order must be reprocessed by using the PostProcessOrderRequest to get it&#39;s line items status updated with the new reserved stock status.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChangeInventoryReservedItemsStockStatusResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeInventoryReservedItemsStockStatusResult>> ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPostWithHttpInfoAsync(string accept, string ownerId, ChangeInventoryReservedItemsStockStatusRequest body = default(ChangeInventoryReservedItemsStockStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed. - {ConfirmInventoryReservedOrderItemsRequest}
        /// </summary>
        /// <remarks>
        /// Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryReservedItem&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryReservedItem>> ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPostAsync(string accept, string ownerId, ConfirmInventoryReservedOrderItemsRequest body = default(ConfirmInventoryReservedOrderItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed. - {ConfirmInventoryReservedOrderItemsRequest}
        /// </summary>
        /// <remarks>
        /// Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryReservedItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryReservedItem>>> ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPostWithHttpInfoAsync(string accept, string ownerId, ConfirmInventoryReservedOrderItemsRequest body = default(ConfirmInventoryReservedOrderItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or update an inventory item - {CreateOrUpdateInventoryItemRequest}
        /// </summary>
        /// <remarks>
        /// Create or update an inventory item
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItem</returns>
        System.Threading.Tasks.Task<InventoryItem> CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreateAsync(string accept, string scopeId, string inventoryLocationId, string sku, CreateOrUpdateInventoryItemRequest body = default(CreateOrUpdateInventoryItemRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update an inventory item - {CreateOrUpdateInventoryItemRequest}
        /// </summary>
        /// <remarks>
        /// Create or update an inventory item
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryItem>> CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreateWithHttpInfoAsync(string accept, string scopeId, string inventoryLocationId, string sku, CreateOrUpdateInventoryItemRequest body = default(CreateOrUpdateInventoryItemRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Decrease an inventory quantity - {DecreaseInventoryQuantityRequest}
        /// </summary>
        /// <remarks>
        /// Decrease an inventory quantity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to remove from the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryQuantity</returns>
        System.Threading.Tasks.Task<InventoryQuantity> DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPostAsync(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Decrease an inventory quantity - {DecreaseInventoryQuantityRequest}
        /// </summary>
        /// <remarks>
        /// Decrease an inventory quantity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to remove from the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryQuantity)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryQuantity>> DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPostWithHttpInfoAsync(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Allows to send requests to evaluate inventory item availability - {EvaluateInventoryAvailabilityRequest}
        /// </summary>
        /// <remarks>
        /// Allows to send requests to evaluate inventory item availability.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryItemAvailabilityEvaluationResult&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryItemAvailabilityEvaluationResult>> EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePostAsync(string accept, string ownerId, EvaluateInventoryAvailabilityRequest body = default(EvaluateInventoryAvailabilityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allows to send requests to evaluate inventory item availability - {EvaluateInventoryAvailabilityRequest}
        /// </summary>
        /// <remarks>
        /// Allows to send requests to evaluate inventory item availability.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItemAvailabilityEvaluationResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryItemAvailabilityEvaluationResult>>> EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePostWithHttpInfoAsync(string accept, string ownerId, EvaluateInventoryAvailabilityRequest body = default(EvaluateInventoryAvailabilityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemStatusByLocationAndSkusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryItemAvailability&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryItemAvailability>> FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPostAsync(string accept, string scopeId, string inventoryLocationId, FindInventoryItemStatusByLocationAndSkusRequest body = default(FindInventoryItemStatusByLocationAndSkusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemStatusByLocationAndSkusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItemAvailability&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryItemAvailability>>> FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPostWithHttpInfoAsync(string accept, string scopeId, string inventoryLocationId, FindInventoryItemStatusByLocationAndSkusRequest body = default(FindInventoryItemStatusByLocationAndSkusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date - {FindInventoryItemStatusBySkuAndLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItemAvailability</returns>
        System.Threading.Tasks.Task<InventoryItemAvailability> FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPostAsync(string accept, string scopeId, string sku, string inventoryLocationId, FindInventoryItemStatusBySkuAndLocationRequest body = default(FindInventoryItemStatusBySkuAndLocationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date - {FindInventoryItemStatusBySkuAndLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryItemAvailability)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryItemAvailability>> FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPostWithHttpInfoAsync(string accept, string scopeId, string sku, string inventoryLocationId, FindInventoryItemStatusBySkuAndLocationRequest body = default(FindInventoryItemStatusBySkuAndLocationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of InventoryItem - {FindInventoryItemsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItem
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryItem&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryItem>> FindInventoryItemsRequestScopeIdfindPostAsync(string accept, string scopeId, FindInventoryItemsRequest body = default(FindInventoryItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of InventoryItem - {FindInventoryItemsRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItem
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryItem>>> FindInventoryItemsRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindInventoryItemsRequest body = default(FindInventoryItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date - {FindInventoryItemsStatusByScopeAndSkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryItemAvailability&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryItemAvailability>> FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPostAsync(string accept, string scopeId, string sku, FindInventoryItemsStatusByScopeAndSkuRequest body = default(FindInventoryItemsStatusByScopeAndSkuRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date - {FindInventoryItemsStatusByScopeAndSkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItemAvailability&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryItemAvailability>>> FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPostWithHttpInfoAsync(string accept, string scopeId, string sku, FindInventoryItemsStatusByScopeAndSkuRequest body = default(FindInventoryItemsStatusByScopeAndSkuRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemsStatusByScopeAndSkusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryItemAvailability&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryItemAvailability>> FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPostAsync(string accept, string scopeId, FindInventoryItemsStatusByScopeAndSkusRequest body = default(FindInventoryItemsStatusByScopeAndSkusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemsStatusByScopeAndSkusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItemAvailability&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryItemAvailability>>> FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPostWithHttpInfoAsync(string accept, string scopeId, FindInventoryItemsStatusByScopeAndSkusRequest body = default(FindInventoryItemsStatusByScopeAndSkusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an InventoryItem represented by association of sku and location id - {GetInventoryItemBySkuAndLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an InventoryItem represented by association of sku and location id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="date">The date for which the status will be computed. If is default, DateTime.Now will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItemStatusDetails</returns>
        System.Threading.Tasks.Task<InventoryItemStatusDetails> GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGetAsync(string accept, string scopeId, string sku, string inventoryLocationId, DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an InventoryItem represented by association of sku and location id - {GetInventoryItemBySkuAndLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve an InventoryItem represented by association of sku and location id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="date">The date for which the status will be computed. If is default, DateTime.Now will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryItemStatusDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryItemStatusDetails>> GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string sku, string inventoryLocationId, DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of InventoryItem represented by inventory location id - {GetInventoryItemsByLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItem represented by inventory location id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryItem&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryItem>> GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGetAsync(string accept, string scopeId, string inventoryLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of InventoryItem represented by inventory location id - {GetInventoryItemsByLocationRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItem represented by inventory location id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryItem>>> GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string inventoryLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="includeChildScopes">Whether inventory locations from child scopes should also be included in the results. (optional)</param>
        /// <param name="startingIndex">The starting index (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query, default to 50 (optional)</param>
        /// <param name="sortOrderField">the sort order field. (optional)</param>
        /// <param name="sortDirection">The sort direction. (Ascending or descending) (optional)</param>
        /// <param name="date">The date which will be used to compute the status. If is not set, DateTime.Now will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItemStatusDetailsQueryResult</returns>
        System.Threading.Tasks.Task<InventoryItemStatusDetailsQueryResult> GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGetAsync(string accept, string scopeId, string sku, bool? includeChildScopes = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortOrderField = default(string), string sortDirection = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkuRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="includeChildScopes">Whether inventory locations from child scopes should also be included in the results. (optional)</param>
        /// <param name="startingIndex">The starting index (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query, default to 50 (optional)</param>
        /// <param name="sortOrderField">the sort order field. (optional)</param>
        /// <param name="sortDirection">The sort direction. (Ascending or descending) (optional)</param>
        /// <param name="date">The date which will be used to compute the status. If is not set, DateTime.Now will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryItemStatusDetailsQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryItemStatusDetailsQueryResult>> GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGetWithHttpInfoAsync(string accept, string scopeId, string sku, bool? includeChildScopes = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortOrderField = default(string), string sortDirection = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItemStatusDetailsQueryResult</returns>
        System.Threading.Tasks.Task<InventoryItemStatusDetailsQueryResult> GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPostAsync(string accept, string scopeId, GetInventoryItemsByScopeAndSkusRequest body = default(GetInventoryItemsByScopeAndSkusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkusRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryItemStatusDetailsQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryItemStatusDetailsQueryResult>> GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPostWithHttpInfoAsync(string accept, string scopeId, GetInventoryItemsByScopeAndSkusRequest body = default(GetInventoryItemsByScopeAndSkusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all available inventory providers - {GetInventoryProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Finds all available inventory providers available in the system.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryProviderDetails&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryProviderDetails>> GetInventoryProvidersRequestScopeIdfindProvidersGetAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all available inventory providers - {GetInventoryProvidersRequest}
        /// </summary>
        /// <remarks>
        /// Finds all available inventory providers available in the system.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryProviderDetails&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryProviderDetails>>> GetInventoryProvidersRequestScopeIdfindProvidersGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find all reserved inventory items associated to the specified owner - {GetInventoryReservedItemsRequest}
        /// </summary>
        /// <remarks>
        /// Find all reserved inventory items associated to the specified owner.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryReservedItem&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryReservedItem>> GetInventoryReservedItemsRequestreservationsOwnerIdGetAsync(string accept, string ownerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find all reserved inventory items associated to the specified owner - {GetInventoryReservedItemsRequest}
        /// </summary>
        /// <remarks>
        /// Find all reserved inventory items associated to the specified owner.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryReservedItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryReservedItem>>> GetInventoryReservedItemsRequestreservationsOwnerIdGetWithHttpInfoAsync(string accept, string ownerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Increase an inventory quantity - {IncreaseInventoryQuantityRequest}
        /// </summary>
        /// <remarks>
        /// Increase an inventory quantity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to add in the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryQuantity</returns>
        System.Threading.Tasks.Task<InventoryQuantity> IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPostAsync(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Increase an inventory quantity - {IncreaseInventoryQuantityRequest}
        /// </summary>
        /// <remarks>
        /// Increase an inventory quantity
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to add in the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryQuantity)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryQuantity>> IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPostWithHttpInfoAsync(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Allows to send requests to reserve a list of inventory items - {ReserveInventoryItemsRequest}
        /// </summary>
        /// <remarks>
        /// Allows to send requests to reserve a list of inventory items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryReservationResult</returns>
        System.Threading.Tasks.Task<InventoryReservationResult> ReserveInventoryItemsRequestreservationsOwnerIdPostAsync(string accept, string ownerId, ReserveInventoryItemsRequest body = default(ReserveInventoryItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allows to send requests to reserve a list of inventory items - {ReserveInventoryItemsRequest}
        /// </summary>
        /// <remarks>
        /// Allows to send requests to reserve a list of inventory items.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryReservationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryReservationResult>> ReserveInventoryItemsRequestreservationsOwnerIdPostWithHttpInfoAsync(string accept, string ownerId, ReserveInventoryItemsRequest body = default(ReserveInventoryItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryItemsApi : IInventoryItemsApiSync, IInventoryItemsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InventoryItemsApi : IInventoryItemsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InventoryItemsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InventoryItemsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InventoryItemsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryItemsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InventoryItemsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel all inventory reserved items associated to the specified owner and inventory location. - {CancelAllInventoryReservedItemsRequest} Cancel all inventory reserved items associated to the specified owner and inventory location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">Gets or sets the unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPost(string accept, string ownerId, CancelAllInventoryReservedItemsRequest body = default(CancelAllInventoryReservedItemsRequest))
        {
            CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPostWithHttpInfo(accept, ownerId, body);
        }

        /// <summary>
        /// Cancel all inventory reserved items associated to the specified owner and inventory location. - {CancelAllInventoryReservedItemsRequest} Cancel all inventory reserved items associated to the specified owner and inventory location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">Gets or sets the unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPostWithHttpInfo(string accept, string ownerId, CancelAllInventoryReservedItemsRequest body = default(CancelAllInventoryReservedItemsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPost");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/inventoryItems/reservations/{OwnerId}/cancelAll", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel all inventory reserved items associated to the specified owner and inventory location. - {CancelAllInventoryReservedItemsRequest} Cancel all inventory reserved items associated to the specified owner and inventory location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">Gets or sets the unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPostAsync(string accept, string ownerId, CancelAllInventoryReservedItemsRequest body = default(CancelAllInventoryReservedItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPostWithHttpInfoAsync(accept, ownerId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel all inventory reserved items associated to the specified owner and inventory location. - {CancelAllInventoryReservedItemsRequest} Cancel all inventory reserved items associated to the specified owner and inventory location.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">Gets or sets the unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPostWithHttpInfoAsync(string accept, string ownerId, CancelAllInventoryReservedItemsRequest body = default(CancelAllInventoryReservedItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPost");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/inventoryItems/reservations/{OwnerId}/cancelAll", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelAllInventoryReservedItemsRequestreservationsOwnerIdcancelAllPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows to cancel a list of inventory reserved items associated to the specified owner. - {CancelInventoryReservedItemsRequest} Allows to cancel a list of inventory reserved items associated to the specified owner.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPost(string accept, string ownerId, CancelInventoryReservedItemsRequest body = default(CancelInventoryReservedItemsRequest))
        {
            CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPostWithHttpInfo(accept, ownerId, body);
        }

        /// <summary>
        /// Allows to cancel a list of inventory reserved items associated to the specified owner. - {CancelInventoryReservedItemsRequest} Allows to cancel a list of inventory reserved items associated to the specified owner.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPostWithHttpInfo(string accept, string ownerId, CancelInventoryReservedItemsRequest body = default(CancelInventoryReservedItemsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPost");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/inventoryItems/reservations/{OwnerId}/cancelList", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows to cancel a list of inventory reserved items associated to the specified owner. - {CancelInventoryReservedItemsRequest} Allows to cancel a list of inventory reserved items associated to the specified owner.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPostAsync(string accept, string ownerId, CancelInventoryReservedItemsRequest body = default(CancelInventoryReservedItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPostWithHttpInfoAsync(accept, ownerId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Allows to cancel a list of inventory reserved items associated to the specified owner. - {CancelInventoryReservedItemsRequest} Allows to cancel a list of inventory reserved items associated to the specified owner.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPostWithHttpInfoAsync(string accept, string ownerId, CancelInventoryReservedItemsRequest body = default(CancelInventoryReservedItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPost");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/inventoryItems/reservations/{OwnerId}/cancelList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelInventoryReservedItemsRequestreservationsOwnerIdcancelListPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change the stock status of inventory reserved items from their current stock status to the new given stock status. - {ChangeInventoryReservedItemsStockStatusRequest} Change the stock status of inventory reserved items from their current stock status to the new given stock status.Executing this request will only update the stock status of the specified reserved items. All corresponding order line items status will remain unchanged.The corresponding order must be reprocessed by using the PostProcessOrderRequest to get it&#39;s line items status updated with the new reserved stock status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ChangeInventoryReservedItemsStockStatusResult</returns>
        public ChangeInventoryReservedItemsStockStatusResult ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPost(string accept, string ownerId, ChangeInventoryReservedItemsStockStatusRequest body = default(ChangeInventoryReservedItemsStockStatusRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ChangeInventoryReservedItemsStockStatusResult> localVarResponse = ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPostWithHttpInfo(accept, ownerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change the stock status of inventory reserved items from their current stock status to the new given stock status. - {ChangeInventoryReservedItemsStockStatusRequest} Change the stock status of inventory reserved items from their current stock status to the new given stock status.Executing this request will only update the stock status of the specified reserved items. All corresponding order line items status will remain unchanged.The corresponding order must be reprocessed by using the PostProcessOrderRequest to get it&#39;s line items status updated with the new reserved stock status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ChangeInventoryReservedItemsStockStatusResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ChangeInventoryReservedItemsStockStatusResult> ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPostWithHttpInfo(string accept, string ownerId, ChangeInventoryReservedItemsStockStatusRequest body = default(ChangeInventoryReservedItemsStockStatusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPost");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ChangeInventoryReservedItemsStockStatusResult>("/inventoryItems/reservations/{OwnerId}/changeStockStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change the stock status of inventory reserved items from their current stock status to the new given stock status. - {ChangeInventoryReservedItemsStockStatusRequest} Change the stock status of inventory reserved items from their current stock status to the new given stock status.Executing this request will only update the stock status of the specified reserved items. All corresponding order line items status will remain unchanged.The corresponding order must be reprocessed by using the PostProcessOrderRequest to get it&#39;s line items status updated with the new reserved stock status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChangeInventoryReservedItemsStockStatusResult</returns>
        public async System.Threading.Tasks.Task<ChangeInventoryReservedItemsStockStatusResult> ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPostAsync(string accept, string ownerId, ChangeInventoryReservedItemsStockStatusRequest body = default(ChangeInventoryReservedItemsStockStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ChangeInventoryReservedItemsStockStatusResult> localVarResponse = await ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPostWithHttpInfoAsync(accept, ownerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change the stock status of inventory reserved items from their current stock status to the new given stock status. - {ChangeInventoryReservedItemsStockStatusRequest} Change the stock status of inventory reserved items from their current stock status to the new given stock status.Executing this request will only update the stock status of the specified reserved items. All corresponding order line items status will remain unchanged.The corresponding order must be reprocessed by using the PostProcessOrderRequest to get it&#39;s line items status updated with the new reserved stock status.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChangeInventoryReservedItemsStockStatusResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<ChangeInventoryReservedItemsStockStatusResult>> ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPostWithHttpInfoAsync(string accept, string ownerId, ChangeInventoryReservedItemsStockStatusRequest body = default(ChangeInventoryReservedItemsStockStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPost");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ChangeInventoryReservedItemsStockStatusResult>("/inventoryItems/reservations/{OwnerId}/changeStockStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeInventoryReservedItemsStockStatusRequestreservationsOwnerIdchangeStockStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed. - {ConfirmInventoryReservedOrderItemsRequest} Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;InventoryReservedItem&gt;</returns>
        public List<InventoryReservedItem> ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPost(string accept, string ownerId, ConfirmInventoryReservedOrderItemsRequest body = default(ConfirmInventoryReservedOrderItemsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryReservedItem>> localVarResponse = ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPostWithHttpInfo(accept, ownerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed. - {ConfirmInventoryReservedOrderItemsRequest} Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryReservedItem&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryReservedItem>> ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPostWithHttpInfo(string accept, string ownerId, ConfirmInventoryReservedOrderItemsRequest body = default(ConfirmInventoryReservedOrderItemsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPost");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<InventoryReservedItem>>("/inventoryItems/reservations/{OwnerId}/confirm", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed. - {ConfirmInventoryReservedOrderItemsRequest} Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryReservedItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryReservedItem>> ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPostAsync(string accept, string ownerId, ConfirmInventoryReservedOrderItemsRequest body = default(ConfirmInventoryReservedOrderItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryReservedItem>> localVarResponse = await ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPostWithHttpInfoAsync(accept, ownerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed. - {ConfirmInventoryReservedOrderItemsRequest} Applies the reserved items on the available quantitites in the inventory, decrement the effective reservation and changes the status Confirmed.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryReservedItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryReservedItem>>> ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPostWithHttpInfoAsync(string accept, string ownerId, ConfirmInventoryReservedOrderItemsRequest body = default(ConfirmInventoryReservedOrderItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPost");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<InventoryReservedItem>>("/inventoryItems/reservations/{OwnerId}/confirm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmInventoryReservedOrderItemsRequestreservationsOwnerIdconfirmPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update an inventory item - {CreateOrUpdateInventoryItemRequest} Create or update an inventory item
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryItem</returns>
        public InventoryItem CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreate(string accept, string scopeId, string inventoryLocationId, string sku, CreateOrUpdateInventoryItemRequest body = default(CreateOrUpdateInventoryItemRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItem> localVarResponse = CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreateWithHttpInfo(accept, scopeId, inventoryLocationId, sku, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update an inventory item - {CreateOrUpdateInventoryItemRequest} Create or update an inventory item
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryItem</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItem> CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreateWithHttpInfo(string accept, string scopeId, string inventoryLocationId, string sku, CreateOrUpdateInventoryItemRequest body = default(CreateOrUpdateInventoryItemRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreate");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreate");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<InventoryItem>("/inventoryItems/{ScopeId}/{InventoryLocationId}/{Sku}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update an inventory item - {CreateOrUpdateInventoryItemRequest} Create or update an inventory item
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItem</returns>
        public async System.Threading.Tasks.Task<InventoryItem> CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreateAsync(string accept, string scopeId, string inventoryLocationId, string sku, CreateOrUpdateInventoryItemRequest body = default(CreateOrUpdateInventoryItemRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItem> localVarResponse = await CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreateWithHttpInfoAsync(accept, scopeId, inventoryLocationId, sku, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update an inventory item - {CreateOrUpdateInventoryItemRequest} Create or update an inventory item
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryItem)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItem>> CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreateWithHttpInfoAsync(string accept, string scopeId, string inventoryLocationId, string sku, CreateOrUpdateInventoryItemRequest body = default(CreateOrUpdateInventoryItemRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreate");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreate");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<InventoryItem>("/inventoryItems/{ScopeId}/{InventoryLocationId}/{Sku}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateInventoryItemRequestScopeIdInventoryLocationIdSkuCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Decrease an inventory quantity - {DecreaseInventoryQuantityRequest} Decrease an inventory quantity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to remove from the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryQuantity</returns>
        public InventoryQuantity DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPost(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryQuantity> localVarResponse = DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPostWithHttpInfo(accept, scopeId, sku, inventoryLocationId, quantity, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Decrease an inventory quantity - {DecreaseInventoryQuantityRequest} Decrease an inventory quantity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to remove from the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryQuantity</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryQuantity> DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPostWithHttpInfo(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPost");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPost");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Quantity", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(quantity)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InventoryQuantity>("/inventoryItems/{ScopeId}/bySku/{Sku}/byLocation/{InventoryLocationId}/decrease/{Quantity}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Decrease an inventory quantity - {DecreaseInventoryQuantityRequest} Decrease an inventory quantity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to remove from the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryQuantity</returns>
        public async System.Threading.Tasks.Task<InventoryQuantity> DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPostAsync(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryQuantity> localVarResponse = await DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPostWithHttpInfoAsync(accept, scopeId, sku, inventoryLocationId, quantity, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Decrease an inventory quantity - {DecreaseInventoryQuantityRequest} Decrease an inventory quantity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to remove from the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryQuantity)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryQuantity>> DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPostWithHttpInfoAsync(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPost");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPost");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Quantity", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(quantity)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InventoryQuantity>("/inventoryItems/{ScopeId}/bySku/{Sku}/byLocation/{InventoryLocationId}/decrease/{Quantity}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DecreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIddecreaseQuantityPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows to send requests to evaluate inventory item availability - {EvaluateInventoryAvailabilityRequest} Allows to send requests to evaluate inventory item availability.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;InventoryItemAvailabilityEvaluationResult&gt;</returns>
        public List<InventoryItemAvailabilityEvaluationResult> EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePost(string accept, string ownerId, EvaluateInventoryAvailabilityRequest body = default(EvaluateInventoryAvailabilityRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailabilityEvaluationResult>> localVarResponse = EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePostWithHttpInfo(accept, ownerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows to send requests to evaluate inventory item availability - {EvaluateInventoryAvailabilityRequest} Allows to send requests to evaluate inventory item availability.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItemAvailabilityEvaluationResult&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailabilityEvaluationResult>> EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePostWithHttpInfo(string accept, string ownerId, EvaluateInventoryAvailabilityRequest body = default(EvaluateInventoryAvailabilityRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePost");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<InventoryItemAvailabilityEvaluationResult>>("/inventoryItems/reservations/{OwnerId}/evaluate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows to send requests to evaluate inventory item availability - {EvaluateInventoryAvailabilityRequest} Allows to send requests to evaluate inventory item availability.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryItemAvailabilityEvaluationResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryItemAvailabilityEvaluationResult>> EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePostAsync(string accept, string ownerId, EvaluateInventoryAvailabilityRequest body = default(EvaluateInventoryAvailabilityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailabilityEvaluationResult>> localVarResponse = await EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePostWithHttpInfoAsync(accept, ownerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows to send requests to evaluate inventory item availability - {EvaluateInventoryAvailabilityRequest} Allows to send requests to evaluate inventory item availability.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItemAvailabilityEvaluationResult&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailabilityEvaluationResult>>> EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePostWithHttpInfoAsync(string accept, string ownerId, EvaluateInventoryAvailabilityRequest body = default(EvaluateInventoryAvailabilityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePost");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<InventoryItemAvailabilityEvaluationResult>>("/inventoryItems/reservations/{OwnerId}/evaluate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EvaluateInventoryAvailabilityRequestreservationsOwnerIdevaluatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemStatusByLocationAndSkusRequest} Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;InventoryItemAvailability&gt;</returns>
        public List<InventoryItemAvailability> FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPost(string accept, string scopeId, string inventoryLocationId, FindInventoryItemStatusByLocationAndSkusRequest body = default(FindInventoryItemStatusByLocationAndSkusRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailability>> localVarResponse = FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPostWithHttpInfo(accept, scopeId, inventoryLocationId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemStatusByLocationAndSkusRequest} Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItemAvailability&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailability>> FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPostWithHttpInfo(string accept, string scopeId, string inventoryLocationId, FindInventoryItemStatusByLocationAndSkusRequest body = default(FindInventoryItemStatusByLocationAndSkusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPost");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<InventoryItemAvailability>>("/inventoryItems/{ScopeId}/byLocation/{InventoryLocationId}/bySkus/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemStatusByLocationAndSkusRequest} Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryItemAvailability&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryItemAvailability>> FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPostAsync(string accept, string scopeId, string inventoryLocationId, FindInventoryItemStatusByLocationAndSkusRequest body = default(FindInventoryItemStatusByLocationAndSkusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailability>> localVarResponse = await FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPostWithHttpInfoAsync(accept, scopeId, inventoryLocationId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemStatusByLocationAndSkusRequest} Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItemAvailability&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailability>>> FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPostWithHttpInfoAsync(string accept, string scopeId, string inventoryLocationId, FindInventoryItemStatusByLocationAndSkusRequest body = default(FindInventoryItemStatusByLocationAndSkusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPost");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<InventoryItemAvailability>>("/inventoryItems/{ScopeId}/byLocation/{InventoryLocationId}/bySkus/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindInventoryItemStatusByLocationAndSkusRequestScopeIdbyLocationInventoryLocationIdbySkusstatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date - {FindInventoryItemStatusBySkuAndLocationRequest} Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryItemAvailability</returns>
        public InventoryItemAvailability FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPost(string accept, string scopeId, string sku, string inventoryLocationId, FindInventoryItemStatusBySkuAndLocationRequest body = default(FindInventoryItemStatusBySkuAndLocationRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemAvailability> localVarResponse = FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPostWithHttpInfo(accept, scopeId, sku, inventoryLocationId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date - {FindInventoryItemStatusBySkuAndLocationRequest} Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryItemAvailability</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemAvailability> FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPostWithHttpInfo(string accept, string scopeId, string sku, string inventoryLocationId, FindInventoryItemStatusBySkuAndLocationRequest body = default(FindInventoryItemStatusBySkuAndLocationRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPost");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPost");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InventoryItemAvailability>("/inventoryItems/{ScopeId}/bySku/{Sku}/byLocation/{InventoryLocationId}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date - {FindInventoryItemStatusBySkuAndLocationRequest} Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItemAvailability</returns>
        public async System.Threading.Tasks.Task<InventoryItemAvailability> FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPostAsync(string accept, string scopeId, string sku, string inventoryLocationId, FindInventoryItemStatusBySkuAndLocationRequest body = default(FindInventoryItemStatusBySkuAndLocationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemAvailability> localVarResponse = await FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPostWithHttpInfoAsync(accept, scopeId, sku, inventoryLocationId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date - {FindInventoryItemStatusBySkuAndLocationRequest} Retrieve the detail about the status of Inventory Item represented by the specified Sku and InventoryLocationId for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryItemAvailability)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemAvailability>> FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPostWithHttpInfoAsync(string accept, string scopeId, string sku, string inventoryLocationId, FindInventoryItemStatusBySkuAndLocationRequest body = default(FindInventoryItemStatusBySkuAndLocationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPost");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPost");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InventoryItemAvailability>("/inventoryItems/{ScopeId}/bySku/{Sku}/byLocation/{InventoryLocationId}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindInventoryItemStatusBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdstatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of InventoryItem - {FindInventoryItemsRequest} Retrieve a list of InventoryItem
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;InventoryItem&gt;</returns>
        public List<InventoryItem> FindInventoryItemsRequestScopeIdfindPost(string accept, string scopeId, FindInventoryItemsRequest body = default(FindInventoryItemsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItem>> localVarResponse = FindInventoryItemsRequestScopeIdfindPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of InventoryItem - {FindInventoryItemsRequest} Retrieve a list of InventoryItem
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItem&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItem>> FindInventoryItemsRequestScopeIdfindPostWithHttpInfo(string accept, string scopeId, FindInventoryItemsRequest body = default(FindInventoryItemsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->FindInventoryItemsRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->FindInventoryItemsRequestScopeIdfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<InventoryItem>>("/inventoryItems/{ScopeId}/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindInventoryItemsRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of InventoryItem - {FindInventoryItemsRequest} Retrieve a list of InventoryItem
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryItem>> FindInventoryItemsRequestScopeIdfindPostAsync(string accept, string scopeId, FindInventoryItemsRequest body = default(FindInventoryItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItem>> localVarResponse = await FindInventoryItemsRequestScopeIdfindPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of InventoryItem - {FindInventoryItemsRequest} Retrieve a list of InventoryItem
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItem>>> FindInventoryItemsRequestScopeIdfindPostWithHttpInfoAsync(string accept, string scopeId, FindInventoryItemsRequest body = default(FindInventoryItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->FindInventoryItemsRequestScopeIdfindPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->FindInventoryItemsRequestScopeIdfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<InventoryItem>>("/inventoryItems/{ScopeId}/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindInventoryItemsRequestScopeIdfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date - {FindInventoryItemsStatusByScopeAndSkuRequest} Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;InventoryItemAvailability&gt;</returns>
        public List<InventoryItemAvailability> FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPost(string accept, string scopeId, string sku, FindInventoryItemsStatusByScopeAndSkuRequest body = default(FindInventoryItemsStatusByScopeAndSkuRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailability>> localVarResponse = FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPostWithHttpInfo(accept, scopeId, sku, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date - {FindInventoryItemsStatusByScopeAndSkuRequest} Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItemAvailability&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailability>> FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPostWithHttpInfo(string accept, string scopeId, string sku, FindInventoryItemsStatusByScopeAndSkuRequest body = default(FindInventoryItemsStatusByScopeAndSkuRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPost");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<InventoryItemAvailability>>("/inventoryItems/{ScopeId}/bySku/{Sku}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date - {FindInventoryItemsStatusByScopeAndSkuRequest} Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryItemAvailability&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryItemAvailability>> FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPostAsync(string accept, string scopeId, string sku, FindInventoryItemsStatusByScopeAndSkuRequest body = default(FindInventoryItemsStatusByScopeAndSkuRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailability>> localVarResponse = await FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPostWithHttpInfoAsync(accept, scopeId, sku, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date - {FindInventoryItemsStatusByScopeAndSkuRequest} Retrieve the detail about the status of Inventory Items represented by the specified Sku from all inventory location associated to the specific scope for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItemAvailability&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailability>>> FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPostWithHttpInfoAsync(string accept, string scopeId, string sku, FindInventoryItemsStatusByScopeAndSkuRequest body = default(FindInventoryItemsStatusByScopeAndSkuRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPost");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<InventoryItemAvailability>>("/inventoryItems/{ScopeId}/bySku/{Sku}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindInventoryItemsStatusByScopeAndSkuRequestScopeIdbySkuSkustatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemsStatusByScopeAndSkusRequest} Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;InventoryItemAvailability&gt;</returns>
        public List<InventoryItemAvailability> FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPost(string accept, string scopeId, FindInventoryItemsStatusByScopeAndSkusRequest body = default(FindInventoryItemsStatusByScopeAndSkusRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailability>> localVarResponse = FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemsStatusByScopeAndSkusRequest} Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItemAvailability&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailability>> FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPostWithHttpInfo(string accept, string scopeId, FindInventoryItemsStatusByScopeAndSkusRequest body = default(FindInventoryItemsStatusByScopeAndSkusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<InventoryItemAvailability>>("/inventoryItems/{ScopeId}/bySkus/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemsStatusByScopeAndSkusRequest} Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryItemAvailability&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryItemAvailability>> FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPostAsync(string accept, string scopeId, FindInventoryItemsStatusByScopeAndSkusRequest body = default(FindInventoryItemsStatusByScopeAndSkusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailability>> localVarResponse = await FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date - {FindInventoryItemsStatusByScopeAndSkusRequest} Retrieve the detail about the status of Inventory Items represented by the specified InventoryLocationId and a list of skus for the specified date
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItemAvailability&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItemAvailability>>> FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPostWithHttpInfoAsync(string accept, string scopeId, FindInventoryItemsStatusByScopeAndSkusRequest body = default(FindInventoryItemsStatusByScopeAndSkusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<InventoryItemAvailability>>("/inventoryItems/{ScopeId}/bySkus/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindInventoryItemsStatusByScopeAndSkusRequestScopeIdbySkusstatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an InventoryItem represented by association of sku and location id - {GetInventoryItemBySkuAndLocationRequest} Retrieve an InventoryItem represented by association of sku and location id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="date">The date for which the status will be computed. If is default, DateTime.Now will be used. (optional)</param>
        /// <returns>InventoryItemStatusDetails</returns>
        public InventoryItemStatusDetails GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGet(string accept, string scopeId, string sku, string inventoryLocationId, DateTime? date = default(DateTime?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemStatusDetails> localVarResponse = GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGetWithHttpInfo(accept, scopeId, sku, inventoryLocationId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an InventoryItem represented by association of sku and location id - {GetInventoryItemBySkuAndLocationRequest} Retrieve an InventoryItem represented by association of sku and location id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="date">The date for which the status will be computed. If is default, DateTime.Now will be used. (optional)</param>
        /// <returns>ApiResponse of InventoryItemStatusDetails</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemStatusDetails> GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGetWithHttpInfo(string accept, string scopeId, string sku, string inventoryLocationId, DateTime? date = default(DateTime?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGet");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGet");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Date", date));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryItemStatusDetails>("/inventoryItems/{ScopeId}/bySku/{Sku}/byLocation/{InventoryLocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an InventoryItem represented by association of sku and location id - {GetInventoryItemBySkuAndLocationRequest} Retrieve an InventoryItem represented by association of sku and location id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="date">The date for which the status will be computed. If is default, DateTime.Now will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItemStatusDetails</returns>
        public async System.Threading.Tasks.Task<InventoryItemStatusDetails> GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGetAsync(string accept, string scopeId, string sku, string inventoryLocationId, DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemStatusDetails> localVarResponse = await GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGetWithHttpInfoAsync(accept, scopeId, sku, inventoryLocationId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an InventoryItem represented by association of sku and location id - {GetInventoryItemBySkuAndLocationRequest} Retrieve an InventoryItem represented by association of sku and location id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="date">The date for which the status will be computed. If is default, DateTime.Now will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryItemStatusDetails)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemStatusDetails>> GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string sku, string inventoryLocationId, DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGet");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGet");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Date", date));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InventoryItemStatusDetails>("/inventoryItems/{ScopeId}/bySku/{Sku}/byLocation/{InventoryLocationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryItemBySkuAndLocationRequestScopeIdbySkuSkubyLocationInventoryLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of InventoryItem represented by inventory location id - {GetInventoryItemsByLocationRequest} Retrieve a list of InventoryItem represented by inventory location id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <returns>List&lt;InventoryItem&gt;</returns>
        public List<InventoryItem> GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGet(string accept, string scopeId, string inventoryLocationId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItem>> localVarResponse = GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGetWithHttpInfo(accept, scopeId, inventoryLocationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of InventoryItem represented by inventory location id - {GetInventoryItemsByLocationRequest} Retrieve a list of InventoryItem represented by inventory location id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <returns>ApiResponse of List&lt;InventoryItem&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItem>> GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGetWithHttpInfo(string accept, string scopeId, string inventoryLocationId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGet");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InventoryItem>>("/inventoryItems/{ScopeId}/byLocation/{InventoryLocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of InventoryItem represented by inventory location id - {GetInventoryItemsByLocationRequest} Retrieve a list of InventoryItem represented by inventory location id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryItem>> GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGetAsync(string accept, string scopeId, string inventoryLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItem>> localVarResponse = await GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGetWithHttpInfoAsync(accept, scopeId, inventoryLocationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of InventoryItem represented by inventory location id - {GetInventoryItemsByLocationRequest} Retrieve a list of InventoryItem represented by inventory location id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="inventoryLocationId">business id for the inventory location which will be associated to the Sku to retrieve InventoryItem</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryItem>>> GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGetWithHttpInfoAsync(string accept, string scopeId, string inventoryLocationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGet");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InventoryItem>>("/inventoryItems/{ScopeId}/byLocation/{InventoryLocationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryItemsByLocationRequestScopeIdbyLocationInventoryLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkuRequest} Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="includeChildScopes">Whether inventory locations from child scopes should also be included in the results. (optional)</param>
        /// <param name="startingIndex">The starting index (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query, default to 50 (optional)</param>
        /// <param name="sortOrderField">the sort order field. (optional)</param>
        /// <param name="sortDirection">The sort direction. (Ascending or descending) (optional)</param>
        /// <param name="date">The date which will be used to compute the status. If is not set, DateTime.Now will be used. (optional)</param>
        /// <returns>InventoryItemStatusDetailsQueryResult</returns>
        public InventoryItemStatusDetailsQueryResult GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGet(string accept, string scopeId, string sku, bool? includeChildScopes = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortOrderField = default(string), string sortDirection = default(string), DateTime? date = default(DateTime?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemStatusDetailsQueryResult> localVarResponse = GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGetWithHttpInfo(accept, scopeId, sku, includeChildScopes, startingIndex, maximumItems, sortOrderField, sortDirection, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkuRequest} Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="includeChildScopes">Whether inventory locations from child scopes should also be included in the results. (optional)</param>
        /// <param name="startingIndex">The starting index (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query, default to 50 (optional)</param>
        /// <param name="sortOrderField">the sort order field. (optional)</param>
        /// <param name="sortDirection">The sort direction. (Ascending or descending) (optional)</param>
        /// <param name="date">The date which will be used to compute the status. If is not set, DateTime.Now will be used. (optional)</param>
        /// <returns>ApiResponse of InventoryItemStatusDetailsQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemStatusDetailsQueryResult> GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGetWithHttpInfo(string accept, string scopeId, string sku, bool? includeChildScopes = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortOrderField = default(string), string sortDirection = default(string), DateTime? date = default(DateTime?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGet");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            if (includeChildScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildScopes", includeChildScopes));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (sortOrderField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortOrderField", sortOrderField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Date", date));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryItemStatusDetailsQueryResult>("/inventoryItems/{ScopeId}/bySku/{Sku}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkuRequest} Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="includeChildScopes">Whether inventory locations from child scopes should also be included in the results. (optional)</param>
        /// <param name="startingIndex">The starting index (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query, default to 50 (optional)</param>
        /// <param name="sortOrderField">the sort order field. (optional)</param>
        /// <param name="sortDirection">The sort direction. (Ascending or descending) (optional)</param>
        /// <param name="date">The date which will be used to compute the status. If is not set, DateTime.Now will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItemStatusDetailsQueryResult</returns>
        public async System.Threading.Tasks.Task<InventoryItemStatusDetailsQueryResult> GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGetAsync(string accept, string scopeId, string sku, bool? includeChildScopes = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortOrderField = default(string), string sortDirection = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemStatusDetailsQueryResult> localVarResponse = await GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGetWithHttpInfoAsync(accept, scopeId, sku, includeChildScopes, startingIndex, maximumItems, sortOrderField, sortDirection, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkuRequest} Retrieve a list of InventoryItemStatusDetails represented by sku from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</param>
        /// <param name="includeChildScopes">Whether inventory locations from child scopes should also be included in the results. (optional)</param>
        /// <param name="startingIndex">The starting index (optional)</param>
        /// <param name="maximumItems">The maximum items returned by the search query, default to 50 (optional)</param>
        /// <param name="sortOrderField">the sort order field. (optional)</param>
        /// <param name="sortDirection">The sort direction. (Ascending or descending) (optional)</param>
        /// <param name="date">The date which will be used to compute the status. If is not set, DateTime.Now will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryItemStatusDetailsQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemStatusDetailsQueryResult>> GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGetWithHttpInfoAsync(string accept, string scopeId, string sku, bool? includeChildScopes = default(bool?), int? startingIndex = default(int?), int? maximumItems = default(int?), string sortOrderField = default(string), string sortDirection = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGet");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            if (includeChildScopes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeChildScopes", includeChildScopes));
            }
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            if (sortOrderField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortOrderField", sortOrderField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Date", date));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InventoryItemStatusDetailsQueryResult>("/inventoryItems/{ScopeId}/bySku/{Sku}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryItemsByScopeAndSkuRequestScopeIdbySkuSkuGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkusRequest} Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryItemStatusDetailsQueryResult</returns>
        public InventoryItemStatusDetailsQueryResult GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPost(string accept, string scopeId, GetInventoryItemsByScopeAndSkusRequest body = default(GetInventoryItemsByScopeAndSkusRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemStatusDetailsQueryResult> localVarResponse = GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPostWithHttpInfo(accept, scopeId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkusRequest} Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryItemStatusDetailsQueryResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemStatusDetailsQueryResult> GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPostWithHttpInfo(string accept, string scopeId, GetInventoryItemsByScopeAndSkusRequest body = default(GetInventoryItemsByScopeAndSkusRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InventoryItemStatusDetailsQueryResult>("/inventoryItems/{ScopeId}/bySkus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkusRequest} Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItemStatusDetailsQueryResult</returns>
        public async System.Threading.Tasks.Task<InventoryItemStatusDetailsQueryResult> GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPostAsync(string accept, string scopeId, GetInventoryItemsByScopeAndSkusRequest body = default(GetInventoryItemsByScopeAndSkusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemStatusDetailsQueryResult> localVarResponse = await GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPostWithHttpInfoAsync(accept, scopeId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope - {GetInventoryItemsByScopeAndSkusRequest} Retrieve a list of InventoryItemStatusDetails represented by SKUs from all inventory location associated to the specific scope. The list of inventory location ids is all existing Fulfillment Locations inside the specific Scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryItemStatusDetailsQueryResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryItemStatusDetailsQueryResult>> GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPostWithHttpInfoAsync(string accept, string scopeId, GetInventoryItemsByScopeAndSkusRequest body = default(GetInventoryItemsByScopeAndSkusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InventoryItemStatusDetailsQueryResult>("/inventoryItems/{ScopeId}/bySkus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryItemsByScopeAndSkusRequestScopeIdbySkusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all available inventory providers - {GetInventoryProvidersRequest} Finds all available inventory providers available in the system.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <returns>List&lt;InventoryProviderDetails&gt;</returns>
        public List<InventoryProviderDetails> GetInventoryProvidersRequestScopeIdfindProvidersGet(string accept, string scopeId, string cultureName = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryProviderDetails>> localVarResponse = GetInventoryProvidersRequestScopeIdfindProvidersGetWithHttpInfo(accept, scopeId, cultureName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all available inventory providers - {GetInventoryProvidersRequest} Finds all available inventory providers available in the system.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryProviderDetails&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryProviderDetails>> GetInventoryProvidersRequestScopeIdfindProvidersGetWithHttpInfo(string accept, string scopeId, string cultureName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->GetInventoryProvidersRequestScopeIdfindProvidersGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->GetInventoryProvidersRequestScopeIdfindProvidersGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InventoryProviderDetails>>("/inventoryItems/{ScopeId}/findProviders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryProvidersRequestScopeIdfindProvidersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all available inventory providers - {GetInventoryProvidersRequest} Finds all available inventory providers available in the system.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryProviderDetails&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryProviderDetails>> GetInventoryProvidersRequestScopeIdfindProvidersGetAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryProviderDetails>> localVarResponse = await GetInventoryProvidersRequestScopeIdfindProvidersGetWithHttpInfoAsync(accept, scopeId, cultureName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all available inventory providers - {GetInventoryProvidersRequest} Finds all available inventory providers available in the system.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cultureName">The culture name in which language that data will be returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryProviderDetails&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryProviderDetails>>> GetInventoryProvidersRequestScopeIdfindProvidersGetWithHttpInfoAsync(string accept, string scopeId, string cultureName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->GetInventoryProvidersRequestScopeIdfindProvidersGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->GetInventoryProvidersRequestScopeIdfindProvidersGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            if (cultureName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureName", cultureName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InventoryProviderDetails>>("/inventoryItems/{ScopeId}/findProviders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryProvidersRequestScopeIdfindProvidersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find all reserved inventory items associated to the specified owner - {GetInventoryReservedItemsRequest} Find all reserved inventory items associated to the specified owner.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <returns>List&lt;InventoryReservedItem&gt;</returns>
        public List<InventoryReservedItem> GetInventoryReservedItemsRequestreservationsOwnerIdGet(string accept, string ownerId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryReservedItem>> localVarResponse = GetInventoryReservedItemsRequestreservationsOwnerIdGetWithHttpInfo(accept, ownerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find all reserved inventory items associated to the specified owner - {GetInventoryReservedItemsRequest} Find all reserved inventory items associated to the specified owner.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <returns>ApiResponse of List&lt;InventoryReservedItem&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryReservedItem>> GetInventoryReservedItemsRequestreservationsOwnerIdGetWithHttpInfo(string accept, string ownerId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->GetInventoryReservedItemsRequestreservationsOwnerIdGet");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->GetInventoryReservedItemsRequestreservationsOwnerIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InventoryReservedItem>>("/inventoryItems/reservations/{OwnerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryReservedItemsRequestreservationsOwnerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find all reserved inventory items associated to the specified owner - {GetInventoryReservedItemsRequest} Find all reserved inventory items associated to the specified owner.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryReservedItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryReservedItem>> GetInventoryReservedItemsRequestreservationsOwnerIdGetAsync(string accept, string ownerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryReservedItem>> localVarResponse = await GetInventoryReservedItemsRequestreservationsOwnerIdGetWithHttpInfoAsync(accept, ownerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find all reserved inventory items associated to the specified owner - {GetInventoryReservedItemsRequest} Find all reserved inventory items associated to the specified owner.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryReservedItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<InventoryReservedItem>>> GetInventoryReservedItemsRequestreservationsOwnerIdGetWithHttpInfoAsync(string accept, string ownerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->GetInventoryReservedItemsRequestreservationsOwnerIdGet");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->GetInventoryReservedItemsRequestreservationsOwnerIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InventoryReservedItem>>("/inventoryItems/reservations/{OwnerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryReservedItemsRequestreservationsOwnerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Increase an inventory quantity - {IncreaseInventoryQuantityRequest} Increase an inventory quantity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to add in the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryQuantity</returns>
        public InventoryQuantity IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPost(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryQuantity> localVarResponse = IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPostWithHttpInfo(accept, scopeId, sku, inventoryLocationId, quantity, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Increase an inventory quantity - {IncreaseInventoryQuantityRequest} Increase an inventory quantity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to add in the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryQuantity</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryQuantity> IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPostWithHttpInfo(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPost");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPost");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Quantity", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(quantity)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InventoryQuantity>("/inventoryItems/{ScopeId}/bySku/{Sku}/byLocation/{InventoryLocationId}/increase/{Quantity}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Increase an inventory quantity - {IncreaseInventoryQuantityRequest} Increase an inventory quantity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to add in the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryQuantity</returns>
        public async System.Threading.Tasks.Task<InventoryQuantity> IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPostAsync(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryQuantity> localVarResponse = await IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPostWithHttpInfoAsync(accept, scopeId, sku, inventoryLocationId, quantity, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Increase an inventory quantity - {IncreaseInventoryQuantityRequest} Increase an inventory quantity
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="sku">The associated product sku</param>
        /// <param name="inventoryLocationId">The inventory location identifier used to identify the right inventory to update</param>
        /// <param name="quantity">The quantity to add in the inventory</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryQuantity)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryQuantity>> IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPostWithHttpInfoAsync(string accept, string scopeId, string sku, string inventoryLocationId, double quantity, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling InventoryItemsApi->IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPost");

            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'sku' when calling InventoryItemsApi->IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPost");

            // verify the required parameter 'inventoryLocationId' is set
            if (inventoryLocationId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'inventoryLocationId' when calling InventoryItemsApi->IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Sku", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(sku)); // path parameter
            localVarRequestOptions.PathParameters.Add("InventoryLocationId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(inventoryLocationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Quantity", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(quantity)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InventoryQuantity>("/inventoryItems/{ScopeId}/bySku/{Sku}/byLocation/{InventoryLocationId}/increase/{Quantity}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncreaseInventoryQuantityRequestScopeIdbySkuSkubyLocationInventoryLocationIdincreaseQuantityPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows to send requests to reserve a list of inventory items - {ReserveInventoryItemsRequest} Allows to send requests to reserve a list of inventory items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InventoryReservationResult</returns>
        public InventoryReservationResult ReserveInventoryItemsRequestreservationsOwnerIdPost(string accept, string ownerId, ReserveInventoryItemsRequest body = default(ReserveInventoryItemsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryReservationResult> localVarResponse = ReserveInventoryItemsRequestreservationsOwnerIdPostWithHttpInfo(accept, ownerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows to send requests to reserve a list of inventory items - {ReserveInventoryItemsRequest} Allows to send requests to reserve a list of inventory items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InventoryReservationResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryReservationResult> ReserveInventoryItemsRequestreservationsOwnerIdPostWithHttpInfo(string accept, string ownerId, ReserveInventoryItemsRequest body = default(ReserveInventoryItemsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->ReserveInventoryItemsRequestreservationsOwnerIdPost");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->ReserveInventoryItemsRequestreservationsOwnerIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InventoryReservationResult>("/inventoryItems/reservations/{OwnerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReserveInventoryItemsRequestreservationsOwnerIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows to send requests to reserve a list of inventory items - {ReserveInventoryItemsRequest} Allows to send requests to reserve a list of inventory items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryReservationResult</returns>
        public async System.Threading.Tasks.Task<InventoryReservationResult> ReserveInventoryItemsRequestreservationsOwnerIdPostAsync(string accept, string ownerId, ReserveInventoryItemsRequest body = default(ReserveInventoryItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryReservationResult> localVarResponse = await ReserveInventoryItemsRequestreservationsOwnerIdPostWithHttpInfoAsync(accept, ownerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows to send requests to reserve a list of inventory items - {ReserveInventoryItemsRequest} Allows to send requests to reserve a list of inventory items.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="ownerId">The unique identifier of the order, order draft or cart (according to the owner type)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryReservationResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<InventoryReservationResult>> ReserveInventoryItemsRequestreservationsOwnerIdPostWithHttpInfoAsync(string accept, string ownerId, ReserveInventoryItemsRequest body = default(ReserveInventoryItemsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling InventoryItemsApi->ReserveInventoryItemsRequestreservationsOwnerIdPost");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'ownerId' when calling InventoryItemsApi->ReserveInventoryItemsRequestreservationsOwnerIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("OwnerId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InventoryReservationResult>("/inventoryItems/reservations/{OwnerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReserveInventoryItemsRequestreservationsOwnerIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
