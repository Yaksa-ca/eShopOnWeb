/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a child role to a parent. - {AddRoleChildRequest}
        /// </summary>
        /// <remarks>
        /// Add a child role to a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AddRoleChildRequestParentRoleIdChildRoleIdPost(string accept, int parentRoleId, int childRoleId, AddRoleChildRequest body = default(AddRoleChildRequest));

        /// <summary>
        /// Add a child role to a parent. - {AddRoleChildRequest}
        /// </summary>
        /// <remarks>
        /// Add a child role to a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddRoleChildRequestParentRoleIdChildRoleIdPostWithHttpInfo(string accept, int parentRoleId, int childRoleId, AddRoleChildRequest body = default(AddRoleChildRequest));
        /// <summary>
        /// This message is used to add a child role to the Global Administrator Role. - {AddRoleChildToGlobalAdministratorRoleRequest}
        /// </summary>
        /// <remarks>
        /// This message is used to add a child role to the Global Administrator Role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPost(string accept, int childRoleId, AddRoleChildToGlobalAdministratorRoleRequest body = default(AddRoleChildToGlobalAdministratorRoleRequest));

        /// <summary>
        /// This message is used to add a child role to the Global Administrator Role. - {AddRoleChildToGlobalAdministratorRoleRequest}
        /// </summary>
        /// <remarks>
        /// This message is used to add a child role to the Global Administrator Role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPostWithHttpInfo(string accept, int childRoleId, AddRoleChildToGlobalAdministratorRoleRequest body = default(AddRoleChildToGlobalAdministratorRoleRequest));
        /// <summary>
        /// Add a list of child role to a parent. - {AddRoleChildrenRequest}
        /// </summary>
        /// <remarks>
        /// Add a list of child role to a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AddRoleChildrenRequestParentRoleIdchildPost(string accept, int parentRoleId, AddRoleChildrenRequest body = default(AddRoleChildrenRequest));

        /// <summary>
        /// Add a list of child role to a parent. - {AddRoleChildrenRequest}
        /// </summary>
        /// <remarks>
        /// Add a list of child role to a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddRoleChildrenRequestParentRoleIdchildPostWithHttpInfo(string accept, int parentRoleId, AddRoleChildrenRequest body = default(AddRoleChildrenRequest));
        /// <summary>
        /// Create a new custom role. - {CreateCustomRoleRequest}
        /// </summary>
        /// <remarks>
        /// Create a new custom role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Role</returns>
        Role CreateCustomRoleRequestcustomNamePost(string accept, string name, Object body = default(Object));

        /// <summary>
        /// Create a new custom role. - {CreateCustomRoleRequest}
        /// </summary>
        /// <remarks>
        /// Create a new custom role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> CreateCustomRoleRequestcustomNamePostWithHttpInfo(string accept, string name, Object body = default(Object));
        /// <summary>
        /// Create a new role. - {CreateRoleRequest}
        /// </summary>
        /// <remarks>
        /// Create a new role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Role</returns>
        Role CreateRoleRequestNamePost(string accept, string name, CreateRoleRequest body = default(CreateRoleRequest));

        /// <summary>
        /// Create a new role. - {CreateRoleRequest}
        /// </summary>
        /// <remarks>
        /// Create a new role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> CreateRoleRequestNamePostWithHttpInfo(string accept, string name, CreateRoleRequest body = default(CreateRoleRequest));
        /// <summary>
        /// Delete role. - {DeleteRoleRequest}
        /// </summary>
        /// <remarks>
        /// Delete role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="moduleId">the module identifier. (optional)</param>
        /// <param name="name">the name. (optional)</param>
        /// <returns></returns>
        void DeleteRoleRequestIdDelete(string accept, int id, int? moduleId = default(int?), string name = default(string));

        /// <summary>
        /// Delete role. - {DeleteRoleRequest}
        /// </summary>
        /// <remarks>
        /// Delete role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="moduleId">the module identifier. (optional)</param>
        /// <param name="name">the name. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRoleRequestIdDeleteWithHttpInfo(string accept, int id, int? moduleId = default(int?), string name = default(string));
        /// <summary>
        /// Retrieve all the custom roles. - {GetCustomRolesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the custom roles.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="orderBy">The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName. (optional)</param>
        /// <param name="cultureCode">The CultureCode is use when you sort by DisplayName. By default, the culture &#39;en_US&#39; will be use. If you don&#39;t sort by display name, this parameter is not mandatory. (optional)</param>
        /// <returns>List&lt;Role&gt;</returns>
        List<Role> GetCustomRolesRequestcustomGet(string accept, string orderBy = default(string), string cultureCode = default(string));

        /// <summary>
        /// Retrieve all the custom roles. - {GetCustomRolesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the custom roles.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="orderBy">The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName. (optional)</param>
        /// <param name="cultureCode">The CultureCode is use when you sort by DisplayName. By default, the culture &#39;en_US&#39; will be use. If you don&#39;t sort by display name, this parameter is not mandatory. (optional)</param>
        /// <returns>ApiResponse of List&lt;Role&gt;</returns>
        ApiResponse<List<Role>> GetCustomRolesRequestcustomGetWithHttpInfo(string accept, string orderBy = default(string), string cultureCode = default(string));
        /// <summary>
        /// Retrieve the role by Id. - {GetRoleByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the role by Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The role identifier.</param>
        /// <returns>Role</returns>
        Role GetRoleByIdRequestIdGet(string accept, int id);

        /// <summary>
        /// Retrieve the role by Id. - {GetRoleByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the role by Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The role identifier.</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRoleByIdRequestIdGetWithHttpInfo(string accept, int id);
        /// <summary>
        /// Retrieve the role by name and module Id - {GetRoleRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the role by name and module Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="moduleId">The module identifier.</param>
        /// <param name="roleName">The role name.</param>
        /// <returns>Role</returns>
        Role GetRoleRequestModuleIdRoleNameGet(string accept, int moduleId, string roleName);

        /// <summary>
        /// Retrieve the role by name and module Id - {GetRoleRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the role by name and module Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="moduleId">The module identifier.</param>
        /// <param name="roleName">The role name.</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRoleRequestModuleIdRoleNameGetWithHttpInfo(string accept, int moduleId, string roleName);
        /// <summary>
        /// Retrieve all the roles - {GetRolesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the roles
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;Role&gt;</returns>
        List<Role> GetRolesRequestGet(string accept);

        /// <summary>
        /// Retrieve all the roles - {GetRolesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the roles
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;Role&gt;</returns>
        ApiResponse<List<Role>> GetRolesRequestGetWithHttpInfo(string accept);
        /// <summary>
        /// Remove a child role to a parent. - {RemoveRoleChildRequest}
        /// </summary>
        /// <remarks>
        /// Remove a child role to a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <returns></returns>
        void RemoveRoleChildRequestParentRoleIdChildRoleIdDelete(string accept, int parentRoleId, int childRoleId, string applicationName = default(string));

        /// <summary>
        /// Remove a child role to a parent. - {RemoveRoleChildRequest}
        /// </summary>
        /// <remarks>
        /// Remove a child role to a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveRoleChildRequestParentRoleIdChildRoleIdDeleteWithHttpInfo(string accept, int parentRoleId, int childRoleId, string applicationName = default(string));
        /// <summary>
        /// Remove a list of children roles from a parent. - {RemoveRoleChildrenRequest}
        /// </summary>
        /// <remarks>
        /// Remove a list of children roles from a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleIds">the list of child role identifier. (optional)</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <returns></returns>
        void RemoveRoleChildrenRequestParentRoleIdchildDelete(string accept, int parentRoleId, List<string> childRoleIds = default(List<string>), string applicationName = default(string));

        /// <summary>
        /// Remove a list of children roles from a parent. - {RemoveRoleChildrenRequest}
        /// </summary>
        /// <remarks>
        /// Remove a list of children roles from a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleIds">the list of child role identifier. (optional)</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveRoleChildrenRequestParentRoleIdchildDeleteWithHttpInfo(string accept, int parentRoleId, List<string> childRoleIds = default(List<string>), string applicationName = default(string));
        /// <summary>
        /// Check if child role id is a hierarchical child of parent role ids. - {RoleIsHierarchicalChildOfParentRolesRequest}
        /// </summary>
        /// <remarks>
        /// Check if child role id is a hierarchical child of parent role ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;RoleChildAssociation&gt;</returns>
        List<RoleChildAssociation> RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPost(string accept, int childRoleId, RoleIsHierarchicalChildOfParentRolesRequest body = default(RoleIsHierarchicalChildOfParentRolesRequest));

        /// <summary>
        /// Check if child role id is a hierarchical child of parent role ids. - {RoleIsHierarchicalChildOfParentRolesRequest}
        /// </summary>
        /// <remarks>
        /// Check if child role id is a hierarchical child of parent role ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RoleChildAssociation&gt;</returns>
        ApiResponse<List<RoleChildAssociation>> RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPostWithHttpInfo(string accept, int childRoleId, RoleIsHierarchicalChildOfParentRolesRequest body = default(RoleIsHierarchicalChildOfParentRolesRequest));
        /// <summary>
        /// Save the custom role. - {SaveCustomRoleRequest}
        /// </summary>
        /// <remarks>
        /// Save the custom role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Role</returns>
        Role SaveCustomRoleRequestcustomRoleIdCreate(string accept, int roleId, SaveCustomRoleRequest body = default(SaveCustomRoleRequest));

        /// <summary>
        /// Save the custom role. - {SaveCustomRoleRequest}
        /// </summary>
        /// <remarks>
        /// Save the custom role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> SaveCustomRoleRequestcustomRoleIdCreateWithHttpInfo(string accept, int roleId, SaveCustomRoleRequest body = default(SaveCustomRoleRequest));
        /// <summary>
        /// Update an existing role. - {UpdateRoleRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRoleRequestIdCreate(string accept, int id, UpdateRoleRequest body = default(UpdateRoleRequest));

        /// <summary>
        /// Update an existing role. - {UpdateRoleRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRoleRequestIdCreateWithHttpInfo(string accept, int id, UpdateRoleRequest body = default(UpdateRoleRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a child role to a parent. - {AddRoleChildRequest}
        /// </summary>
        /// <remarks>
        /// Add a child role to a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddRoleChildRequestParentRoleIdChildRoleIdPostAsync(string accept, int parentRoleId, int childRoleId, AddRoleChildRequest body = default(AddRoleChildRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a child role to a parent. - {AddRoleChildRequest}
        /// </summary>
        /// <remarks>
        /// Add a child role to a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddRoleChildRequestParentRoleIdChildRoleIdPostWithHttpInfoAsync(string accept, int parentRoleId, int childRoleId, AddRoleChildRequest body = default(AddRoleChildRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This message is used to add a child role to the Global Administrator Role. - {AddRoleChildToGlobalAdministratorRoleRequest}
        /// </summary>
        /// <remarks>
        /// This message is used to add a child role to the Global Administrator Role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPostAsync(string accept, int childRoleId, AddRoleChildToGlobalAdministratorRoleRequest body = default(AddRoleChildToGlobalAdministratorRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This message is used to add a child role to the Global Administrator Role. - {AddRoleChildToGlobalAdministratorRoleRequest}
        /// </summary>
        /// <remarks>
        /// This message is used to add a child role to the Global Administrator Role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPostWithHttpInfoAsync(string accept, int childRoleId, AddRoleChildToGlobalAdministratorRoleRequest body = default(AddRoleChildToGlobalAdministratorRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a list of child role to a parent. - {AddRoleChildrenRequest}
        /// </summary>
        /// <remarks>
        /// Add a list of child role to a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddRoleChildrenRequestParentRoleIdchildPostAsync(string accept, int parentRoleId, AddRoleChildrenRequest body = default(AddRoleChildrenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a list of child role to a parent. - {AddRoleChildrenRequest}
        /// </summary>
        /// <remarks>
        /// Add a list of child role to a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddRoleChildrenRequestParentRoleIdchildPostWithHttpInfoAsync(string accept, int parentRoleId, AddRoleChildrenRequest body = default(AddRoleChildrenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new custom role. - {CreateCustomRoleRequest}
        /// </summary>
        /// <remarks>
        /// Create a new custom role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> CreateCustomRoleRequestcustomNamePostAsync(string accept, string name, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new custom role. - {CreateCustomRoleRequest}
        /// </summary>
        /// <remarks>
        /// Create a new custom role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> CreateCustomRoleRequestcustomNamePostWithHttpInfoAsync(string accept, string name, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new role. - {CreateRoleRequest}
        /// </summary>
        /// <remarks>
        /// Create a new role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> CreateRoleRequestNamePostAsync(string accept, string name, CreateRoleRequest body = default(CreateRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new role. - {CreateRoleRequest}
        /// </summary>
        /// <remarks>
        /// Create a new role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> CreateRoleRequestNamePostWithHttpInfoAsync(string accept, string name, CreateRoleRequest body = default(CreateRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete role. - {DeleteRoleRequest}
        /// </summary>
        /// <remarks>
        /// Delete role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="moduleId">the module identifier. (optional)</param>
        /// <param name="name">the name. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRoleRequestIdDeleteAsync(string accept, int id, int? moduleId = default(int?), string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete role. - {DeleteRoleRequest}
        /// </summary>
        /// <remarks>
        /// Delete role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="moduleId">the module identifier. (optional)</param>
        /// <param name="name">the name. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleRequestIdDeleteWithHttpInfoAsync(string accept, int id, int? moduleId = default(int?), string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all the custom roles. - {GetCustomRolesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the custom roles.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="orderBy">The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName. (optional)</param>
        /// <param name="cultureCode">The CultureCode is use when you sort by DisplayName. By default, the culture &#39;en_US&#39; will be use. If you don&#39;t sort by display name, this parameter is not mandatory. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Role&gt;</returns>
        System.Threading.Tasks.Task<List<Role>> GetCustomRolesRequestcustomGetAsync(string accept, string orderBy = default(string), string cultureCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all the custom roles. - {GetCustomRolesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the custom roles.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="orderBy">The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName. (optional)</param>
        /// <param name="cultureCode">The CultureCode is use when you sort by DisplayName. By default, the culture &#39;en_US&#39; will be use. If you don&#39;t sort by display name, this parameter is not mandatory. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Role&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Role>>> GetCustomRolesRequestcustomGetWithHttpInfoAsync(string accept, string orderBy = default(string), string cultureCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the role by Id. - {GetRoleByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the role by Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The role identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRoleByIdRequestIdGetAsync(string accept, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the role by Id. - {GetRoleByIdRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the role by Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The role identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleByIdRequestIdGetWithHttpInfoAsync(string accept, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the role by name and module Id - {GetRoleRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the role by name and module Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="moduleId">The module identifier.</param>
        /// <param name="roleName">The role name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRoleRequestModuleIdRoleNameGetAsync(string accept, int moduleId, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the role by name and module Id - {GetRoleRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the role by name and module Id
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="moduleId">The module identifier.</param>
        /// <param name="roleName">The role name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleRequestModuleIdRoleNameGetWithHttpInfoAsync(string accept, int moduleId, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all the roles - {GetRolesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the roles
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Role&gt;</returns>
        System.Threading.Tasks.Task<List<Role>> GetRolesRequestGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all the roles - {GetRolesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve all the roles
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Role&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Role>>> GetRolesRequestGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a child role to a parent. - {RemoveRoleChildRequest}
        /// </summary>
        /// <remarks>
        /// Remove a child role to a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveRoleChildRequestParentRoleIdChildRoleIdDeleteAsync(string accept, int parentRoleId, int childRoleId, string applicationName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a child role to a parent. - {RemoveRoleChildRequest}
        /// </summary>
        /// <remarks>
        /// Remove a child role to a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveRoleChildRequestParentRoleIdChildRoleIdDeleteWithHttpInfoAsync(string accept, int parentRoleId, int childRoleId, string applicationName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a list of children roles from a parent. - {RemoveRoleChildrenRequest}
        /// </summary>
        /// <remarks>
        /// Remove a list of children roles from a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleIds">the list of child role identifier. (optional)</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveRoleChildrenRequestParentRoleIdchildDeleteAsync(string accept, int parentRoleId, List<string> childRoleIds = default(List<string>), string applicationName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a list of children roles from a parent. - {RemoveRoleChildrenRequest}
        /// </summary>
        /// <remarks>
        /// Remove a list of children roles from a parent.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleIds">the list of child role identifier. (optional)</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveRoleChildrenRequestParentRoleIdchildDeleteWithHttpInfoAsync(string accept, int parentRoleId, List<string> childRoleIds = default(List<string>), string applicationName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if child role id is a hierarchical child of parent role ids. - {RoleIsHierarchicalChildOfParentRolesRequest}
        /// </summary>
        /// <remarks>
        /// Check if child role id is a hierarchical child of parent role ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RoleChildAssociation&gt;</returns>
        System.Threading.Tasks.Task<List<RoleChildAssociation>> RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPostAsync(string accept, int childRoleId, RoleIsHierarchicalChildOfParentRolesRequest body = default(RoleIsHierarchicalChildOfParentRolesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if child role id is a hierarchical child of parent role ids. - {RoleIsHierarchicalChildOfParentRolesRequest}
        /// </summary>
        /// <remarks>
        /// Check if child role id is a hierarchical child of parent role ids
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RoleChildAssociation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RoleChildAssociation>>> RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPostWithHttpInfoAsync(string accept, int childRoleId, RoleIsHierarchicalChildOfParentRolesRequest body = default(RoleIsHierarchicalChildOfParentRolesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save the custom role. - {SaveCustomRoleRequest}
        /// </summary>
        /// <remarks>
        /// Save the custom role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> SaveCustomRoleRequestcustomRoleIdCreateAsync(string accept, int roleId, SaveCustomRoleRequest body = default(SaveCustomRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save the custom role. - {SaveCustomRoleRequest}
        /// </summary>
        /// <remarks>
        /// Save the custom role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> SaveCustomRoleRequestcustomRoleIdCreateWithHttpInfoAsync(string accept, int roleId, SaveCustomRoleRequest body = default(SaveCustomRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing role. - {UpdateRoleRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRoleRequestIdCreateAsync(string accept, int id, UpdateRoleRequest body = default(UpdateRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing role. - {UpdateRoleRequest}
        /// </summary>
        /// <remarks>
        /// Update an existing role.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRoleRequestIdCreateWithHttpInfoAsync(string accept, int id, UpdateRoleRequest body = default(UpdateRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApi : IRolesApiSync, IRolesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RolesApi : IRolesApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RolesApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RolesApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a child role to a parent. - {AddRoleChildRequest} Add a child role to a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AddRoleChildRequestParentRoleIdChildRoleIdPost(string accept, int parentRoleId, int childRoleId, AddRoleChildRequest body = default(AddRoleChildRequest))
        {
            AddRoleChildRequestParentRoleIdChildRoleIdPostWithHttpInfo(accept, parentRoleId, childRoleId, body);
        }

        /// <summary>
        /// Add a child role to a parent. - {AddRoleChildRequest} Add a child role to a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> AddRoleChildRequestParentRoleIdChildRoleIdPostWithHttpInfo(string accept, int parentRoleId, int childRoleId, AddRoleChildRequest body = default(AddRoleChildRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->AddRoleChildRequestParentRoleIdChildRoleIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ParentRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentRoleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ChildRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(childRoleId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/roles/{ParentRoleId}/{ChildRoleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRoleChildRequestParentRoleIdChildRoleIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a child role to a parent. - {AddRoleChildRequest} Add a child role to a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddRoleChildRequestParentRoleIdChildRoleIdPostAsync(string accept, int parentRoleId, int childRoleId, AddRoleChildRequest body = default(AddRoleChildRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddRoleChildRequestParentRoleIdChildRoleIdPostWithHttpInfoAsync(accept, parentRoleId, childRoleId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a child role to a parent. - {AddRoleChildRequest} Add a child role to a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> AddRoleChildRequestParentRoleIdChildRoleIdPostWithHttpInfoAsync(string accept, int parentRoleId, int childRoleId, AddRoleChildRequest body = default(AddRoleChildRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->AddRoleChildRequestParentRoleIdChildRoleIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ParentRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentRoleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ChildRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(childRoleId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/roles/{ParentRoleId}/{ChildRoleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRoleChildRequestParentRoleIdChildRoleIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This message is used to add a child role to the Global Administrator Role. - {AddRoleChildToGlobalAdministratorRoleRequest} This message is used to add a child role to the Global Administrator Role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPost(string accept, int childRoleId, AddRoleChildToGlobalAdministratorRoleRequest body = default(AddRoleChildToGlobalAdministratorRoleRequest))
        {
            AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPostWithHttpInfo(accept, childRoleId, body);
        }

        /// <summary>
        /// This message is used to add a child role to the Global Administrator Role. - {AddRoleChildToGlobalAdministratorRoleRequest} This message is used to add a child role to the Global Administrator Role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPostWithHttpInfo(string accept, int childRoleId, AddRoleChildToGlobalAdministratorRoleRequest body = default(AddRoleChildToGlobalAdministratorRoleRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ChildRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(childRoleId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/roles/systemAdministrator/{ChildRoleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This message is used to add a child role to the Global Administrator Role. - {AddRoleChildToGlobalAdministratorRoleRequest} This message is used to add a child role to the Global Administrator Role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPostAsync(string accept, int childRoleId, AddRoleChildToGlobalAdministratorRoleRequest body = default(AddRoleChildToGlobalAdministratorRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPostWithHttpInfoAsync(accept, childRoleId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This message is used to add a child role to the Global Administrator Role. - {AddRoleChildToGlobalAdministratorRoleRequest} This message is used to add a child role to the Global Administrator Role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPostWithHttpInfoAsync(string accept, int childRoleId, AddRoleChildToGlobalAdministratorRoleRequest body = default(AddRoleChildToGlobalAdministratorRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ChildRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(childRoleId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/roles/systemAdministrator/{ChildRoleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRoleChildToGlobalAdministratorRoleRequestsystemAdministratorChildRoleIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of child role to a parent. - {AddRoleChildrenRequest} Add a list of child role to a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AddRoleChildrenRequestParentRoleIdchildPost(string accept, int parentRoleId, AddRoleChildrenRequest body = default(AddRoleChildrenRequest))
        {
            AddRoleChildrenRequestParentRoleIdchildPostWithHttpInfo(accept, parentRoleId, body);
        }

        /// <summary>
        /// Add a list of child role to a parent. - {AddRoleChildrenRequest} Add a list of child role to a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> AddRoleChildrenRequestParentRoleIdchildPostWithHttpInfo(string accept, int parentRoleId, AddRoleChildrenRequest body = default(AddRoleChildrenRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->AddRoleChildrenRequestParentRoleIdchildPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ParentRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentRoleId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/roles/{ParentRoleId}/child", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRoleChildrenRequestParentRoleIdchildPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of child role to a parent. - {AddRoleChildrenRequest} Add a list of child role to a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddRoleChildrenRequestParentRoleIdchildPostAsync(string accept, int parentRoleId, AddRoleChildrenRequest body = default(AddRoleChildrenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddRoleChildrenRequestParentRoleIdchildPostWithHttpInfoAsync(accept, parentRoleId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a list of child role to a parent. - {AddRoleChildrenRequest} Add a list of child role to a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> AddRoleChildrenRequestParentRoleIdchildPostWithHttpInfoAsync(string accept, int parentRoleId, AddRoleChildrenRequest body = default(AddRoleChildrenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->AddRoleChildrenRequestParentRoleIdchildPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ParentRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentRoleId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/roles/{ParentRoleId}/child", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRoleChildrenRequestParentRoleIdchildPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new custom role. - {CreateCustomRoleRequest} Create a new custom role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Role</returns>
        public Role CreateCustomRoleRequestcustomNamePost(string accept, string name, Object body = default(Object))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> localVarResponse = CreateCustomRoleRequestcustomNamePostWithHttpInfo(accept, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom role. - {CreateCustomRoleRequest} Create a new custom role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> CreateCustomRoleRequestcustomNamePostWithHttpInfo(string accept, string name, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->CreateCustomRoleRequestcustomNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling RolesApi->CreateCustomRoleRequestcustomNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Role>("/roles/custom/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomRoleRequestcustomNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new custom role. - {CreateCustomRoleRequest} Create a new custom role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> CreateCustomRoleRequestcustomNamePostAsync(string accept, string name, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> localVarResponse = await CreateCustomRoleRequestcustomNamePostWithHttpInfoAsync(accept, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom role. - {CreateCustomRoleRequest} Create a new custom role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role>> CreateCustomRoleRequestcustomNamePostWithHttpInfoAsync(string accept, string name, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->CreateCustomRoleRequestcustomNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling RolesApi->CreateCustomRoleRequestcustomNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Role>("/roles/custom/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomRoleRequestcustomNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new role. - {CreateRoleRequest} Create a new role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Role</returns>
        public Role CreateRoleRequestNamePost(string accept, string name, CreateRoleRequest body = default(CreateRoleRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> localVarResponse = CreateRoleRequestNamePostWithHttpInfo(accept, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new role. - {CreateRoleRequest} Create a new role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> CreateRoleRequestNamePostWithHttpInfo(string accept, string name, CreateRoleRequest body = default(CreateRoleRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->CreateRoleRequestNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling RolesApi->CreateRoleRequestNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Role>("/roles/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRoleRequestNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new role. - {CreateRoleRequest} Create a new role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> CreateRoleRequestNamePostAsync(string accept, string name, CreateRoleRequest body = default(CreateRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> localVarResponse = await CreateRoleRequestNamePostWithHttpInfoAsync(accept, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new role. - {CreateRoleRequest} Create a new role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="name">the role name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role>> CreateRoleRequestNamePostWithHttpInfoAsync(string accept, string name, CreateRoleRequest body = default(CreateRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->CreateRoleRequestNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling RolesApi->CreateRoleRequestNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Role>("/roles/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRoleRequestNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete role. - {DeleteRoleRequest} Delete role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="moduleId">the module identifier. (optional)</param>
        /// <param name="name">the name. (optional)</param>
        /// <returns></returns>
        public void DeleteRoleRequestIdDelete(string accept, int id, int? moduleId = default(int?), string name = default(string))
        {
            DeleteRoleRequestIdDeleteWithHttpInfo(accept, id, moduleId, name);
        }

        /// <summary>
        /// Delete role. - {DeleteRoleRequest} Delete role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="moduleId">the module identifier. (optional)</param>
        /// <param name="name">the name. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteRoleRequestIdDeleteWithHttpInfo(string accept, int id, int? moduleId = default(int?), string name = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->DeleteRoleRequestIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Name", name));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/roles/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoleRequestIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete role. - {DeleteRoleRequest} Delete role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="moduleId">the module identifier. (optional)</param>
        /// <param name="name">the name. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRoleRequestIdDeleteAsync(string accept, int id, int? moduleId = default(int?), string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRoleRequestIdDeleteWithHttpInfoAsync(accept, id, moduleId, name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete role. - {DeleteRoleRequest} Delete role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="moduleId">the module identifier. (optional)</param>
        /// <param name="name">the name. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteRoleRequestIdDeleteWithHttpInfoAsync(string accept, int id, int? moduleId = default(int?), string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->DeleteRoleRequestIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (moduleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ModuleId", moduleId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "Name", name));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/roles/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRoleRequestIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the custom roles. - {GetCustomRolesRequest} Retrieve all the custom roles.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="orderBy">The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName. (optional)</param>
        /// <param name="cultureCode">The CultureCode is use when you sort by DisplayName. By default, the culture &#39;en_US&#39; will be use. If you don&#39;t sort by display name, this parameter is not mandatory. (optional)</param>
        /// <returns>List&lt;Role&gt;</returns>
        public List<Role> GetCustomRolesRequestcustomGet(string accept, string orderBy = default(string), string cultureCode = default(string))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Role>> localVarResponse = GetCustomRolesRequestcustomGetWithHttpInfo(accept, orderBy, cultureCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the custom roles. - {GetCustomRolesRequest} Retrieve all the custom roles.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="orderBy">The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName. (optional)</param>
        /// <param name="cultureCode">The CultureCode is use when you sort by DisplayName. By default, the culture &#39;en_US&#39; will be use. If you don&#39;t sort by display name, this parameter is not mandatory. (optional)</param>
        /// <returns>ApiResponse of List&lt;Role&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Role>> GetCustomRolesRequestcustomGetWithHttpInfo(string accept, string orderBy = default(string), string cultureCode = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->GetCustomRolesRequestcustomGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (cultureCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureCode", cultureCode));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Role>>("/roles/custom", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomRolesRequestcustomGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the custom roles. - {GetCustomRolesRequest} Retrieve all the custom roles.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="orderBy">The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName. (optional)</param>
        /// <param name="cultureCode">The CultureCode is use when you sort by DisplayName. By default, the culture &#39;en_US&#39; will be use. If you don&#39;t sort by display name, this parameter is not mandatory. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Role&gt;</returns>
        public async System.Threading.Tasks.Task<List<Role>> GetCustomRolesRequestcustomGetAsync(string accept, string orderBy = default(string), string cultureCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Role>> localVarResponse = await GetCustomRolesRequestcustomGetWithHttpInfoAsync(accept, orderBy, cultureCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the custom roles. - {GetCustomRolesRequest} Retrieve all the custom roles.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="orderBy">The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName. (optional)</param>
        /// <param name="cultureCode">The CultureCode is use when you sort by DisplayName. By default, the culture &#39;en_US&#39; will be use. If you don&#39;t sort by display name, this parameter is not mandatory. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Role&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Role>>> GetCustomRolesRequestcustomGetWithHttpInfoAsync(string accept, string orderBy = default(string), string cultureCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->GetCustomRolesRequestcustomGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (cultureCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "CultureCode", cultureCode));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Role>>("/roles/custom", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomRolesRequestcustomGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the role by Id. - {GetRoleByIdRequest} Retrieve the role by Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The role identifier.</param>
        /// <returns>Role</returns>
        public Role GetRoleByIdRequestIdGet(string accept, int id)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> localVarResponse = GetRoleByIdRequestIdGetWithHttpInfo(accept, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the role by Id. - {GetRoleByIdRequest} Retrieve the role by Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The role identifier.</param>
        /// <returns>ApiResponse of Role</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> GetRoleByIdRequestIdGetWithHttpInfo(string accept, int id)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->GetRoleByIdRequestIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Role>("/roles/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoleByIdRequestIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the role by Id. - {GetRoleByIdRequest} Retrieve the role by Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The role identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRoleByIdRequestIdGetAsync(string accept, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> localVarResponse = await GetRoleByIdRequestIdGetWithHttpInfoAsync(accept, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the role by Id. - {GetRoleByIdRequest} Retrieve the role by Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">The role identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role>> GetRoleByIdRequestIdGetWithHttpInfoAsync(string accept, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->GetRoleByIdRequestIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Role>("/roles/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoleByIdRequestIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the role by name and module Id - {GetRoleRequest} Retrieve the role by name and module Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="moduleId">The module identifier.</param>
        /// <param name="roleName">The role name.</param>
        /// <returns>Role</returns>
        public Role GetRoleRequestModuleIdRoleNameGet(string accept, int moduleId, string roleName)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> localVarResponse = GetRoleRequestModuleIdRoleNameGetWithHttpInfo(accept, moduleId, roleName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the role by name and module Id - {GetRoleRequest} Retrieve the role by name and module Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="moduleId">The module identifier.</param>
        /// <param name="roleName">The role name.</param>
        /// <returns>ApiResponse of Role</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> GetRoleRequestModuleIdRoleNameGetWithHttpInfo(string accept, int moduleId, string roleName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->GetRoleRequestModuleIdRoleNameGet");

            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->GetRoleRequestModuleIdRoleNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ModuleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(moduleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("RoleName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Role>("/roles/{ModuleId}/{RoleName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoleRequestModuleIdRoleNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the role by name and module Id - {GetRoleRequest} Retrieve the role by name and module Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="moduleId">The module identifier.</param>
        /// <param name="roleName">The role name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRoleRequestModuleIdRoleNameGetAsync(string accept, int moduleId, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> localVarResponse = await GetRoleRequestModuleIdRoleNameGetWithHttpInfoAsync(accept, moduleId, roleName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the role by name and module Id - {GetRoleRequest} Retrieve the role by name and module Id
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="moduleId">The module identifier.</param>
        /// <param name="roleName">The role name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role>> GetRoleRequestModuleIdRoleNameGetWithHttpInfoAsync(string accept, int moduleId, string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->GetRoleRequestModuleIdRoleNameGet");

            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->GetRoleRequestModuleIdRoleNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ModuleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(moduleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("RoleName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Role>("/roles/{ModuleId}/{RoleName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoleRequestModuleIdRoleNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the roles - {GetRolesRequest} Retrieve all the roles
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>List&lt;Role&gt;</returns>
        public List<Role> GetRolesRequestGet(string accept)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Role>> localVarResponse = GetRolesRequestGetWithHttpInfo(accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the roles - {GetRolesRequest} Retrieve all the roles
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <returns>ApiResponse of List&lt;Role&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Role>> GetRolesRequestGetWithHttpInfo(string accept)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->GetRolesRequestGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Role>>("/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRolesRequestGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the roles - {GetRolesRequest} Retrieve all the roles
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Role&gt;</returns>
        public async System.Threading.Tasks.Task<List<Role>> GetRolesRequestGetAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Role>> localVarResponse = await GetRolesRequestGetWithHttpInfoAsync(accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the roles - {GetRolesRequest} Retrieve all the roles
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Role&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Role>>> GetRolesRequestGetWithHttpInfoAsync(string accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->GetRolesRequestGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Role>>("/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRolesRequestGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a child role to a parent. - {RemoveRoleChildRequest} Remove a child role to a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <returns></returns>
        public void RemoveRoleChildRequestParentRoleIdChildRoleIdDelete(string accept, int parentRoleId, int childRoleId, string applicationName = default(string))
        {
            RemoveRoleChildRequestParentRoleIdChildRoleIdDeleteWithHttpInfo(accept, parentRoleId, childRoleId, applicationName);
        }

        /// <summary>
        /// Remove a child role to a parent. - {RemoveRoleChildRequest} Remove a child role to a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> RemoveRoleChildRequestParentRoleIdChildRoleIdDeleteWithHttpInfo(string accept, int parentRoleId, int childRoleId, string applicationName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->RemoveRoleChildRequestParentRoleIdChildRoleIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ParentRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentRoleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ChildRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(childRoleId)); // path parameter
            if (applicationName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ApplicationName", applicationName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/roles/{ParentRoleId}/{ChildRoleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRoleChildRequestParentRoleIdChildRoleIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a child role to a parent. - {RemoveRoleChildRequest} Remove a child role to a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveRoleChildRequestParentRoleIdChildRoleIdDeleteAsync(string accept, int parentRoleId, int childRoleId, string applicationName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveRoleChildRequestParentRoleIdChildRoleIdDeleteWithHttpInfoAsync(accept, parentRoleId, childRoleId, applicationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a child role to a parent. - {RemoveRoleChildRequest} Remove a child role to a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> RemoveRoleChildRequestParentRoleIdChildRoleIdDeleteWithHttpInfoAsync(string accept, int parentRoleId, int childRoleId, string applicationName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->RemoveRoleChildRequestParentRoleIdChildRoleIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ParentRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentRoleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ChildRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(childRoleId)); // path parameter
            if (applicationName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ApplicationName", applicationName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/roles/{ParentRoleId}/{ChildRoleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRoleChildRequestParentRoleIdChildRoleIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a list of children roles from a parent. - {RemoveRoleChildrenRequest} Remove a list of children roles from a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleIds">the list of child role identifier. (optional)</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <returns></returns>
        public void RemoveRoleChildrenRequestParentRoleIdchildDelete(string accept, int parentRoleId, List<string> childRoleIds = default(List<string>), string applicationName = default(string))
        {
            RemoveRoleChildrenRequestParentRoleIdchildDeleteWithHttpInfo(accept, parentRoleId, childRoleIds, applicationName);
        }

        /// <summary>
        /// Remove a list of children roles from a parent. - {RemoveRoleChildrenRequest} Remove a list of children roles from a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleIds">the list of child role identifier. (optional)</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> RemoveRoleChildrenRequestParentRoleIdchildDeleteWithHttpInfo(string accept, int parentRoleId, List<string> childRoleIds = default(List<string>), string applicationName = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->RemoveRoleChildrenRequestParentRoleIdchildDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ParentRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentRoleId)); // path parameter
            if (childRoleIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "ChildRoleIds", childRoleIds));
            }
            if (applicationName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ApplicationName", applicationName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/roles/{ParentRoleId}/child", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRoleChildrenRequestParentRoleIdchildDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a list of children roles from a parent. - {RemoveRoleChildrenRequest} Remove a list of children roles from a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleIds">the list of child role identifier. (optional)</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveRoleChildrenRequestParentRoleIdchildDeleteAsync(string accept, int parentRoleId, List<string> childRoleIds = default(List<string>), string applicationName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveRoleChildrenRequestParentRoleIdchildDeleteWithHttpInfoAsync(accept, parentRoleId, childRoleIds, applicationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a list of children roles from a parent. - {RemoveRoleChildrenRequest} Remove a list of children roles from a parent.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="parentRoleId">the parent role identifier.</param>
        /// <param name="childRoleIds">the list of child role identifier. (optional)</param>
        /// <param name="applicationName">the application name. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> RemoveRoleChildrenRequestParentRoleIdchildDeleteWithHttpInfoAsync(string accept, int parentRoleId, List<string> childRoleIds = default(List<string>), string applicationName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->RemoveRoleChildrenRequestParentRoleIdchildDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ParentRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(parentRoleId)); // path parameter
            if (childRoleIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "ChildRoleIds", childRoleIds));
            }
            if (applicationName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ApplicationName", applicationName));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/roles/{ParentRoleId}/child", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRoleChildrenRequestParentRoleIdchildDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if child role id is a hierarchical child of parent role ids. - {RoleIsHierarchicalChildOfParentRolesRequest} Check if child role id is a hierarchical child of parent role ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;RoleChildAssociation&gt;</returns>
        public List<RoleChildAssociation> RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPost(string accept, int childRoleId, RoleIsHierarchicalChildOfParentRolesRequest body = default(RoleIsHierarchicalChildOfParentRolesRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<RoleChildAssociation>> localVarResponse = RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPostWithHttpInfo(accept, childRoleId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if child role id is a hierarchical child of parent role ids. - {RoleIsHierarchicalChildOfParentRolesRequest} Check if child role id is a hierarchical child of parent role ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RoleChildAssociation&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<RoleChildAssociation>> RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPostWithHttpInfo(string accept, int childRoleId, RoleIsHierarchicalChildOfParentRolesRequest body = default(RoleIsHierarchicalChildOfParentRolesRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ChildRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(childRoleId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<RoleChildAssociation>>("/roles/{ChildRoleId}/childOf", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if child role id is a hierarchical child of parent role ids. - {RoleIsHierarchicalChildOfParentRolesRequest} Check if child role id is a hierarchical child of parent role ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RoleChildAssociation&gt;</returns>
        public async System.Threading.Tasks.Task<List<RoleChildAssociation>> RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPostAsync(string accept, int childRoleId, RoleIsHierarchicalChildOfParentRolesRequest body = default(RoleIsHierarchicalChildOfParentRolesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<RoleChildAssociation>> localVarResponse = await RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPostWithHttpInfoAsync(accept, childRoleId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if child role id is a hierarchical child of parent role ids. - {RoleIsHierarchicalChildOfParentRolesRequest} Check if child role id is a hierarchical child of parent role ids
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="childRoleId">the child role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RoleChildAssociation&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<RoleChildAssociation>>> RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPostWithHttpInfoAsync(string accept, int childRoleId, RoleIsHierarchicalChildOfParentRolesRequest body = default(RoleIsHierarchicalChildOfParentRolesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ChildRoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(childRoleId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<RoleChildAssociation>>("/roles/{ChildRoleId}/childOf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RoleIsHierarchicalChildOfParentRolesRequestChildRoleIdchildOfPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save the custom role. - {SaveCustomRoleRequest} Save the custom role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Role</returns>
        public Role SaveCustomRoleRequestcustomRoleIdCreate(string accept, int roleId, SaveCustomRoleRequest body = default(SaveCustomRoleRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> localVarResponse = SaveCustomRoleRequestcustomRoleIdCreateWithHttpInfo(accept, roleId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save the custom role. - {SaveCustomRoleRequest} Save the custom role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> SaveCustomRoleRequestcustomRoleIdCreateWithHttpInfo(string accept, int roleId, SaveCustomRoleRequest body = default(SaveCustomRoleRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->SaveCustomRoleRequestcustomRoleIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("RoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Role>("/roles/custom/{RoleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveCustomRoleRequestcustomRoleIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save the custom role. - {SaveCustomRoleRequest} Save the custom role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> SaveCustomRoleRequestcustomRoleIdCreateAsync(string accept, int roleId, SaveCustomRoleRequest body = default(SaveCustomRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role> localVarResponse = await SaveCustomRoleRequestcustomRoleIdCreateWithHttpInfoAsync(accept, roleId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save the custom role. - {SaveCustomRoleRequest} Save the custom role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="roleId">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Role>> SaveCustomRoleRequestcustomRoleIdCreateWithHttpInfoAsync(string accept, int roleId, SaveCustomRoleRequest body = default(SaveCustomRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->SaveCustomRoleRequestcustomRoleIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("RoleId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Role>("/roles/custom/{RoleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveCustomRoleRequestcustomRoleIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing role. - {UpdateRoleRequest} Update an existing role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRoleRequestIdCreate(string accept, int id, UpdateRoleRequest body = default(UpdateRoleRequest))
        {
            UpdateRoleRequestIdCreateWithHttpInfo(accept, id, body);
        }

        /// <summary>
        /// Update an existing role. - {UpdateRoleRequest} Update an existing role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> UpdateRoleRequestIdCreateWithHttpInfo(string accept, int id, UpdateRoleRequest body = default(UpdateRoleRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->UpdateRoleRequestIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/roles/{Id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRoleRequestIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing role. - {UpdateRoleRequest} Update an existing role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRoleRequestIdCreateAsync(string accept, int id, UpdateRoleRequest body = default(UpdateRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateRoleRequestIdCreateWithHttpInfoAsync(accept, id, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update an existing role. - {UpdateRoleRequest} Update an existing role.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="id">the role identifier.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> UpdateRoleRequestIdCreateWithHttpInfoAsync(string accept, int id, UpdateRoleRequest body = default(UpdateRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling RolesApi->UpdateRoleRequestIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("Id", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/roles/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRoleRequestIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
