/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a user to a group - {AddUserToGroupRequest}
        /// </summary>
        /// <remarks>
        /// Add a user to a group
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void AddUserToGroupRequestGroupIdUserNamePost(string accept, string groupId, string userName, Object body = default(Object));

        /// <summary>
        /// Add a user to a group - {AddUserToGroupRequest}
        /// </summary>
        /// <remarks>
        /// Add a user to a group
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddUserToGroupRequestGroupIdUserNamePostWithHttpInfo(string accept, string groupId, string userName, Object body = default(Object));
        /// <summary>
        /// Create a new Group - {CreateGroupRequest}
        /// </summary>
        /// <remarks>
        /// Create a new Group
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="displayName">the display name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Group</returns>
        Group CreateGroupRequestDisplayNamePost(string accept, string displayName, CreateGroupRequest body = default(CreateGroupRequest));

        /// <summary>
        /// Create a new Group - {CreateGroupRequest}
        /// </summary>
        /// <remarks>
        /// Create a new Group
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="displayName">the display name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> CreateGroupRequestDisplayNamePostWithHttpInfo(string accept, string displayName, CreateGroupRequest body = default(CreateGroupRequest));
        /// <summary>
        /// Delete the group using its id. - {DeleteGroupRequest}
        /// </summary>
        /// <remarks>
        /// Delete the group using its id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <returns></returns>
        void DeleteGroupRequestGroupIdDelete(string accept, string groupId);

        /// <summary>
        /// Delete the group using its id. - {DeleteGroupRequest}
        /// </summary>
        /// <remarks>
        /// Delete the group using its id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupRequestGroupIdDeleteWithHttpInfo(string accept, string groupId);
        /// <summary>
        /// Find the groups with the specified name - {FindGroupsRequest}
        /// </summary>
        /// <remarks>
        /// Find the groups with the specified name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindGroupsResult</returns>
        FindGroupsResult FindGroupsRequestfindPost(string accept, FindGroupsRequest body = default(FindGroupsRequest));

        /// <summary>
        /// Find the groups with the specified name - {FindGroupsRequest}
        /// </summary>
        /// <remarks>
        /// Find the groups with the specified name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindGroupsResult</returns>
        ApiResponse<FindGroupsResult> FindGroupsRequestfindPostWithHttpInfo(string accept, FindGroupsRequest body = default(FindGroupsRequest));
        /// <summary>
        /// Retrieve the group members by group Id. - {GetGroupMembersWithPagingRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the group members by group Id. If MaximumItems and StartingIndex are not set, 0 is taken and so the request returns 0 results.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum of items to be returned. (optional)</param>
        /// <returns>GetGroupMembersWithPagingResult</returns>
        GetGroupMembersWithPagingResult GetGroupMembersWithPagingRequestGroupIdusersGet(string accept, string groupId, int? startingIndex = default(int?), int? maximumItems = default(int?));

        /// <summary>
        /// Retrieve the group members by group Id. - {GetGroupMembersWithPagingRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the group members by group Id. If MaximumItems and StartingIndex are not set, 0 is taken and so the request returns 0 results.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum of items to be returned. (optional)</param>
        /// <returns>ApiResponse of GetGroupMembersWithPagingResult</returns>
        ApiResponse<GetGroupMembersWithPagingResult> GetGroupMembersWithPagingRequestGroupIdusersGetWithHttpInfo(string accept, string groupId, int? startingIndex = default(int?), int? maximumItems = default(int?));
        /// <summary>
        /// Retrieve the group by Id. - {GetGroupRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the group by Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <returns>Group</returns>
        Group GetGroupRequestGroupIdGet(string accept, string groupId);

        /// <summary>
        /// Retrieve the group by Id. - {GetGroupRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the group by Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> GetGroupRequestGroupIdGetWithHttpInfo(string accept, string groupId);
        /// <summary>
        /// Remove a user from a group - {RemoveUserFromGroupRequest}
        /// </summary>
        /// <remarks>
        /// Remove a user from a group
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <returns></returns>
        void RemoveUserFromGroupRequestGroupIdUserNameDelete(string accept, string groupId, string userName);

        /// <summary>
        /// Remove a user from a group - {RemoveUserFromGroupRequest}
        /// </summary>
        /// <remarks>
        /// Remove a user from a group
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserFromGroupRequestGroupIdUserNameDeleteWithHttpInfo(string accept, string groupId, string userName);
        /// <summary>
        /// Save the group. - {SaveGroupRequest}
        /// </summary>
        /// <remarks>
        /// Save the group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">the object identifier of this group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Group</returns>
        Group SaveGroupRequestGroupIdCreate(string accept, string groupId, SaveGroupRequest body = default(SaveGroupRequest));

        /// <summary>
        /// Save the group. - {SaveGroupRequest}
        /// </summary>
        /// <remarks>
        /// Save the group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">the object identifier of this group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> SaveGroupRequestGroupIdCreateWithHttpInfo(string accept, string groupId, SaveGroupRequest body = default(SaveGroupRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a user to a group - {AddUserToGroupRequest}
        /// </summary>
        /// <remarks>
        /// Add a user to a group
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddUserToGroupRequestGroupIdUserNamePostAsync(string accept, string groupId, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a user to a group - {AddUserToGroupRequest}
        /// </summary>
        /// <remarks>
        /// Add a user to a group
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddUserToGroupRequestGroupIdUserNamePostWithHttpInfoAsync(string accept, string groupId, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Group - {CreateGroupRequest}
        /// </summary>
        /// <remarks>
        /// Create a new Group
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="displayName">the display name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> CreateGroupRequestDisplayNamePostAsync(string accept, string displayName, CreateGroupRequest body = default(CreateGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Group - {CreateGroupRequest}
        /// </summary>
        /// <remarks>
        /// Create a new Group
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="displayName">the display name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> CreateGroupRequestDisplayNamePostWithHttpInfoAsync(string accept, string displayName, CreateGroupRequest body = default(CreateGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the group using its id. - {DeleteGroupRequest}
        /// </summary>
        /// <remarks>
        /// Delete the group using its id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupRequestGroupIdDeleteAsync(string accept, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the group using its id. - {DeleteGroupRequest}
        /// </summary>
        /// <remarks>
        /// Delete the group using its id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupRequestGroupIdDeleteWithHttpInfoAsync(string accept, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find the groups with the specified name - {FindGroupsRequest}
        /// </summary>
        /// <remarks>
        /// Find the groups with the specified name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindGroupsResult</returns>
        System.Threading.Tasks.Task<FindGroupsResult> FindGroupsRequestfindPostAsync(string accept, FindGroupsRequest body = default(FindGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find the groups with the specified name - {FindGroupsRequest}
        /// </summary>
        /// <remarks>
        /// Find the groups with the specified name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindGroupsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindGroupsResult>> FindGroupsRequestfindPostWithHttpInfoAsync(string accept, FindGroupsRequest body = default(FindGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the group members by group Id. - {GetGroupMembersWithPagingRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the group members by group Id. If MaximumItems and StartingIndex are not set, 0 is taken and so the request returns 0 results.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum of items to be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGroupMembersWithPagingResult</returns>
        System.Threading.Tasks.Task<GetGroupMembersWithPagingResult> GetGroupMembersWithPagingRequestGroupIdusersGetAsync(string accept, string groupId, int? startingIndex = default(int?), int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the group members by group Id. - {GetGroupMembersWithPagingRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the group members by group Id. If MaximumItems and StartingIndex are not set, 0 is taken and so the request returns 0 results.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum of items to be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGroupMembersWithPagingResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGroupMembersWithPagingResult>> GetGroupMembersWithPagingRequestGroupIdusersGetWithHttpInfoAsync(string accept, string groupId, int? startingIndex = default(int?), int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the group by Id. - {GetGroupRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the group by Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> GetGroupRequestGroupIdGetAsync(string accept, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the group by Id. - {GetGroupRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve the group by Id.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> GetGroupRequestGroupIdGetWithHttpInfoAsync(string accept, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a user from a group - {RemoveUserFromGroupRequest}
        /// </summary>
        /// <remarks>
        /// Remove a user from a group
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUserFromGroupRequestGroupIdUserNameDeleteAsync(string accept, string groupId, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a user from a group - {RemoveUserFromGroupRequest}
        /// </summary>
        /// <remarks>
        /// Remove a user from a group
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserFromGroupRequestGroupIdUserNameDeleteWithHttpInfoAsync(string accept, string groupId, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save the group. - {SaveGroupRequest}
        /// </summary>
        /// <remarks>
        /// Save the group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">the object identifier of this group.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> SaveGroupRequestGroupIdCreateAsync(string accept, string groupId, SaveGroupRequest body = default(SaveGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save the group. - {SaveGroupRequest}
        /// </summary>
        /// <remarks>
        /// Save the group.
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">the object identifier of this group.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> SaveGroupRequestGroupIdCreateWithHttpInfoAsync(string accept, string groupId, SaveGroupRequest body = default(SaveGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IGroupsApiSync, IGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupsApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupsApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a user to a group - {AddUserToGroupRequest} Add a user to a group
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AddUserToGroupRequestGroupIdUserNamePost(string accept, string groupId, string userName, Object body = default(Object))
        {
            AddUserToGroupRequestGroupIdUserNamePostWithHttpInfo(accept, groupId, userName, body);
        }

        /// <summary>
        /// Add a user to a group - {AddUserToGroupRequest} Add a user to a group
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> AddUserToGroupRequestGroupIdUserNamePostWithHttpInfo(string accept, string groupId, string userName, Object body = default(Object))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->AddUserToGroupRequestGroupIdUserNamePost");

            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->AddUserToGroupRequestGroupIdUserNamePost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling GroupsApi->AddUserToGroupRequestGroupIdUserNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("GroupId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/groups/{GroupId}/{UserName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserToGroupRequestGroupIdUserNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a user to a group - {AddUserToGroupRequest} Add a user to a group
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddUserToGroupRequestGroupIdUserNamePostAsync(string accept, string groupId, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddUserToGroupRequestGroupIdUserNamePostWithHttpInfoAsync(accept, groupId, userName, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a user to a group - {AddUserToGroupRequest} Add a user to a group
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> AddUserToGroupRequestGroupIdUserNamePostWithHttpInfoAsync(string accept, string groupId, string userName, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->AddUserToGroupRequestGroupIdUserNamePost");

            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->AddUserToGroupRequestGroupIdUserNamePost");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling GroupsApi->AddUserToGroupRequestGroupIdUserNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("GroupId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/groups/{GroupId}/{UserName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserToGroupRequestGroupIdUserNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Group - {CreateGroupRequest} Create a new Group
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="displayName">the display name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Group</returns>
        public Group CreateGroupRequestDisplayNamePost(string accept, string displayName, CreateGroupRequest body = default(CreateGroupRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Group> localVarResponse = CreateGroupRequestDisplayNamePostWithHttpInfo(accept, displayName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Group - {CreateGroupRequest} Create a new Group
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="displayName">the display name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Group> CreateGroupRequestDisplayNamePostWithHttpInfo(string accept, string displayName, CreateGroupRequest body = default(CreateGroupRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->CreateGroupRequestDisplayNamePost");

            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'displayName' when calling GroupsApi->CreateGroupRequestDisplayNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DisplayName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(displayName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Group>("/groups/{DisplayName}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupRequestDisplayNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Group - {CreateGroupRequest} Create a new Group
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="displayName">the display name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> CreateGroupRequestDisplayNamePostAsync(string accept, string displayName, CreateGroupRequest body = default(CreateGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Group> localVarResponse = await CreateGroupRequestDisplayNamePostWithHttpInfoAsync(accept, displayName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Group - {CreateGroupRequest} Create a new Group
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="displayName">the display name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Group>> CreateGroupRequestDisplayNamePostWithHttpInfoAsync(string accept, string displayName, CreateGroupRequest body = default(CreateGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->CreateGroupRequestDisplayNamePost");

            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'displayName' when calling GroupsApi->CreateGroupRequestDisplayNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DisplayName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(displayName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Group>("/groups/{DisplayName}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupRequestDisplayNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the group using its id. - {DeleteGroupRequest} Delete the group using its id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <returns></returns>
        public void DeleteGroupRequestGroupIdDelete(string accept, string groupId)
        {
            DeleteGroupRequestGroupIdDeleteWithHttpInfo(accept, groupId);
        }

        /// <summary>
        /// Delete the group using its id. - {DeleteGroupRequest} Delete the group using its id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteGroupRequestGroupIdDeleteWithHttpInfo(string accept, string groupId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->DeleteGroupRequestGroupIdDelete");

            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupRequestGroupIdDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("GroupId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{GroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupRequestGroupIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the group using its id. - {DeleteGroupRequest} Delete the group using its id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupRequestGroupIdDeleteAsync(string accept, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteGroupRequestGroupIdDeleteWithHttpInfoAsync(accept, groupId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete the group using its id. - {DeleteGroupRequest} Delete the group using its id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteGroupRequestGroupIdDeleteWithHttpInfoAsync(string accept, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->DeleteGroupRequestGroupIdDelete");

            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->DeleteGroupRequestGroupIdDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("GroupId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{GroupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupRequestGroupIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find the groups with the specified name - {FindGroupsRequest} Find the groups with the specified name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FindGroupsResult</returns>
        public FindGroupsResult FindGroupsRequestfindPost(string accept, FindGroupsRequest body = default(FindGroupsRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindGroupsResult> localVarResponse = FindGroupsRequestfindPostWithHttpInfo(accept, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find the groups with the specified name - {FindGroupsRequest} Find the groups with the specified name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FindGroupsResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindGroupsResult> FindGroupsRequestfindPostWithHttpInfo(string accept, FindGroupsRequest body = default(FindGroupsRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->FindGroupsRequestfindPost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindGroupsResult>("/groups/find/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindGroupsRequestfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find the groups with the specified name - {FindGroupsRequest} Find the groups with the specified name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindGroupsResult</returns>
        public async System.Threading.Tasks.Task<FindGroupsResult> FindGroupsRequestfindPostAsync(string accept, FindGroupsRequest body = default(FindGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindGroupsResult> localVarResponse = await FindGroupsRequestfindPostWithHttpInfoAsync(accept, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find the groups with the specified name - {FindGroupsRequest} Find the groups with the specified name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindGroupsResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<FindGroupsResult>> FindGroupsRequestfindPostWithHttpInfoAsync(string accept, FindGroupsRequest body = default(FindGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->FindGroupsRequestfindPost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FindGroupsResult>("/groups/find/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindGroupsRequestfindPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the group members by group Id. - {GetGroupMembersWithPagingRequest} Retrieve the group members by group Id. If MaximumItems and StartingIndex are not set, 0 is taken and so the request returns 0 results.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum of items to be returned. (optional)</param>
        /// <returns>GetGroupMembersWithPagingResult</returns>
        public GetGroupMembersWithPagingResult GetGroupMembersWithPagingRequestGroupIdusersGet(string accept, string groupId, int? startingIndex = default(int?), int? maximumItems = default(int?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetGroupMembersWithPagingResult> localVarResponse = GetGroupMembersWithPagingRequestGroupIdusersGetWithHttpInfo(accept, groupId, startingIndex, maximumItems);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the group members by group Id. - {GetGroupMembersWithPagingRequest} Retrieve the group members by group Id. If MaximumItems and StartingIndex are not set, 0 is taken and so the request returns 0 results.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum of items to be returned. (optional)</param>
        /// <returns>ApiResponse of GetGroupMembersWithPagingResult</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetGroupMembersWithPagingResult> GetGroupMembersWithPagingRequestGroupIdusersGetWithHttpInfo(string accept, string groupId, int? startingIndex = default(int?), int? maximumItems = default(int?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->GetGroupMembersWithPagingRequestGroupIdusersGet");

            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupMembersWithPagingRequestGroupIdusersGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("GroupId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetGroupMembersWithPagingResult>("/groups/{GroupId}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMembersWithPagingRequestGroupIdusersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the group members by group Id. - {GetGroupMembersWithPagingRequest} Retrieve the group members by group Id. If MaximumItems and StartingIndex are not set, 0 is taken and so the request returns 0 results.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum of items to be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGroupMembersWithPagingResult</returns>
        public async System.Threading.Tasks.Task<GetGroupMembersWithPagingResult> GetGroupMembersWithPagingRequestGroupIdusersGetAsync(string accept, string groupId, int? startingIndex = default(int?), int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetGroupMembersWithPagingResult> localVarResponse = await GetGroupMembersWithPagingRequestGroupIdusersGetWithHttpInfoAsync(accept, groupId, startingIndex, maximumItems, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the group members by group Id. - {GetGroupMembersWithPagingRequest} Retrieve the group members by group Id. If MaximumItems and StartingIndex are not set, 0 is taken and so the request returns 0 results.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="startingIndex">The starting index. (optional)</param>
        /// <param name="maximumItems">The maximum of items to be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGroupMembersWithPagingResult)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<GetGroupMembersWithPagingResult>> GetGroupMembersWithPagingRequestGroupIdusersGetWithHttpInfoAsync(string accept, string groupId, int? startingIndex = default(int?), int? maximumItems = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->GetGroupMembersWithPagingRequestGroupIdusersGet");

            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupMembersWithPagingRequestGroupIdusersGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("GroupId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (startingIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "StartingIndex", startingIndex));
            }
            if (maximumItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "MaximumItems", maximumItems));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetGroupMembersWithPagingResult>("/groups/{GroupId}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMembersWithPagingRequestGroupIdusersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the group by Id. - {GetGroupRequest} Retrieve the group by Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <returns>Group</returns>
        public Group GetGroupRequestGroupIdGet(string accept, string groupId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Group> localVarResponse = GetGroupRequestGroupIdGetWithHttpInfo(accept, groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the group by Id. - {GetGroupRequest} Retrieve the group by Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <returns>ApiResponse of Group</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Group> GetGroupRequestGroupIdGetWithHttpInfo(string accept, string groupId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->GetGroupRequestGroupIdGet");

            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupRequestGroupIdGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("GroupId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Group>("/groups/{GroupId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupRequestGroupIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the group by Id. - {GetGroupRequest} Retrieve the group by Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> GetGroupRequestGroupIdGetAsync(string accept, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Group> localVarResponse = await GetGroupRequestGroupIdGetWithHttpInfoAsync(accept, groupId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the group by Id. - {GetGroupRequest} Retrieve the group by Id.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Group>> GetGroupRequestGroupIdGetWithHttpInfoAsync(string accept, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->GetGroupRequestGroupIdGet");

            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroupRequestGroupIdGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("GroupId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Group>("/groups/{GroupId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupRequestGroupIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a user from a group - {RemoveUserFromGroupRequest} Remove a user from a group
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <returns></returns>
        public void RemoveUserFromGroupRequestGroupIdUserNameDelete(string accept, string groupId, string userName)
        {
            RemoveUserFromGroupRequestGroupIdUserNameDeleteWithHttpInfo(accept, groupId, userName);
        }

        /// <summary>
        /// Remove a user from a group - {RemoveUserFromGroupRequest} Remove a user from a group
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> RemoveUserFromGroupRequestGroupIdUserNameDeleteWithHttpInfo(string accept, string groupId, string userName)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->RemoveUserFromGroupRequestGroupIdUserNameDelete");

            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->RemoveUserFromGroupRequestGroupIdUserNameDelete");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling GroupsApi->RemoveUserFromGroupRequestGroupIdUserNameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("GroupId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{GroupId}/{UserName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserFromGroupRequestGroupIdUserNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a user from a group - {RemoveUserFromGroupRequest} Remove a user from a group
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUserFromGroupRequestGroupIdUserNameDeleteAsync(string accept, string groupId, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveUserFromGroupRequestGroupIdUserNameDeleteWithHttpInfoAsync(accept, groupId, userName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a user from a group - {RemoveUserFromGroupRequest} Remove a user from a group
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">The group identifier.</param>
        /// <param name="userName">The username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> RemoveUserFromGroupRequestGroupIdUserNameDeleteWithHttpInfoAsync(string accept, string groupId, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->RemoveUserFromGroupRequestGroupIdUserNameDelete");

            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->RemoveUserFromGroupRequestGroupIdUserNameDelete");

            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling GroupsApi->RemoveUserFromGroupRequestGroupIdUserNameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("GroupId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("UserName", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{GroupId}/{UserName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserFromGroupRequestGroupIdUserNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save the group. - {SaveGroupRequest} Save the group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">the object identifier of this group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Group</returns>
        public Group SaveGroupRequestGroupIdCreate(string accept, string groupId, SaveGroupRequest body = default(SaveGroupRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Group> localVarResponse = SaveGroupRequestGroupIdCreateWithHttpInfo(accept, groupId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save the group. - {SaveGroupRequest} Save the group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">the object identifier of this group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Group> SaveGroupRequestGroupIdCreateWithHttpInfo(string accept, string groupId, SaveGroupRequest body = default(SaveGroupRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->SaveGroupRequestGroupIdCreate");

            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->SaveGroupRequestGroupIdCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("GroupId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Group>("/groups/{GroupId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveGroupRequestGroupIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save the group. - {SaveGroupRequest} Save the group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">the object identifier of this group.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> SaveGroupRequestGroupIdCreateAsync(string accept, string groupId, SaveGroupRequest body = default(SaveGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Group> localVarResponse = await SaveGroupRequestGroupIdCreateWithHttpInfoAsync(accept, groupId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save the group. - {SaveGroupRequest} Save the group.
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="groupId">the object identifier of this group.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Group>> SaveGroupRequestGroupIdCreateWithHttpInfoAsync(string accept, string groupId, SaveGroupRequest body = default(SaveGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling GroupsApi->SaveGroupRequestGroupIdCreate");

            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->SaveGroupRequestGroupIdCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("GroupId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Group>("/groups/{GroupId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveGroupRequestGroupIdCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
