/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yaksa.OrckestraCommerce.Client.Client;
using Yaksa.OrckestraCommerce.Client.Model;

namespace Yaksa.OrckestraCommerce.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create or update a template variable - {CreateOrUpdateTemplateVariableRequest}
        /// </summary>
        /// <remarks>
        /// Create or update a template variable
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The template variable&#39;s name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TemplateVariable</returns>
        TemplateVariable CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreate(string accept, string scopeId, string name, CreateOrUpdateTemplateVariableRequest body = default(CreateOrUpdateTemplateVariableRequest));

        /// <summary>
        /// Create or update a template variable - {CreateOrUpdateTemplateVariableRequest}
        /// </summary>
        /// <remarks>
        /// Create or update a template variable
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The template variable&#39;s name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TemplateVariable</returns>
        ApiResponse<TemplateVariable> CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreateWithHttpInfo(string accept, string scopeId, string name, CreateOrUpdateTemplateVariableRequest body = default(CreateOrUpdateTemplateVariableRequest));
        /// <summary>
        /// Create a new template - {CreateTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Create a new template
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to create</param>
        /// <param name="name">Template name</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Template</returns>
        Template CreateTemplateRequestScopeIdTypeNamePost(string accept, string scopeId, string type, string name, CreateTemplateRequest body = default(CreateTemplateRequest));

        /// <summary>
        /// Create a new template - {CreateTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Create a new template
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to create</param>
        /// <param name="name">Template name</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> CreateTemplateRequestScopeIdTypeNamePostWithHttpInfo(string accept, string scopeId, string type, string name, CreateTemplateRequest body = default(CreateTemplateRequest));
        /// <summary>
        /// Delete a template - {DeleteTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Delete a template
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <returns></returns>
        void DeleteTemplateRequestScopeIdTypeNameDelete(string accept, string scopeId, string type, string name);

        /// <summary>
        /// Delete a template - {DeleteTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Delete a template
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplateRequestScopeIdTypeNameDeleteWithHttpInfo(string accept, string scopeId, string type, string name);
        /// <summary>
        /// Deletes a template variable - {DeleteTemplateVariableRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a template variable
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the template variable to be deleted from the scope.</param>
        /// <returns></returns>
        void DeleteTemplateVariableRequestScopeIdVariablesNameDelete(string accept, string scopeId, string name);

        /// <summary>
        /// Deletes a template variable - {DeleteTemplateVariableRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a template variable
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the template variable to be deleted from the scope.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplateVariableRequestScopeIdVariablesNameDeleteWithHttpInfo(string accept, string scopeId, string name);
        /// <summary>
        /// Retrieves a template available for a scope and a name - {GetTemplateByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a template available for a scope and a name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Type of the template to retrieve</param>
        /// <param name="name">Name of the template to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <returns>Template</returns>
        Template GetTemplateByNameRequestScopeIdTypeNameGet(string accept, string scopeId, string type, string name, bool? includeContents = default(bool?), List<string> cultures = default(List<string>), bool? activeOnly = default(bool?), bool? replaceTemplateVariables = default(bool?));

        /// <summary>
        /// Retrieves a template available for a scope and a name - {GetTemplateByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a template available for a scope and a name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Type of the template to retrieve</param>
        /// <param name="name">Name of the template to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> GetTemplateByNameRequestScopeIdTypeNameGetWithHttpInfo(string accept, string scopeId, string type, string name, bool? includeContents = default(bool?), List<string> cultures = default(List<string>), bool? activeOnly = default(bool?), bool? replaceTemplateVariables = default(bool?));
        /// <summary>
        /// Gets a list of template variables for a scope - {GetTemplateVariablesRequest}
        /// </summary>
        /// <remarks>
        /// Gets a list of template variables for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>List&lt;TemplateVariable&gt;</returns>
        List<TemplateVariable> GetTemplateVariablesRequestScopeIdVariablesGet(string accept, string scopeId);

        /// <summary>
        /// Gets a list of template variables for a scope - {GetTemplateVariablesRequest}
        /// </summary>
        /// <remarks>
        /// Gets a list of template variables for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>ApiResponse of List&lt;TemplateVariable&gt;</returns>
        ApiResponse<List<TemplateVariable>> GetTemplateVariablesRequestScopeIdVariablesGetWithHttpInfo(string accept, string scopeId);
        /// <summary>
        /// Retrieve a list of all templates available for a scope and a type - {GetTemplatesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all templates available for a scope and a type
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> GetTemplatesRequestScopeIdTypeGet(string accept, string scopeId, string type, bool? includeContents = default(bool?), bool? activeOnly = default(bool?), List<string> cultures = default(List<string>), bool? replaceTemplateVariables = default(bool?));

        /// <summary>
        /// Retrieve a list of all templates available for a scope and a type - {GetTemplatesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all templates available for a scope and a type
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> GetTemplatesRequestScopeIdTypeGetWithHttpInfo(string accept, string scopeId, string type, bool? includeContents = default(bool?), bool? activeOnly = default(bool?), List<string> cultures = default(List<string>), bool? replaceTemplateVariables = default(bool?));
        /// <summary>
        /// Update a template - {UpdateTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Update a template
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <param name="culture">the culture of the template</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Template</returns>
        Template UpdateTemplateRequestScopeIdTypeNameCultureCreate(string accept, string scopeId, string type, string name, string culture, UpdateTemplateRequest body = default(UpdateTemplateRequest));

        /// <summary>
        /// Update a template - {UpdateTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Update a template
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <param name="culture">the culture of the template</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> UpdateTemplateRequestScopeIdTypeNameCultureCreateWithHttpInfo(string accept, string scopeId, string type, string name, string culture, UpdateTemplateRequest body = default(UpdateTemplateRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create or update a template variable - {CreateOrUpdateTemplateVariableRequest}
        /// </summary>
        /// <remarks>
        /// Create or update a template variable
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The template variable&#39;s name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateVariable</returns>
        System.Threading.Tasks.Task<TemplateVariable> CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreateAsync(string accept, string scopeId, string name, CreateOrUpdateTemplateVariableRequest body = default(CreateOrUpdateTemplateVariableRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update a template variable - {CreateOrUpdateTemplateVariableRequest}
        /// </summary>
        /// <remarks>
        /// Create or update a template variable
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The template variable&#39;s name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateVariable)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateVariable>> CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreateWithHttpInfoAsync(string accept, string scopeId, string name, CreateOrUpdateTemplateVariableRequest body = default(CreateOrUpdateTemplateVariableRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new template - {CreateTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Create a new template
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to create</param>
        /// <param name="name">Template name</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> CreateTemplateRequestScopeIdTypeNamePostAsync(string accept, string scopeId, string type, string name, CreateTemplateRequest body = default(CreateTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new template - {CreateTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Create a new template
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to create</param>
        /// <param name="name">Template name</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> CreateTemplateRequestScopeIdTypeNamePostWithHttpInfoAsync(string accept, string scopeId, string type, string name, CreateTemplateRequest body = default(CreateTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a template - {DeleteTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Delete a template
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTemplateRequestScopeIdTypeNameDeleteAsync(string accept, string scopeId, string type, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a template - {DeleteTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Delete a template
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateRequestScopeIdTypeNameDeleteWithHttpInfoAsync(string accept, string scopeId, string type, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a template variable - {DeleteTemplateVariableRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a template variable
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the template variable to be deleted from the scope.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTemplateVariableRequestScopeIdVariablesNameDeleteAsync(string accept, string scopeId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a template variable - {DeleteTemplateVariableRequest}
        /// </summary>
        /// <remarks>
        /// Deletes a template variable
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the template variable to be deleted from the scope.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateVariableRequestScopeIdVariablesNameDeleteWithHttpInfoAsync(string accept, string scopeId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a template available for a scope and a name - {GetTemplateByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a template available for a scope and a name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Type of the template to retrieve</param>
        /// <param name="name">Name of the template to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> GetTemplateByNameRequestScopeIdTypeNameGetAsync(string accept, string scopeId, string type, string name, bool? includeContents = default(bool?), List<string> cultures = default(List<string>), bool? activeOnly = default(bool?), bool? replaceTemplateVariables = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a template available for a scope and a name - {GetTemplateByNameRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a template available for a scope and a name
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Type of the template to retrieve</param>
        /// <param name="name">Name of the template to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> GetTemplateByNameRequestScopeIdTypeNameGetWithHttpInfoAsync(string accept, string scopeId, string type, string name, bool? includeContents = default(bool?), List<string> cultures = default(List<string>), bool? activeOnly = default(bool?), bool? replaceTemplateVariables = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of template variables for a scope - {GetTemplateVariablesRequest}
        /// </summary>
        /// <remarks>
        /// Gets a list of template variables for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TemplateVariable&gt;</returns>
        System.Threading.Tasks.Task<List<TemplateVariable>> GetTemplateVariablesRequestScopeIdVariablesGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of template variables for a scope - {GetTemplateVariablesRequest}
        /// </summary>
        /// <remarks>
        /// Gets a list of template variables for a scope
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TemplateVariable&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TemplateVariable>>> GetTemplateVariablesRequestScopeIdVariablesGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of all templates available for a scope and a type - {GetTemplatesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all templates available for a scope and a type
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> GetTemplatesRequestScopeIdTypeGetAsync(string accept, string scopeId, string type, bool? includeContents = default(bool?), bool? activeOnly = default(bool?), List<string> cultures = default(List<string>), bool? replaceTemplateVariables = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of all templates available for a scope and a type - {GetTemplatesRequest}
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all templates available for a scope and a type
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> GetTemplatesRequestScopeIdTypeGetWithHttpInfoAsync(string accept, string scopeId, string type, bool? includeContents = default(bool?), bool? activeOnly = default(bool?), List<string> cultures = default(List<string>), bool? replaceTemplateVariables = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a template - {UpdateTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Update a template
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <param name="culture">the culture of the template</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> UpdateTemplateRequestScopeIdTypeNameCultureCreateAsync(string accept, string scopeId, string type, string name, string culture, UpdateTemplateRequest body = default(UpdateTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a template - {UpdateTemplateRequest}
        /// </summary>
        /// <remarks>
        /// Update a template
        /// </remarks>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <param name="culture">the culture of the template</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> UpdateTemplateRequestScopeIdTypeNameCultureCreateWithHttpInfoAsync(string accept, string scopeId, string type, string name, string culture, UpdateTemplateRequest body = default(UpdateTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApi : ITemplatesApiSync, ITemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatesApi : ITemplatesApi
    {
        private Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi(String basePath)
        {
            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                new Yaksa.OrckestraCommerce.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplatesApi(Yaksa.OrckestraCommerce.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yaksa.OrckestraCommerce.Client.Client.Configuration.MergeConfigurations(
                Yaksa.OrckestraCommerce.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yaksa.OrckestraCommerce.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemplatesApi(Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient client, Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient asyncClient, Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yaksa.OrckestraCommerce.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yaksa.OrckestraCommerce.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yaksa.OrckestraCommerce.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create or update a template variable - {CreateOrUpdateTemplateVariableRequest} Create or update a template variable
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The template variable&#39;s name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TemplateVariable</returns>
        public TemplateVariable CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreate(string accept, string scopeId, string name, CreateOrUpdateTemplateVariableRequest body = default(CreateOrUpdateTemplateVariableRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TemplateVariable> localVarResponse = CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreateWithHttpInfo(accept, scopeId, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a template variable - {CreateOrUpdateTemplateVariableRequest} Create or update a template variable
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The template variable&#39;s name.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TemplateVariable</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TemplateVariable> CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreateWithHttpInfo(string accept, string scopeId, string name, CreateOrUpdateTemplateVariableRequest body = default(CreateOrUpdateTemplateVariableRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<TemplateVariable>("/templates/{ScopeId}/Variables/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update a template variable - {CreateOrUpdateTemplateVariableRequest} Create or update a template variable
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The template variable&#39;s name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateVariable</returns>
        public async System.Threading.Tasks.Task<TemplateVariable> CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreateAsync(string accept, string scopeId, string name, CreateOrUpdateTemplateVariableRequest body = default(CreateOrUpdateTemplateVariableRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TemplateVariable> localVarResponse = await CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreateWithHttpInfoAsync(accept, scopeId, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a template variable - {CreateOrUpdateTemplateVariableRequest} Create or update a template variable
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The template variable&#39;s name.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateVariable)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<TemplateVariable>> CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreateWithHttpInfoAsync(string accept, string scopeId, string name, CreateOrUpdateTemplateVariableRequest body = default(CreateOrUpdateTemplateVariableRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TemplateVariable>("/templates/{ScopeId}/Variables/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateTemplateVariableRequestScopeIdVariablesNameCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new template - {CreateTemplateRequest} Create a new template
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to create</param>
        /// <param name="name">Template name</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Template</returns>
        public Template CreateTemplateRequestScopeIdTypeNamePost(string accept, string scopeId, string type, string name, CreateTemplateRequest body = default(CreateTemplateRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Template> localVarResponse = CreateTemplateRequestScopeIdTypeNamePostWithHttpInfo(accept, scopeId, type, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new template - {CreateTemplateRequest} Create a new template
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to create</param>
        /// <param name="name">Template name</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Template> CreateTemplateRequestScopeIdTypeNamePostWithHttpInfo(string accept, string scopeId, string type, string name, CreateTemplateRequest body = default(CreateTemplateRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->CreateTemplateRequestScopeIdTypeNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->CreateTemplateRequestScopeIdTypeNamePost");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'type' when calling TemplatesApi->CreateTemplateRequestScopeIdTypeNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->CreateTemplateRequestScopeIdTypeNamePost");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Type", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Template>("/templates/{ScopeId}/{Type}/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTemplateRequestScopeIdTypeNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new template - {CreateTemplateRequest} Create a new template
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to create</param>
        /// <param name="name">Template name</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> CreateTemplateRequestScopeIdTypeNamePostAsync(string accept, string scopeId, string type, string name, CreateTemplateRequest body = default(CreateTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Template> localVarResponse = await CreateTemplateRequestScopeIdTypeNamePostWithHttpInfoAsync(accept, scopeId, type, name, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new template - {CreateTemplateRequest} Create a new template
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to create</param>
        /// <param name="name">Template name</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Template>> CreateTemplateRequestScopeIdTypeNamePostWithHttpInfoAsync(string accept, string scopeId, string type, string name, CreateTemplateRequest body = default(CreateTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->CreateTemplateRequestScopeIdTypeNamePost");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->CreateTemplateRequestScopeIdTypeNamePost");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'type' when calling TemplatesApi->CreateTemplateRequestScopeIdTypeNamePost");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->CreateTemplateRequestScopeIdTypeNamePost");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Type", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Template>("/templates/{ScopeId}/{Type}/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTemplateRequestScopeIdTypeNamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a template - {DeleteTemplateRequest} Delete a template
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <returns></returns>
        public void DeleteTemplateRequestScopeIdTypeNameDelete(string accept, string scopeId, string type, string name)
        {
            DeleteTemplateRequestScopeIdTypeNameDeleteWithHttpInfo(accept, scopeId, type, name);
        }

        /// <summary>
        /// Delete a template - {DeleteTemplateRequest} Delete a template
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteTemplateRequestScopeIdTypeNameDeleteWithHttpInfo(string accept, string scopeId, string type, string name)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->DeleteTemplateRequestScopeIdTypeNameDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->DeleteTemplateRequestScopeIdTypeNameDelete");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'type' when calling TemplatesApi->DeleteTemplateRequestScopeIdTypeNameDelete");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->DeleteTemplateRequestScopeIdTypeNameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Type", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/templates/{ScopeId}/{Type}/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTemplateRequestScopeIdTypeNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a template - {DeleteTemplateRequest} Delete a template
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTemplateRequestScopeIdTypeNameDeleteAsync(string accept, string scopeId, string type, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTemplateRequestScopeIdTypeNameDeleteWithHttpInfoAsync(accept, scopeId, type, name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a template - {DeleteTemplateRequest} Delete a template
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteTemplateRequestScopeIdTypeNameDeleteWithHttpInfoAsync(string accept, string scopeId, string type, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->DeleteTemplateRequestScopeIdTypeNameDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->DeleteTemplateRequestScopeIdTypeNameDelete");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'type' when calling TemplatesApi->DeleteTemplateRequestScopeIdTypeNameDelete");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->DeleteTemplateRequestScopeIdTypeNameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Type", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/templates/{ScopeId}/{Type}/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTemplateRequestScopeIdTypeNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a template variable - {DeleteTemplateVariableRequest} Deletes a template variable
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the template variable to be deleted from the scope.</param>
        /// <returns></returns>
        public void DeleteTemplateVariableRequestScopeIdVariablesNameDelete(string accept, string scopeId, string name)
        {
            DeleteTemplateVariableRequestScopeIdVariablesNameDeleteWithHttpInfo(accept, scopeId, name);
        }

        /// <summary>
        /// Deletes a template variable - {DeleteTemplateVariableRequest} Deletes a template variable
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the template variable to be deleted from the scope.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object> DeleteTemplateVariableRequestScopeIdVariablesNameDeleteWithHttpInfo(string accept, string scopeId, string name)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->DeleteTemplateVariableRequestScopeIdVariablesNameDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->DeleteTemplateVariableRequestScopeIdVariablesNameDelete");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->DeleteTemplateVariableRequestScopeIdVariablesNameDelete");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/templates/{ScopeId}/Variables/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTemplateVariableRequestScopeIdVariablesNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a template variable - {DeleteTemplateVariableRequest} Deletes a template variable
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the template variable to be deleted from the scope.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTemplateVariableRequestScopeIdVariablesNameDeleteAsync(string accept, string scopeId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTemplateVariableRequestScopeIdVariablesNameDeleteWithHttpInfoAsync(accept, scopeId, name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a template variable - {DeleteTemplateVariableRequest} Deletes a template variable
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="name">The name of the template variable to be deleted from the scope.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Object>> DeleteTemplateVariableRequestScopeIdVariablesNameDeleteWithHttpInfoAsync(string accept, string scopeId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->DeleteTemplateVariableRequestScopeIdVariablesNameDelete");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->DeleteTemplateVariableRequestScopeIdVariablesNameDelete");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->DeleteTemplateVariableRequestScopeIdVariablesNameDelete");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/templates/{ScopeId}/Variables/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTemplateVariableRequestScopeIdVariablesNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a template available for a scope and a name - {GetTemplateByNameRequest} Retrieve a template available for a scope and a name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Type of the template to retrieve</param>
        /// <param name="name">Name of the template to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <returns>Template</returns>
        public Template GetTemplateByNameRequestScopeIdTypeNameGet(string accept, string scopeId, string type, string name, bool? includeContents = default(bool?), List<string> cultures = default(List<string>), bool? activeOnly = default(bool?), bool? replaceTemplateVariables = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Template> localVarResponse = GetTemplateByNameRequestScopeIdTypeNameGetWithHttpInfo(accept, scopeId, type, name, includeContents, cultures, activeOnly, replaceTemplateVariables);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a template available for a scope and a name - {GetTemplateByNameRequest} Retrieve a template available for a scope and a name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Type of the template to retrieve</param>
        /// <param name="name">Name of the template to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Template> GetTemplateByNameRequestScopeIdTypeNameGetWithHttpInfo(string accept, string scopeId, string type, string name, bool? includeContents = default(bool?), List<string> cultures = default(List<string>), bool? activeOnly = default(bool?), bool? replaceTemplateVariables = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->GetTemplateByNameRequestScopeIdTypeNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->GetTemplateByNameRequestScopeIdTypeNameGet");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'type' when calling TemplatesApi->GetTemplateByNameRequestScopeIdTypeNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->GetTemplateByNameRequestScopeIdTypeNameGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Type", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (includeContents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeContents", includeContents));
            }
            if (cultures != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "Cultures", cultures));
            }
            if (activeOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ActiveOnly", activeOnly));
            }
            if (replaceTemplateVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ReplaceTemplateVariables", replaceTemplateVariables));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Template>("/templates/{ScopeId}/{Type}/{Name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplateByNameRequestScopeIdTypeNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a template available for a scope and a name - {GetTemplateByNameRequest} Retrieve a template available for a scope and a name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Type of the template to retrieve</param>
        /// <param name="name">Name of the template to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> GetTemplateByNameRequestScopeIdTypeNameGetAsync(string accept, string scopeId, string type, string name, bool? includeContents = default(bool?), List<string> cultures = default(List<string>), bool? activeOnly = default(bool?), bool? replaceTemplateVariables = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Template> localVarResponse = await GetTemplateByNameRequestScopeIdTypeNameGetWithHttpInfoAsync(accept, scopeId, type, name, includeContents, cultures, activeOnly, replaceTemplateVariables, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a template available for a scope and a name - {GetTemplateByNameRequest} Retrieve a template available for a scope and a name
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Type of the template to retrieve</param>
        /// <param name="name">Name of the template to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Template>> GetTemplateByNameRequestScopeIdTypeNameGetWithHttpInfoAsync(string accept, string scopeId, string type, string name, bool? includeContents = default(bool?), List<string> cultures = default(List<string>), bool? activeOnly = default(bool?), bool? replaceTemplateVariables = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->GetTemplateByNameRequestScopeIdTypeNameGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->GetTemplateByNameRequestScopeIdTypeNameGet");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'type' when calling TemplatesApi->GetTemplateByNameRequestScopeIdTypeNameGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->GetTemplateByNameRequestScopeIdTypeNameGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Type", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (includeContents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeContents", includeContents));
            }
            if (cultures != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "Cultures", cultures));
            }
            if (activeOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ActiveOnly", activeOnly));
            }
            if (replaceTemplateVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ReplaceTemplateVariables", replaceTemplateVariables));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Template>("/templates/{ScopeId}/{Type}/{Name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplateByNameRequestScopeIdTypeNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of template variables for a scope - {GetTemplateVariablesRequest} Gets a list of template variables for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>List&lt;TemplateVariable&gt;</returns>
        public List<TemplateVariable> GetTemplateVariablesRequestScopeIdVariablesGet(string accept, string scopeId)
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TemplateVariable>> localVarResponse = GetTemplateVariablesRequestScopeIdVariablesGetWithHttpInfo(accept, scopeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of template variables for a scope - {GetTemplateVariablesRequest} Gets a list of template variables for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <returns>ApiResponse of List&lt;TemplateVariable&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TemplateVariable>> GetTemplateVariablesRequestScopeIdVariablesGetWithHttpInfo(string accept, string scopeId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->GetTemplateVariablesRequestScopeIdVariablesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->GetTemplateVariablesRequestScopeIdVariablesGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TemplateVariable>>("/templates/{ScopeId}/Variables", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplateVariablesRequestScopeIdVariablesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of template variables for a scope - {GetTemplateVariablesRequest} Gets a list of template variables for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TemplateVariable&gt;</returns>
        public async System.Threading.Tasks.Task<List<TemplateVariable>> GetTemplateVariablesRequestScopeIdVariablesGetAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TemplateVariable>> localVarResponse = await GetTemplateVariablesRequestScopeIdVariablesGetWithHttpInfoAsync(accept, scopeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of template variables for a scope - {GetTemplateVariablesRequest} Gets a list of template variables for a scope
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TemplateVariable&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<TemplateVariable>>> GetTemplateVariablesRequestScopeIdVariablesGetWithHttpInfoAsync(string accept, string scopeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->GetTemplateVariablesRequestScopeIdVariablesGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->GetTemplateVariablesRequestScopeIdVariablesGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TemplateVariable>>("/templates/{ScopeId}/Variables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplateVariablesRequestScopeIdVariablesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all templates available for a scope and a type - {GetTemplatesRequest} Retrieve a list of all templates available for a scope and a type
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> GetTemplatesRequestScopeIdTypeGet(string accept, string scopeId, string type, bool? includeContents = default(bool?), bool? activeOnly = default(bool?), List<string> cultures = default(List<string>), bool? replaceTemplateVariables = default(bool?))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Template>> localVarResponse = GetTemplatesRequestScopeIdTypeGetWithHttpInfo(accept, scopeId, type, includeContents, activeOnly, cultures, replaceTemplateVariables);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all templates available for a scope and a type - {GetTemplatesRequest} Retrieve a list of all templates available for a scope and a type
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Template>> GetTemplatesRequestScopeIdTypeGetWithHttpInfo(string accept, string scopeId, string type, bool? includeContents = default(bool?), bool? activeOnly = default(bool?), List<string> cultures = default(List<string>), bool? replaceTemplateVariables = default(bool?))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->GetTemplatesRequestScopeIdTypeGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->GetTemplatesRequestScopeIdTypeGet");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'type' when calling TemplatesApi->GetTemplatesRequestScopeIdTypeGet");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Type", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (includeContents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeContents", includeContents));
            }
            if (activeOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ActiveOnly", activeOnly));
            }
            if (cultures != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "Cultures", cultures));
            }
            if (replaceTemplateVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ReplaceTemplateVariables", replaceTemplateVariables));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Template>>("/templates/{ScopeId}/{Type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplatesRequestScopeIdTypeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all templates available for a scope and a type - {GetTemplatesRequest} Retrieve a list of all templates available for a scope and a type
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> GetTemplatesRequestScopeIdTypeGetAsync(string accept, string scopeId, string type, bool? includeContents = default(bool?), bool? activeOnly = default(bool?), List<string> cultures = default(List<string>), bool? replaceTemplateVariables = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Template>> localVarResponse = await GetTemplatesRequestScopeIdTypeGetWithHttpInfoAsync(accept, scopeId, type, includeContents, activeOnly, cultures, replaceTemplateVariables, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all templates available for a scope and a type - {GetTemplatesRequest} Retrieve a list of all templates available for a scope and a type
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">Template type to retrieve</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result (optional)</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates (optional)</param>
        /// <param name="cultures">List of cultures for which to retrieve the content (optional)</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<List<Template>>> GetTemplatesRequestScopeIdTypeGetWithHttpInfoAsync(string accept, string scopeId, string type, bool? includeContents = default(bool?), bool? activeOnly = default(bool?), List<string> cultures = default(List<string>), bool? replaceTemplateVariables = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->GetTemplatesRequestScopeIdTypeGet");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->GetTemplatesRequestScopeIdTypeGet");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'type' when calling TemplatesApi->GetTemplatesRequestScopeIdTypeGet");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Type", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (includeContents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "IncludeContents", includeContents));
            }
            if (activeOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ActiveOnly", activeOnly));
            }
            if (cultures != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("csv", "Cultures", cultures));
            }
            if (replaceTemplateVariables != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToMultiMap("", "ReplaceTemplateVariables", replaceTemplateVariables));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Template>>("/templates/{ScopeId}/{Type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplatesRequestScopeIdTypeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a template - {UpdateTemplateRequest} Update a template
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <param name="culture">the culture of the template</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Template</returns>
        public Template UpdateTemplateRequestScopeIdTypeNameCultureCreate(string accept, string scopeId, string type, string name, string culture, UpdateTemplateRequest body = default(UpdateTemplateRequest))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Template> localVarResponse = UpdateTemplateRequestScopeIdTypeNameCultureCreateWithHttpInfo(accept, scopeId, type, name, culture, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a template - {UpdateTemplateRequest} Update a template
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <param name="culture">the culture of the template</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Template> UpdateTemplateRequestScopeIdTypeNameCultureCreateWithHttpInfo(string accept, string scopeId, string type, string name, string culture, UpdateTemplateRequest body = default(UpdateTemplateRequest))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->UpdateTemplateRequestScopeIdTypeNameCultureCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->UpdateTemplateRequestScopeIdTypeNameCultureCreate");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'type' when calling TemplatesApi->UpdateTemplateRequestScopeIdTypeNameCultureCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->UpdateTemplateRequestScopeIdTypeNameCultureCreate");

            // verify the required parameter 'culture' is set
            if (culture == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'culture' when calling TemplatesApi->UpdateTemplateRequestScopeIdTypeNameCultureCreate");

            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Type", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("Culture", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(culture)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Template>("/templates/{ScopeId}/{Type}/{Name}/{Culture}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTemplateRequestScopeIdTypeNameCultureCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a template - {UpdateTemplateRequest} Update a template
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <param name="culture">the culture of the template</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> UpdateTemplateRequestScopeIdTypeNameCultureCreateAsync(string accept, string scopeId, string type, string name, string culture, UpdateTemplateRequest body = default(UpdateTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Template> localVarResponse = await UpdateTemplateRequestScopeIdTypeNameCultureCreateWithHttpInfoAsync(accept, scopeId, type, name, culture, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a template - {UpdateTemplateRequest} Update a template
        /// </summary>
        /// <exception cref="Yaksa.OrckestraCommerce.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="scopeId">The id of the requested scope</param>
        /// <param name="type">the type of the template</param>
        /// <param name="name">the name of the template</param>
        /// <param name="culture">the culture of the template</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<Yaksa.OrckestraCommerce.Client.Client.ApiResponse<Template>> UpdateTemplateRequestScopeIdTypeNameCultureCreateWithHttpInfoAsync(string accept, string scopeId, string type, string name, string culture, UpdateTemplateRequest body = default(UpdateTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'accept' when calling TemplatesApi->UpdateTemplateRequestScopeIdTypeNameCultureCreate");

            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'scopeId' when calling TemplatesApi->UpdateTemplateRequestScopeIdTypeNameCultureCreate");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'type' when calling TemplatesApi->UpdateTemplateRequestScopeIdTypeNameCultureCreate");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->UpdateTemplateRequestScopeIdTypeNameCultureCreate");

            // verify the required parameter 'culture' is set
            if (culture == null)
                throw new Yaksa.OrckestraCommerce.Client.Client.ApiException(400, "Missing required parameter 'culture' when calling TemplatesApi->UpdateTemplateRequestScopeIdTypeNameCultureCreate");


            Yaksa.OrckestraCommerce.Client.Client.RequestOptions localVarRequestOptions = new Yaksa.OrckestraCommerce.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Yaksa.OrckestraCommerce.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ScopeId", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(scopeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("Type", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("Name", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("Culture", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(culture)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Yaksa.OrckestraCommerce.Client.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Template>("/templates/{ScopeId}/{Type}/{Name}/{Culture}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTemplateRequestScopeIdTypeNameCultureCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
