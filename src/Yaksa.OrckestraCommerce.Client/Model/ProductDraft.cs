/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ProductDraft
    /// </summary>
    [DataContract(Name = "ProductDraft")]
    public partial class ProductDraft : IEquatable<ProductDraft>, IValidatableObject
    {
        /// <summary>
        /// the state of the product draft.
        /// </summary>
        /// <value>the state of the product draft.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum InProgress for value: InProgress
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress = 1,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 2,

            /// <summary>
            /// Enum PendingApproval for value: PendingApproval
            /// </summary>
            [EnumMember(Value = "PendingApproval")]
            PendingApproval = 3,

            /// <summary>
            /// Enum ReadyToCompose for value: ReadyToCompose
            /// </summary>
            [EnumMember(Value = "ReadyToCompose")]
            ReadyToCompose = 4,

            /// <summary>
            /// Enum Published for value: Published
            /// </summary>
            [EnumMember(Value = "Published")]
            Published = 5

        }


        /// <summary>
        /// the state of the product draft.
        /// </summary>
        /// <value>the state of the product draft.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDraft" /> class.
        /// </summary>
        /// <param name="catalogId">the id of the catalog to which the product belongs..</param>
        /// <param name="deleteVariantModifications">the list of delete modifications that the draft should apply to the variants..</param>
        /// <param name="parentCategoryIds">the new category associations to this product.</param>
        /// <param name="primaryParentCategoryId">the primary category.</param>
        /// <param name="productPropertyModifications">the list of modifications that the draft should apply to the product..</param>
        /// <param name="state">the state of the product draft..</param>
        /// <param name="variantPropertyModifications">the list of modifications that the draft should apply to the variants..</param>
        public ProductDraft(string catalogId = default(string), List<DeleteVariantModification> deleteVariantModifications = default(List<DeleteVariantModification>), List<string> parentCategoryIds = default(List<string>), string primaryParentCategoryId = default(string), List<ProductPropertyModification> productPropertyModifications = default(List<ProductPropertyModification>), StateEnum? state = default(StateEnum?), List<VariantPropertyModification> variantPropertyModifications = default(List<VariantPropertyModification>))
        {
            this.CatalogId = catalogId;
            this.DeleteVariantModifications = deleteVariantModifications;
            this.ParentCategoryIds = parentCategoryIds;
            this.PrimaryParentCategoryId = primaryParentCategoryId;
            this.ProductPropertyModifications = productPropertyModifications;
            this.State = state;
            this.VariantPropertyModifications = variantPropertyModifications;
        }

        /// <summary>
        /// the id of the catalog to which the product belongs.
        /// </summary>
        /// <value>the id of the catalog to which the product belongs.</value>
        [DataMember(Name = "catalogId", EmitDefaultValue = false)]
        public string CatalogId { get; set; }

        /// <summary>
        /// the list of delete modifications that the draft should apply to the variants.
        /// </summary>
        /// <value>the list of delete modifications that the draft should apply to the variants.</value>
        [DataMember(Name = "deleteVariantModifications", EmitDefaultValue = false)]
        public List<DeleteVariantModification> DeleteVariantModifications { get; set; }

        /// <summary>
        /// the new category associations to this product
        /// </summary>
        /// <value>the new category associations to this product</value>
        [DataMember(Name = "parentCategoryIds", EmitDefaultValue = false)]
        public List<string> ParentCategoryIds { get; set; }

        /// <summary>
        /// the primary category
        /// </summary>
        /// <value>the primary category</value>
        [DataMember(Name = "primaryParentCategoryId", EmitDefaultValue = false)]
        public string PrimaryParentCategoryId { get; set; }

        /// <summary>
        /// the list of modifications that the draft should apply to the product.
        /// </summary>
        /// <value>the list of modifications that the draft should apply to the product.</value>
        [DataMember(Name = "productPropertyModifications", EmitDefaultValue = false)]
        public List<ProductPropertyModification> ProductPropertyModifications { get; set; }

        /// <summary>
        /// the list of modifications that the draft should apply to the variants.
        /// </summary>
        /// <value>the list of modifications that the draft should apply to the variants.</value>
        [DataMember(Name = "variantPropertyModifications", EmitDefaultValue = false)]
        public List<VariantPropertyModification> VariantPropertyModifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductDraft {\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  DeleteVariantModifications: ").Append(DeleteVariantModifications).Append("\n");
            sb.Append("  ParentCategoryIds: ").Append(ParentCategoryIds).Append("\n");
            sb.Append("  PrimaryParentCategoryId: ").Append(PrimaryParentCategoryId).Append("\n");
            sb.Append("  ProductPropertyModifications: ").Append(ProductPropertyModifications).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  VariantPropertyModifications: ").Append(VariantPropertyModifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductDraft);
        }

        /// <summary>
        /// Returns true if ProductDraft instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductDraft to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductDraft input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CatalogId == input.CatalogId ||
                    (this.CatalogId != null &&
                    this.CatalogId.Equals(input.CatalogId))
                ) && 
                (
                    this.DeleteVariantModifications == input.DeleteVariantModifications ||
                    this.DeleteVariantModifications != null &&
                    input.DeleteVariantModifications != null &&
                    this.DeleteVariantModifications.SequenceEqual(input.DeleteVariantModifications)
                ) && 
                (
                    this.ParentCategoryIds == input.ParentCategoryIds ||
                    this.ParentCategoryIds != null &&
                    input.ParentCategoryIds != null &&
                    this.ParentCategoryIds.SequenceEqual(input.ParentCategoryIds)
                ) && 
                (
                    this.PrimaryParentCategoryId == input.PrimaryParentCategoryId ||
                    (this.PrimaryParentCategoryId != null &&
                    this.PrimaryParentCategoryId.Equals(input.PrimaryParentCategoryId))
                ) && 
                (
                    this.ProductPropertyModifications == input.ProductPropertyModifications ||
                    this.ProductPropertyModifications != null &&
                    input.ProductPropertyModifications != null &&
                    this.ProductPropertyModifications.SequenceEqual(input.ProductPropertyModifications)
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.VariantPropertyModifications == input.VariantPropertyModifications ||
                    this.VariantPropertyModifications != null &&
                    input.VariantPropertyModifications != null &&
                    this.VariantPropertyModifications.SequenceEqual(input.VariantPropertyModifications)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CatalogId != null)
                    hashCode = hashCode * 59 + this.CatalogId.GetHashCode();
                if (this.DeleteVariantModifications != null)
                    hashCode = hashCode * 59 + this.DeleteVariantModifications.GetHashCode();
                if (this.ParentCategoryIds != null)
                    hashCode = hashCode * 59 + this.ParentCategoryIds.GetHashCode();
                if (this.PrimaryParentCategoryId != null)
                    hashCode = hashCode * 59 + this.PrimaryParentCategoryId.GetHashCode();
                if (this.ProductPropertyModifications != null)
                    hashCode = hashCode * 59 + this.ProductPropertyModifications.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.VariantPropertyModifications != null)
                    hashCode = hashCode * 59 + this.VariantPropertyModifications.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
