/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer&#39;s Cart to get the promotional discount.
    /// </summary>
    [DataContract(Name = "DeleteCouponByCodeRequest")]
    public partial class DeleteCouponByCodeRequest : IEquatable<DeleteCouponByCodeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteCouponByCodeRequest" /> class.
        /// </summary>
        /// <param name="couponCode">The coupon code..</param>
        /// <param name="force">Delete the promo code if it is used in an active promotion and update the promotion..</param>
        public DeleteCouponByCodeRequest(string couponCode = default(string), bool force = default(bool))
        {
            this.CouponCode = couponCode;
            this.Force = force;
        }

        /// <summary>
        /// The coupon code.
        /// </summary>
        /// <value>The coupon code.</value>
        [DataMember(Name = "couponCode", EmitDefaultValue = false)]
        public string CouponCode { get; set; }

        /// <summary>
        /// Delete the promo code if it is used in an active promotion and update the promotion.
        /// </summary>
        /// <value>Delete the promo code if it is used in an active promotion and update the promotion.</value>
        [DataMember(Name = "force", EmitDefaultValue = true)]
        public bool Force { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeleteCouponByCodeRequest {\n");
            sb.Append("  CouponCode: ").Append(CouponCode).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeleteCouponByCodeRequest);
        }

        /// <summary>
        /// Returns true if DeleteCouponByCodeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DeleteCouponByCodeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeleteCouponByCodeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CouponCode == input.CouponCode ||
                    (this.CouponCode != null &&
                    this.CouponCode.Equals(input.CouponCode))
                ) && 
                (
                    this.Force == input.Force ||
                    this.Force.Equals(input.Force)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CouponCode != null)
                    hashCode = hashCode * 59 + this.CouponCode.GetHashCode();
                hashCode = hashCode * 59 + this.Force.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
