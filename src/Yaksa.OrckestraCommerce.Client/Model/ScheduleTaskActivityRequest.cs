/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Long running tasks perform batch processing.
    /// </summary>
    [DataContract(Name = "ScheduleTaskActivityRequest")]
    public partial class ScheduleTaskActivityRequest : IEquatable<ScheduleTaskActivityRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleTaskActivityRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScheduleTaskActivityRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleTaskActivityRequest" /> class.
        /// </summary>
        /// <param name="cronTriggers">The list of triggers that will fired the execution of the task activity. (required).</param>
        /// <param name="inputs">inputs.</param>
        /// <param name="activityTypeFullName">The task activity type AssemblyQualifiedName. (required).</param>
        public ScheduleTaskActivityRequest(List<CronTrigger> cronTriggers = default(List<CronTrigger>), Dictionary<string, Object> inputs = default(Dictionary<string, Object>), string activityTypeFullName = default(string))
        {
            // to ensure "cronTriggers" is required (not null)
            this.CronTriggers = cronTriggers ?? throw new ArgumentNullException("cronTriggers is a required property for ScheduleTaskActivityRequest and cannot be null");
            // to ensure "activityTypeFullName" is required (not null)
            this.ActivityTypeFullName = activityTypeFullName ?? throw new ArgumentNullException("activityTypeFullName is a required property for ScheduleTaskActivityRequest and cannot be null");
            this.Inputs = inputs;
        }

        /// <summary>
        /// The list of triggers that will fired the execution of the task activity.
        /// </summary>
        /// <value>The list of triggers that will fired the execution of the task activity.</value>
        [DataMember(Name = "cronTriggers", IsRequired = true, EmitDefaultValue = false)]
        public List<CronTrigger> CronTriggers { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name = "inputs", EmitDefaultValue = false)]
        public Dictionary<string, Object> Inputs { get; set; }

        /// <summary>
        /// The task activity type AssemblyQualifiedName.
        /// </summary>
        /// <value>The task activity type AssemblyQualifiedName.</value>
        [DataMember(Name = "activityTypeFullName", IsRequired = true, EmitDefaultValue = false)]
        public string ActivityTypeFullName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduleTaskActivityRequest {\n");
            sb.Append("  CronTriggers: ").Append(CronTriggers).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  ActivityTypeFullName: ").Append(ActivityTypeFullName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleTaskActivityRequest);
        }

        /// <summary>
        /// Returns true if ScheduleTaskActivityRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleTaskActivityRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleTaskActivityRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CronTriggers == input.CronTriggers ||
                    this.CronTriggers != null &&
                    input.CronTriggers != null &&
                    this.CronTriggers.SequenceEqual(input.CronTriggers)
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.ActivityTypeFullName == input.ActivityTypeFullName ||
                    (this.ActivityTypeFullName != null &&
                    this.ActivityTypeFullName.Equals(input.ActivityTypeFullName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CronTriggers != null)
                    hashCode = hashCode * 59 + this.CronTriggers.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.ActivityTypeFullName != null)
                    hashCode = hashCode * 59 + this.ActivityTypeFullName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
