/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Orders are entities which represent an order of a customer.
    /// </summary>
    [DataContract(Name = "PostProcessOrderRequest")]
    public partial class PostProcessOrderRequest : IEquatable<PostProcessOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostProcessOrderRequest" /> class.
        /// </summary>
        /// <param name="finishedStatusesToIgnore">Gets or sets a list of statuses that are not considered as finished..</param>
        /// <param name="restartFulfillmentProcess">Gets or sets a value indicating whether if the fulfillment process for this order needs to be restarted..</param>
        /// <param name="shipmentIds">The optional list of shipment ids to filter for reprocessing the order.</param>
        public PostProcessOrderRequest(List<string> finishedStatusesToIgnore = default(List<string>), bool restartFulfillmentProcess = default(bool), List<string> shipmentIds = default(List<string>))
        {
            this.FinishedStatusesToIgnore = finishedStatusesToIgnore;
            this.RestartFulfillmentProcess = restartFulfillmentProcess;
            this.ShipmentIds = shipmentIds;
        }

        /// <summary>
        /// Gets or sets a list of statuses that are not considered as finished.
        /// </summary>
        /// <value>Gets or sets a list of statuses that are not considered as finished.</value>
        [DataMember(Name = "finishedStatusesToIgnore", EmitDefaultValue = false)]
        public List<string> FinishedStatusesToIgnore { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether if the fulfillment process for this order needs to be restarted.
        /// </summary>
        /// <value>Gets or sets a value indicating whether if the fulfillment process for this order needs to be restarted.</value>
        [DataMember(Name = "restartFulfillmentProcess", EmitDefaultValue = true)]
        public bool RestartFulfillmentProcess { get; set; }

        /// <summary>
        /// The optional list of shipment ids to filter for reprocessing the order
        /// </summary>
        /// <value>The optional list of shipment ids to filter for reprocessing the order</value>
        [DataMember(Name = "shipmentIds", EmitDefaultValue = false)]
        public List<string> ShipmentIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostProcessOrderRequest {\n");
            sb.Append("  FinishedStatusesToIgnore: ").Append(FinishedStatusesToIgnore).Append("\n");
            sb.Append("  RestartFulfillmentProcess: ").Append(RestartFulfillmentProcess).Append("\n");
            sb.Append("  ShipmentIds: ").Append(ShipmentIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostProcessOrderRequest);
        }

        /// <summary>
        /// Returns true if PostProcessOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostProcessOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostProcessOrderRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FinishedStatusesToIgnore == input.FinishedStatusesToIgnore ||
                    this.FinishedStatusesToIgnore != null &&
                    input.FinishedStatusesToIgnore != null &&
                    this.FinishedStatusesToIgnore.SequenceEqual(input.FinishedStatusesToIgnore)
                ) && 
                (
                    this.RestartFulfillmentProcess == input.RestartFulfillmentProcess ||
                    this.RestartFulfillmentProcess.Equals(input.RestartFulfillmentProcess)
                ) && 
                (
                    this.ShipmentIds == input.ShipmentIds ||
                    this.ShipmentIds != null &&
                    input.ShipmentIds != null &&
                    this.ShipmentIds.SequenceEqual(input.ShipmentIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FinishedStatusesToIgnore != null)
                    hashCode = hashCode * 59 + this.FinishedStatusesToIgnore.GetHashCode();
                hashCode = hashCode * 59 + this.RestartFulfillmentProcess.GetHashCode();
                if (this.ShipmentIds != null)
                    hashCode = hashCode * 59 + this.ShipmentIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
