/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// SlotInstance
    /// </summary>
    [DataContract(Name = "SlotInstance")]
    public partial class SlotInstance : IEquatable<SlotInstance>, IValidatableObject
    {
        /// <summary>
        /// The current state (avaiability) of the slot.
        /// </summary>
        /// <value>The current state (avaiability) of the slot.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Available for value: Available
            /// </summary>
            [EnumMember(Value = "Available")]
            Available = 2,

            /// <summary>
            /// Enum Unavailable for value: Unavailable
            /// </summary>
            [EnumMember(Value = "Unavailable")]
            Unavailable = 3,

            /// <summary>
            /// Enum Full for value: Full
            /// </summary>
            [EnumMember(Value = "Full")]
            Full = 4

        }


        /// <summary>
        /// The current state (avaiability) of the slot.
        /// </summary>
        /// <value>The current state (avaiability) of the slot.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SlotInstance" /> class.
        /// </summary>
        /// <param name="hint">An optional hint that the provider may provide to indicate why the slot is unavailable..</param>
        /// <param name="slot">slot.</param>
        /// <param name="slotReservationSummary">slotReservationSummary.</param>
        /// <param name="state">The current state (avaiability) of the slot..</param>
        public SlotInstance(string hint = default(string), TimeSlot slot = default(TimeSlot), SlotReservationSummary slotReservationSummary = default(SlotReservationSummary), StateEnum? state = default(StateEnum?))
        {
            this.Hint = hint;
            this.Slot = slot;
            this.SlotReservationSummary = slotReservationSummary;
            this.State = state;
        }

        /// <summary>
        /// An optional hint that the provider may provide to indicate why the slot is unavailable.
        /// </summary>
        /// <value>An optional hint that the provider may provide to indicate why the slot is unavailable.</value>
        [DataMember(Name = "hint", EmitDefaultValue = false)]
        public string Hint { get; set; }

        /// <summary>
        /// Gets or Sets Slot
        /// </summary>
        [DataMember(Name = "slot", EmitDefaultValue = false)]
        public TimeSlot Slot { get; set; }

        /// <summary>
        /// Gets or Sets SlotReservationSummary
        /// </summary>
        [DataMember(Name = "slotReservationSummary", EmitDefaultValue = false)]
        public SlotReservationSummary SlotReservationSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SlotInstance {\n");
            sb.Append("  Hint: ").Append(Hint).Append("\n");
            sb.Append("  Slot: ").Append(Slot).Append("\n");
            sb.Append("  SlotReservationSummary: ").Append(SlotReservationSummary).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SlotInstance);
        }

        /// <summary>
        /// Returns true if SlotInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of SlotInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SlotInstance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Hint == input.Hint ||
                    (this.Hint != null &&
                    this.Hint.Equals(input.Hint))
                ) && 
                (
                    this.Slot == input.Slot ||
                    (this.Slot != null &&
                    this.Slot.Equals(input.Slot))
                ) && 
                (
                    this.SlotReservationSummary == input.SlotReservationSummary ||
                    (this.SlotReservationSummary != null &&
                    this.SlotReservationSummary.Equals(input.SlotReservationSummary))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hint != null)
                    hashCode = hashCode * 59 + this.Hint.GetHashCode();
                if (this.Slot != null)
                    hashCode = hashCode * 59 + this.Slot.GetHashCode();
                if (this.SlotReservationSummary != null)
                    hashCode = hashCode * 59 + this.SlotReservationSummary.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
