/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ReportParameterValue
    /// </summary>
    [DataContract(Name = "ReportParameterValue")]
    public partial class ReportParameterValue : IEquatable<ReportParameterValue>, IValidatableObject
    {
        /// <summary>
        /// the type of this parameter
        /// </summary>
        /// <value>the type of this parameter</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParameterTypeEnum
        {
            /// <summary>
            /// Enum String for value: String
            /// </summary>
            [EnumMember(Value = "String")]
            String = 1,

            /// <summary>
            /// Enum DateTime for value: DateTime
            /// </summary>
            [EnumMember(Value = "DateTime")]
            DateTime = 2,

            /// <summary>
            /// Enum Boolean for value: Boolean
            /// </summary>
            [EnumMember(Value = "Boolean")]
            Boolean = 3,

            /// <summary>
            /// Enum Integer for value: Integer
            /// </summary>
            [EnumMember(Value = "Integer")]
            Integer = 4,

            /// <summary>
            /// Enum Float for value: Float
            /// </summary>
            [EnumMember(Value = "Float")]
            Float = 5,

            /// <summary>
            /// Enum List for value: List
            /// </summary>
            [EnumMember(Value = "List")]
            List = 6,

            /// <summary>
            /// Enum ListTypeahead for value: ListTypeahead
            /// </summary>
            [EnumMember(Value = "ListTypeahead")]
            ListTypeahead = 7,

            /// <summary>
            /// Enum Scope for value: Scope
            /// </summary>
            [EnumMember(Value = "Scope")]
            Scope = 8

        }


        /// <summary>
        /// the type of this parameter
        /// </summary>
        /// <value>the type of this parameter</value>
        [DataMember(Name = "parameterType", EmitDefaultValue = false)]
        public ParameterTypeEnum? ParameterType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportParameterValue" /> class.
        /// </summary>
        /// <param name="displayValue">value of the parameter that will be used in the logs.</param>
        /// <param name="name">internal name of the parameter.</param>
        /// <param name="parameterType">the type of this parameter.</param>
        /// <param name="value">value of the parameter.</param>
        public ReportParameterValue(string displayValue = default(string), string name = default(string), ParameterTypeEnum? parameterType = default(ParameterTypeEnum?), string value = default(string))
        {
            this.DisplayValue = displayValue;
            this.Name = name;
            this.ParameterType = parameterType;
            this.Value = value;
        }

        /// <summary>
        /// value of the parameter that will be used in the logs
        /// </summary>
        /// <value>value of the parameter that will be used in the logs</value>
        [DataMember(Name = "displayValue", EmitDefaultValue = false)]
        public string DisplayValue { get; set; }

        /// <summary>
        /// internal name of the parameter
        /// </summary>
        /// <value>internal name of the parameter</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// value of the parameter
        /// </summary>
        /// <value>value of the parameter</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportParameterValue {\n");
            sb.Append("  DisplayValue: ").Append(DisplayValue).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParameterType: ").Append(ParameterType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportParameterValue);
        }

        /// <summary>
        /// Returns true if ReportParameterValue instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportParameterValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportParameterValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayValue == input.DisplayValue ||
                    (this.DisplayValue != null &&
                    this.DisplayValue.Equals(input.DisplayValue))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParameterType == input.ParameterType ||
                    this.ParameterType.Equals(input.ParameterType)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayValue != null)
                    hashCode = hashCode * 59 + this.DisplayValue.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.ParameterType.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
