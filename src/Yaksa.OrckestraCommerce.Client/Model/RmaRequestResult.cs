/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// RmaRequestResult
    /// </summary>
    [DataContract(Name = "RmaRequestResult")]
    public partial class RmaRequestResult : IEquatable<RmaRequestResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RmaRequestResult" /> class.
        /// </summary>
        /// <param name="errorCodes">ICollection&lt;String&gt;.</param>
        /// <param name="isSuccess">specifies if the response is successful.</param>
        /// <param name="rma">rma.</param>
        public RmaRequestResult(Object errorCodes = default(Object), bool isSuccess = default(bool), Rma rma = default(Rma))
        {
            this.ErrorCodes = errorCodes;
            this.IsSuccess = isSuccess;
            this.Rma = rma;
        }

        /// <summary>
        /// ICollection&lt;String&gt;
        /// </summary>
        /// <value>ICollection&lt;String&gt;</value>
        [DataMember(Name = "errorCodes", EmitDefaultValue = false)]
        public Object ErrorCodes { get; set; }

        /// <summary>
        /// specifies if the response is successful
        /// </summary>
        /// <value>specifies if the response is successful</value>
        [DataMember(Name = "isSuccess", EmitDefaultValue = true)]
        public bool IsSuccess { get; set; }

        /// <summary>
        /// Gets or Sets Rma
        /// </summary>
        [DataMember(Name = "rma", EmitDefaultValue = false)]
        public Rma Rma { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RmaRequestResult {\n");
            sb.Append("  ErrorCodes: ").Append(ErrorCodes).Append("\n");
            sb.Append("  IsSuccess: ").Append(IsSuccess).Append("\n");
            sb.Append("  Rma: ").Append(Rma).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RmaRequestResult);
        }

        /// <summary>
        /// Returns true if RmaRequestResult instances are equal
        /// </summary>
        /// <param name="input">Instance of RmaRequestResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RmaRequestResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ErrorCodes == input.ErrorCodes ||
                    (this.ErrorCodes != null &&
                    this.ErrorCodes.Equals(input.ErrorCodes))
                ) && 
                (
                    this.IsSuccess == input.IsSuccess ||
                    this.IsSuccess.Equals(input.IsSuccess)
                ) && 
                (
                    this.Rma == input.Rma ||
                    (this.Rma != null &&
                    this.Rma.Equals(input.Rma))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorCodes != null)
                    hashCode = hashCode * 59 + this.ErrorCodes.GetHashCode();
                hashCode = hashCode * 59 + this.IsSuccess.GetHashCode();
                if (this.Rma != null)
                    hashCode = hashCode * 59 + this.Rma.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
