/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Long running tasks perform batch processing.
    /// </summary>
    [DataContract(Name = "AddOrUpdateScheduledTaskTrigger")]
    public partial class AddOrUpdateScheduledTaskTrigger : IEquatable<AddOrUpdateScheduledTaskTrigger>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddOrUpdateScheduledTaskTrigger" /> class.
        /// </summary>
        /// <param name="triggerCronExpression">the cron expression string..</param>
        /// <param name="triggerDescription">the trigger description..</param>
        /// <param name="triggerTimeZone">the cron expression time zone..</param>
        public AddOrUpdateScheduledTaskTrigger(string triggerCronExpression = default(string), string triggerDescription = default(string), string triggerTimeZone = default(string))
        {
            this.TriggerCronExpression = triggerCronExpression;
            this.TriggerDescription = triggerDescription;
            this.TriggerTimeZone = triggerTimeZone;
        }

        /// <summary>
        /// the cron expression string.
        /// </summary>
        /// <value>the cron expression string.</value>
        [DataMember(Name = "triggerCronExpression", EmitDefaultValue = false)]
        public string TriggerCronExpression { get; set; }

        /// <summary>
        /// the trigger description.
        /// </summary>
        /// <value>the trigger description.</value>
        [DataMember(Name = "triggerDescription", EmitDefaultValue = false)]
        public string TriggerDescription { get; set; }

        /// <summary>
        /// the cron expression time zone.
        /// </summary>
        /// <value>the cron expression time zone.</value>
        [DataMember(Name = "triggerTimeZone", EmitDefaultValue = false)]
        public string TriggerTimeZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddOrUpdateScheduledTaskTrigger {\n");
            sb.Append("  TriggerCronExpression: ").Append(TriggerCronExpression).Append("\n");
            sb.Append("  TriggerDescription: ").Append(TriggerDescription).Append("\n");
            sb.Append("  TriggerTimeZone: ").Append(TriggerTimeZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddOrUpdateScheduledTaskTrigger);
        }

        /// <summary>
        /// Returns true if AddOrUpdateScheduledTaskTrigger instances are equal
        /// </summary>
        /// <param name="input">Instance of AddOrUpdateScheduledTaskTrigger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddOrUpdateScheduledTaskTrigger input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TriggerCronExpression == input.TriggerCronExpression ||
                    (this.TriggerCronExpression != null &&
                    this.TriggerCronExpression.Equals(input.TriggerCronExpression))
                ) && 
                (
                    this.TriggerDescription == input.TriggerDescription ||
                    (this.TriggerDescription != null &&
                    this.TriggerDescription.Equals(input.TriggerDescription))
                ) && 
                (
                    this.TriggerTimeZone == input.TriggerTimeZone ||
                    (this.TriggerTimeZone != null &&
                    this.TriggerTimeZone.Equals(input.TriggerTimeZone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TriggerCronExpression != null)
                    hashCode = hashCode * 59 + this.TriggerCronExpression.GetHashCode();
                if (this.TriggerDescription != null)
                    hashCode = hashCode * 59 + this.TriggerDescription.GetHashCode();
                if (this.TriggerTimeZone != null)
                    hashCode = hashCode * 59 + this.TriggerTimeZone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
