/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// MembershipAuthorization
    /// </summary>
    [DataContract(Name = "MembershipAuthorization")]
    public partial class MembershipAuthorization : IEquatable<MembershipAuthorization>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipAuthorization" /> class.
        /// </summary>
        /// <param name="created">The date of creation..</param>
        /// <param name="isSystem">True if is system role.</param>
        /// <param name="moduleId">The module identifier..</param>
        /// <param name="moduleName">The module name..</param>
        /// <param name="objectType">The type of the object..</param>
        /// <param name="roleDisplayName">roleDisplayName.</param>
        /// <param name="roleId">The role identifier..</param>
        /// <param name="roleName">The role name..</param>
        /// <param name="scopeId">The scope identifier..</param>
        public MembershipAuthorization(DateTime created = default(DateTime), bool isSystem = default(bool), int moduleId = default(int), string moduleName = default(string), string objectType = default(string), Dictionary<string, string> roleDisplayName = default(Dictionary<string, string>), int roleId = default(int), string roleName = default(string), string scopeId = default(string))
        {
            this.Created = created;
            this.IsSystem = isSystem;
            this.ModuleId = moduleId;
            this.ModuleName = moduleName;
            this.ObjectType = objectType;
            this.RoleDisplayName = roleDisplayName;
            this.RoleId = roleId;
            this.RoleName = roleName;
            this.ScopeId = scopeId;
        }

        /// <summary>
        /// The date of creation.
        /// </summary>
        /// <value>The date of creation.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// True if is system role
        /// </summary>
        /// <value>True if is system role</value>
        [DataMember(Name = "isSystem", EmitDefaultValue = true)]
        public bool IsSystem { get; set; }

        /// <summary>
        /// The module identifier.
        /// </summary>
        /// <value>The module identifier.</value>
        [DataMember(Name = "moduleId", EmitDefaultValue = false)]
        public int ModuleId { get; set; }

        /// <summary>
        /// The module name.
        /// </summary>
        /// <value>The module name.</value>
        [DataMember(Name = "moduleName", EmitDefaultValue = false)]
        public string ModuleName { get; set; }

        /// <summary>
        /// The type of the object.
        /// </summary>
        /// <value>The type of the object.</value>
        [DataMember(Name = "objectType", EmitDefaultValue = false)]
        public string ObjectType { get; set; }

        /// <summary>
        /// Gets or Sets RoleDisplayName
        /// </summary>
        [DataMember(Name = "roleDisplayName", EmitDefaultValue = false)]
        public Dictionary<string, string> RoleDisplayName { get; set; }

        /// <summary>
        /// The role identifier.
        /// </summary>
        /// <value>The role identifier.</value>
        [DataMember(Name = "roleId", EmitDefaultValue = false)]
        public int RoleId { get; set; }

        /// <summary>
        /// The role name.
        /// </summary>
        /// <value>The role name.</value>
        [DataMember(Name = "roleName", EmitDefaultValue = false)]
        public string RoleName { get; set; }

        /// <summary>
        /// The scope identifier.
        /// </summary>
        /// <value>The scope identifier.</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MembershipAuthorization {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  ModuleId: ").Append(ModuleId).Append("\n");
            sb.Append("  ModuleName: ").Append(ModuleName).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  RoleDisplayName: ").Append(RoleDisplayName).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MembershipAuthorization);
        }

        /// <summary>
        /// Returns true if MembershipAuthorization instances are equal
        /// </summary>
        /// <param name="input">Instance of MembershipAuthorization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MembershipAuthorization input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.IsSystem == input.IsSystem ||
                    this.IsSystem.Equals(input.IsSystem)
                ) && 
                (
                    this.ModuleId == input.ModuleId ||
                    this.ModuleId.Equals(input.ModuleId)
                ) && 
                (
                    this.ModuleName == input.ModuleName ||
                    (this.ModuleName != null &&
                    this.ModuleName.Equals(input.ModuleName))
                ) && 
                (
                    this.ObjectType == input.ObjectType ||
                    (this.ObjectType != null &&
                    this.ObjectType.Equals(input.ObjectType))
                ) && 
                (
                    this.RoleDisplayName == input.RoleDisplayName ||
                    this.RoleDisplayName != null &&
                    input.RoleDisplayName != null &&
                    this.RoleDisplayName.SequenceEqual(input.RoleDisplayName)
                ) && 
                (
                    this.RoleId == input.RoleId ||
                    this.RoleId.Equals(input.RoleId)
                ) && 
                (
                    this.RoleName == input.RoleName ||
                    (this.RoleName != null &&
                    this.RoleName.Equals(input.RoleName))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.IsSystem.GetHashCode();
                hashCode = hashCode * 59 + this.ModuleId.GetHashCode();
                if (this.ModuleName != null)
                    hashCode = hashCode * 59 + this.ModuleName.GetHashCode();
                if (this.ObjectType != null)
                    hashCode = hashCode * 59 + this.ObjectType.GetHashCode();
                if (this.RoleDisplayName != null)
                    hashCode = hashCode * 59 + this.RoleDisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.RoleId.GetHashCode();
                if (this.RoleName != null)
                    hashCode = hashCode * 59 + this.RoleName.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
