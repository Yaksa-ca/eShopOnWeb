/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// SelfServiceAccountCreatedEvent
    /// </summary>
    [DataContract(Name = "SelfServiceAccountCreatedEvent")]
    public partial class SelfServiceAccountCreatedEvent : IEquatable<SelfServiceAccountCreatedEvent>, IValidatableObject
    {
        /// <summary>
        /// Defines B2CAccountCreationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum B2CAccountCreationTypeEnum
        {
            /// <summary>
            /// Enum Invite for value: Invite
            /// </summary>
            [EnumMember(Value = "Invite")]
            Invite = 1,

            /// <summary>
            /// Enum SelfService for value: SelfService
            /// </summary>
            [EnumMember(Value = "SelfService")]
            SelfService = 2

        }


        /// <summary>
        /// Gets or Sets B2CAccountCreationType
        /// </summary>
        [DataMember(Name = "b2CAccountCreationType", EmitDefaultValue = false)]
        public B2CAccountCreationTypeEnum? B2CAccountCreationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SelfServiceAccountCreatedEvent" /> class.
        /// </summary>
        /// <param name="scopeId">scopeId.</param>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="language">language.</param>
        /// <param name="status">status.</param>
        /// <param name="clinicCode">clinicCode.</param>
        /// <param name="associatedScope">associatedScope.</param>
        /// <param name="b2CAccountCreationType">b2CAccountCreationType.</param>
        public SelfServiceAccountCreatedEvent(string scopeId = default(string), string emailAddress = default(string), string language = default(string), string status = default(string), string clinicCode = default(string), string associatedScope = default(string), B2CAccountCreationTypeEnum? b2CAccountCreationType = default(B2CAccountCreationTypeEnum?))
        {
            this.ScopeId = scopeId;
            this.EmailAddress = emailAddress;
            this.Language = language;
            this.Status = status;
            this.ClinicCode = clinicCode;
            this.AssociatedScope = associatedScope;
            this.B2CAccountCreationType = b2CAccountCreationType;
        }

        /// <summary>
        /// Gets or Sets ScopeId
        /// </summary>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "emailAddress", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ClinicCode
        /// </summary>
        [DataMember(Name = "clinicCode", EmitDefaultValue = false)]
        public string ClinicCode { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedScope
        /// </summary>
        [DataMember(Name = "associatedScope", EmitDefaultValue = false)]
        public string AssociatedScope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SelfServiceAccountCreatedEvent {\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ClinicCode: ").Append(ClinicCode).Append("\n");
            sb.Append("  AssociatedScope: ").Append(AssociatedScope).Append("\n");
            sb.Append("  B2CAccountCreationType: ").Append(B2CAccountCreationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SelfServiceAccountCreatedEvent);
        }

        /// <summary>
        /// Returns true if SelfServiceAccountCreatedEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of SelfServiceAccountCreatedEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SelfServiceAccountCreatedEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ClinicCode == input.ClinicCode ||
                    (this.ClinicCode != null &&
                    this.ClinicCode.Equals(input.ClinicCode))
                ) && 
                (
                    this.AssociatedScope == input.AssociatedScope ||
                    (this.AssociatedScope != null &&
                    this.AssociatedScope.Equals(input.AssociatedScope))
                ) && 
                (
                    this.B2CAccountCreationType == input.B2CAccountCreationType ||
                    this.B2CAccountCreationType.Equals(input.B2CAccountCreationType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ClinicCode != null)
                    hashCode = hashCode * 59 + this.ClinicCode.GetHashCode();
                if (this.AssociatedScope != null)
                    hashCode = hashCode * 59 + this.AssociatedScope.GetHashCode();
                hashCode = hashCode * 59 + this.B2CAccountCreationType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
