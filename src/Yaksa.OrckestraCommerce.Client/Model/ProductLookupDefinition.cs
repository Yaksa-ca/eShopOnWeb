/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ProductLookupDefinition
    /// </summary>
    [DataContract(Name = "ProductLookupDefinition")]
    public partial class ProductLookupDefinition : IEquatable<ProductLookupDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductLookupDefinition" /> class.
        /// </summary>
        /// <param name="allowMultipleSelection">The lookup definition of the attribute.</param>
        /// <param name="lookupName">The lookup definition of the attribute.</param>
        public ProductLookupDefinition(bool allowMultipleSelection = default(bool), string lookupName = default(string))
        {
            this.AllowMultipleSelection = allowMultipleSelection;
            this.LookupName = lookupName;
        }

        /// <summary>
        /// The lookup definition of the attribute
        /// </summary>
        /// <value>The lookup definition of the attribute</value>
        [DataMember(Name = "allowMultipleSelection", EmitDefaultValue = true)]
        public bool AllowMultipleSelection { get; set; }

        /// <summary>
        /// The lookup definition of the attribute
        /// </summary>
        /// <value>The lookup definition of the attribute</value>
        [DataMember(Name = "lookupName", EmitDefaultValue = false)]
        public string LookupName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductLookupDefinition {\n");
            sb.Append("  AllowMultipleSelection: ").Append(AllowMultipleSelection).Append("\n");
            sb.Append("  LookupName: ").Append(LookupName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductLookupDefinition);
        }

        /// <summary>
        /// Returns true if ProductLookupDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductLookupDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductLookupDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowMultipleSelection == input.AllowMultipleSelection ||
                    this.AllowMultipleSelection.Equals(input.AllowMultipleSelection)
                ) && 
                (
                    this.LookupName == input.LookupName ||
                    (this.LookupName != null &&
                    this.LookupName.Equals(input.LookupName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AllowMultipleSelection.GetHashCode();
                if (this.LookupName != null)
                    hashCode = hashCode * 59 + this.LookupName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
