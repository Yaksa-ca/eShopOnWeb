/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// AttributeDefinition
    /// </summary>
    [DataContract(Name = "AttributeDefinition")]
    public partial class AttributeDefinition : IEquatable<AttributeDefinition>, IValidatableObject
    {
        /// <summary>
        /// The data type for the AttributeDefinition.
        /// </summary>
        /// <value>The data type for the AttributeDefinition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataTypeEnum
        {
            /// <summary>
            /// Enum Integer for value: Integer
            /// </summary>
            [EnumMember(Value = "Integer")]
            Integer = 1,

            /// <summary>
            /// Enum Decimal for value: Decimal
            /// </summary>
            [EnumMember(Value = "Decimal")]
            Decimal = 2,

            /// <summary>
            /// Enum Boolean for value: Boolean
            /// </summary>
            [EnumMember(Value = "Boolean")]
            Boolean = 3,

            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 4,

            /// <summary>
            /// Enum DateTime for value: DateTime
            /// </summary>
            [EnumMember(Value = "DateTime")]
            DateTime = 5,

            /// <summary>
            /// Enum Lookup for value: Lookup
            /// </summary>
            [EnumMember(Value = "Lookup")]
            Lookup = 6,

            /// <summary>
            /// Enum EntityReference for value: EntityReference
            /// </summary>
            [EnumMember(Value = "EntityReference")]
            EntityReference = 7,

            /// <summary>
            /// Enum CustomType for value: CustomType
            /// </summary>
            [EnumMember(Value = "CustomType")]
            CustomType = 8,

            /// <summary>
            /// Enum Xml for value: Xml
            /// </summary>
            [EnumMember(Value = "Xml")]
            Xml = 9,

            /// <summary>
            /// Enum Uniqueidentifier for value: Uniqueidentifier
            /// </summary>
            [EnumMember(Value = "Uniqueidentifier")]
            Uniqueidentifier = 10,

            /// <summary>
            /// Enum Number for value: Number
            /// </summary>
            [EnumMember(Value = "Number")]
            Number = 11

        }


        /// <summary>
        /// The data type for the AttributeDefinition.
        /// </summary>
        /// <value>The data type for the AttributeDefinition.</value>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public DataTypeEnum? DataType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttributeDefinition" /> class.
        /// </summary>
        /// <param name="allowMultipleValues">Whether multiple values can be specified for the AttributeDefinition..</param>
        /// <param name="customDataType">The type of the custom data for the AttributeDefinition..</param>
        /// <param name="dataType">The data type for the AttributeDefinition..</param>
        /// <param name="defaultValue">Object.</param>
        /// <param name="description">The description for the AttributeDefinition..</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="displayOrder">The display order for the AttributeDefinition..</param>
        /// <param name="groupId">The Id of the AttributeDefinition group, if the attribute is associated to a group..</param>
        /// <param name="isBuiltIn">Whether the AttributeDefinition is built-in..</param>
        /// <param name="isRequired">Whether a value is required for the AttributeDefinition..</param>
        /// <param name="isSearchable">The AttributeDefinition should be indexed and used for searches..</param>
        /// <param name="maximum">Object.</param>
        /// <param name="minimum">Object.</param>
        /// <param name="multilingual">Whether the AttributeDefinition is multilingual and a distinct value can be specified for different cultures..</param>
        /// <param name="name">The name of the AttributeDefinition..</param>
        /// <param name="referenceTypeName">The name of the reference type for the AttributeDefinition, if DataType is a lookup or an entity reference..</param>
        public AttributeDefinition(bool allowMultipleValues = default(bool), string customDataType = default(string), DataTypeEnum? dataType = default(DataTypeEnum?), Object defaultValue = default(Object), string description = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), int displayOrder = default(int), string groupId = default(string), bool isBuiltIn = default(bool), bool isRequired = default(bool), bool isSearchable = default(bool), Object maximum = default(Object), Object minimum = default(Object), bool multilingual = default(bool), string name = default(string), string referenceTypeName = default(string))
        {
            this.AllowMultipleValues = allowMultipleValues;
            this.CustomDataType = customDataType;
            this.DataType = dataType;
            this.DefaultValue = defaultValue;
            this.Description = description;
            this.DisplayName = displayName;
            this.DisplayOrder = displayOrder;
            this.GroupId = groupId;
            this.IsBuiltIn = isBuiltIn;
            this.IsRequired = isRequired;
            this.IsSearchable = isSearchable;
            this.Maximum = maximum;
            this.Minimum = minimum;
            this.Multilingual = multilingual;
            this.Name = name;
            this.ReferenceTypeName = referenceTypeName;
        }

        /// <summary>
        /// Whether multiple values can be specified for the AttributeDefinition.
        /// </summary>
        /// <value>Whether multiple values can be specified for the AttributeDefinition.</value>
        [DataMember(Name = "allowMultipleValues", EmitDefaultValue = true)]
        public bool AllowMultipleValues { get; set; }

        /// <summary>
        /// The type of the custom data for the AttributeDefinition.
        /// </summary>
        /// <value>The type of the custom data for the AttributeDefinition.</value>
        [DataMember(Name = "customDataType", EmitDefaultValue = false)]
        public string CustomDataType { get; set; }

        /// <summary>
        /// Object
        /// </summary>
        /// <value>Object</value>
        [DataMember(Name = "defaultValue", EmitDefaultValue = false)]
        public Object DefaultValue { get; set; }

        /// <summary>
        /// The description for the AttributeDefinition.
        /// </summary>
        /// <value>The description for the AttributeDefinition.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// The display order for the AttributeDefinition.
        /// </summary>
        /// <value>The display order for the AttributeDefinition.</value>
        [DataMember(Name = "displayOrder", EmitDefaultValue = false)]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// The Id of the AttributeDefinition group, if the attribute is associated to a group.
        /// </summary>
        /// <value>The Id of the AttributeDefinition group, if the attribute is associated to a group.</value>
        [DataMember(Name = "groupId", EmitDefaultValue = false)]
        public string GroupId { get; set; }

        /// <summary>
        /// Whether the AttributeDefinition is built-in.
        /// </summary>
        /// <value>Whether the AttributeDefinition is built-in.</value>
        [DataMember(Name = "isBuiltIn", EmitDefaultValue = true)]
        public bool IsBuiltIn { get; set; }

        /// <summary>
        /// Whether a value is required for the AttributeDefinition.
        /// </summary>
        /// <value>Whether a value is required for the AttributeDefinition.</value>
        [DataMember(Name = "isRequired", EmitDefaultValue = true)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// The AttributeDefinition should be indexed and used for searches.
        /// </summary>
        /// <value>The AttributeDefinition should be indexed and used for searches.</value>
        [DataMember(Name = "isSearchable", EmitDefaultValue = true)]
        public bool IsSearchable { get; set; }

        /// <summary>
        /// Object
        /// </summary>
        /// <value>Object</value>
        [DataMember(Name = "maximum", EmitDefaultValue = false)]
        public Object Maximum { get; set; }

        /// <summary>
        /// Object
        /// </summary>
        /// <value>Object</value>
        [DataMember(Name = "minimum", EmitDefaultValue = false)]
        public Object Minimum { get; set; }

        /// <summary>
        /// Whether the AttributeDefinition is multilingual and a distinct value can be specified for different cultures.
        /// </summary>
        /// <value>Whether the AttributeDefinition is multilingual and a distinct value can be specified for different cultures.</value>
        [DataMember(Name = "multilingual", EmitDefaultValue = true)]
        public bool Multilingual { get; set; }

        /// <summary>
        /// The name of the AttributeDefinition.
        /// </summary>
        /// <value>The name of the AttributeDefinition.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The name of the reference type for the AttributeDefinition, if DataType is a lookup or an entity reference.
        /// </summary>
        /// <value>The name of the reference type for the AttributeDefinition, if DataType is a lookup or an entity reference.</value>
        [DataMember(Name = "referenceTypeName", EmitDefaultValue = false)]
        public string ReferenceTypeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttributeDefinition {\n");
            sb.Append("  AllowMultipleValues: ").Append(AllowMultipleValues).Append("\n");
            sb.Append("  CustomDataType: ").Append(CustomDataType).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  IsBuiltIn: ").Append(IsBuiltIn).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsSearchable: ").Append(IsSearchable).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Multilingual: ").Append(Multilingual).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReferenceTypeName: ").Append(ReferenceTypeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttributeDefinition);
        }

        /// <summary>
        /// Returns true if AttributeDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of AttributeDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttributeDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowMultipleValues == input.AllowMultipleValues ||
                    this.AllowMultipleValues.Equals(input.AllowMultipleValues)
                ) && 
                (
                    this.CustomDataType == input.CustomDataType ||
                    (this.CustomDataType != null &&
                    this.CustomDataType.Equals(input.CustomDataType))
                ) && 
                (
                    this.DataType == input.DataType ||
                    this.DataType.Equals(input.DataType)
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    this.DisplayOrder.Equals(input.DisplayOrder)
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.IsBuiltIn == input.IsBuiltIn ||
                    this.IsBuiltIn.Equals(input.IsBuiltIn)
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    this.IsRequired.Equals(input.IsRequired)
                ) && 
                (
                    this.IsSearchable == input.IsSearchable ||
                    this.IsSearchable.Equals(input.IsSearchable)
                ) && 
                (
                    this.Maximum == input.Maximum ||
                    (this.Maximum != null &&
                    this.Maximum.Equals(input.Maximum))
                ) && 
                (
                    this.Minimum == input.Minimum ||
                    (this.Minimum != null &&
                    this.Minimum.Equals(input.Minimum))
                ) && 
                (
                    this.Multilingual == input.Multilingual ||
                    this.Multilingual.Equals(input.Multilingual)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReferenceTypeName == input.ReferenceTypeName ||
                    (this.ReferenceTypeName != null &&
                    this.ReferenceTypeName.Equals(input.ReferenceTypeName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AllowMultipleValues.GetHashCode();
                if (this.CustomDataType != null)
                    hashCode = hashCode * 59 + this.CustomDataType.GetHashCode();
                hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                hashCode = hashCode * 59 + this.IsBuiltIn.GetHashCode();
                hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                hashCode = hashCode * 59 + this.IsSearchable.GetHashCode();
                if (this.Maximum != null)
                    hashCode = hashCode * 59 + this.Maximum.GetHashCode();
                if (this.Minimum != null)
                    hashCode = hashCode * 59 + this.Minimum.GetHashCode();
                hashCode = hashCode * 59 + this.Multilingual.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ReferenceTypeName != null)
                    hashCode = hashCode * 59 + this.ReferenceTypeName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
