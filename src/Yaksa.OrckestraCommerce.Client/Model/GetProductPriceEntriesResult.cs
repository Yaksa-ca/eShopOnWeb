/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// GetProductPriceEntriesResult
    /// </summary>
    [DataContract(Name = "GetProductPriceEntriesResult")]
    public partial class GetProductPriceEntriesResult : IEquatable<GetProductPriceEntriesResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProductPriceEntriesResult" /> class.
        /// </summary>
        /// <param name="productId">The product id.</param>
        /// <param name="productPriceEntries">The collection of ProductPriceEntry where each item represents the price of the Product in a PriceList.</param>
        /// <param name="variantPriceEntries">The collection of VariantPriceEntry where each item represents the price of the Variant in a PriceList.</param>
        public GetProductPriceEntriesResult(string productId = default(string), List<ProductPriceEntry> productPriceEntries = default(List<ProductPriceEntry>), List<VariantPriceEntry> variantPriceEntries = default(List<VariantPriceEntry>))
        {
            this.ProductId = productId;
            this.ProductPriceEntries = productPriceEntries;
            this.VariantPriceEntries = variantPriceEntries;
        }

        /// <summary>
        /// The product id
        /// </summary>
        /// <value>The product id</value>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// The collection of ProductPriceEntry where each item represents the price of the Product in a PriceList
        /// </summary>
        /// <value>The collection of ProductPriceEntry where each item represents the price of the Product in a PriceList</value>
        [DataMember(Name = "productPriceEntries", EmitDefaultValue = false)]
        public List<ProductPriceEntry> ProductPriceEntries { get; set; }

        /// <summary>
        /// The collection of VariantPriceEntry where each item represents the price of the Variant in a PriceList
        /// </summary>
        /// <value>The collection of VariantPriceEntry where each item represents the price of the Variant in a PriceList</value>
        [DataMember(Name = "variantPriceEntries", EmitDefaultValue = false)]
        public List<VariantPriceEntry> VariantPriceEntries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetProductPriceEntriesResult {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductPriceEntries: ").Append(ProductPriceEntries).Append("\n");
            sb.Append("  VariantPriceEntries: ").Append(VariantPriceEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetProductPriceEntriesResult);
        }

        /// <summary>
        /// Returns true if GetProductPriceEntriesResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetProductPriceEntriesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProductPriceEntriesResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.ProductPriceEntries == input.ProductPriceEntries ||
                    this.ProductPriceEntries != null &&
                    input.ProductPriceEntries != null &&
                    this.ProductPriceEntries.SequenceEqual(input.ProductPriceEntries)
                ) && 
                (
                    this.VariantPriceEntries == input.VariantPriceEntries ||
                    this.VariantPriceEntries != null &&
                    input.VariantPriceEntries != null &&
                    this.VariantPriceEntries.SequenceEqual(input.VariantPriceEntries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.ProductPriceEntries != null)
                    hashCode = hashCode * 59 + this.ProductPriceEntries.GetHashCode();
                if (this.VariantPriceEntries != null)
                    hashCode = hashCode * 59 + this.VariantPriceEntries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
