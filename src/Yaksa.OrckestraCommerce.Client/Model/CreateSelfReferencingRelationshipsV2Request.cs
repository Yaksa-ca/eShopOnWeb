/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// The API used to handle Relationships between entities.
    /// </summary>
    [DataContract(Name = "CreateSelfReferencingRelationshipsV2Request")]
    public partial class CreateSelfReferencingRelationshipsV2Request : IEquatable<CreateSelfReferencingRelationshipsV2Request>, IValidatableObject
    {
        /// <summary>
        /// Indicates the type of the entities
        /// </summary>
        /// <value>Indicates the type of the entities</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntitiesTypeEnum
        {
            /// <summary>
            /// Enum Category for value: Category
            /// </summary>
            [EnumMember(Value = "Category")]
            Category = 1,

            /// <summary>
            /// Enum Product for value: Product
            /// </summary>
            [EnumMember(Value = "Product")]
            Product = 2

        }


        /// <summary>
        /// Indicates the type of the entities
        /// </summary>
        /// <value>Indicates the type of the entities</value>
        [DataMember(Name = "entitiesType", EmitDefaultValue = false)]
        public EntitiesTypeEnum? EntitiesType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSelfReferencingRelationshipsV2Request" /> class.
        /// </summary>
        /// <param name="count">A quantity for the Relationship. For example, X has 7 items of the relation Y..</param>
        /// <param name="description">description.</param>
        /// <param name="entities">Indicates the entities to which the relationships are to be applied.</param>
        /// <param name="entitiesType">Indicates the type of the entities.</param>
        /// <param name="merchandiseType">The MerchandiseType of the relationships. The type is based on the MerchandiseType Lookup. Contains the value of the lookup.</param>
        /// <param name="qualifier">A qualifier for the Relationship. Flexible property that allows the consumer to enter custom information about the relationship.</param>
        public CreateSelfReferencingRelationshipsV2Request(int count = default(int), Dictionary<string, string> description = default(Dictionary<string, string>), List<RelationshipEntity> entities = default(List<RelationshipEntity>), EntitiesTypeEnum? entitiesType = default(EntitiesTypeEnum?), string merchandiseType = default(string), string qualifier = default(string))
        {
            this.Count = count;
            this.Description = description;
            this.Entities = entities;
            this.EntitiesType = entitiesType;
            this.MerchandiseType = merchandiseType;
            this.Qualifier = qualifier;
        }

        /// <summary>
        /// A quantity for the Relationship. For example, X has 7 items of the relation Y.
        /// </summary>
        /// <value>A quantity for the Relationship. For example, X has 7 items of the relation Y.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        /// Indicates the entities to which the relationships are to be applied
        /// </summary>
        /// <value>Indicates the entities to which the relationships are to be applied</value>
        [DataMember(Name = "entities", EmitDefaultValue = false)]
        public List<RelationshipEntity> Entities { get; set; }

        /// <summary>
        /// The MerchandiseType of the relationships. The type is based on the MerchandiseType Lookup. Contains the value of the lookup
        /// </summary>
        /// <value>The MerchandiseType of the relationships. The type is based on the MerchandiseType Lookup. Contains the value of the lookup</value>
        [DataMember(Name = "merchandiseType", EmitDefaultValue = false)]
        public string MerchandiseType { get; set; }

        /// <summary>
        /// A qualifier for the Relationship. Flexible property that allows the consumer to enter custom information about the relationship
        /// </summary>
        /// <value>A qualifier for the Relationship. Flexible property that allows the consumer to enter custom information about the relationship</value>
        [DataMember(Name = "qualifier", EmitDefaultValue = false)]
        public string Qualifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSelfReferencingRelationshipsV2Request {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  EntitiesType: ").Append(EntitiesType).Append("\n");
            sb.Append("  MerchandiseType: ").Append(MerchandiseType).Append("\n");
            sb.Append("  Qualifier: ").Append(Qualifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSelfReferencingRelationshipsV2Request);
        }

        /// <summary>
        /// Returns true if CreateSelfReferencingRelationshipsV2Request instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSelfReferencingRelationshipsV2Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSelfReferencingRelationshipsV2Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    input.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                ) && 
                (
                    this.EntitiesType == input.EntitiesType ||
                    this.EntitiesType.Equals(input.EntitiesType)
                ) && 
                (
                    this.MerchandiseType == input.MerchandiseType ||
                    (this.MerchandiseType != null &&
                    this.MerchandiseType.Equals(input.MerchandiseType))
                ) && 
                (
                    this.Qualifier == input.Qualifier ||
                    (this.Qualifier != null &&
                    this.Qualifier.Equals(input.Qualifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Entities != null)
                    hashCode = hashCode * 59 + this.Entities.GetHashCode();
                hashCode = hashCode * 59 + this.EntitiesType.GetHashCode();
                if (this.MerchandiseType != null)
                    hashCode = hashCode * 59 + this.MerchandiseType.GetHashCode();
                if (this.Qualifier != null)
                    hashCode = hashCode * 59 + this.Qualifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
