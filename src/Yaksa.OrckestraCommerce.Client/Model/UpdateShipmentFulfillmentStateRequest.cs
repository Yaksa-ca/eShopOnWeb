/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Orders are entities which represent an order of a customer.
    /// </summary>
    [DataContract(Name = "UpdateShipmentFulfillmentStateRequest")]
    public partial class UpdateShipmentFulfillmentStateRequest : IEquatable<UpdateShipmentFulfillmentStateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateShipmentFulfillmentStateRequest" /> class.
        /// </summary>
        /// <param name="allowedManualTransitions">a list of allowed manual transitions from the shipment current status..</param>
        /// <param name="allowedStatusChanges">a list of allowed status changes that can be requested.  Requesting any other changes will fail..</param>
        /// <param name="allowsShipmentChangesProcessing">whether the saving an order in the current state should resume a processing the order within the fulfillment process..</param>
        /// <param name="clearFulfillmentFailureMessages">whether clear state failure messages..</param>
        /// <param name="fulfillmentScheduledTimeBeginDate">the scheduled time at which fulfillment will begin..</param>
        /// <param name="fulfillmentScheduledTimeEndDate">the scheduled time at which fulfillment will end..</param>
        /// <param name="isFinished">a flag indicating that fulfillment is complete for this shipment. .</param>
        /// <param name="nextStatuses">a list of the potential statuses the shipment could transition to from its current status..</param>
        /// <param name="renewFulfillmentTaskLockExpirationOnProcess">the whether the fulfillment task lock should be extended for another defined amount of time..</param>
        /// <param name="status">the current status of the shipment..</param>
        /// <param name="taskId">the task Id responsible for fulfilling the shipment.</param>
        public UpdateShipmentFulfillmentStateRequest(List<string> allowedManualTransitions = default(List<string>), List<string> allowedStatusChanges = default(List<string>), bool allowsShipmentChangesProcessing = default(bool), bool clearFulfillmentFailureMessages = default(bool), DateTime fulfillmentScheduledTimeBeginDate = default(DateTime), DateTime fulfillmentScheduledTimeEndDate = default(DateTime), bool isFinished = default(bool), List<string> nextStatuses = default(List<string>), string renewFulfillmentTaskLockExpirationOnProcess = default(string), string status = default(string), string taskId = default(string))
        {
            this.AllowedManualTransitions = allowedManualTransitions;
            this.AllowedStatusChanges = allowedStatusChanges;
            this.AllowsShipmentChangesProcessing = allowsShipmentChangesProcessing;
            this.ClearFulfillmentFailureMessages = clearFulfillmentFailureMessages;
            this.FulfillmentScheduledTimeBeginDate = fulfillmentScheduledTimeBeginDate;
            this.FulfillmentScheduledTimeEndDate = fulfillmentScheduledTimeEndDate;
            this.IsFinished = isFinished;
            this.NextStatuses = nextStatuses;
            this.RenewFulfillmentTaskLockExpirationOnProcess = renewFulfillmentTaskLockExpirationOnProcess;
            this.Status = status;
            this.TaskId = taskId;
        }

        /// <summary>
        /// a list of allowed manual transitions from the shipment current status.
        /// </summary>
        /// <value>a list of allowed manual transitions from the shipment current status.</value>
        [DataMember(Name = "allowedManualTransitions", EmitDefaultValue = false)]
        public List<string> AllowedManualTransitions { get; set; }

        /// <summary>
        /// a list of allowed status changes that can be requested.  Requesting any other changes will fail.
        /// </summary>
        /// <value>a list of allowed status changes that can be requested.  Requesting any other changes will fail.</value>
        [DataMember(Name = "allowedStatusChanges", EmitDefaultValue = false)]
        public List<string> AllowedStatusChanges { get; set; }

        /// <summary>
        /// whether the saving an order in the current state should resume a processing the order within the fulfillment process.
        /// </summary>
        /// <value>whether the saving an order in the current state should resume a processing the order within the fulfillment process.</value>
        [DataMember(Name = "allowsShipmentChangesProcessing", EmitDefaultValue = true)]
        public bool AllowsShipmentChangesProcessing { get; set; }

        /// <summary>
        /// whether clear state failure messages.
        /// </summary>
        /// <value>whether clear state failure messages.</value>
        [DataMember(Name = "clearFulfillmentFailureMessages", EmitDefaultValue = true)]
        public bool ClearFulfillmentFailureMessages { get; set; }

        /// <summary>
        /// the scheduled time at which fulfillment will begin.
        /// </summary>
        /// <value>the scheduled time at which fulfillment will begin.</value>
        [DataMember(Name = "fulfillmentScheduledTimeBeginDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduledTimeBeginDate { get; set; }

        /// <summary>
        /// the scheduled time at which fulfillment will end.
        /// </summary>
        /// <value>the scheduled time at which fulfillment will end.</value>
        [DataMember(Name = "fulfillmentScheduledTimeEndDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduledTimeEndDate { get; set; }

        /// <summary>
        /// a flag indicating that fulfillment is complete for this shipment. 
        /// </summary>
        /// <value>a flag indicating that fulfillment is complete for this shipment. </value>
        [DataMember(Name = "isFinished", EmitDefaultValue = true)]
        public bool IsFinished { get; set; }

        /// <summary>
        /// a list of the potential statuses the shipment could transition to from its current status.
        /// </summary>
        /// <value>a list of the potential statuses the shipment could transition to from its current status.</value>
        [DataMember(Name = "nextStatuses", EmitDefaultValue = false)]
        public List<string> NextStatuses { get; set; }

        /// <summary>
        /// the whether the fulfillment task lock should be extended for another defined amount of time.
        /// </summary>
        /// <value>the whether the fulfillment task lock should be extended for another defined amount of time.</value>
        [DataMember(Name = "renewFulfillmentTaskLockExpirationOnProcess", EmitDefaultValue = false)]
        public string RenewFulfillmentTaskLockExpirationOnProcess { get; set; }

        /// <summary>
        /// the current status of the shipment.
        /// </summary>
        /// <value>the current status of the shipment.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// the task Id responsible for fulfilling the shipment
        /// </summary>
        /// <value>the task Id responsible for fulfilling the shipment</value>
        [DataMember(Name = "taskId", EmitDefaultValue = false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateShipmentFulfillmentStateRequest {\n");
            sb.Append("  AllowedManualTransitions: ").Append(AllowedManualTransitions).Append("\n");
            sb.Append("  AllowedStatusChanges: ").Append(AllowedStatusChanges).Append("\n");
            sb.Append("  AllowsShipmentChangesProcessing: ").Append(AllowsShipmentChangesProcessing).Append("\n");
            sb.Append("  ClearFulfillmentFailureMessages: ").Append(ClearFulfillmentFailureMessages).Append("\n");
            sb.Append("  FulfillmentScheduledTimeBeginDate: ").Append(FulfillmentScheduledTimeBeginDate).Append("\n");
            sb.Append("  FulfillmentScheduledTimeEndDate: ").Append(FulfillmentScheduledTimeEndDate).Append("\n");
            sb.Append("  IsFinished: ").Append(IsFinished).Append("\n");
            sb.Append("  NextStatuses: ").Append(NextStatuses).Append("\n");
            sb.Append("  RenewFulfillmentTaskLockExpirationOnProcess: ").Append(RenewFulfillmentTaskLockExpirationOnProcess).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateShipmentFulfillmentStateRequest);
        }

        /// <summary>
        /// Returns true if UpdateShipmentFulfillmentStateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateShipmentFulfillmentStateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateShipmentFulfillmentStateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowedManualTransitions == input.AllowedManualTransitions ||
                    this.AllowedManualTransitions != null &&
                    input.AllowedManualTransitions != null &&
                    this.AllowedManualTransitions.SequenceEqual(input.AllowedManualTransitions)
                ) && 
                (
                    this.AllowedStatusChanges == input.AllowedStatusChanges ||
                    this.AllowedStatusChanges != null &&
                    input.AllowedStatusChanges != null &&
                    this.AllowedStatusChanges.SequenceEqual(input.AllowedStatusChanges)
                ) && 
                (
                    this.AllowsShipmentChangesProcessing == input.AllowsShipmentChangesProcessing ||
                    this.AllowsShipmentChangesProcessing.Equals(input.AllowsShipmentChangesProcessing)
                ) && 
                (
                    this.ClearFulfillmentFailureMessages == input.ClearFulfillmentFailureMessages ||
                    this.ClearFulfillmentFailureMessages.Equals(input.ClearFulfillmentFailureMessages)
                ) && 
                (
                    this.FulfillmentScheduledTimeBeginDate == input.FulfillmentScheduledTimeBeginDate ||
                    (this.FulfillmentScheduledTimeBeginDate != null &&
                    this.FulfillmentScheduledTimeBeginDate.Equals(input.FulfillmentScheduledTimeBeginDate))
                ) && 
                (
                    this.FulfillmentScheduledTimeEndDate == input.FulfillmentScheduledTimeEndDate ||
                    (this.FulfillmentScheduledTimeEndDate != null &&
                    this.FulfillmentScheduledTimeEndDate.Equals(input.FulfillmentScheduledTimeEndDate))
                ) && 
                (
                    this.IsFinished == input.IsFinished ||
                    this.IsFinished.Equals(input.IsFinished)
                ) && 
                (
                    this.NextStatuses == input.NextStatuses ||
                    this.NextStatuses != null &&
                    input.NextStatuses != null &&
                    this.NextStatuses.SequenceEqual(input.NextStatuses)
                ) && 
                (
                    this.RenewFulfillmentTaskLockExpirationOnProcess == input.RenewFulfillmentTaskLockExpirationOnProcess ||
                    (this.RenewFulfillmentTaskLockExpirationOnProcess != null &&
                    this.RenewFulfillmentTaskLockExpirationOnProcess.Equals(input.RenewFulfillmentTaskLockExpirationOnProcess))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowedManualTransitions != null)
                    hashCode = hashCode * 59 + this.AllowedManualTransitions.GetHashCode();
                if (this.AllowedStatusChanges != null)
                    hashCode = hashCode * 59 + this.AllowedStatusChanges.GetHashCode();
                hashCode = hashCode * 59 + this.AllowsShipmentChangesProcessing.GetHashCode();
                hashCode = hashCode * 59 + this.ClearFulfillmentFailureMessages.GetHashCode();
                if (this.FulfillmentScheduledTimeBeginDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduledTimeBeginDate.GetHashCode();
                if (this.FulfillmentScheduledTimeEndDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduledTimeEndDate.GetHashCode();
                hashCode = hashCode * 59 + this.IsFinished.GetHashCode();
                if (this.NextStatuses != null)
                    hashCode = hashCode * 59 + this.NextStatuses.GetHashCode();
                if (this.RenewFulfillmentTaskLockExpirationOnProcess != null)
                    hashCode = hashCode * 59 + this.RenewFulfillmentTaskLockExpirationOnProcess.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
