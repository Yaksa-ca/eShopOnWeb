/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Orders are entities which represent an order of a customer.
    /// </summary>
    [DataContract(Name = "CopyCartFromOrderRequest")]
    public partial class CopyCartFromOrderRequest : IEquatable<CopyCartFromOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CopyCartFromOrderRequest" /> class.
        /// </summary>
        /// <param name="cartName">The name of cart to be copied..</param>
        /// <param name="keepExistingLineItems">Indicator to keep existing cart line items or not..</param>
        public CopyCartFromOrderRequest(string cartName = default(string), bool keepExistingLineItems = default(bool))
        {
            this.CartName = cartName;
            this.KeepExistingLineItems = keepExistingLineItems;
        }

        /// <summary>
        /// The name of cart to be copied.
        /// </summary>
        /// <value>The name of cart to be copied.</value>
        [DataMember(Name = "cartName", EmitDefaultValue = false)]
        public string CartName { get; set; }

        /// <summary>
        /// Indicator to keep existing cart line items or not.
        /// </summary>
        /// <value>Indicator to keep existing cart line items or not.</value>
        [DataMember(Name = "keepExistingLineItems", EmitDefaultValue = true)]
        public bool KeepExistingLineItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CopyCartFromOrderRequest {\n");
            sb.Append("  CartName: ").Append(CartName).Append("\n");
            sb.Append("  KeepExistingLineItems: ").Append(KeepExistingLineItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CopyCartFromOrderRequest);
        }

        /// <summary>
        /// Returns true if CopyCartFromOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CopyCartFromOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CopyCartFromOrderRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CartName == input.CartName ||
                    (this.CartName != null &&
                    this.CartName.Equals(input.CartName))
                ) && 
                (
                    this.KeepExistingLineItems == input.KeepExistingLineItems ||
                    this.KeepExistingLineItems.Equals(input.KeepExistingLineItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CartName != null)
                    hashCode = hashCode * 59 + this.CartName.GetHashCode();
                hashCode = hashCode * 59 + this.KeepExistingLineItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
