/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ProductByCategoryAndState
    /// </summary>
    [DataContract(Name = "ProductByCategoryAndState")]
    public partial class ProductByCategoryAndState : IEquatable<ProductByCategoryAndState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductByCategoryAndState" /> class.
        /// </summary>
        /// <param name="productId">the unique identifier of Product.</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="brand">brand.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="draftState">draftState.</param>
        /// <param name="hasChangeModification">hasChangeModification.</param>
        /// <param name="hasVariant">hasVariant.</param>
        /// <param name="isNew">isNew.</param>
        /// <param name="sku">sku.</param>
        public ProductByCategoryAndState(string productId = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string brand = default(string), string displayName = default(string), string draftState = default(string), bool hasChangeModification = default(bool), bool hasVariant = default(bool), bool isNew = default(bool), string sku = default(string))
        {
            this.ProductId = productId;
            this.PropertyBag = propertyBag;
            this.Brand = brand;
            this.DisplayName = displayName;
            this.DraftState = draftState;
            this.HasChangeModification = hasChangeModification;
            this.HasVariant = hasVariant;
            this.IsNew = isNew;
            this.Sku = sku;
        }

        /// <summary>
        /// the unique identifier of Product
        /// </summary>
        /// <value>the unique identifier of Product</value>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets DraftState
        /// </summary>
        [DataMember(Name = "draftState", EmitDefaultValue = false)]
        public string DraftState { get; set; }

        /// <summary>
        /// Gets or Sets HasChangeModification
        /// </summary>
        [DataMember(Name = "hasChangeModification", EmitDefaultValue = true)]
        public bool HasChangeModification { get; set; }

        /// <summary>
        /// Gets or Sets HasVariant
        /// </summary>
        [DataMember(Name = "hasVariant", EmitDefaultValue = true)]
        public bool HasVariant { get; set; }

        /// <summary>
        /// Gets or Sets IsNew
        /// </summary>
        [DataMember(Name = "isNew", EmitDefaultValue = true)]
        public bool IsNew { get; set; }

        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductByCategoryAndState {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DraftState: ").Append(DraftState).Append("\n");
            sb.Append("  HasChangeModification: ").Append(HasChangeModification).Append("\n");
            sb.Append("  HasVariant: ").Append(HasVariant).Append("\n");
            sb.Append("  IsNew: ").Append(IsNew).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductByCategoryAndState);
        }

        /// <summary>
        /// Returns true if ProductByCategoryAndState instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductByCategoryAndState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductByCategoryAndState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.DraftState == input.DraftState ||
                    (this.DraftState != null &&
                    this.DraftState.Equals(input.DraftState))
                ) && 
                (
                    this.HasChangeModification == input.HasChangeModification ||
                    this.HasChangeModification.Equals(input.HasChangeModification)
                ) && 
                (
                    this.HasVariant == input.HasVariant ||
                    this.HasVariant.Equals(input.HasVariant)
                ) && 
                (
                    this.IsNew == input.IsNew ||
                    this.IsNew.Equals(input.IsNew)
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.DraftState != null)
                    hashCode = hashCode * 59 + this.DraftState.GetHashCode();
                hashCode = hashCode * 59 + this.HasChangeModification.GetHashCode();
                hashCode = hashCode * 59 + this.HasVariant.GetHashCode();
                hashCode = hashCode * 59 + this.IsNew.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
