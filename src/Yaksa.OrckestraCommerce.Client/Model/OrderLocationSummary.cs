/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// OrderLocationSummary
    /// </summary>
    [DataContract(Name = "OrderLocationSummary")]
    public partial class OrderLocationSummary : IEquatable<OrderLocationSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLocationSummary" /> class.
        /// </summary>
        /// <param name="email">Get or set the email of the order location that will process the cart and to which the order is associated..</param>
        /// <param name="name">Get or set the name of the order location that will process the cart and to which the order is associated..</param>
        /// <param name="number">Get or set the sytem wide unique number of the order location that will process the cart and to which the order is associated..</param>
        /// <param name="timeZone">Get or set TimeZone email of the order location that will process the cart and to which the order is associated..</param>
        public OrderLocationSummary(string email = default(string), string name = default(string), string number = default(string), string timeZone = default(string))
        {
            this.Email = email;
            this.Name = name;
            this.Number = number;
            this.TimeZone = timeZone;
        }

        /// <summary>
        /// Get or set the email of the order location that will process the cart and to which the order is associated.
        /// </summary>
        /// <value>Get or set the email of the order location that will process the cart and to which the order is associated.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Get or set the name of the order location that will process the cart and to which the order is associated.
        /// </summary>
        /// <value>Get or set the name of the order location that will process the cart and to which the order is associated.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Get or set the sytem wide unique number of the order location that will process the cart and to which the order is associated.
        /// </summary>
        /// <value>Get or set the sytem wide unique number of the order location that will process the cart and to which the order is associated.</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Get or set TimeZone email of the order location that will process the cart and to which the order is associated.
        /// </summary>
        /// <value>Get or set TimeZone email of the order location that will process the cart and to which the order is associated.</value>
        [DataMember(Name = "timeZone", EmitDefaultValue = false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLocationSummary {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderLocationSummary);
        }

        /// <summary>
        /// Returns true if OrderLocationSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderLocationSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLocationSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
