/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Providers are generic entities containing configuration settings for various need.
    /// </summary>
    [DataContract(Name = "GetProvidersRequest")]
    public partial class GetProvidersRequest : IEquatable<GetProvidersRequest>, IValidatableObject
    {
        /// <summary>
        /// Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers.
        /// </summary>
        /// <value>Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProviderTypeEnum
        {
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 1,

            /// <summary>
            /// Enum StoreLocator for value: StoreLocator
            /// </summary>
            [EnumMember(Value = "StoreLocator")]
            StoreLocator = 2,

            /// <summary>
            /// Enum Geolocation for value: Geolocation
            /// </summary>
            [EnumMember(Value = "Geolocation")]
            Geolocation = 3,

            /// <summary>
            /// Enum PrintOrder for value: PrintOrder
            /// </summary>
            [EnumMember(Value = "PrintOrder")]
            PrintOrder = 4,

            /// <summary>
            /// Enum PrintShipment for value: PrintShipment
            /// </summary>
            [EnumMember(Value = "PrintShipment")]
            PrintShipment = 5,

            /// <summary>
            /// Enum OrderProcessing for value: OrderProcessing
            /// </summary>
            [EnumMember(Value = "OrderProcessing")]
            OrderProcessing = 6,

            /// <summary>
            /// Enum Shipping for value: Shipping
            /// </summary>
            [EnumMember(Value = "Shipping")]
            Shipping = 7,

            /// <summary>
            /// Enum Payment for value: Payment
            /// </summary>
            [EnumMember(Value = "Payment")]
            Payment = 8,

            /// <summary>
            /// Enum Tax for value: Tax
            /// </summary>
            [EnumMember(Value = "Tax")]
            Tax = 9,

            /// <summary>
            /// Enum Rounding for value: Rounding
            /// </summary>
            [EnumMember(Value = "Rounding")]
            Rounding = 10,

            /// <summary>
            /// Enum TargetingContext for value: TargetingContext
            /// </summary>
            [EnumMember(Value = "TargetingContext")]
            TargetingContext = 11,

            /// <summary>
            /// Enum OrderNumberGenerator for value: OrderNumberGenerator
            /// </summary>
            [EnumMember(Value = "OrderNumberGenerator")]
            OrderNumberGenerator = 12,

            /// <summary>
            /// Enum RmaNumberGenerator for value: RmaNumberGenerator
            /// </summary>
            [EnumMember(Value = "RmaNumberGenerator")]
            RmaNumberGenerator = 13,

            /// <summary>
            /// Enum DigitalAssetManagement for value: DigitalAssetManagement
            /// </summary>
            [EnumMember(Value = "DigitalAssetManagement")]
            DigitalAssetManagement = 14,

            /// <summary>
            /// Enum DirectoryProvider for value: DirectoryProvider
            /// </summary>
            [EnumMember(Value = "DirectoryProvider")]
            DirectoryProvider = 15,

            /// <summary>
            /// Enum MembershipProvider for value: MembershipProvider
            /// </summary>
            [EnumMember(Value = "MembershipProvider")]
            MembershipProvider = 16,

            /// <summary>
            /// Enum Inventory for value: Inventory
            /// </summary>
            [EnumMember(Value = "Inventory")]
            Inventory = 17,

            /// <summary>
            /// Enum Audit for value: Audit
            /// </summary>
            [EnumMember(Value = "Audit")]
            Audit = 18,

            /// <summary>
            /// Enum SlotInstance for value: SlotInstance
            /// </summary>
            [EnumMember(Value = "SlotInstance")]
            SlotInstance = 19,

            /// <summary>
            /// Enum PriceCalculator for value: PriceCalculator
            /// </summary>
            [EnumMember(Value = "PriceCalculator")]
            PriceCalculator = 20,

            /// <summary>
            /// Enum SearchPriceCalculator for value: SearchPriceCalculator
            /// </summary>
            [EnumMember(Value = "SearchPriceCalculator")]
            SearchPriceCalculator = 21,

            /// <summary>
            /// Enum Search for value: Search
            /// </summary>
            [EnumMember(Value = "Search")]
            Search = 22,

            /// <summary>
            /// Enum BlobStorage for value: BlobStorage
            /// </summary>
            [EnumMember(Value = "BlobStorage")]
            BlobStorage = 23,

            /// <summary>
            /// Enum ShipmentProcessingDate for value: ShipmentProcessingDate
            /// </summary>
            [EnumMember(Value = "ShipmentProcessingDate")]
            ShipmentProcessingDate = 24,

            /// <summary>
            /// Enum ProductImportParser for value: ProductImportParser
            /// </summary>
            [EnumMember(Value = "ProductImportParser")]
            ProductImportParser = 25,

            /// <summary>
            /// Enum DataExchange for value: DataExchange
            /// </summary>
            [EnumMember(Value = "DataExchange")]
            DataExchange = 26,

            /// <summary>
            /// Enum ProductDataExchangeImport for value: ProductDataExchangeImport
            /// </summary>
            [EnumMember(Value = "ProductDataExchangeImport")]
            ProductDataExchangeImport = 27,

            /// <summary>
            /// Enum ProductDataExchangeExport for value: ProductDataExchangeExport
            /// </summary>
            [EnumMember(Value = "ProductDataExchangeExport")]
            ProductDataExchangeExport = 28,

            /// <summary>
            /// Enum ProductPriceDataExchangeImport for value: ProductPriceDataExchangeImport
            /// </summary>
            [EnumMember(Value = "ProductPriceDataExchangeImport")]
            ProductPriceDataExchangeImport = 29,

            /// <summary>
            /// Enum ProductPriceDataExchangeExport for value: ProductPriceDataExchangeExport
            /// </summary>
            [EnumMember(Value = "ProductPriceDataExchangeExport")]
            ProductPriceDataExchangeExport = 30,

            /// <summary>
            /// Enum MailProvider for value: MailProvider
            /// </summary>
            [EnumMember(Value = "MailProvider")]
            MailProvider = 31,

            /// <summary>
            /// Enum NotificationProvider for value: NotificationProvider
            /// </summary>
            [EnumMember(Value = "NotificationProvider")]
            NotificationProvider = 32,

            /// <summary>
            /// Enum OrderImportParser for value: OrderImportParser
            /// </summary>
            [EnumMember(Value = "OrderImportParser")]
            OrderImportParser = 33,

            /// <summary>
            /// Enum PromotionLineItemValidator for value: PromotionLineItemValidator
            /// </summary>
            [EnumMember(Value = "PromotionLineItemValidator")]
            PromotionLineItemValidator = 34,

            /// <summary>
            /// Enum PickingMissionNumberGenerator for value: PickingMissionNumberGenerator
            /// </summary>
            [EnumMember(Value = "PickingMissionNumberGenerator")]
            PickingMissionNumberGenerator = 35,

            /// <summary>
            /// Enum FulfillmentCarrier for value: FulfillmentCarrier
            /// </summary>
            [EnumMember(Value = "FulfillmentCarrier")]
            FulfillmentCarrier = 36,

            /// <summary>
            /// Enum FulfillmentRouting for value: FulfillmentRouting
            /// </summary>
            [EnumMember(Value = "FulfillmentRouting")]
            FulfillmentRouting = 37

        }


        /// <summary>
        /// Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers.
        /// </summary>
        /// <value>Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers.</value>
        [DataMember(Name = "providerType", EmitDefaultValue = false)]
        public ProviderTypeEnum? ProviderType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProvidersRequest" /> class.
        /// </summary>
        /// <param name="scopeId">The id of the requested scope.</param>
        /// <param name="includeParentScopes">Determine if parent scopes are considered when retrieving providers..</param>
        /// <param name="providerType">Type of this provider: [&#39;Undefined&#39; or &#39;StoreLocator&#39; or &#39;Geolocation&#39; or &#39;PrintOrder&#39; or &#39;PrintShipment&#39; or &#39;OrderProcessing&#39; or &#39;Shipping&#39; or &#39;Payment&#39; or &#39;Tax&#39; or &#39;Rounding&#39; or &#39;TargetingContext&#39; or &#39;OrderNumberGenerator&#39; or &#39;RmaNumberGenerator&#39; or &#39;DigitalAssetManagement&#39; or &#39;DirectoryProvider&#39; or &#39;MembershipProvider&#39; or &#39;Inventory&#39; or &#39;Audit&#39; or &#39;SlotInstance&#39; or &#39;PriceCalculator&#39; or &#39;SearchPriceCalculator&#39; or &#39;Search&#39; or &#39;BlobStorage&#39; or &#39;ShipmentProcessingDate&#39; or &#39;ProductImportParser&#39; or &#39;DataExchange&#39; or &#39;ProductDataExchangeImport&#39; or &#39;ProductDataExchangeExport&#39; or &#39;ProductPriceDataExchangeImport&#39; or &#39;ProductPriceDataExchangeExport&#39; or &#39;MailProvider&#39; or &#39;NotificationProvider&#39; or &#39;OrderImportParser&#39; or &#39;PromotionLineItemValidator&#39; or &#39;PickingMissionNumberGenerator&#39; or &#39;FulfillmentCarrier&#39; or &#39;FulfillmentRouting&#39;]  // Note: &#39;Undefined&#39; retrieves all providers..</param>
        public GetProvidersRequest(string scopeId = default(string), bool includeParentScopes = default(bool), ProviderTypeEnum? providerType = default(ProviderTypeEnum?))
        {
            this.ScopeId = scopeId;
            this.IncludeParentScopes = includeParentScopes;
            this.ProviderType = providerType;
        }

        /// <summary>
        /// The id of the requested scope
        /// </summary>
        /// <value>The id of the requested scope</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// Determine if parent scopes are considered when retrieving providers.
        /// </summary>
        /// <value>Determine if parent scopes are considered when retrieving providers.</value>
        [DataMember(Name = "includeParentScopes", EmitDefaultValue = true)]
        public bool IncludeParentScopes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetProvidersRequest {\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  IncludeParentScopes: ").Append(IncludeParentScopes).Append("\n");
            sb.Append("  ProviderType: ").Append(ProviderType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetProvidersRequest);
        }

        /// <summary>
        /// Returns true if GetProvidersRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetProvidersRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProvidersRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.IncludeParentScopes == input.IncludeParentScopes ||
                    this.IncludeParentScopes.Equals(input.IncludeParentScopes)
                ) && 
                (
                    this.ProviderType == input.ProviderType ||
                    this.ProviderType.Equals(input.ProviderType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeParentScopes.GetHashCode();
                hashCode = hashCode * 59 + this.ProviderType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
