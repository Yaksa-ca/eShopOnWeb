/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ProductPropertyDefinition
    /// </summary>
    [DataContract(Name = "ProductPropertyDefinition")]
    public partial class ProductPropertyDefinition : IEquatable<ProductPropertyDefinition>, IValidatableObject
    {
        /// <summary>
        /// The data type of the value saved in the attribute
        /// </summary>
        /// <value>The data type of the value saved in the attribute</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataTypeEnum
        {
            /// <summary>
            /// Enum Number for value: Number
            /// </summary>
            [EnumMember(Value = "Number")]
            Number = 1,

            /// <summary>
            /// Enum Boolean for value: Boolean
            /// </summary>
            [EnumMember(Value = "Boolean")]
            Boolean = 2,

            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 3,

            /// <summary>
            /// Enum DateTime for value: DateTime
            /// </summary>
            [EnumMember(Value = "DateTime")]
            DateTime = 4,

            /// <summary>
            /// Enum Decimal for value: Decimal
            /// </summary>
            [EnumMember(Value = "Decimal")]
            Decimal = 5,

            /// <summary>
            /// Enum Currency for value: Currency
            /// </summary>
            [EnumMember(Value = "Currency")]
            Currency = 6,

            /// <summary>
            /// Enum Lookup for value: Lookup
            /// </summary>
            [EnumMember(Value = "Lookup")]
            Lookup = 7,

            /// <summary>
            /// Enum RichText for value: RichText
            /// </summary>
            [EnumMember(Value = "RichText")]
            RichText = 8

        }


        /// <summary>
        /// The data type of the value saved in the attribute
        /// </summary>
        /// <value>The data type of the value saved in the attribute</value>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public DataTypeEnum? DataType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPropertyDefinition" /> class.
        /// </summary>
        /// <param name="dataType">The data type of the value saved in the attribute.</param>
        /// <param name="defaultValue">Object.</param>
        /// <param name="description">A description explaining the purpose of the attribute. Not multilingual.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="displayOrder">A number defining in what order the attribute will be sort in the list of attributes.</param>
        /// <param name="groupName">The name (business key) of the group associated to the attribute.</param>
        /// <param name="includeInAllCategoryDefinition">Whether to automatically include this attribute in every category definition.</param>
        /// <param name="includeInAllProductDefinition">Whether to automatically include this attribute in every product definitio.</param>
        /// <param name="includeInAllVariantDefinition">Whether to automatically include this attribute in every variant definition.</param>
        /// <param name="isFacettableAdmin">Whether the attribute is facettable when admin..</param>
        /// <param name="isFacettableWeb">Whether the attribute is facettable when web..</param>
        /// <param name="isHiddenInOrchestrator">Whether the attribute is hidden in the orchestrator.</param>
        /// <param name="isKeyVariant">Whether the attribute is a key for variant..</param>
        /// <param name="isRequired">Whether a value for the attribute is required.</param>
        /// <param name="isSystem">Whether the attribute is a system defined attribute or custom user defined.</param>
        /// <param name="isVariant">Whether the attribute is a variant..</param>
        /// <param name="isVariantGroup">Whether the attribute is a group for variant..</param>
        /// <param name="keyVariantOrder">The Order of the Variant attribute key..</param>
        /// <param name="localizable">Whether the attribute can have multiple values, one per culture.</param>
        /// <param name="lookupDefinition">lookupDefinition.</param>
        /// <param name="maximumValue">Object.</param>
        /// <param name="maxMultiplicity">Max multiplicity of the attribute..</param>
        /// <param name="minimumValue">Object.</param>
        /// <param name="propertyName">The name (business key, un-editable) of the attribute.</param>
        public ProductPropertyDefinition(DataTypeEnum? dataType = default(DataTypeEnum?), Object defaultValue = default(Object), string description = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), int displayOrder = default(int), string groupName = default(string), bool includeInAllCategoryDefinition = default(bool), bool includeInAllProductDefinition = default(bool), bool includeInAllVariantDefinition = default(bool), bool isFacettableAdmin = default(bool), bool isFacettableWeb = default(bool), bool isHiddenInOrchestrator = default(bool), bool isKeyVariant = default(bool), bool isRequired = default(bool), bool isSystem = default(bool), bool isVariant = default(bool), bool isVariantGroup = default(bool), int keyVariantOrder = default(int), bool localizable = default(bool), ProductLookupDefinition lookupDefinition = default(ProductLookupDefinition), Object maximumValue = default(Object), string maxMultiplicity = default(string), Object minimumValue = default(Object), string propertyName = default(string))
        {
            this.DataType = dataType;
            this.DefaultValue = defaultValue;
            this.Description = description;
            this.DisplayName = displayName;
            this.DisplayOrder = displayOrder;
            this.GroupName = groupName;
            this.IncludeInAllCategoryDefinition = includeInAllCategoryDefinition;
            this.IncludeInAllProductDefinition = includeInAllProductDefinition;
            this.IncludeInAllVariantDefinition = includeInAllVariantDefinition;
            this.IsFacettableAdmin = isFacettableAdmin;
            this.IsFacettableWeb = isFacettableWeb;
            this.IsHiddenInOrchestrator = isHiddenInOrchestrator;
            this.IsKeyVariant = isKeyVariant;
            this.IsRequired = isRequired;
            this.IsSystem = isSystem;
            this.IsVariant = isVariant;
            this.IsVariantGroup = isVariantGroup;
            this.KeyVariantOrder = keyVariantOrder;
            this.Localizable = localizable;
            this.LookupDefinition = lookupDefinition;
            this.MaximumValue = maximumValue;
            this.MaxMultiplicity = maxMultiplicity;
            this.MinimumValue = minimumValue;
            this.PropertyName = propertyName;
        }

        /// <summary>
        /// Object
        /// </summary>
        /// <value>Object</value>
        [DataMember(Name = "defaultValue", EmitDefaultValue = false)]
        public Object DefaultValue { get; set; }

        /// <summary>
        /// A description explaining the purpose of the attribute. Not multilingual
        /// </summary>
        /// <value>A description explaining the purpose of the attribute. Not multilingual</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// A number defining in what order the attribute will be sort in the list of attributes
        /// </summary>
        /// <value>A number defining in what order the attribute will be sort in the list of attributes</value>
        [DataMember(Name = "displayOrder", EmitDefaultValue = false)]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// The name (business key) of the group associated to the attribute
        /// </summary>
        /// <value>The name (business key) of the group associated to the attribute</value>
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Whether to automatically include this attribute in every category definition
        /// </summary>
        /// <value>Whether to automatically include this attribute in every category definition</value>
        [DataMember(Name = "includeInAllCategoryDefinition", EmitDefaultValue = true)]
        public bool IncludeInAllCategoryDefinition { get; set; }

        /// <summary>
        /// Whether to automatically include this attribute in every product definitio
        /// </summary>
        /// <value>Whether to automatically include this attribute in every product definitio</value>
        [DataMember(Name = "includeInAllProductDefinition", EmitDefaultValue = true)]
        public bool IncludeInAllProductDefinition { get; set; }

        /// <summary>
        /// Whether to automatically include this attribute in every variant definition
        /// </summary>
        /// <value>Whether to automatically include this attribute in every variant definition</value>
        [DataMember(Name = "includeInAllVariantDefinition", EmitDefaultValue = true)]
        public bool IncludeInAllVariantDefinition { get; set; }

        /// <summary>
        /// Whether the attribute is facettable when admin.
        /// </summary>
        /// <value>Whether the attribute is facettable when admin.</value>
        [DataMember(Name = "isFacettableAdmin", EmitDefaultValue = true)]
        public bool IsFacettableAdmin { get; set; }

        /// <summary>
        /// Whether the attribute is facettable when web.
        /// </summary>
        /// <value>Whether the attribute is facettable when web.</value>
        [DataMember(Name = "isFacettableWeb", EmitDefaultValue = true)]
        public bool IsFacettableWeb { get; set; }

        /// <summary>
        /// Whether the attribute is hidden in the orchestrator
        /// </summary>
        /// <value>Whether the attribute is hidden in the orchestrator</value>
        [DataMember(Name = "isHiddenInOrchestrator", EmitDefaultValue = true)]
        public bool IsHiddenInOrchestrator { get; set; }

        /// <summary>
        /// Whether the attribute is a key for variant.
        /// </summary>
        /// <value>Whether the attribute is a key for variant.</value>
        [DataMember(Name = "isKeyVariant", EmitDefaultValue = true)]
        public bool IsKeyVariant { get; set; }

        /// <summary>
        /// Whether a value for the attribute is required
        /// </summary>
        /// <value>Whether a value for the attribute is required</value>
        [DataMember(Name = "isRequired", EmitDefaultValue = true)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// Whether the attribute is a system defined attribute or custom user defined
        /// </summary>
        /// <value>Whether the attribute is a system defined attribute or custom user defined</value>
        [DataMember(Name = "isSystem", EmitDefaultValue = true)]
        public bool IsSystem { get; set; }

        /// <summary>
        /// Whether the attribute is a variant.
        /// </summary>
        /// <value>Whether the attribute is a variant.</value>
        [DataMember(Name = "isVariant", EmitDefaultValue = true)]
        public bool IsVariant { get; set; }

        /// <summary>
        /// Whether the attribute is a group for variant.
        /// </summary>
        /// <value>Whether the attribute is a group for variant.</value>
        [DataMember(Name = "isVariantGroup", EmitDefaultValue = true)]
        public bool IsVariantGroup { get; set; }

        /// <summary>
        /// The Order of the Variant attribute key.
        /// </summary>
        /// <value>The Order of the Variant attribute key.</value>
        [DataMember(Name = "keyVariantOrder", EmitDefaultValue = false)]
        public int KeyVariantOrder { get; set; }

        /// <summary>
        /// Whether the attribute can have multiple values, one per culture
        /// </summary>
        /// <value>Whether the attribute can have multiple values, one per culture</value>
        [DataMember(Name = "localizable", EmitDefaultValue = true)]
        public bool Localizable { get; set; }

        /// <summary>
        /// Gets or Sets LookupDefinition
        /// </summary>
        [DataMember(Name = "lookupDefinition", EmitDefaultValue = false)]
        public ProductLookupDefinition LookupDefinition { get; set; }

        /// <summary>
        /// Object
        /// </summary>
        /// <value>Object</value>
        [DataMember(Name = "maximumValue", EmitDefaultValue = false)]
        public Object MaximumValue { get; set; }

        /// <summary>
        /// Max multiplicity of the attribute.
        /// </summary>
        /// <value>Max multiplicity of the attribute.</value>
        [DataMember(Name = "maxMultiplicity", EmitDefaultValue = false)]
        public string MaxMultiplicity { get; set; }

        /// <summary>
        /// Object
        /// </summary>
        /// <value>Object</value>
        [DataMember(Name = "minimumValue", EmitDefaultValue = false)]
        public Object MinimumValue { get; set; }

        /// <summary>
        /// The name (business key, un-editable) of the attribute
        /// </summary>
        /// <value>The name (business key, un-editable) of the attribute</value>
        [DataMember(Name = "propertyName", EmitDefaultValue = false)]
        public string PropertyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductPropertyDefinition {\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  IncludeInAllCategoryDefinition: ").Append(IncludeInAllCategoryDefinition).Append("\n");
            sb.Append("  IncludeInAllProductDefinition: ").Append(IncludeInAllProductDefinition).Append("\n");
            sb.Append("  IncludeInAllVariantDefinition: ").Append(IncludeInAllVariantDefinition).Append("\n");
            sb.Append("  IsFacettableAdmin: ").Append(IsFacettableAdmin).Append("\n");
            sb.Append("  IsFacettableWeb: ").Append(IsFacettableWeb).Append("\n");
            sb.Append("  IsHiddenInOrchestrator: ").Append(IsHiddenInOrchestrator).Append("\n");
            sb.Append("  IsKeyVariant: ").Append(IsKeyVariant).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  IsVariant: ").Append(IsVariant).Append("\n");
            sb.Append("  IsVariantGroup: ").Append(IsVariantGroup).Append("\n");
            sb.Append("  KeyVariantOrder: ").Append(KeyVariantOrder).Append("\n");
            sb.Append("  Localizable: ").Append(Localizable).Append("\n");
            sb.Append("  LookupDefinition: ").Append(LookupDefinition).Append("\n");
            sb.Append("  MaximumValue: ").Append(MaximumValue).Append("\n");
            sb.Append("  MaxMultiplicity: ").Append(MaxMultiplicity).Append("\n");
            sb.Append("  MinimumValue: ").Append(MinimumValue).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductPropertyDefinition);
        }

        /// <summary>
        /// Returns true if ProductPropertyDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductPropertyDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductPropertyDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataType == input.DataType ||
                    this.DataType.Equals(input.DataType)
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    this.DisplayOrder.Equals(input.DisplayOrder)
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.IncludeInAllCategoryDefinition == input.IncludeInAllCategoryDefinition ||
                    this.IncludeInAllCategoryDefinition.Equals(input.IncludeInAllCategoryDefinition)
                ) && 
                (
                    this.IncludeInAllProductDefinition == input.IncludeInAllProductDefinition ||
                    this.IncludeInAllProductDefinition.Equals(input.IncludeInAllProductDefinition)
                ) && 
                (
                    this.IncludeInAllVariantDefinition == input.IncludeInAllVariantDefinition ||
                    this.IncludeInAllVariantDefinition.Equals(input.IncludeInAllVariantDefinition)
                ) && 
                (
                    this.IsFacettableAdmin == input.IsFacettableAdmin ||
                    this.IsFacettableAdmin.Equals(input.IsFacettableAdmin)
                ) && 
                (
                    this.IsFacettableWeb == input.IsFacettableWeb ||
                    this.IsFacettableWeb.Equals(input.IsFacettableWeb)
                ) && 
                (
                    this.IsHiddenInOrchestrator == input.IsHiddenInOrchestrator ||
                    this.IsHiddenInOrchestrator.Equals(input.IsHiddenInOrchestrator)
                ) && 
                (
                    this.IsKeyVariant == input.IsKeyVariant ||
                    this.IsKeyVariant.Equals(input.IsKeyVariant)
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    this.IsRequired.Equals(input.IsRequired)
                ) && 
                (
                    this.IsSystem == input.IsSystem ||
                    this.IsSystem.Equals(input.IsSystem)
                ) && 
                (
                    this.IsVariant == input.IsVariant ||
                    this.IsVariant.Equals(input.IsVariant)
                ) && 
                (
                    this.IsVariantGroup == input.IsVariantGroup ||
                    this.IsVariantGroup.Equals(input.IsVariantGroup)
                ) && 
                (
                    this.KeyVariantOrder == input.KeyVariantOrder ||
                    this.KeyVariantOrder.Equals(input.KeyVariantOrder)
                ) && 
                (
                    this.Localizable == input.Localizable ||
                    this.Localizable.Equals(input.Localizable)
                ) && 
                (
                    this.LookupDefinition == input.LookupDefinition ||
                    (this.LookupDefinition != null &&
                    this.LookupDefinition.Equals(input.LookupDefinition))
                ) && 
                (
                    this.MaximumValue == input.MaximumValue ||
                    (this.MaximumValue != null &&
                    this.MaximumValue.Equals(input.MaximumValue))
                ) && 
                (
                    this.MaxMultiplicity == input.MaxMultiplicity ||
                    (this.MaxMultiplicity != null &&
                    this.MaxMultiplicity.Equals(input.MaxMultiplicity))
                ) && 
                (
                    this.MinimumValue == input.MinimumValue ||
                    (this.MinimumValue != null &&
                    this.MinimumValue.Equals(input.MinimumValue))
                ) && 
                (
                    this.PropertyName == input.PropertyName ||
                    (this.PropertyName != null &&
                    this.PropertyName.Equals(input.PropertyName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.GroupName != null)
                    hashCode = hashCode * 59 + this.GroupName.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeInAllCategoryDefinition.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeInAllProductDefinition.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeInAllVariantDefinition.GetHashCode();
                hashCode = hashCode * 59 + this.IsFacettableAdmin.GetHashCode();
                hashCode = hashCode * 59 + this.IsFacettableWeb.GetHashCode();
                hashCode = hashCode * 59 + this.IsHiddenInOrchestrator.GetHashCode();
                hashCode = hashCode * 59 + this.IsKeyVariant.GetHashCode();
                hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                hashCode = hashCode * 59 + this.IsSystem.GetHashCode();
                hashCode = hashCode * 59 + this.IsVariant.GetHashCode();
                hashCode = hashCode * 59 + this.IsVariantGroup.GetHashCode();
                hashCode = hashCode * 59 + this.KeyVariantOrder.GetHashCode();
                hashCode = hashCode * 59 + this.Localizable.GetHashCode();
                if (this.LookupDefinition != null)
                    hashCode = hashCode * 59 + this.LookupDefinition.GetHashCode();
                if (this.MaximumValue != null)
                    hashCode = hashCode * 59 + this.MaximumValue.GetHashCode();
                if (this.MaxMultiplicity != null)
                    hashCode = hashCode * 59 + this.MaxMultiplicity.GetHashCode();
                if (this.MinimumValue != null)
                    hashCode = hashCode * 59 + this.MinimumValue.GetHashCode();
                if (this.PropertyName != null)
                    hashCode = hashCode * 59 + this.PropertyName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
