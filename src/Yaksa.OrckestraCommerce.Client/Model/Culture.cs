/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Culture
    /// </summary>
    [DataContract(Name = "Culture")]
    public partial class Culture : IEquatable<Culture>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Culture" /> class.
        /// </summary>
        /// <param name="cultureIso">the culture ISO name (ex: en-US).</param>
        /// <param name="cultureName">the friendly name of the culture, in US english.</param>
        /// <param name="isDefault">A value indicating whether the culture is the default culture configured for Overture.</param>
        /// <param name="isSupported">a value indicating whether this culture is supported for this installation of Overture.</param>
        /// <param name="sortOrder">the sorting order.</param>
        public Culture(string cultureIso = default(string), string cultureName = default(string), bool isDefault = default(bool), bool isSupported = default(bool), int sortOrder = default(int))
        {
            this.CultureIso = cultureIso;
            this.CultureName = cultureName;
            this.IsDefault = isDefault;
            this.IsSupported = isSupported;
            this.SortOrder = sortOrder;
        }

        /// <summary>
        /// the culture ISO name (ex: en-US)
        /// </summary>
        /// <value>the culture ISO name (ex: en-US)</value>
        [DataMember(Name = "cultureIso", EmitDefaultValue = false)]
        public string CultureIso { get; set; }

        /// <summary>
        /// the friendly name of the culture, in US english
        /// </summary>
        /// <value>the friendly name of the culture, in US english</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// A value indicating whether the culture is the default culture configured for Overture
        /// </summary>
        /// <value>A value indicating whether the culture is the default culture configured for Overture</value>
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// a value indicating whether this culture is supported for this installation of Overture
        /// </summary>
        /// <value>a value indicating whether this culture is supported for this installation of Overture</value>
        [DataMember(Name = "isSupported", EmitDefaultValue = true)]
        public bool IsSupported { get; set; }

        /// <summary>
        /// the sorting order
        /// </summary>
        /// <value>the sorting order</value>
        [DataMember(Name = "sortOrder", EmitDefaultValue = false)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Culture {\n");
            sb.Append("  CultureIso: ").Append(CultureIso).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  IsSupported: ").Append(IsSupported).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Culture);
        }

        /// <summary>
        /// Returns true if Culture instances are equal
        /// </summary>
        /// <param name="input">Instance of Culture to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Culture input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CultureIso == input.CultureIso ||
                    (this.CultureIso != null &&
                    this.CultureIso.Equals(input.CultureIso))
                ) && 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    this.IsDefault.Equals(input.IsDefault)
                ) && 
                (
                    this.IsSupported == input.IsSupported ||
                    this.IsSupported.Equals(input.IsSupported)
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    this.SortOrder.Equals(input.SortOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CultureIso != null)
                    hashCode = hashCode * 59 + this.CultureIso.GetHashCode();
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                hashCode = hashCode * 59 + this.IsDefault.GetHashCode();
                hashCode = hashCode * 59 + this.IsSupported.GetHashCode();
                hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
