/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// InventoryItemAvailabilityEvaluationResult
    /// </summary>
    [DataContract(Name = "InventoryItemAvailabilityEvaluationResult")]
    public partial class InventoryItemAvailabilityEvaluationResult : IEquatable<InventoryItemAvailabilityEvaluationResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryItemAvailabilityEvaluationResult" /> class.
        /// </summary>
        /// <param name="backOrderableQuantity">The back orderable quantity.</param>
        /// <param name="backOrderReservedQuantity">The back order reserved quantity.</param>
        /// <param name="inStockQuantity">The in stock quantity.</param>
        /// <param name="lineItemId">The line item identifier.</param>
        /// <param name="lineItemSku">The line item sku.</param>
        /// <param name="outOfStockQuantity">The out of stock quantity.</param>
        /// <param name="requestedQuantity">The requested quantity.</param>
        /// <param name="reservedQuantity">The reserved quantity.</param>
        public InventoryItemAvailabilityEvaluationResult(double backOrderableQuantity = default(double), double backOrderReservedQuantity = default(double), double inStockQuantity = default(double), string lineItemId = default(string), string lineItemSku = default(string), double outOfStockQuantity = default(double), double requestedQuantity = default(double), double reservedQuantity = default(double))
        {
            this.BackOrderableQuantity = backOrderableQuantity;
            this.BackOrderReservedQuantity = backOrderReservedQuantity;
            this.InStockQuantity = inStockQuantity;
            this.LineItemId = lineItemId;
            this.LineItemSku = lineItemSku;
            this.OutOfStockQuantity = outOfStockQuantity;
            this.RequestedQuantity = requestedQuantity;
            this.ReservedQuantity = reservedQuantity;
        }

        /// <summary>
        /// The back orderable quantity
        /// </summary>
        /// <value>The back orderable quantity</value>
        [DataMember(Name = "backOrderableQuantity", EmitDefaultValue = false)]
        public double BackOrderableQuantity { get; set; }

        /// <summary>
        /// The back order reserved quantity
        /// </summary>
        /// <value>The back order reserved quantity</value>
        [DataMember(Name = "backOrderReservedQuantity", EmitDefaultValue = false)]
        public double BackOrderReservedQuantity { get; set; }

        /// <summary>
        /// The in stock quantity
        /// </summary>
        /// <value>The in stock quantity</value>
        [DataMember(Name = "inStockQuantity", EmitDefaultValue = false)]
        public double InStockQuantity { get; set; }

        /// <summary>
        /// The line item identifier
        /// </summary>
        /// <value>The line item identifier</value>
        [DataMember(Name = "lineItemId", EmitDefaultValue = false)]
        public string LineItemId { get; set; }

        /// <summary>
        /// The line item sku
        /// </summary>
        /// <value>The line item sku</value>
        [DataMember(Name = "lineItemSku", EmitDefaultValue = false)]
        public string LineItemSku { get; set; }

        /// <summary>
        /// The out of stock quantity
        /// </summary>
        /// <value>The out of stock quantity</value>
        [DataMember(Name = "outOfStockQuantity", EmitDefaultValue = false)]
        public double OutOfStockQuantity { get; set; }

        /// <summary>
        /// The requested quantity
        /// </summary>
        /// <value>The requested quantity</value>
        [DataMember(Name = "requestedQuantity", EmitDefaultValue = false)]
        public double RequestedQuantity { get; set; }

        /// <summary>
        /// The reserved quantity
        /// </summary>
        /// <value>The reserved quantity</value>
        [DataMember(Name = "reservedQuantity", EmitDefaultValue = false)]
        public double ReservedQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryItemAvailabilityEvaluationResult {\n");
            sb.Append("  BackOrderableQuantity: ").Append(BackOrderableQuantity).Append("\n");
            sb.Append("  BackOrderReservedQuantity: ").Append(BackOrderReservedQuantity).Append("\n");
            sb.Append("  InStockQuantity: ").Append(InStockQuantity).Append("\n");
            sb.Append("  LineItemId: ").Append(LineItemId).Append("\n");
            sb.Append("  LineItemSku: ").Append(LineItemSku).Append("\n");
            sb.Append("  OutOfStockQuantity: ").Append(OutOfStockQuantity).Append("\n");
            sb.Append("  RequestedQuantity: ").Append(RequestedQuantity).Append("\n");
            sb.Append("  ReservedQuantity: ").Append(ReservedQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryItemAvailabilityEvaluationResult);
        }

        /// <summary>
        /// Returns true if InventoryItemAvailabilityEvaluationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryItemAvailabilityEvaluationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryItemAvailabilityEvaluationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BackOrderableQuantity == input.BackOrderableQuantity ||
                    this.BackOrderableQuantity.Equals(input.BackOrderableQuantity)
                ) && 
                (
                    this.BackOrderReservedQuantity == input.BackOrderReservedQuantity ||
                    this.BackOrderReservedQuantity.Equals(input.BackOrderReservedQuantity)
                ) && 
                (
                    this.InStockQuantity == input.InStockQuantity ||
                    this.InStockQuantity.Equals(input.InStockQuantity)
                ) && 
                (
                    this.LineItemId == input.LineItemId ||
                    (this.LineItemId != null &&
                    this.LineItemId.Equals(input.LineItemId))
                ) && 
                (
                    this.LineItemSku == input.LineItemSku ||
                    (this.LineItemSku != null &&
                    this.LineItemSku.Equals(input.LineItemSku))
                ) && 
                (
                    this.OutOfStockQuantity == input.OutOfStockQuantity ||
                    this.OutOfStockQuantity.Equals(input.OutOfStockQuantity)
                ) && 
                (
                    this.RequestedQuantity == input.RequestedQuantity ||
                    this.RequestedQuantity.Equals(input.RequestedQuantity)
                ) && 
                (
                    this.ReservedQuantity == input.ReservedQuantity ||
                    this.ReservedQuantity.Equals(input.ReservedQuantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.BackOrderableQuantity.GetHashCode();
                hashCode = hashCode * 59 + this.BackOrderReservedQuantity.GetHashCode();
                hashCode = hashCode * 59 + this.InStockQuantity.GetHashCode();
                if (this.LineItemId != null)
                    hashCode = hashCode * 59 + this.LineItemId.GetHashCode();
                if (this.LineItemSku != null)
                    hashCode = hashCode * 59 + this.LineItemSku.GetHashCode();
                hashCode = hashCode * 59 + this.OutOfStockQuantity.GetHashCode();
                hashCode = hashCode * 59 + this.RequestedQuantity.GetHashCode();
                hashCode = hashCode * 59 + this.ReservedQuantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
