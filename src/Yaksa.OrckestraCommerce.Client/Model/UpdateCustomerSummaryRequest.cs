/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Carts are entities used for assembling an order before submitting.
    /// </summary>
    [DataContract(Name = "UpdateCustomerSummaryRequest")]
    public partial class UpdateCustomerSummaryRequest : IEquatable<UpdateCustomerSummaryRequest>, IValidatableObject
    {
        /// <summary>
        /// The type of the customer owning this cart.
        /// </summary>
        /// <value>The type of the customer owning this cart.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Registered for value: Registered
            /// </summary>
            [EnumMember(Value = "Registered")]
            Registered = 1,

            /// <summary>
            /// Enum Guest for value: Guest
            /// </summary>
            [EnumMember(Value = "Guest")]
            Guest = 2,

            /// <summary>
            /// Enum Unregistered for value: Unregistered
            /// </summary>
            [EnumMember(Value = "Unregistered")]
            Unregistered = 3

        }


        /// <summary>
        /// The type of the customer owning this cart.
        /// </summary>
        /// <value>The type of the customer owning this cart.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCustomerSummaryRequest" /> class.
        /// </summary>
        /// <param name="cultureName">The culture name in which language the data will be returned..</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed..</param>
        /// <param name="email">The email address of the customer owning this cart..</param>
        /// <param name="firstName">The first name of the customer owning this cart..</param>
        /// <param name="lastName">The last name of the customer owning this cart.</param>
        /// <param name="middleName">The middle name of the customer owning this cart.</param>
        /// <param name="phone">The phone number of the customer owning this cart..</param>
        /// <param name="type">The type of the customer owning this cart..</param>
        public UpdateCustomerSummaryRequest(string cultureName = default(string), string workflowToExecute = default(string), string email = default(string), string firstName = default(string), string lastName = default(string), string middleName = default(string), string phone = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this.CultureName = cultureName;
            this.WorkflowToExecute = workflowToExecute;
            this.Email = email;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.MiddleName = middleName;
            this.Phone = phone;
            this.Type = type;
        }

        /// <summary>
        /// The culture name in which language the data will be returned.
        /// </summary>
        /// <value>The culture name in which language the data will be returned.</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// The name of the workflow that should be executed.
        /// </summary>
        /// <value>The name of the workflow that should be executed.</value>
        [DataMember(Name = "workflowToExecute", EmitDefaultValue = false)]
        public string WorkflowToExecute { get; set; }

        /// <summary>
        /// The email address of the customer owning this cart.
        /// </summary>
        /// <value>The email address of the customer owning this cart.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The first name of the customer owning this cart.
        /// </summary>
        /// <value>The first name of the customer owning this cart.</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the customer owning this cart
        /// </summary>
        /// <value>The last name of the customer owning this cart</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The middle name of the customer owning this cart
        /// </summary>
        /// <value>The middle name of the customer owning this cart</value>
        [DataMember(Name = "middleName", EmitDefaultValue = false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// The phone number of the customer owning this cart.
        /// </summary>
        /// <value>The phone number of the customer owning this cart.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCustomerSummaryRequest {\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  WorkflowToExecute: ").Append(WorkflowToExecute).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCustomerSummaryRequest);
        }

        /// <summary>
        /// Returns true if UpdateCustomerSummaryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCustomerSummaryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCustomerSummaryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.WorkflowToExecute == input.WorkflowToExecute ||
                    (this.WorkflowToExecute != null &&
                    this.WorkflowToExecute.Equals(input.WorkflowToExecute))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.WorkflowToExecute != null)
                    hashCode = hashCode * 59 + this.WorkflowToExecute.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
